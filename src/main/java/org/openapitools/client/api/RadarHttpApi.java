/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import org.openapitools.client.model.RadarGetAttacksLayer3TimeseriesGroupByIpVersion200Response;
import org.openapitools.client.model.RadarGetDnsAs112TopLocations200Response;
import org.openapitools.client.model.RadarGetDnsAs112TopLocations404Response;
import org.openapitools.client.model.RadarGetEmailRoutingSummaryByIpVersion200Response;
import org.openapitools.client.model.RadarGetHttpSummaryByBotClass200Response;
import org.openapitools.client.model.RadarGetHttpSummaryByDeviceType200Response;
import org.openapitools.client.model.RadarGetHttpSummaryByHttpProtocol200Response;
import org.openapitools.client.model.RadarGetHttpSummaryByHttpVersion200Response;
import org.openapitools.client.model.RadarGetHttpSummaryByOperatingSystem200Response;
import org.openapitools.client.model.RadarGetHttpSummaryByTlsVersion200Response;
import org.openapitools.client.model.RadarGetHttpTimeseriesGroupByBotClass200Response;
import org.openapitools.client.model.RadarGetHttpTimeseriesGroupByBrowsers200Response;
import org.openapitools.client.model.RadarGetHttpTimeseriesGroupByDeviceType200Response;
import org.openapitools.client.model.RadarGetHttpTimeseriesGroupByHttpProtocol200Response;
import org.openapitools.client.model.RadarGetHttpTimeseriesGroupByHttpVersion200Response;
import org.openapitools.client.model.RadarGetHttpTimeseriesGroupByOperatingSystem200Response;
import org.openapitools.client.model.RadarGetHttpTimeseriesGroupByTlsVersion200Response;
import org.openapitools.client.model.RadarGetHttpTopAsesByHttpRequests200Response;
import org.openapitools.client.model.RadarGetHttpTopBrowserFamilies200Response;
import org.openapitools.client.model.WorkersAiListFinetunes400Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RadarHttpApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RadarHttpApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RadarHttpApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for radarGetHttpSummaryByBotClass
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpSummaryByBotClassCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/http/summary/bot_class";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (deviceType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceType", deviceType));
        }

        if (httpProtocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        }

        if (httpVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (os != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "os", os));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetHttpSummaryByBotClassValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        return radarGetHttpSummaryByBotClassCall(name, dateRange, dateStart, dateEnd, asn, location, continent, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, _callback);

    }

    /**
     * Get Bot Class Summary
     * Percentage distribution of bot-generated traffic to genuine human traffic, as classified by Cloudflare. Visit https://developers.cloudflare.com/radar/concepts/bot-classes/ for more information.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetHttpSummaryByBotClass200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetHttpSummaryByBotClass200Response radarGetHttpSummaryByBotClass(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetHttpSummaryByBotClass200Response> localVarResp = radarGetHttpSummaryByBotClassWithHttpInfo(name, dateRange, dateStart, dateEnd, asn, location, continent, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get Bot Class Summary
     * Percentage distribution of bot-generated traffic to genuine human traffic, as classified by Cloudflare. Visit https://developers.cloudflare.com/radar/concepts/bot-classes/ for more information.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetHttpSummaryByBotClass200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetHttpSummaryByBotClass200Response> radarGetHttpSummaryByBotClassWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetHttpSummaryByBotClassValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, continent, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetHttpSummaryByBotClass200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Bot Class Summary (asynchronously)
     * Percentage distribution of bot-generated traffic to genuine human traffic, as classified by Cloudflare. Visit https://developers.cloudflare.com/radar/concepts/bot-classes/ for more information.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpSummaryByBotClassAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<RadarGetHttpSummaryByBotClass200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetHttpSummaryByBotClassValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, continent, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetHttpSummaryByBotClass200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetHttpSummaryByDeviceType
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpSummaryByDeviceTypeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/http/summary/device_type";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (botClass != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "botClass", botClass));
        }

        if (httpProtocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        }

        if (httpVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (os != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "os", os));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetHttpSummaryByDeviceTypeValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        return radarGetHttpSummaryByDeviceTypeCall(name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, _callback);

    }

    /**
     * Get Device Type Summary
     * Percentage of Internet traffic generated by mobile, desktop, and other types of devices, over a given time period.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetHttpSummaryByDeviceType200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetHttpSummaryByDeviceType200Response radarGetHttpSummaryByDeviceType(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetHttpSummaryByDeviceType200Response> localVarResp = radarGetHttpSummaryByDeviceTypeWithHttpInfo(name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get Device Type Summary
     * Percentage of Internet traffic generated by mobile, desktop, and other types of devices, over a given time period.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetHttpSummaryByDeviceType200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetHttpSummaryByDeviceType200Response> radarGetHttpSummaryByDeviceTypeWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetHttpSummaryByDeviceTypeValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetHttpSummaryByDeviceType200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Device Type Summary (asynchronously)
     * Percentage of Internet traffic generated by mobile, desktop, and other types of devices, over a given time period.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpSummaryByDeviceTypeAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<RadarGetHttpSummaryByDeviceType200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetHttpSummaryByDeviceTypeValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetHttpSummaryByDeviceType200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetHttpSummaryByHttpProtocol
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpSummaryByHttpProtocolCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/http/summary/http_protocol";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (botClass != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "botClass", botClass));
        }

        if (deviceType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceType", deviceType));
        }

        if (httpVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (os != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "os", os));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetHttpSummaryByHttpProtocolValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        return radarGetHttpSummaryByHttpProtocolCall(name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpVersion, ipVersion, os, tlsVersion, format, _callback);

    }

    /**
     * Get HTTP protocols summary
     * Percentage distribution of traffic per HTTP protocol over a given time period.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetHttpSummaryByHttpProtocol200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetHttpSummaryByHttpProtocol200Response radarGetHttpSummaryByHttpProtocol(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetHttpSummaryByHttpProtocol200Response> localVarResp = radarGetHttpSummaryByHttpProtocolWithHttpInfo(name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpVersion, ipVersion, os, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get HTTP protocols summary
     * Percentage distribution of traffic per HTTP protocol over a given time period.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetHttpSummaryByHttpProtocol200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetHttpSummaryByHttpProtocol200Response> radarGetHttpSummaryByHttpProtocolWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetHttpSummaryByHttpProtocolValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpVersion, ipVersion, os, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetHttpSummaryByHttpProtocol200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get HTTP protocols summary (asynchronously)
     * Percentage distribution of traffic per HTTP protocol over a given time period.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpSummaryByHttpProtocolAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<RadarGetHttpSummaryByHttpProtocol200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetHttpSummaryByHttpProtocolValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpVersion, ipVersion, os, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetHttpSummaryByHttpProtocol200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetHttpSummaryByHttpVersion
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpSummaryByHttpVersionCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/http/summary/http_version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (botClass != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "botClass", botClass));
        }

        if (deviceType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceType", deviceType));
        }

        if (httpProtocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (os != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "os", os));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetHttpSummaryByHttpVersionValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        return radarGetHttpSummaryByHttpVersionCall(name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format, _callback);

    }

    /**
     * Get HTTP Versions Summary
     * Percentage distribution of traffic per HTTP protocol version over a given time period.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetHttpSummaryByHttpVersion200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetHttpSummaryByHttpVersion200Response radarGetHttpSummaryByHttpVersion(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetHttpSummaryByHttpVersion200Response> localVarResp = radarGetHttpSummaryByHttpVersionWithHttpInfo(name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get HTTP Versions Summary
     * Percentage distribution of traffic per HTTP protocol version over a given time period.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetHttpSummaryByHttpVersion200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetHttpSummaryByHttpVersion200Response> radarGetHttpSummaryByHttpVersionWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetHttpSummaryByHttpVersionValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetHttpSummaryByHttpVersion200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get HTTP Versions Summary (asynchronously)
     * Percentage distribution of traffic per HTTP protocol version over a given time period.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpSummaryByHttpVersionAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<RadarGetHttpSummaryByHttpVersion200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetHttpSummaryByHttpVersionValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetHttpSummaryByHttpVersion200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetHttpSummaryByIpVersion
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpSummaryByIpVersionCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/http/summary/ip_version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (botClass != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "botClass", botClass));
        }

        if (deviceType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceType", deviceType));
        }

        if (httpProtocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        }

        if (httpVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        }

        if (os != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "os", os));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetHttpSummaryByIpVersionValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        return radarGetHttpSummaryByIpVersionCall(name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format, _callback);

    }

    /**
     * Get IP Version Summary
     * Percentage distribution of Internet traffic based on IP protocol versions, such as IPv4 and IPv6, over a given time period.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetEmailRoutingSummaryByIpVersion200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetEmailRoutingSummaryByIpVersion200Response radarGetHttpSummaryByIpVersion(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetEmailRoutingSummaryByIpVersion200Response> localVarResp = radarGetHttpSummaryByIpVersionWithHttpInfo(name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get IP Version Summary
     * Percentage distribution of Internet traffic based on IP protocol versions, such as IPv4 and IPv6, over a given time period.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetEmailRoutingSummaryByIpVersion200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetEmailRoutingSummaryByIpVersion200Response> radarGetHttpSummaryByIpVersionWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetHttpSummaryByIpVersionValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingSummaryByIpVersion200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get IP Version Summary (asynchronously)
     * Percentage distribution of Internet traffic based on IP protocol versions, such as IPv4 and IPv6, over a given time period.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpSummaryByIpVersionAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<RadarGetEmailRoutingSummaryByIpVersion200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetHttpSummaryByIpVersionValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingSummaryByIpVersion200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetHttpSummaryByOperatingSystem
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpSummaryByOperatingSystemCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/http/summary/os";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (botClass != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "botClass", botClass));
        }

        if (deviceType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceType", deviceType));
        }

        if (httpProtocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        }

        if (httpVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetHttpSummaryByOperatingSystemValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        return radarGetHttpSummaryByOperatingSystemCall(name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, format, _callback);

    }

    /**
     * Get Operating Systems Summary
     * Percentage distribution of Internet traffic generated by different operating systems like Windows, macOS, Android, iOS, and others, over a given time period.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetHttpSummaryByOperatingSystem200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetHttpSummaryByOperatingSystem200Response radarGetHttpSummaryByOperatingSystem(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetHttpSummaryByOperatingSystem200Response> localVarResp = radarGetHttpSummaryByOperatingSystemWithHttpInfo(name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get Operating Systems Summary
     * Percentage distribution of Internet traffic generated by different operating systems like Windows, macOS, Android, iOS, and others, over a given time period.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetHttpSummaryByOperatingSystem200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetHttpSummaryByOperatingSystem200Response> radarGetHttpSummaryByOperatingSystemWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetHttpSummaryByOperatingSystemValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetHttpSummaryByOperatingSystem200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Operating Systems Summary (asynchronously)
     * Percentage distribution of Internet traffic generated by different operating systems like Windows, macOS, Android, iOS, and others, over a given time period.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpSummaryByOperatingSystemAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, String format, final ApiCallback<RadarGetHttpSummaryByOperatingSystem200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetHttpSummaryByOperatingSystemValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetHttpSummaryByOperatingSystem200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetHttpSummaryByTlsVersion
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpSummaryByTlsVersionCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/http/summary/tls_version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (botClass != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "botClass", botClass));
        }

        if (deviceType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceType", deviceType));
        }

        if (httpProtocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        }

        if (httpVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (os != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "os", os));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetHttpSummaryByTlsVersionValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format, final ApiCallback _callback) throws ApiException {
        return radarGetHttpSummaryByTlsVersionCall(name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format, _callback);

    }

    /**
     * Get TLS Versions Summary
     * Percentage distribution of traffic per TLS protocol version, over a given time period.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param format  (optional)
     * @return RadarGetHttpSummaryByTlsVersion200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetHttpSummaryByTlsVersion200Response radarGetHttpSummaryByTlsVersion(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format) throws ApiException {
        ApiResponse<RadarGetHttpSummaryByTlsVersion200Response> localVarResp = radarGetHttpSummaryByTlsVersionWithHttpInfo(name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format);
        return localVarResp.getData();
    }

    /**
     * Get TLS Versions Summary
     * Percentage distribution of traffic per TLS protocol version, over a given time period.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetHttpSummaryByTlsVersion200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetHttpSummaryByTlsVersion200Response> radarGetHttpSummaryByTlsVersionWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetHttpSummaryByTlsVersionValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format, null);
        Type localVarReturnType = new TypeToken<RadarGetHttpSummaryByTlsVersion200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get TLS Versions Summary (asynchronously)
     * Percentage distribution of traffic per TLS protocol version, over a given time period.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpSummaryByTlsVersionAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format, final ApiCallback<RadarGetHttpSummaryByTlsVersion200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetHttpSummaryByTlsVersionValidateBeforeCall(name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetHttpSummaryByTlsVersion200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetHttpTimeseriesGroupByBotClass
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTimeseriesGroupByBotClassCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/http/timeseries_groups/bot_class";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (deviceType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceType", deviceType));
        }

        if (httpProtocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        }

        if (httpVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (os != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "os", os));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetHttpTimeseriesGroupByBotClassValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        return radarGetHttpTimeseriesGroupByBotClassCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, _callback);

    }

    /**
     * Get Bot Classes Time Series
     * Get a time series of the percentage distribution of traffic classified as automated or human. Visit https://developers.cloudflare.com/radar/concepts/bot-classes/ for more information.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetHttpTimeseriesGroupByBotClass200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetHttpTimeseriesGroupByBotClass200Response radarGetHttpTimeseriesGroupByBotClass(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetHttpTimeseriesGroupByBotClass200Response> localVarResp = radarGetHttpTimeseriesGroupByBotClassWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get Bot Classes Time Series
     * Get a time series of the percentage distribution of traffic classified as automated or human. Visit https://developers.cloudflare.com/radar/concepts/bot-classes/ for more information.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetHttpTimeseriesGroupByBotClass200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetHttpTimeseriesGroupByBotClass200Response> radarGetHttpTimeseriesGroupByBotClassWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetHttpTimeseriesGroupByBotClassValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetHttpTimeseriesGroupByBotClass200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Bot Classes Time Series (asynchronously)
     * Get a time series of the percentage distribution of traffic classified as automated or human. Visit https://developers.cloudflare.com/radar/concepts/bot-classes/ for more information.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTimeseriesGroupByBotClassAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<RadarGetHttpTimeseriesGroupByBotClass200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetHttpTimeseriesGroupByBotClassValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetHttpTimeseriesGroupByBotClass200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetHttpTimeseriesGroupByBrowserFamilies
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTimeseriesGroupByBrowserFamiliesCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/http/timeseries_groups/browser_family";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (botClass != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "botClass", botClass));
        }

        if (deviceType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceType", deviceType));
        }

        if (httpProtocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        }

        if (httpVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (os != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "os", os));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetHttpTimeseriesGroupByBrowserFamiliesValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        return radarGetHttpTimeseriesGroupByBrowserFamiliesCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, _callback);

    }

    /**
     * Get User Agent Families Time Series
     * Get a time series of the percentage distribution of traffic of the top user agents aggregated in families.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetHttpTimeseriesGroupByBrowsers200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetHttpTimeseriesGroupByBrowsers200Response radarGetHttpTimeseriesGroupByBrowserFamilies(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetHttpTimeseriesGroupByBrowsers200Response> localVarResp = radarGetHttpTimeseriesGroupByBrowserFamiliesWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get User Agent Families Time Series
     * Get a time series of the percentage distribution of traffic of the top user agents aggregated in families.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetHttpTimeseriesGroupByBrowsers200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetHttpTimeseriesGroupByBrowsers200Response> radarGetHttpTimeseriesGroupByBrowserFamiliesWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetHttpTimeseriesGroupByBrowserFamiliesValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetHttpTimeseriesGroupByBrowsers200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get User Agent Families Time Series (asynchronously)
     * Get a time series of the percentage distribution of traffic of the top user agents aggregated in families.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTimeseriesGroupByBrowserFamiliesAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<RadarGetHttpTimeseriesGroupByBrowsers200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetHttpTimeseriesGroupByBrowserFamiliesValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetHttpTimeseriesGroupByBrowsers200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetHttpTimeseriesGroupByBrowsers
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param limitPerGroup  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTimeseriesGroupByBrowsersCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, Integer limitPerGroup, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/http/timeseries_groups/browser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (botClass != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "botClass", botClass));
        }

        if (deviceType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceType", deviceType));
        }

        if (httpProtocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        }

        if (httpVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (os != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "os", os));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (limitPerGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limitPerGroup", limitPerGroup));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetHttpTimeseriesGroupByBrowsersValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, Integer limitPerGroup, String format, final ApiCallback _callback) throws ApiException {
        return radarGetHttpTimeseriesGroupByBrowsersCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, limitPerGroup, format, _callback);

    }

    /**
     * Get User Agents Time Series
     * Get a time series of the percentage distribution of traffic of the top user agents.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param limitPerGroup  (optional)
     * @param format  (optional)
     * @return RadarGetHttpTimeseriesGroupByBrowsers200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetHttpTimeseriesGroupByBrowsers200Response radarGetHttpTimeseriesGroupByBrowsers(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, Integer limitPerGroup, String format) throws ApiException {
        ApiResponse<RadarGetHttpTimeseriesGroupByBrowsers200Response> localVarResp = radarGetHttpTimeseriesGroupByBrowsersWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, limitPerGroup, format);
        return localVarResp.getData();
    }

    /**
     * Get User Agents Time Series
     * Get a time series of the percentage distribution of traffic of the top user agents.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param limitPerGroup  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetHttpTimeseriesGroupByBrowsers200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetHttpTimeseriesGroupByBrowsers200Response> radarGetHttpTimeseriesGroupByBrowsersWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, Integer limitPerGroup, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetHttpTimeseriesGroupByBrowsersValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, limitPerGroup, format, null);
        Type localVarReturnType = new TypeToken<RadarGetHttpTimeseriesGroupByBrowsers200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get User Agents Time Series (asynchronously)
     * Get a time series of the percentage distribution of traffic of the top user agents.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param limitPerGroup  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTimeseriesGroupByBrowsersAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, Integer limitPerGroup, String format, final ApiCallback<RadarGetHttpTimeseriesGroupByBrowsers200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetHttpTimeseriesGroupByBrowsersValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, limitPerGroup, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetHttpTimeseriesGroupByBrowsers200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetHttpTimeseriesGroupByDeviceType
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTimeseriesGroupByDeviceTypeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/http/timeseries_groups/device_type";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (botClass != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "botClass", botClass));
        }

        if (httpProtocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        }

        if (httpVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (os != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "os", os));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetHttpTimeseriesGroupByDeviceTypeValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        return radarGetHttpTimeseriesGroupByDeviceTypeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, _callback);

    }

    /**
     * Get Device Types Time Series
     * Get a time series of the percentage distribution of traffic per device type.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetHttpTimeseriesGroupByDeviceType200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetHttpTimeseriesGroupByDeviceType200Response radarGetHttpTimeseriesGroupByDeviceType(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetHttpTimeseriesGroupByDeviceType200Response> localVarResp = radarGetHttpTimeseriesGroupByDeviceTypeWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get Device Types Time Series
     * Get a time series of the percentage distribution of traffic per device type.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetHttpTimeseriesGroupByDeviceType200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetHttpTimeseriesGroupByDeviceType200Response> radarGetHttpTimeseriesGroupByDeviceTypeWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetHttpTimeseriesGroupByDeviceTypeValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetHttpTimeseriesGroupByDeviceType200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Device Types Time Series (asynchronously)
     * Get a time series of the percentage distribution of traffic per device type.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTimeseriesGroupByDeviceTypeAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<RadarGetHttpTimeseriesGroupByDeviceType200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetHttpTimeseriesGroupByDeviceTypeValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetHttpTimeseriesGroupByDeviceType200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetHttpTimeseriesGroupByHttpProtocol
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTimeseriesGroupByHttpProtocolCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/http/timeseries_groups/http_protocol";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (botClass != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "botClass", botClass));
        }

        if (deviceType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceType", deviceType));
        }

        if (httpVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (os != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "os", os));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetHttpTimeseriesGroupByHttpProtocolValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        return radarGetHttpTimeseriesGroupByHttpProtocolCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpVersion, ipVersion, os, tlsVersion, format, _callback);

    }

    /**
     * Get HTTP protocols Time Series
     * Get a time series of the percentage distribution of traffic per HTTP protocol.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetHttpTimeseriesGroupByHttpProtocol200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetHttpTimeseriesGroupByHttpProtocol200Response radarGetHttpTimeseriesGroupByHttpProtocol(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetHttpTimeseriesGroupByHttpProtocol200Response> localVarResp = radarGetHttpTimeseriesGroupByHttpProtocolWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpVersion, ipVersion, os, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get HTTP protocols Time Series
     * Get a time series of the percentage distribution of traffic per HTTP protocol.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetHttpTimeseriesGroupByHttpProtocol200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetHttpTimeseriesGroupByHttpProtocol200Response> radarGetHttpTimeseriesGroupByHttpProtocolWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetHttpTimeseriesGroupByHttpProtocolValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpVersion, ipVersion, os, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetHttpTimeseriesGroupByHttpProtocol200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get HTTP protocols Time Series (asynchronously)
     * Get a time series of the percentage distribution of traffic per HTTP protocol.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTimeseriesGroupByHttpProtocolAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<RadarGetHttpTimeseriesGroupByHttpProtocol200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetHttpTimeseriesGroupByHttpProtocolValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpVersion, ipVersion, os, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetHttpTimeseriesGroupByHttpProtocol200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetHttpTimeseriesGroupByHttpVersion
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTimeseriesGroupByHttpVersionCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/http/timeseries_groups/http_version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (botClass != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "botClass", botClass));
        }

        if (deviceType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceType", deviceType));
        }

        if (httpProtocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (os != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "os", os));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetHttpTimeseriesGroupByHttpVersionValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        return radarGetHttpTimeseriesGroupByHttpVersionCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format, _callback);

    }

    /**
     * Get HTTP Versions Time Series
     * Get a time series of the percentage distribution of traffic per HTTP protocol version.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetHttpTimeseriesGroupByHttpVersion200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetHttpTimeseriesGroupByHttpVersion200Response radarGetHttpTimeseriesGroupByHttpVersion(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetHttpTimeseriesGroupByHttpVersion200Response> localVarResp = radarGetHttpTimeseriesGroupByHttpVersionWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get HTTP Versions Time Series
     * Get a time series of the percentage distribution of traffic per HTTP protocol version.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetHttpTimeseriesGroupByHttpVersion200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetHttpTimeseriesGroupByHttpVersion200Response> radarGetHttpTimeseriesGroupByHttpVersionWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetHttpTimeseriesGroupByHttpVersionValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetHttpTimeseriesGroupByHttpVersion200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get HTTP Versions Time Series (asynchronously)
     * Get a time series of the percentage distribution of traffic per HTTP protocol version.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTimeseriesGroupByHttpVersionAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<RadarGetHttpTimeseriesGroupByHttpVersion200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetHttpTimeseriesGroupByHttpVersionValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetHttpTimeseriesGroupByHttpVersion200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetHttpTimeseriesGroupByIpVersion
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTimeseriesGroupByIpVersionCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/http/timeseries_groups/ip_version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (botClass != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "botClass", botClass));
        }

        if (deviceType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceType", deviceType));
        }

        if (httpProtocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        }

        if (httpVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        }

        if (os != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "os", os));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetHttpTimeseriesGroupByIpVersionValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        return radarGetHttpTimeseriesGroupByIpVersionCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format, _callback);

    }

    /**
     * Get IP Versions Time Series
     * Get a time series of the percentage distribution of traffic per IP protocol version.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetAttacksLayer3TimeseriesGroupByIpVersion200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetAttacksLayer3TimeseriesGroupByIpVersion200Response radarGetHttpTimeseriesGroupByIpVersion(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetAttacksLayer3TimeseriesGroupByIpVersion200Response> localVarResp = radarGetHttpTimeseriesGroupByIpVersionWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get IP Versions Time Series
     * Get a time series of the percentage distribution of traffic per IP protocol version.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetAttacksLayer3TimeseriesGroupByIpVersion200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetAttacksLayer3TimeseriesGroupByIpVersion200Response> radarGetHttpTimeseriesGroupByIpVersionWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetHttpTimeseriesGroupByIpVersionValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TimeseriesGroupByIpVersion200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get IP Versions Time Series (asynchronously)
     * Get a time series of the percentage distribution of traffic per IP protocol version.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTimeseriesGroupByIpVersionAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<RadarGetAttacksLayer3TimeseriesGroupByIpVersion200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetHttpTimeseriesGroupByIpVersionValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetAttacksLayer3TimeseriesGroupByIpVersion200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetHttpTimeseriesGroupByOperatingSystem
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTimeseriesGroupByOperatingSystemCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/http/timeseries_groups/os";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (botClass != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "botClass", botClass));
        }

        if (deviceType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceType", deviceType));
        }

        if (httpProtocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        }

        if (httpVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetHttpTimeseriesGroupByOperatingSystemValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        return radarGetHttpTimeseriesGroupByOperatingSystemCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, format, _callback);

    }

    /**
     * Get Operating Systems Time Series
     * Get a time series of the percentage distribution of traffic of the top operating systems.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetHttpTimeseriesGroupByOperatingSystem200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetHttpTimeseriesGroupByOperatingSystem200Response radarGetHttpTimeseriesGroupByOperatingSystem(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetHttpTimeseriesGroupByOperatingSystem200Response> localVarResp = radarGetHttpTimeseriesGroupByOperatingSystemWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get Operating Systems Time Series
     * Get a time series of the percentage distribution of traffic of the top operating systems.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetHttpTimeseriesGroupByOperatingSystem200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetHttpTimeseriesGroupByOperatingSystem200Response> radarGetHttpTimeseriesGroupByOperatingSystemWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetHttpTimeseriesGroupByOperatingSystemValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetHttpTimeseriesGroupByOperatingSystem200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Operating Systems Time Series (asynchronously)
     * Get a time series of the percentage distribution of traffic of the top operating systems.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTimeseriesGroupByOperatingSystemAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, String format, final ApiCallback<RadarGetHttpTimeseriesGroupByOperatingSystem200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetHttpTimeseriesGroupByOperatingSystemValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetHttpTimeseriesGroupByOperatingSystem200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetHttpTimeseriesGroupByTlsVersion
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTimeseriesGroupByTlsVersionCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/http/timeseries_groups/tls_version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (botClass != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "botClass", botClass));
        }

        if (deviceType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceType", deviceType));
        }

        if (httpProtocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        }

        if (httpVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (os != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "os", os));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetHttpTimeseriesGroupByTlsVersionValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format, final ApiCallback _callback) throws ApiException {
        return radarGetHttpTimeseriesGroupByTlsVersionCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format, _callback);

    }

    /**
     * Get TLS Versions Time Series
     * Get a time series of the percentage distribution of traffic per TLS protocol version.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param format  (optional)
     * @return RadarGetHttpTimeseriesGroupByTlsVersion200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetHttpTimeseriesGroupByTlsVersion200Response radarGetHttpTimeseriesGroupByTlsVersion(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format) throws ApiException {
        ApiResponse<RadarGetHttpTimeseriesGroupByTlsVersion200Response> localVarResp = radarGetHttpTimeseriesGroupByTlsVersionWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format);
        return localVarResp.getData();
    }

    /**
     * Get TLS Versions Time Series
     * Get a time series of the percentage distribution of traffic per TLS protocol version.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetHttpTimeseriesGroupByTlsVersion200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetHttpTimeseriesGroupByTlsVersion200Response> radarGetHttpTimeseriesGroupByTlsVersionWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetHttpTimeseriesGroupByTlsVersionValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format, null);
        Type localVarReturnType = new TypeToken<RadarGetHttpTimeseriesGroupByTlsVersion200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get TLS Versions Time Series (asynchronously)
     * Get a time series of the percentage distribution of traffic per TLS protocol version.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTimeseriesGroupByTlsVersionAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format, final ApiCallback<RadarGetHttpTimeseriesGroupByTlsVersion200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetHttpTimeseriesGroupByTlsVersionValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetHttpTimeseriesGroupByTlsVersion200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetHttpTopAsesByBotClass
     * @param botClass  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTopAsesByBotClassCall(String botClass, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/http/top/ases/bot_class/{bot_class}"
            .replace("{" + "bot_class" + "}", localVarApiClient.escapeString(botClass.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (deviceType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceType", deviceType));
        }

        if (httpProtocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        }

        if (httpVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (os != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "os", os));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetHttpTopAsesByBotClassValidateBeforeCall(String botClass, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'botClass' is set
        if (botClass == null) {
            throw new ApiException("Missing the required parameter 'botClass' when calling radarGetHttpTopAsesByBotClass(Async)");
        }

        return radarGetHttpTopAsesByBotClassCall(botClass, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, _callback);

    }

    /**
     * Get Top Autonomous Systems By Bot Class
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested bot class. These two categories use Cloudflare&#39;s bot score - refer to [Bot Scores](https://developers.cloudflare.com/bots/concepts/bot-score) for more information. Values are a percentage out of the total traffic.
     * @param botClass  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetHttpTopAsesByHttpRequests200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetHttpTopAsesByHttpRequests200Response radarGetHttpTopAsesByBotClass(String botClass, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetHttpTopAsesByHttpRequests200Response> localVarResp = radarGetHttpTopAsesByBotClassWithHttpInfo(botClass, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get Top Autonomous Systems By Bot Class
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested bot class. These two categories use Cloudflare&#39;s bot score - refer to [Bot Scores](https://developers.cloudflare.com/bots/concepts/bot-score) for more information. Values are a percentage out of the total traffic.
     * @param botClass  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetHttpTopAsesByHttpRequests200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetHttpTopAsesByHttpRequests200Response> radarGetHttpTopAsesByBotClassWithHttpInfo(String botClass, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetHttpTopAsesByBotClassValidateBeforeCall(botClass, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetHttpTopAsesByHttpRequests200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Top Autonomous Systems By Bot Class (asynchronously)
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested bot class. These two categories use Cloudflare&#39;s bot score - refer to [Bot Scores](https://developers.cloudflare.com/bots/concepts/bot-score) for more information. Values are a percentage out of the total traffic.
     * @param botClass  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTopAsesByBotClassAsync(String botClass, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<RadarGetHttpTopAsesByHttpRequests200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetHttpTopAsesByBotClassValidateBeforeCall(botClass, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetHttpTopAsesByHttpRequests200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetHttpTopAsesByDeviceType
     * @param deviceType  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTopAsesByDeviceTypeCall(String deviceType, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/http/top/ases/device_type/{device_type}"
            .replace("{" + "device_type" + "}", localVarApiClient.escapeString(deviceType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (botClass != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "botClass", botClass));
        }

        if (httpProtocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        }

        if (httpVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (os != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "os", os));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetHttpTopAsesByDeviceTypeValidateBeforeCall(String deviceType, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceType' is set
        if (deviceType == null) {
            throw new ApiException("Missing the required parameter 'deviceType' when calling radarGetHttpTopAsesByDeviceType(Async)");
        }

        return radarGetHttpTopAsesByDeviceTypeCall(deviceType, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, _callback);

    }

    /**
     * Get Top Autonomous Systems By Device Type
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested device type. Values are a percentage out of the total traffic.
     * @param deviceType  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetHttpTopAsesByHttpRequests200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetHttpTopAsesByHttpRequests200Response radarGetHttpTopAsesByDeviceType(String deviceType, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetHttpTopAsesByHttpRequests200Response> localVarResp = radarGetHttpTopAsesByDeviceTypeWithHttpInfo(deviceType, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get Top Autonomous Systems By Device Type
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested device type. Values are a percentage out of the total traffic.
     * @param deviceType  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetHttpTopAsesByHttpRequests200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetHttpTopAsesByHttpRequests200Response> radarGetHttpTopAsesByDeviceTypeWithHttpInfo(String deviceType, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetHttpTopAsesByDeviceTypeValidateBeforeCall(deviceType, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetHttpTopAsesByHttpRequests200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Top Autonomous Systems By Device Type (asynchronously)
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested device type. Values are a percentage out of the total traffic.
     * @param deviceType  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTopAsesByDeviceTypeAsync(String deviceType, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<RadarGetHttpTopAsesByHttpRequests200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetHttpTopAsesByDeviceTypeValidateBeforeCall(deviceType, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetHttpTopAsesByHttpRequests200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetHttpTopAsesByHttpProtocol
     * @param httpProtocol  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol2  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTopAsesByHttpProtocolCall(String httpProtocol, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol2, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/http/top/ases/http_protocol/{http_protocol}"
            .replace("{" + "http_protocol" + "}", localVarApiClient.escapeString(httpProtocol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (botClass != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "botClass", botClass));
        }

        if (deviceType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceType", deviceType));
        }

        if (httpProtocol2 != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpProtocol", httpProtocol2));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (os != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "os", os));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetHttpTopAsesByHttpProtocolValidateBeforeCall(String httpProtocol, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol2, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'httpProtocol' is set
        if (httpProtocol == null) {
            throw new ApiException("Missing the required parameter 'httpProtocol' when calling radarGetHttpTopAsesByHttpProtocol(Async)");
        }

        return radarGetHttpTopAsesByHttpProtocolCall(httpProtocol, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol2, ipVersion, os, tlsVersion, format, _callback);

    }

    /**
     * Get Top Autonomous Systems By HTTP Protocol
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested HTTP protocol. Values are a percentage out of the total traffic.
     * @param httpProtocol  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol2  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetHttpTopAsesByHttpRequests200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetHttpTopAsesByHttpRequests200Response radarGetHttpTopAsesByHttpProtocol(String httpProtocol, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol2, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetHttpTopAsesByHttpRequests200Response> localVarResp = radarGetHttpTopAsesByHttpProtocolWithHttpInfo(httpProtocol, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol2, ipVersion, os, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get Top Autonomous Systems By HTTP Protocol
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested HTTP protocol. Values are a percentage out of the total traffic.
     * @param httpProtocol  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol2  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetHttpTopAsesByHttpRequests200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetHttpTopAsesByHttpRequests200Response> radarGetHttpTopAsesByHttpProtocolWithHttpInfo(String httpProtocol, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol2, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetHttpTopAsesByHttpProtocolValidateBeforeCall(httpProtocol, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol2, ipVersion, os, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetHttpTopAsesByHttpRequests200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Top Autonomous Systems By HTTP Protocol (asynchronously)
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested HTTP protocol. Values are a percentage out of the total traffic.
     * @param httpProtocol  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol2  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTopAsesByHttpProtocolAsync(String httpProtocol, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol2, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<RadarGetHttpTopAsesByHttpRequests200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetHttpTopAsesByHttpProtocolValidateBeforeCall(httpProtocol, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol2, ipVersion, os, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetHttpTopAsesByHttpRequests200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetHttpTopAsesByHttpRequests
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTopAsesByHttpRequestsCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/http/top/ases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (botClass != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "botClass", botClass));
        }

        if (deviceType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceType", deviceType));
        }

        if (httpProtocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        }

        if (httpVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (os != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "os", os));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetHttpTopAsesByHttpRequestsValidateBeforeCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        return radarGetHttpTopAsesByHttpRequestsCall(limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, _callback);

    }

    /**
     * Get Top Autonomous Systems By HTTP Requests
     * Get the top autonomous systems by HTTP traffic. Values are a percentage out of the total traffic.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetHttpTopAsesByHttpRequests200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetHttpTopAsesByHttpRequests200Response radarGetHttpTopAsesByHttpRequests(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetHttpTopAsesByHttpRequests200Response> localVarResp = radarGetHttpTopAsesByHttpRequestsWithHttpInfo(limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get Top Autonomous Systems By HTTP Requests
     * Get the top autonomous systems by HTTP traffic. Values are a percentage out of the total traffic.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetHttpTopAsesByHttpRequests200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetHttpTopAsesByHttpRequests200Response> radarGetHttpTopAsesByHttpRequestsWithHttpInfo(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetHttpTopAsesByHttpRequestsValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetHttpTopAsesByHttpRequests200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Top Autonomous Systems By HTTP Requests (asynchronously)
     * Get the top autonomous systems by HTTP traffic. Values are a percentage out of the total traffic.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTopAsesByHttpRequestsAsync(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<RadarGetHttpTopAsesByHttpRequests200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetHttpTopAsesByHttpRequestsValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetHttpTopAsesByHttpRequests200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetHttpTopAsesByHttpVersion
     * @param httpVersion  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTopAsesByHttpVersionCall(String httpVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/http/top/ases/http_version/{http_version}"
            .replace("{" + "http_version" + "}", localVarApiClient.escapeString(httpVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (botClass != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "botClass", botClass));
        }

        if (deviceType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceType", deviceType));
        }

        if (httpProtocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (os != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "os", os));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetHttpTopAsesByHttpVersionValidateBeforeCall(String httpVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'httpVersion' is set
        if (httpVersion == null) {
            throw new ApiException("Missing the required parameter 'httpVersion' when calling radarGetHttpTopAsesByHttpVersion(Async)");
        }

        return radarGetHttpTopAsesByHttpVersionCall(httpVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format, _callback);

    }

    /**
     * Get Top Autonomous Systems By HTTP Version
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested HTTP protocol version. Values are a percentage out of the total traffic.
     * @param httpVersion  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetHttpTopAsesByHttpRequests200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetHttpTopAsesByHttpRequests200Response radarGetHttpTopAsesByHttpVersion(String httpVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetHttpTopAsesByHttpRequests200Response> localVarResp = radarGetHttpTopAsesByHttpVersionWithHttpInfo(httpVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get Top Autonomous Systems By HTTP Version
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested HTTP protocol version. Values are a percentage out of the total traffic.
     * @param httpVersion  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetHttpTopAsesByHttpRequests200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetHttpTopAsesByHttpRequests200Response> radarGetHttpTopAsesByHttpVersionWithHttpInfo(String httpVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetHttpTopAsesByHttpVersionValidateBeforeCall(httpVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetHttpTopAsesByHttpRequests200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Top Autonomous Systems By HTTP Version (asynchronously)
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested HTTP protocol version. Values are a percentage out of the total traffic.
     * @param httpVersion  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTopAsesByHttpVersionAsync(String httpVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<RadarGetHttpTopAsesByHttpRequests200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetHttpTopAsesByHttpVersionValidateBeforeCall(httpVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetHttpTopAsesByHttpRequests200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetHttpTopAsesByIpVersion
     * @param ipVersion  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTopAsesByIpVersionCall(String ipVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/http/top/ases/ip_version/{ip_version}"
            .replace("{" + "ip_version" + "}", localVarApiClient.escapeString(ipVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (botClass != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "botClass", botClass));
        }

        if (deviceType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceType", deviceType));
        }

        if (httpProtocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        }

        if (httpVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        }

        if (os != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "os", os));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetHttpTopAsesByIpVersionValidateBeforeCall(String ipVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ipVersion' is set
        if (ipVersion == null) {
            throw new ApiException("Missing the required parameter 'ipVersion' when calling radarGetHttpTopAsesByIpVersion(Async)");
        }

        return radarGetHttpTopAsesByIpVersionCall(ipVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format, _callback);

    }

    /**
     * Get Top Autonomous Systems By IP Version
     * Get the top autonomous systems, by HTTP traffic, of the requested IP protocol version. Values are a percentage out of the total traffic.
     * @param ipVersion  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetHttpTopAsesByHttpRequests200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetHttpTopAsesByHttpRequests200Response radarGetHttpTopAsesByIpVersion(String ipVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetHttpTopAsesByHttpRequests200Response> localVarResp = radarGetHttpTopAsesByIpVersionWithHttpInfo(ipVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get Top Autonomous Systems By IP Version
     * Get the top autonomous systems, by HTTP traffic, of the requested IP protocol version. Values are a percentage out of the total traffic.
     * @param ipVersion  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetHttpTopAsesByHttpRequests200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetHttpTopAsesByHttpRequests200Response> radarGetHttpTopAsesByIpVersionWithHttpInfo(String ipVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetHttpTopAsesByIpVersionValidateBeforeCall(ipVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetHttpTopAsesByHttpRequests200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Top Autonomous Systems By IP Version (asynchronously)
     * Get the top autonomous systems, by HTTP traffic, of the requested IP protocol version. Values are a percentage out of the total traffic.
     * @param ipVersion  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTopAsesByIpVersionAsync(String ipVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<RadarGetHttpTopAsesByHttpRequests200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetHttpTopAsesByIpVersionValidateBeforeCall(ipVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetHttpTopAsesByHttpRequests200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetHttpTopAsesByOperatingSystem
     * @param os  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTopAsesByOperatingSystemCall(String os, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/http/top/ases/os/{os}"
            .replace("{" + "os" + "}", localVarApiClient.escapeString(os.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (botClass != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "botClass", botClass));
        }

        if (deviceType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceType", deviceType));
        }

        if (httpProtocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        }

        if (httpVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetHttpTopAsesByOperatingSystemValidateBeforeCall(String os, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'os' is set
        if (os == null) {
            throw new ApiException("Missing the required parameter 'os' when calling radarGetHttpTopAsesByOperatingSystem(Async)");
        }

        return radarGetHttpTopAsesByOperatingSystemCall(os, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, format, _callback);

    }

    /**
     * Get Top Autonomous Systems By Operating System
     * Get the top autonomous systems, by HTTP traffic, of the requested operating systems. Values are a percentage out of the total traffic.
     * @param os  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetHttpTopAsesByHttpRequests200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetHttpTopAsesByHttpRequests200Response radarGetHttpTopAsesByOperatingSystem(String os, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetHttpTopAsesByHttpRequests200Response> localVarResp = radarGetHttpTopAsesByOperatingSystemWithHttpInfo(os, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get Top Autonomous Systems By Operating System
     * Get the top autonomous systems, by HTTP traffic, of the requested operating systems. Values are a percentage out of the total traffic.
     * @param os  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetHttpTopAsesByHttpRequests200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetHttpTopAsesByHttpRequests200Response> radarGetHttpTopAsesByOperatingSystemWithHttpInfo(String os, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetHttpTopAsesByOperatingSystemValidateBeforeCall(os, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetHttpTopAsesByHttpRequests200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Top Autonomous Systems By Operating System (asynchronously)
     * Get the top autonomous systems, by HTTP traffic, of the requested operating systems. Values are a percentage out of the total traffic.
     * @param os  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTopAsesByOperatingSystemAsync(String os, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, String format, final ApiCallback<RadarGetHttpTopAsesByHttpRequests200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetHttpTopAsesByOperatingSystemValidateBeforeCall(os, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetHttpTopAsesByHttpRequests200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetHttpTopAsesByTlsVersion
     * @param tlsVersion  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTopAsesByTlsVersionCall(String tlsVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/http/top/ases/tls_version/{tls_version}"
            .replace("{" + "tls_version" + "}", localVarApiClient.escapeString(tlsVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (botClass != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "botClass", botClass));
        }

        if (deviceType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceType", deviceType));
        }

        if (httpProtocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        }

        if (httpVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (os != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "os", os));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetHttpTopAsesByTlsVersionValidateBeforeCall(String tlsVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tlsVersion' is set
        if (tlsVersion == null) {
            throw new ApiException("Missing the required parameter 'tlsVersion' when calling radarGetHttpTopAsesByTlsVersion(Async)");
        }

        return radarGetHttpTopAsesByTlsVersionCall(tlsVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format, _callback);

    }

    /**
     * Get Top Autonomous Systems By TLS Version
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested TLS protocol version. Values are a percentage out of the total traffic.
     * @param tlsVersion  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param format  (optional)
     * @return RadarGetHttpTopAsesByHttpRequests200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetHttpTopAsesByHttpRequests200Response radarGetHttpTopAsesByTlsVersion(String tlsVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format) throws ApiException {
        ApiResponse<RadarGetHttpTopAsesByHttpRequests200Response> localVarResp = radarGetHttpTopAsesByTlsVersionWithHttpInfo(tlsVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format);
        return localVarResp.getData();
    }

    /**
     * Get Top Autonomous Systems By TLS Version
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested TLS protocol version. Values are a percentage out of the total traffic.
     * @param tlsVersion  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetHttpTopAsesByHttpRequests200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetHttpTopAsesByHttpRequests200Response> radarGetHttpTopAsesByTlsVersionWithHttpInfo(String tlsVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetHttpTopAsesByTlsVersionValidateBeforeCall(tlsVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format, null);
        Type localVarReturnType = new TypeToken<RadarGetHttpTopAsesByHttpRequests200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Top Autonomous Systems By TLS Version (asynchronously)
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested TLS protocol version. Values are a percentage out of the total traffic.
     * @param tlsVersion  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTopAsesByTlsVersionAsync(String tlsVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format, final ApiCallback<RadarGetHttpTopAsesByHttpRequests200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetHttpTopAsesByTlsVersionValidateBeforeCall(tlsVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetHttpTopAsesByHttpRequests200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetHttpTopBrowserFamilies
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTopBrowserFamiliesCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/http/top/browser_families";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (botClass != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "botClass", botClass));
        }

        if (deviceType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceType", deviceType));
        }

        if (httpProtocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        }

        if (httpVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (os != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "os", os));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetHttpTopBrowserFamiliesValidateBeforeCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        return radarGetHttpTopBrowserFamiliesCall(limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, _callback);

    }

    /**
     * Get Top User Agents Families by HTTP requests
     * Get the top user agents aggregated in families by HTTP traffic. Values are a percentage out of the total traffic.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetHttpTopBrowserFamilies200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetHttpTopBrowserFamilies200Response radarGetHttpTopBrowserFamilies(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetHttpTopBrowserFamilies200Response> localVarResp = radarGetHttpTopBrowserFamiliesWithHttpInfo(limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get Top User Agents Families by HTTP requests
     * Get the top user agents aggregated in families by HTTP traffic. Values are a percentage out of the total traffic.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetHttpTopBrowserFamilies200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetHttpTopBrowserFamilies200Response> radarGetHttpTopBrowserFamiliesWithHttpInfo(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetHttpTopBrowserFamiliesValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetHttpTopBrowserFamilies200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Top User Agents Families by HTTP requests (asynchronously)
     * Get the top user agents aggregated in families by HTTP traffic. Values are a percentage out of the total traffic.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTopBrowserFamiliesAsync(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<RadarGetHttpTopBrowserFamilies200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetHttpTopBrowserFamiliesValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetHttpTopBrowserFamilies200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetHttpTopBrowsers
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTopBrowsersCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/http/top/browsers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (botClass != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "botClass", botClass));
        }

        if (deviceType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceType", deviceType));
        }

        if (httpProtocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        }

        if (httpVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (os != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "os", os));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetHttpTopBrowsersValidateBeforeCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        return radarGetHttpTopBrowsersCall(limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, _callback);

    }

    /**
     * Get Top User Agents By HTTP requests
     * Get the top user agents by HTTP traffic. Values are a percentage out of the total traffic.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetHttpTopBrowserFamilies200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetHttpTopBrowserFamilies200Response radarGetHttpTopBrowsers(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetHttpTopBrowserFamilies200Response> localVarResp = radarGetHttpTopBrowsersWithHttpInfo(limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get Top User Agents By HTTP requests
     * Get the top user agents by HTTP traffic. Values are a percentage out of the total traffic.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetHttpTopBrowserFamilies200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetHttpTopBrowserFamilies200Response> radarGetHttpTopBrowsersWithHttpInfo(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetHttpTopBrowsersValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetHttpTopBrowserFamilies200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Top User Agents By HTTP requests (asynchronously)
     * Get the top user agents by HTTP traffic. Values are a percentage out of the total traffic.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTopBrowsersAsync(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<RadarGetHttpTopBrowserFamilies200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetHttpTopBrowsersValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetHttpTopBrowserFamilies200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetHttpTopLocationsByBotClass
     * @param botClass  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTopLocationsByBotClassCall(String botClass, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/http/top/locations/bot_class/{bot_class}"
            .replace("{" + "bot_class" + "}", localVarApiClient.escapeString(botClass.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (deviceType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceType", deviceType));
        }

        if (httpProtocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        }

        if (httpVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (os != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "os", os));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetHttpTopLocationsByBotClassValidateBeforeCall(String botClass, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'botClass' is set
        if (botClass == null) {
            throw new ApiException("Missing the required parameter 'botClass' when calling radarGetHttpTopLocationsByBotClass(Async)");
        }

        return radarGetHttpTopLocationsByBotClassCall(botClass, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, _callback);

    }

    /**
     * Get Top Locations By Bot Class
     * Get the top locations, by HTTP traffic, of the requested bot class. These two categories use Cloudflare&#39;s bot score - refer to [Bot scores])https://developers.cloudflare.com/bots/concepts/bot-score). Values are a percentage out of the total traffic.
     * @param botClass  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetDnsAs112TopLocations200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetDnsAs112TopLocations200Response radarGetHttpTopLocationsByBotClass(String botClass, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetDnsAs112TopLocations200Response> localVarResp = radarGetHttpTopLocationsByBotClassWithHttpInfo(botClass, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get Top Locations By Bot Class
     * Get the top locations, by HTTP traffic, of the requested bot class. These two categories use Cloudflare&#39;s bot score - refer to [Bot scores])https://developers.cloudflare.com/bots/concepts/bot-score). Values are a percentage out of the total traffic.
     * @param botClass  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetDnsAs112TopLocations200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetDnsAs112TopLocations200Response> radarGetHttpTopLocationsByBotClassWithHttpInfo(String botClass, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetHttpTopLocationsByBotClassValidateBeforeCall(botClass, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetDnsAs112TopLocations200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Top Locations By Bot Class (asynchronously)
     * Get the top locations, by HTTP traffic, of the requested bot class. These two categories use Cloudflare&#39;s bot score - refer to [Bot scores])https://developers.cloudflare.com/bots/concepts/bot-score). Values are a percentage out of the total traffic.
     * @param botClass  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTopLocationsByBotClassAsync(String botClass, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<RadarGetDnsAs112TopLocations200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetHttpTopLocationsByBotClassValidateBeforeCall(botClass, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetDnsAs112TopLocations200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetHttpTopLocationsByDeviceType
     * @param deviceType  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTopLocationsByDeviceTypeCall(String deviceType, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/http/top/locations/device_type/{device_type}"
            .replace("{" + "device_type" + "}", localVarApiClient.escapeString(deviceType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (botClass != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "botClass", botClass));
        }

        if (httpProtocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        }

        if (httpVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (os != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "os", os));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetHttpTopLocationsByDeviceTypeValidateBeforeCall(String deviceType, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceType' is set
        if (deviceType == null) {
            throw new ApiException("Missing the required parameter 'deviceType' when calling radarGetHttpTopLocationsByDeviceType(Async)");
        }

        return radarGetHttpTopLocationsByDeviceTypeCall(deviceType, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, _callback);

    }

    /**
     * Get Top Locations By Device Type
     * Get the top locations, by HTTP traffic, of the requested device type. Values are a percentage out of the total traffic.
     * @param deviceType  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetDnsAs112TopLocations200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetDnsAs112TopLocations200Response radarGetHttpTopLocationsByDeviceType(String deviceType, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetDnsAs112TopLocations200Response> localVarResp = radarGetHttpTopLocationsByDeviceTypeWithHttpInfo(deviceType, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get Top Locations By Device Type
     * Get the top locations, by HTTP traffic, of the requested device type. Values are a percentage out of the total traffic.
     * @param deviceType  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetDnsAs112TopLocations200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetDnsAs112TopLocations200Response> radarGetHttpTopLocationsByDeviceTypeWithHttpInfo(String deviceType, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetHttpTopLocationsByDeviceTypeValidateBeforeCall(deviceType, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetDnsAs112TopLocations200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Top Locations By Device Type (asynchronously)
     * Get the top locations, by HTTP traffic, of the requested device type. Values are a percentage out of the total traffic.
     * @param deviceType  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTopLocationsByDeviceTypeAsync(String deviceType, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<RadarGetDnsAs112TopLocations200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetHttpTopLocationsByDeviceTypeValidateBeforeCall(deviceType, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetDnsAs112TopLocations200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetHttpTopLocationsByHttpProtocol
     * @param httpProtocol  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol2  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTopLocationsByHttpProtocolCall(String httpProtocol, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol2, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/http/top/locations/http_protocol/{http_protocol}"
            .replace("{" + "http_protocol" + "}", localVarApiClient.escapeString(httpProtocol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (botClass != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "botClass", botClass));
        }

        if (deviceType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceType", deviceType));
        }

        if (httpProtocol2 != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpProtocol", httpProtocol2));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (os != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "os", os));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetHttpTopLocationsByHttpProtocolValidateBeforeCall(String httpProtocol, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol2, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'httpProtocol' is set
        if (httpProtocol == null) {
            throw new ApiException("Missing the required parameter 'httpProtocol' when calling radarGetHttpTopLocationsByHttpProtocol(Async)");
        }

        return radarGetHttpTopLocationsByHttpProtocolCall(httpProtocol, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol2, ipVersion, os, tlsVersion, format, _callback);

    }

    /**
     * Get Top Locations By HTTP Protocol
     * Get the top locations, by HTTP traffic, of the requested HTTP protocol. Values are a percentage out of the total traffic.
     * @param httpProtocol  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol2  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetDnsAs112TopLocations200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetDnsAs112TopLocations200Response radarGetHttpTopLocationsByHttpProtocol(String httpProtocol, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol2, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetDnsAs112TopLocations200Response> localVarResp = radarGetHttpTopLocationsByHttpProtocolWithHttpInfo(httpProtocol, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol2, ipVersion, os, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get Top Locations By HTTP Protocol
     * Get the top locations, by HTTP traffic, of the requested HTTP protocol. Values are a percentage out of the total traffic.
     * @param httpProtocol  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol2  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetDnsAs112TopLocations200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetDnsAs112TopLocations200Response> radarGetHttpTopLocationsByHttpProtocolWithHttpInfo(String httpProtocol, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol2, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetHttpTopLocationsByHttpProtocolValidateBeforeCall(httpProtocol, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol2, ipVersion, os, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetDnsAs112TopLocations200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Top Locations By HTTP Protocol (asynchronously)
     * Get the top locations, by HTTP traffic, of the requested HTTP protocol. Values are a percentage out of the total traffic.
     * @param httpProtocol  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol2  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTopLocationsByHttpProtocolAsync(String httpProtocol, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol2, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<RadarGetDnsAs112TopLocations200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetHttpTopLocationsByHttpProtocolValidateBeforeCall(httpProtocol, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol2, ipVersion, os, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetDnsAs112TopLocations200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetHttpTopLocationsByHttpRequests
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTopLocationsByHttpRequestsCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/http/top/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (botClass != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "botClass", botClass));
        }

        if (deviceType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceType", deviceType));
        }

        if (httpProtocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        }

        if (httpVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (os != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "os", os));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetHttpTopLocationsByHttpRequestsValidateBeforeCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        return radarGetHttpTopLocationsByHttpRequestsCall(limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, _callback);

    }

    /**
     * Get Top Locations By HTTP requests
     * Get the top locations by HTTP traffic. Values are a percentage out of the total traffic.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetDnsAs112TopLocations200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetDnsAs112TopLocations200Response radarGetHttpTopLocationsByHttpRequests(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetDnsAs112TopLocations200Response> localVarResp = radarGetHttpTopLocationsByHttpRequestsWithHttpInfo(limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get Top Locations By HTTP requests
     * Get the top locations by HTTP traffic. Values are a percentage out of the total traffic.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetDnsAs112TopLocations200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetDnsAs112TopLocations200Response> radarGetHttpTopLocationsByHttpRequestsWithHttpInfo(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetHttpTopLocationsByHttpRequestsValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetDnsAs112TopLocations200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Top Locations By HTTP requests (asynchronously)
     * Get the top locations by HTTP traffic. Values are a percentage out of the total traffic.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTopLocationsByHttpRequestsAsync(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<RadarGetDnsAs112TopLocations200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetHttpTopLocationsByHttpRequestsValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetDnsAs112TopLocations200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetHttpTopLocationsByHttpVersion
     * @param httpVersion  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTopLocationsByHttpVersionCall(String httpVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/http/top/locations/http_version/{http_version}"
            .replace("{" + "http_version" + "}", localVarApiClient.escapeString(httpVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (botClass != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "botClass", botClass));
        }

        if (deviceType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceType", deviceType));
        }

        if (httpProtocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (os != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "os", os));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetHttpTopLocationsByHttpVersionValidateBeforeCall(String httpVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'httpVersion' is set
        if (httpVersion == null) {
            throw new ApiException("Missing the required parameter 'httpVersion' when calling radarGetHttpTopLocationsByHttpVersion(Async)");
        }

        return radarGetHttpTopLocationsByHttpVersionCall(httpVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format, _callback);

    }

    /**
     * Get Top Locations By HTTP Version
     * Get the top locations, by HTTP traffic, of the requested HTTP protocol. Values are a percentage out of the total traffic.
     * @param httpVersion  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetDnsAs112TopLocations200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetDnsAs112TopLocations200Response radarGetHttpTopLocationsByHttpVersion(String httpVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetDnsAs112TopLocations200Response> localVarResp = radarGetHttpTopLocationsByHttpVersionWithHttpInfo(httpVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get Top Locations By HTTP Version
     * Get the top locations, by HTTP traffic, of the requested HTTP protocol. Values are a percentage out of the total traffic.
     * @param httpVersion  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetDnsAs112TopLocations200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetDnsAs112TopLocations200Response> radarGetHttpTopLocationsByHttpVersionWithHttpInfo(String httpVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetHttpTopLocationsByHttpVersionValidateBeforeCall(httpVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetDnsAs112TopLocations200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Top Locations By HTTP Version (asynchronously)
     * Get the top locations, by HTTP traffic, of the requested HTTP protocol. Values are a percentage out of the total traffic.
     * @param httpVersion  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTopLocationsByHttpVersionAsync(String httpVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> ipVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<RadarGetDnsAs112TopLocations200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetHttpTopLocationsByHttpVersionValidateBeforeCall(httpVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetDnsAs112TopLocations200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetHttpTopLocationsByIpVersion
     * @param ipVersion  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTopLocationsByIpVersionCall(String ipVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/http/top/locations/ip_version/{ip_version}"
            .replace("{" + "ip_version" + "}", localVarApiClient.escapeString(ipVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (botClass != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "botClass", botClass));
        }

        if (deviceType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceType", deviceType));
        }

        if (httpProtocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        }

        if (httpVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        }

        if (os != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "os", os));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetHttpTopLocationsByIpVersionValidateBeforeCall(String ipVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ipVersion' is set
        if (ipVersion == null) {
            throw new ApiException("Missing the required parameter 'ipVersion' when calling radarGetHttpTopLocationsByIpVersion(Async)");
        }

        return radarGetHttpTopLocationsByIpVersionCall(ipVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format, _callback);

    }

    /**
     * Get Top Locations By IP Version
     * Get the top locations, by HTTP traffic, of the requested IP protocol version. Values are a percentage out of the total traffic.
     * @param ipVersion  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetDnsAs112TopLocations200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetDnsAs112TopLocations200Response radarGetHttpTopLocationsByIpVersion(String ipVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetDnsAs112TopLocations200Response> localVarResp = radarGetHttpTopLocationsByIpVersionWithHttpInfo(ipVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get Top Locations By IP Version
     * Get the top locations, by HTTP traffic, of the requested IP protocol version. Values are a percentage out of the total traffic.
     * @param ipVersion  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetDnsAs112TopLocations200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetDnsAs112TopLocations200Response> radarGetHttpTopLocationsByIpVersionWithHttpInfo(String ipVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetHttpTopLocationsByIpVersionValidateBeforeCall(ipVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetDnsAs112TopLocations200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Top Locations By IP Version (asynchronously)
     * Get the top locations, by HTTP traffic, of the requested IP protocol version. Values are a percentage out of the total traffic.
     * @param ipVersion  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param os  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTopLocationsByIpVersionAsync(String ipVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> os, List<String> tlsVersion, String format, final ApiCallback<RadarGetDnsAs112TopLocations200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetHttpTopLocationsByIpVersionValidateBeforeCall(ipVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetDnsAs112TopLocations200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetHttpTopLocationsByOperatingSystem
     * @param os  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTopLocationsByOperatingSystemCall(String os, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/http/top/locations/os/{os}"
            .replace("{" + "os" + "}", localVarApiClient.escapeString(os.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (botClass != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "botClass", botClass));
        }

        if (deviceType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceType", deviceType));
        }

        if (httpProtocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        }

        if (httpVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetHttpTopLocationsByOperatingSystemValidateBeforeCall(String os, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'os' is set
        if (os == null) {
            throw new ApiException("Missing the required parameter 'os' when calling radarGetHttpTopLocationsByOperatingSystem(Async)");
        }

        return radarGetHttpTopLocationsByOperatingSystemCall(os, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, format, _callback);

    }

    /**
     * Get Top Locations By Operating System
     * Get the top locations, by HTTP traffic, of the requested operating systems. Values are a percentage out of the total traffic.
     * @param os  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetDnsAs112TopLocations200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetDnsAs112TopLocations200Response radarGetHttpTopLocationsByOperatingSystem(String os, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetDnsAs112TopLocations200Response> localVarResp = radarGetHttpTopLocationsByOperatingSystemWithHttpInfo(os, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get Top Locations By Operating System
     * Get the top locations, by HTTP traffic, of the requested operating systems. Values are a percentage out of the total traffic.
     * @param os  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetDnsAs112TopLocations200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetDnsAs112TopLocations200Response> radarGetHttpTopLocationsByOperatingSystemWithHttpInfo(String os, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetHttpTopLocationsByOperatingSystemValidateBeforeCall(os, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetDnsAs112TopLocations200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Top Locations By Operating System (asynchronously)
     * Get the top locations, by HTTP traffic, of the requested operating systems. Values are a percentage out of the total traffic.
     * @param os  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTopLocationsByOperatingSystemAsync(String os, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> tlsVersion, String format, final ApiCallback<RadarGetDnsAs112TopLocations200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetHttpTopLocationsByOperatingSystemValidateBeforeCall(os, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetDnsAs112TopLocations200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetHttpTopLocationsByTlsVersion
     * @param tlsVersion  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTopLocationsByTlsVersionCall(String tlsVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/http/top/locations/tls_version/{tls_version}"
            .replace("{" + "tls_version" + "}", localVarApiClient.escapeString(tlsVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (asn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asn", asn));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (continent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "continent", continent));
        }

        if (botClass != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "botClass", botClass));
        }

        if (deviceType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceType", deviceType));
        }

        if (httpProtocol != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpProtocol", httpProtocol));
        }

        if (httpVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "httpVersion", httpVersion));
        }

        if (ipVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ipVersion", ipVersion));
        }

        if (os != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "os", os));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetHttpTopLocationsByTlsVersionValidateBeforeCall(String tlsVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tlsVersion' is set
        if (tlsVersion == null) {
            throw new ApiException("Missing the required parameter 'tlsVersion' when calling radarGetHttpTopLocationsByTlsVersion(Async)");
        }

        return radarGetHttpTopLocationsByTlsVersionCall(tlsVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format, _callback);

    }

    /**
     * Get Top Locations By TLS Version
     * Get the top locations, by HTTP traffic, of the requested TLS protocol version. Values are a percentage out of the total traffic.
     * @param tlsVersion  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param format  (optional)
     * @return RadarGetDnsAs112TopLocations200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetDnsAs112TopLocations200Response radarGetHttpTopLocationsByTlsVersion(String tlsVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format) throws ApiException {
        ApiResponse<RadarGetDnsAs112TopLocations200Response> localVarResp = radarGetHttpTopLocationsByTlsVersionWithHttpInfo(tlsVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format);
        return localVarResp.getData();
    }

    /**
     * Get Top Locations By TLS Version
     * Get the top locations, by HTTP traffic, of the requested TLS protocol version. Values are a percentage out of the total traffic.
     * @param tlsVersion  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetDnsAs112TopLocations200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetDnsAs112TopLocations200Response> radarGetHttpTopLocationsByTlsVersionWithHttpInfo(String tlsVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetHttpTopLocationsByTlsVersionValidateBeforeCall(tlsVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format, null);
        Type localVarReturnType = new TypeToken<RadarGetDnsAs112TopLocations200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Top Locations By TLS Version (asynchronously)
     * Get the top locations, by HTTP traffic, of the requested TLS protocol version. Values are a percentage out of the total traffic.
     * @param tlsVersion  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param continent  (optional)
     * @param botClass  (optional)
     * @param deviceType  (optional)
     * @param httpProtocol  (optional)
     * @param httpVersion  (optional)
     * @param ipVersion  (optional)
     * @param os  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetHttpTopLocationsByTlsVersionAsync(String tlsVersion, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> asn, List<String> location, List<String> continent, List<String> botClass, List<String> deviceType, List<String> httpProtocol, List<String> httpVersion, List<String> ipVersion, List<String> os, String format, final ApiCallback<RadarGetDnsAs112TopLocations200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetHttpTopLocationsByTlsVersionValidateBeforeCall(tlsVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetDnsAs112TopLocations200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
