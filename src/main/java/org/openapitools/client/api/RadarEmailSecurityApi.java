/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import org.openapitools.client.model.RadarGetDnsAs112TopLocations404Response;
import org.openapitools.client.model.RadarGetEmailRoutingSummaryByArc200Response;
import org.openapitools.client.model.RadarGetEmailRoutingTimeseriesGroupByArc200Response;
import org.openapitools.client.model.RadarGetEmailSecuritySummaryByMalicious200Response;
import org.openapitools.client.model.RadarGetEmailSecuritySummaryBySpam200Response;
import org.openapitools.client.model.RadarGetEmailSecuritySummaryBySpoof200Response;
import org.openapitools.client.model.RadarGetEmailSecuritySummaryByThreatCategory200Response;
import org.openapitools.client.model.RadarGetEmailSecuritySummaryByTlsVersion200Response;
import org.openapitools.client.model.RadarGetEmailSecurityTimeseriesGroupByMalicious200Response;
import org.openapitools.client.model.RadarGetEmailSecurityTimeseriesGroupBySpam200Response;
import org.openapitools.client.model.RadarGetEmailSecurityTimeseriesGroupBySpoof200Response;
import org.openapitools.client.model.RadarGetEmailSecurityTimeseriesGroupByThreatCategory200Response;
import org.openapitools.client.model.RadarGetEmailSecurityTimeseriesGroupByTlsVersion200Response;
import org.openapitools.client.model.RadarGetEmailSecurityTopTldsByMessages200Response;
import org.openapitools.client.model.WorkersAiListFinetunes400Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RadarEmailSecurityApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RadarEmailSecurityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RadarEmailSecurityApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for radarGetEmailSecuritySummaryByArc
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecuritySummaryByArcCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/email/security/summary/arc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (dkim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dkim", dkim));
        }

        if (dmarc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dmarc", dmarc));
        }

        if (spf != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "spf", spf));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetEmailSecuritySummaryByArcValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        return radarGetEmailSecuritySummaryByArcCall(name, dateRange, dateStart, dateEnd, dkim, dmarc, spf, tlsVersion, format, _callback);

    }

    /**
     * Get ARC Validations Summary
     * Percentage distribution of emails classified per ARC validation.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetEmailRoutingSummaryByArc200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetEmailRoutingSummaryByArc200Response radarGetEmailSecuritySummaryByArc(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetEmailRoutingSummaryByArc200Response> localVarResp = radarGetEmailSecuritySummaryByArcWithHttpInfo(name, dateRange, dateStart, dateEnd, dkim, dmarc, spf, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get ARC Validations Summary
     * Percentage distribution of emails classified per ARC validation.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetEmailRoutingSummaryByArc200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetEmailRoutingSummaryByArc200Response> radarGetEmailSecuritySummaryByArcWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetEmailSecuritySummaryByArcValidateBeforeCall(name, dateRange, dateStart, dateEnd, dkim, dmarc, spf, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingSummaryByArc200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get ARC Validations Summary (asynchronously)
     * Percentage distribution of emails classified per ARC validation.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecuritySummaryByArcAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format, final ApiCallback<RadarGetEmailRoutingSummaryByArc200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetEmailSecuritySummaryByArcValidateBeforeCall(name, dateRange, dateStart, dateEnd, dkim, dmarc, spf, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingSummaryByArc200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetEmailSecuritySummaryByDkim
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecuritySummaryByDkimCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/email/security/summary/dkim";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (arc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "arc", arc));
        }

        if (dmarc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dmarc", dmarc));
        }

        if (spf != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "spf", spf));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetEmailSecuritySummaryByDkimValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        return radarGetEmailSecuritySummaryByDkimCall(name, dateRange, dateStart, dateEnd, arc, dmarc, spf, tlsVersion, format, _callback);

    }

    /**
     * Get DKIM Validations Summary
     * Percentage distribution of emails classified per DKIM validation.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetEmailRoutingSummaryByArc200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetEmailRoutingSummaryByArc200Response radarGetEmailSecuritySummaryByDkim(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetEmailRoutingSummaryByArc200Response> localVarResp = radarGetEmailSecuritySummaryByDkimWithHttpInfo(name, dateRange, dateStart, dateEnd, arc, dmarc, spf, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get DKIM Validations Summary
     * Percentage distribution of emails classified per DKIM validation.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetEmailRoutingSummaryByArc200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetEmailRoutingSummaryByArc200Response> radarGetEmailSecuritySummaryByDkimWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetEmailSecuritySummaryByDkimValidateBeforeCall(name, dateRange, dateStart, dateEnd, arc, dmarc, spf, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingSummaryByArc200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get DKIM Validations Summary (asynchronously)
     * Percentage distribution of emails classified per DKIM validation.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecuritySummaryByDkimAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format, final ApiCallback<RadarGetEmailRoutingSummaryByArc200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetEmailSecuritySummaryByDkimValidateBeforeCall(name, dateRange, dateStart, dateEnd, arc, dmarc, spf, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingSummaryByArc200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetEmailSecuritySummaryByDmarc
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecuritySummaryByDmarcCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> spf, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/email/security/summary/dmarc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (arc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "arc", arc));
        }

        if (dkim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dkim", dkim));
        }

        if (spf != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "spf", spf));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetEmailSecuritySummaryByDmarcValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> spf, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        return radarGetEmailSecuritySummaryByDmarcCall(name, dateRange, dateStart, dateEnd, arc, dkim, spf, tlsVersion, format, _callback);

    }

    /**
     * Get DMARC Validations Summary
     * Percentage distribution of emails classified per DMARC validation.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetEmailRoutingSummaryByArc200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetEmailRoutingSummaryByArc200Response radarGetEmailSecuritySummaryByDmarc(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> spf, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetEmailRoutingSummaryByArc200Response> localVarResp = radarGetEmailSecuritySummaryByDmarcWithHttpInfo(name, dateRange, dateStart, dateEnd, arc, dkim, spf, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get DMARC Validations Summary
     * Percentage distribution of emails classified per DMARC validation.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetEmailRoutingSummaryByArc200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetEmailRoutingSummaryByArc200Response> radarGetEmailSecuritySummaryByDmarcWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> spf, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetEmailSecuritySummaryByDmarcValidateBeforeCall(name, dateRange, dateStart, dateEnd, arc, dkim, spf, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingSummaryByArc200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get DMARC Validations Summary (asynchronously)
     * Percentage distribution of emails classified per DMARC validation.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecuritySummaryByDmarcAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> spf, List<String> tlsVersion, String format, final ApiCallback<RadarGetEmailRoutingSummaryByArc200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetEmailSecuritySummaryByDmarcValidateBeforeCall(name, dateRange, dateStart, dateEnd, arc, dkim, spf, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingSummaryByArc200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetEmailSecuritySummaryByMalicious
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecuritySummaryByMaliciousCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/email/security/summary/malicious";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (arc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "arc", arc));
        }

        if (dkim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dkim", dkim));
        }

        if (dmarc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dmarc", dmarc));
        }

        if (spf != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "spf", spf));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetEmailSecuritySummaryByMaliciousValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        return radarGetEmailSecuritySummaryByMaliciousCall(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format, _callback);

    }

    /**
     * Get MALICIOUS Validations Summary
     * Percentage distribution of emails classified as MALICIOUS.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetEmailSecuritySummaryByMalicious200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetEmailSecuritySummaryByMalicious200Response radarGetEmailSecuritySummaryByMalicious(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetEmailSecuritySummaryByMalicious200Response> localVarResp = radarGetEmailSecuritySummaryByMaliciousWithHttpInfo(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get MALICIOUS Validations Summary
     * Percentage distribution of emails classified as MALICIOUS.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetEmailSecuritySummaryByMalicious200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetEmailSecuritySummaryByMalicious200Response> radarGetEmailSecuritySummaryByMaliciousWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetEmailSecuritySummaryByMaliciousValidateBeforeCall(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetEmailSecuritySummaryByMalicious200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get MALICIOUS Validations Summary (asynchronously)
     * Percentage distribution of emails classified as MALICIOUS.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecuritySummaryByMaliciousAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format, final ApiCallback<RadarGetEmailSecuritySummaryByMalicious200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetEmailSecuritySummaryByMaliciousValidateBeforeCall(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetEmailSecuritySummaryByMalicious200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetEmailSecuritySummaryBySpam
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecuritySummaryBySpamCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/email/security/summary/spam";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (arc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "arc", arc));
        }

        if (dkim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dkim", dkim));
        }

        if (dmarc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dmarc", dmarc));
        }

        if (spf != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "spf", spf));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetEmailSecuritySummaryBySpamValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        return radarGetEmailSecuritySummaryBySpamCall(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format, _callback);

    }

    /**
     * Get SPAM Summary
     * Proportion of emails categorized as either spam or legitimate (non-spam).
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetEmailSecuritySummaryBySpam200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetEmailSecuritySummaryBySpam200Response radarGetEmailSecuritySummaryBySpam(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetEmailSecuritySummaryBySpam200Response> localVarResp = radarGetEmailSecuritySummaryBySpamWithHttpInfo(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get SPAM Summary
     * Proportion of emails categorized as either spam or legitimate (non-spam).
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetEmailSecuritySummaryBySpam200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetEmailSecuritySummaryBySpam200Response> radarGetEmailSecuritySummaryBySpamWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetEmailSecuritySummaryBySpamValidateBeforeCall(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetEmailSecuritySummaryBySpam200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get SPAM Summary (asynchronously)
     * Proportion of emails categorized as either spam or legitimate (non-spam).
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecuritySummaryBySpamAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format, final ApiCallback<RadarGetEmailSecuritySummaryBySpam200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetEmailSecuritySummaryBySpamValidateBeforeCall(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetEmailSecuritySummaryBySpam200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetEmailSecuritySummaryBySpf
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecuritySummaryBySpfCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/email/security/summary/spf";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (arc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "arc", arc));
        }

        if (dkim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dkim", dkim));
        }

        if (dmarc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dmarc", dmarc));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetEmailSecuritySummaryBySpfValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        return radarGetEmailSecuritySummaryBySpfCall(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, tlsVersion, format, _callback);

    }

    /**
     * Get SPF Validations Summary
     * Percentage distribution of emails classified per SPF validation.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetEmailRoutingSummaryByArc200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetEmailRoutingSummaryByArc200Response radarGetEmailSecuritySummaryBySpf(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetEmailRoutingSummaryByArc200Response> localVarResp = radarGetEmailSecuritySummaryBySpfWithHttpInfo(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get SPF Validations Summary
     * Percentage distribution of emails classified per SPF validation.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetEmailRoutingSummaryByArc200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetEmailRoutingSummaryByArc200Response> radarGetEmailSecuritySummaryBySpfWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetEmailSecuritySummaryBySpfValidateBeforeCall(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingSummaryByArc200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get SPF Validations Summary (asynchronously)
     * Percentage distribution of emails classified per SPF validation.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecuritySummaryBySpfAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> tlsVersion, String format, final ApiCallback<RadarGetEmailRoutingSummaryByArc200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetEmailSecuritySummaryBySpfValidateBeforeCall(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingSummaryByArc200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetEmailSecuritySummaryBySpoof
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecuritySummaryBySpoofCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/email/security/summary/spoof";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (arc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "arc", arc));
        }

        if (dkim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dkim", dkim));
        }

        if (dmarc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dmarc", dmarc));
        }

        if (spf != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "spf", spf));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetEmailSecuritySummaryBySpoofValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        return radarGetEmailSecuritySummaryBySpoofCall(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format, _callback);

    }

    /**
     * Get SPOOF Summary
     * Proportion of emails categorized as either spoof or legitimate (non-spoof).
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetEmailSecuritySummaryBySpoof200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetEmailSecuritySummaryBySpoof200Response radarGetEmailSecuritySummaryBySpoof(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetEmailSecuritySummaryBySpoof200Response> localVarResp = radarGetEmailSecuritySummaryBySpoofWithHttpInfo(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get SPOOF Summary
     * Proportion of emails categorized as either spoof or legitimate (non-spoof).
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetEmailSecuritySummaryBySpoof200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetEmailSecuritySummaryBySpoof200Response> radarGetEmailSecuritySummaryBySpoofWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetEmailSecuritySummaryBySpoofValidateBeforeCall(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetEmailSecuritySummaryBySpoof200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get SPOOF Summary (asynchronously)
     * Proportion of emails categorized as either spoof or legitimate (non-spoof).
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecuritySummaryBySpoofAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format, final ApiCallback<RadarGetEmailSecuritySummaryBySpoof200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetEmailSecuritySummaryBySpoofValidateBeforeCall(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetEmailSecuritySummaryBySpoof200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetEmailSecuritySummaryByThreatCategory
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecuritySummaryByThreatCategoryCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/email/security/summary/threat_category";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (arc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "arc", arc));
        }

        if (dkim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dkim", dkim));
        }

        if (dmarc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dmarc", dmarc));
        }

        if (spf != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "spf", spf));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetEmailSecuritySummaryByThreatCategoryValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        return radarGetEmailSecuritySummaryByThreatCategoryCall(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format, _callback);

    }

    /**
     * Get Threat Categories Summary
     * Percentage distribution of emails classified in Threat Categories.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetEmailSecuritySummaryByThreatCategory200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetEmailSecuritySummaryByThreatCategory200Response radarGetEmailSecuritySummaryByThreatCategory(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetEmailSecuritySummaryByThreatCategory200Response> localVarResp = radarGetEmailSecuritySummaryByThreatCategoryWithHttpInfo(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get Threat Categories Summary
     * Percentage distribution of emails classified in Threat Categories.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetEmailSecuritySummaryByThreatCategory200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetEmailSecuritySummaryByThreatCategory200Response> radarGetEmailSecuritySummaryByThreatCategoryWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetEmailSecuritySummaryByThreatCategoryValidateBeforeCall(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetEmailSecuritySummaryByThreatCategory200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Threat Categories Summary (asynchronously)
     * Percentage distribution of emails classified in Threat Categories.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecuritySummaryByThreatCategoryAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format, final ApiCallback<RadarGetEmailSecuritySummaryByThreatCategory200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetEmailSecuritySummaryByThreatCategoryValidateBeforeCall(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetEmailSecuritySummaryByThreatCategory200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetEmailSecuritySummaryByTlsVersion
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecuritySummaryByTlsVersionCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/email/security/summary/tls_version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (arc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "arc", arc));
        }

        if (dkim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dkim", dkim));
        }

        if (dmarc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dmarc", dmarc));
        }

        if (spf != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "spf", spf));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetEmailSecuritySummaryByTlsVersionValidateBeforeCall(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ApiCallback _callback) throws ApiException {
        return radarGetEmailSecuritySummaryByTlsVersionCall(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, format, _callback);

    }

    /**
     * Get TLS Version Summary
     * Percentage distribution of emails classified per TLS Version.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param format  (optional)
     * @return RadarGetEmailSecuritySummaryByTlsVersion200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetEmailSecuritySummaryByTlsVersion200Response radarGetEmailSecuritySummaryByTlsVersion(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format) throws ApiException {
        ApiResponse<RadarGetEmailSecuritySummaryByTlsVersion200Response> localVarResp = radarGetEmailSecuritySummaryByTlsVersionWithHttpInfo(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, format);
        return localVarResp.getData();
    }

    /**
     * Get TLS Version Summary
     * Percentage distribution of emails classified per TLS Version.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetEmailSecuritySummaryByTlsVersion200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetEmailSecuritySummaryByTlsVersion200Response> radarGetEmailSecuritySummaryByTlsVersionWithHttpInfo(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetEmailSecuritySummaryByTlsVersionValidateBeforeCall(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, format, null);
        Type localVarReturnType = new TypeToken<RadarGetEmailSecuritySummaryByTlsVersion200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get TLS Version Summary (asynchronously)
     * Percentage distribution of emails classified per TLS Version.
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecuritySummaryByTlsVersionAsync(List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ApiCallback<RadarGetEmailSecuritySummaryByTlsVersion200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetEmailSecuritySummaryByTlsVersionValidateBeforeCall(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetEmailSecuritySummaryByTlsVersion200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetEmailSecurityTimeseriesGroupByArc
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecurityTimeseriesGroupByArcCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/email/security/timeseries_groups/arc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (dkim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dkim", dkim));
        }

        if (dmarc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dmarc", dmarc));
        }

        if (spf != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "spf", spf));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetEmailSecurityTimeseriesGroupByArcValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        return radarGetEmailSecurityTimeseriesGroupByArcCall(aggInterval, name, dateRange, dateStart, dateEnd, dkim, dmarc, spf, tlsVersion, format, _callback);

    }

    /**
     * Get ARC Validations Time Series
     * Percentage distribution of emails classified per Arc validation over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetEmailRoutingTimeseriesGroupByArc200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetEmailRoutingTimeseriesGroupByArc200Response radarGetEmailSecurityTimeseriesGroupByArc(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetEmailRoutingTimeseriesGroupByArc200Response> localVarResp = radarGetEmailSecurityTimeseriesGroupByArcWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, dkim, dmarc, spf, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get ARC Validations Time Series
     * Percentage distribution of emails classified per Arc validation over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetEmailRoutingTimeseriesGroupByArc200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetEmailRoutingTimeseriesGroupByArc200Response> radarGetEmailSecurityTimeseriesGroupByArcWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetEmailSecurityTimeseriesGroupByArcValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, dkim, dmarc, spf, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingTimeseriesGroupByArc200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get ARC Validations Time Series (asynchronously)
     * Percentage distribution of emails classified per Arc validation over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecurityTimeseriesGroupByArcAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format, final ApiCallback<RadarGetEmailRoutingTimeseriesGroupByArc200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetEmailSecurityTimeseriesGroupByArcValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, dkim, dmarc, spf, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingTimeseriesGroupByArc200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetEmailSecurityTimeseriesGroupByDkim
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecurityTimeseriesGroupByDkimCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/email/security/timeseries_groups/dkim";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (arc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "arc", arc));
        }

        if (dmarc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dmarc", dmarc));
        }

        if (spf != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "spf", spf));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetEmailSecurityTimeseriesGroupByDkimValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        return radarGetEmailSecurityTimeseriesGroupByDkimCall(aggInterval, name, dateRange, dateStart, dateEnd, arc, dmarc, spf, tlsVersion, format, _callback);

    }

    /**
     * Get DKIM Validations Time Series
     * Percentage distribution of emails classified per DKIM validation over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetEmailRoutingTimeseriesGroupByArc200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetEmailRoutingTimeseriesGroupByArc200Response radarGetEmailSecurityTimeseriesGroupByDkim(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetEmailRoutingTimeseriesGroupByArc200Response> localVarResp = radarGetEmailSecurityTimeseriesGroupByDkimWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, arc, dmarc, spf, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get DKIM Validations Time Series
     * Percentage distribution of emails classified per DKIM validation over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetEmailRoutingTimeseriesGroupByArc200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetEmailRoutingTimeseriesGroupByArc200Response> radarGetEmailSecurityTimeseriesGroupByDkimWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetEmailSecurityTimeseriesGroupByDkimValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, arc, dmarc, spf, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingTimeseriesGroupByArc200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get DKIM Validations Time Series (asynchronously)
     * Percentage distribution of emails classified per DKIM validation over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecurityTimeseriesGroupByDkimAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format, final ApiCallback<RadarGetEmailRoutingTimeseriesGroupByArc200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetEmailSecurityTimeseriesGroupByDkimValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, arc, dmarc, spf, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingTimeseriesGroupByArc200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetEmailSecurityTimeseriesGroupByDmarc
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecurityTimeseriesGroupByDmarcCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> spf, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/email/security/timeseries_groups/dmarc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (arc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "arc", arc));
        }

        if (dkim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dkim", dkim));
        }

        if (spf != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "spf", spf));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetEmailSecurityTimeseriesGroupByDmarcValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> spf, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        return radarGetEmailSecurityTimeseriesGroupByDmarcCall(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, spf, tlsVersion, format, _callback);

    }

    /**
     * Get DMARC Validations Time Series
     * Percentage distribution of emails classified per DMARC validation over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetEmailRoutingTimeseriesGroupByArc200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetEmailRoutingTimeseriesGroupByArc200Response radarGetEmailSecurityTimeseriesGroupByDmarc(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> spf, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetEmailRoutingTimeseriesGroupByArc200Response> localVarResp = radarGetEmailSecurityTimeseriesGroupByDmarcWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, spf, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get DMARC Validations Time Series
     * Percentage distribution of emails classified per DMARC validation over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetEmailRoutingTimeseriesGroupByArc200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetEmailRoutingTimeseriesGroupByArc200Response> radarGetEmailSecurityTimeseriesGroupByDmarcWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> spf, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetEmailSecurityTimeseriesGroupByDmarcValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, spf, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingTimeseriesGroupByArc200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get DMARC Validations Time Series (asynchronously)
     * Percentage distribution of emails classified per DMARC validation over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecurityTimeseriesGroupByDmarcAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> spf, List<String> tlsVersion, String format, final ApiCallback<RadarGetEmailRoutingTimeseriesGroupByArc200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetEmailSecurityTimeseriesGroupByDmarcValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, spf, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingTimeseriesGroupByArc200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetEmailSecurityTimeseriesGroupByMalicious
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecurityTimeseriesGroupByMaliciousCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/email/security/timeseries_groups/malicious";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (arc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "arc", arc));
        }

        if (dkim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dkim", dkim));
        }

        if (dmarc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dmarc", dmarc));
        }

        if (spf != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "spf", spf));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetEmailSecurityTimeseriesGroupByMaliciousValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        return radarGetEmailSecurityTimeseriesGroupByMaliciousCall(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format, _callback);

    }

    /**
     * Get MALICIOUS Validations Time Series
     * Percentage distribution of emails classified as MALICIOUS over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetEmailSecurityTimeseriesGroupByMalicious200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetEmailSecurityTimeseriesGroupByMalicious200Response radarGetEmailSecurityTimeseriesGroupByMalicious(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetEmailSecurityTimeseriesGroupByMalicious200Response> localVarResp = radarGetEmailSecurityTimeseriesGroupByMaliciousWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get MALICIOUS Validations Time Series
     * Percentage distribution of emails classified as MALICIOUS over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetEmailSecurityTimeseriesGroupByMalicious200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetEmailSecurityTimeseriesGroupByMalicious200Response> radarGetEmailSecurityTimeseriesGroupByMaliciousWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetEmailSecurityTimeseriesGroupByMaliciousValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetEmailSecurityTimeseriesGroupByMalicious200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get MALICIOUS Validations Time Series (asynchronously)
     * Percentage distribution of emails classified as MALICIOUS over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecurityTimeseriesGroupByMaliciousAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format, final ApiCallback<RadarGetEmailSecurityTimeseriesGroupByMalicious200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetEmailSecurityTimeseriesGroupByMaliciousValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetEmailSecurityTimeseriesGroupByMalicious200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetEmailSecurityTimeseriesGroupBySpam
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecurityTimeseriesGroupBySpamCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/email/security/timeseries_groups/spam";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (arc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "arc", arc));
        }

        if (dkim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dkim", dkim));
        }

        if (dmarc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dmarc", dmarc));
        }

        if (spf != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "spf", spf));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetEmailSecurityTimeseriesGroupBySpamValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        return radarGetEmailSecurityTimeseriesGroupBySpamCall(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format, _callback);

    }

    /**
     * Get SPAM Validations Time Series
     * Percentage distribution of emails classified as SPAM over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetEmailSecurityTimeseriesGroupBySpam200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetEmailSecurityTimeseriesGroupBySpam200Response radarGetEmailSecurityTimeseriesGroupBySpam(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetEmailSecurityTimeseriesGroupBySpam200Response> localVarResp = radarGetEmailSecurityTimeseriesGroupBySpamWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get SPAM Validations Time Series
     * Percentage distribution of emails classified as SPAM over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetEmailSecurityTimeseriesGroupBySpam200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetEmailSecurityTimeseriesGroupBySpam200Response> radarGetEmailSecurityTimeseriesGroupBySpamWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetEmailSecurityTimeseriesGroupBySpamValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetEmailSecurityTimeseriesGroupBySpam200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get SPAM Validations Time Series (asynchronously)
     * Percentage distribution of emails classified as SPAM over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecurityTimeseriesGroupBySpamAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format, final ApiCallback<RadarGetEmailSecurityTimeseriesGroupBySpam200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetEmailSecurityTimeseriesGroupBySpamValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetEmailSecurityTimeseriesGroupBySpam200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetEmailSecurityTimeseriesGroupBySpf
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecurityTimeseriesGroupBySpfCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/email/security/timeseries_groups/spf";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (arc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "arc", arc));
        }

        if (dkim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dkim", dkim));
        }

        if (dmarc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dmarc", dmarc));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetEmailSecurityTimeseriesGroupBySpfValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        return radarGetEmailSecurityTimeseriesGroupBySpfCall(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, tlsVersion, format, _callback);

    }

    /**
     * Get SPF Validations Time Series
     * Percentage distribution of emails classified per SPF validation over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetEmailRoutingTimeseriesGroupByArc200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetEmailRoutingTimeseriesGroupByArc200Response radarGetEmailSecurityTimeseriesGroupBySpf(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetEmailRoutingTimeseriesGroupByArc200Response> localVarResp = radarGetEmailSecurityTimeseriesGroupBySpfWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get SPF Validations Time Series
     * Percentage distribution of emails classified per SPF validation over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetEmailRoutingTimeseriesGroupByArc200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetEmailRoutingTimeseriesGroupByArc200Response> radarGetEmailSecurityTimeseriesGroupBySpfWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetEmailSecurityTimeseriesGroupBySpfValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingTimeseriesGroupByArc200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get SPF Validations Time Series (asynchronously)
     * Percentage distribution of emails classified per SPF validation over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecurityTimeseriesGroupBySpfAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> tlsVersion, String format, final ApiCallback<RadarGetEmailRoutingTimeseriesGroupByArc200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetEmailSecurityTimeseriesGroupBySpfValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetEmailRoutingTimeseriesGroupByArc200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetEmailSecurityTimeseriesGroupBySpoof
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecurityTimeseriesGroupBySpoofCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/email/security/timeseries_groups/spoof";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (arc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "arc", arc));
        }

        if (dkim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dkim", dkim));
        }

        if (dmarc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dmarc", dmarc));
        }

        if (spf != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "spf", spf));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetEmailSecurityTimeseriesGroupBySpoofValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        return radarGetEmailSecurityTimeseriesGroupBySpoofCall(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format, _callback);

    }

    /**
     * Get SPOOF Validations Time Series
     * Percentage distribution of emails classified as SPOOF over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetEmailSecurityTimeseriesGroupBySpoof200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetEmailSecurityTimeseriesGroupBySpoof200Response radarGetEmailSecurityTimeseriesGroupBySpoof(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetEmailSecurityTimeseriesGroupBySpoof200Response> localVarResp = radarGetEmailSecurityTimeseriesGroupBySpoofWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get SPOOF Validations Time Series
     * Percentage distribution of emails classified as SPOOF over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetEmailSecurityTimeseriesGroupBySpoof200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetEmailSecurityTimeseriesGroupBySpoof200Response> radarGetEmailSecurityTimeseriesGroupBySpoofWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetEmailSecurityTimeseriesGroupBySpoofValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetEmailSecurityTimeseriesGroupBySpoof200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get SPOOF Validations Time Series (asynchronously)
     * Percentage distribution of emails classified as SPOOF over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecurityTimeseriesGroupBySpoofAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format, final ApiCallback<RadarGetEmailSecurityTimeseriesGroupBySpoof200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetEmailSecurityTimeseriesGroupBySpoofValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetEmailSecurityTimeseriesGroupBySpoof200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetEmailSecurityTimeseriesGroupByThreatCategory
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecurityTimeseriesGroupByThreatCategoryCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/email/security/timeseries_groups/threat_category";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (arc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "arc", arc));
        }

        if (dkim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dkim", dkim));
        }

        if (dmarc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dmarc", dmarc));
        }

        if (spf != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "spf", spf));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetEmailSecurityTimeseriesGroupByThreatCategoryValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format, final ApiCallback _callback) throws ApiException {
        return radarGetEmailSecurityTimeseriesGroupByThreatCategoryCall(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format, _callback);

    }

    /**
     * Get Threat Categories Time Series
     * Percentage distribution of emails classified in Threat Categories over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return RadarGetEmailSecurityTimeseriesGroupByThreatCategory200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetEmailSecurityTimeseriesGroupByThreatCategory200Response radarGetEmailSecurityTimeseriesGroupByThreatCategory(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format) throws ApiException {
        ApiResponse<RadarGetEmailSecurityTimeseriesGroupByThreatCategory200Response> localVarResp = radarGetEmailSecurityTimeseriesGroupByThreatCategoryWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format);
        return localVarResp.getData();
    }

    /**
     * Get Threat Categories Time Series
     * Percentage distribution of emails classified in Threat Categories over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetEmailSecurityTimeseriesGroupByThreatCategory200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetEmailSecurityTimeseriesGroupByThreatCategory200Response> radarGetEmailSecurityTimeseriesGroupByThreatCategoryWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetEmailSecurityTimeseriesGroupByThreatCategoryValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format, null);
        Type localVarReturnType = new TypeToken<RadarGetEmailSecurityTimeseriesGroupByThreatCategory200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Threat Categories Time Series (asynchronously)
     * Percentage distribution of emails classified in Threat Categories over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecurityTimeseriesGroupByThreatCategoryAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String format, final ApiCallback<RadarGetEmailSecurityTimeseriesGroupByThreatCategory200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetEmailSecurityTimeseriesGroupByThreatCategoryValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetEmailSecurityTimeseriesGroupByThreatCategory200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetEmailSecurityTimeseriesGroupByTlsVersion
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecurityTimeseriesGroupByTlsVersionCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/email/security/timeseries_groups/tls_version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aggInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aggInterval", aggInterval));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (arc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "arc", arc));
        }

        if (dkim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dkim", dkim));
        }

        if (dmarc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dmarc", dmarc));
        }

        if (spf != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "spf", spf));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetEmailSecurityTimeseriesGroupByTlsVersionValidateBeforeCall(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ApiCallback _callback) throws ApiException {
        return radarGetEmailSecurityTimeseriesGroupByTlsVersionCall(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, format, _callback);

    }

    /**
     * Get TLS Version Time Series
     * Percentage distribution of emails classified per TLS Version over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param format  (optional)
     * @return RadarGetEmailSecurityTimeseriesGroupByTlsVersion200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetEmailSecurityTimeseriesGroupByTlsVersion200Response radarGetEmailSecurityTimeseriesGroupByTlsVersion(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format) throws ApiException {
        ApiResponse<RadarGetEmailSecurityTimeseriesGroupByTlsVersion200Response> localVarResp = radarGetEmailSecurityTimeseriesGroupByTlsVersionWithHttpInfo(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, format);
        return localVarResp.getData();
    }

    /**
     * Get TLS Version Time Series
     * Percentage distribution of emails classified per TLS Version over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetEmailSecurityTimeseriesGroupByTlsVersion200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetEmailSecurityTimeseriesGroupByTlsVersion200Response> radarGetEmailSecurityTimeseriesGroupByTlsVersionWithHttpInfo(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetEmailSecurityTimeseriesGroupByTlsVersionValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, format, null);
        Type localVarReturnType = new TypeToken<RadarGetEmailSecurityTimeseriesGroupByTlsVersion200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get TLS Version Time Series (asynchronously)
     * Percentage distribution of emails classified per TLS Version over time.
     * @param aggInterval  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecurityTimeseriesGroupByTlsVersionAsync(String aggInterval, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, String format, final ApiCallback<RadarGetEmailSecurityTimeseriesGroupByTlsVersion200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetEmailSecurityTimeseriesGroupByTlsVersionValidateBeforeCall(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetEmailSecurityTimeseriesGroupByTlsVersion200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetEmailSecurityTopTldsByMalicious
     * @param malicious  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param tldCategory  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecurityTopTldsByMaliciousCall(String malicious, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String tldCategory, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/email/security/top/tlds/malicious/{malicious}"
            .replace("{" + "malicious" + "}", localVarApiClient.escapeString(malicious.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (arc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "arc", arc));
        }

        if (dkim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dkim", dkim));
        }

        if (dmarc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dmarc", dmarc));
        }

        if (spf != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "spf", spf));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (tldCategory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tldCategory", tldCategory));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetEmailSecurityTopTldsByMaliciousValidateBeforeCall(String malicious, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String tldCategory, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'malicious' is set
        if (malicious == null) {
            throw new ApiException("Missing the required parameter 'malicious' when calling radarGetEmailSecurityTopTldsByMalicious(Async)");
        }

        return radarGetEmailSecurityTopTldsByMaliciousCall(malicious, limit, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, tldCategory, format, _callback);

    }

    /**
     * Get Top TLDs By Malicious Classification
     * Get the TLDs by emails classified as malicious or not.
     * @param malicious  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param tldCategory  (optional)
     * @param format  (optional)
     * @return RadarGetEmailSecurityTopTldsByMessages200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetEmailSecurityTopTldsByMessages200Response radarGetEmailSecurityTopTldsByMalicious(String malicious, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String tldCategory, String format) throws ApiException {
        ApiResponse<RadarGetEmailSecurityTopTldsByMessages200Response> localVarResp = radarGetEmailSecurityTopTldsByMaliciousWithHttpInfo(malicious, limit, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, tldCategory, format);
        return localVarResp.getData();
    }

    /**
     * Get Top TLDs By Malicious Classification
     * Get the TLDs by emails classified as malicious or not.
     * @param malicious  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param tldCategory  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetEmailSecurityTopTldsByMessages200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetEmailSecurityTopTldsByMessages200Response> radarGetEmailSecurityTopTldsByMaliciousWithHttpInfo(String malicious, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String tldCategory, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetEmailSecurityTopTldsByMaliciousValidateBeforeCall(malicious, limit, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, tldCategory, format, null);
        Type localVarReturnType = new TypeToken<RadarGetEmailSecurityTopTldsByMessages200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Top TLDs By Malicious Classification (asynchronously)
     * Get the TLDs by emails classified as malicious or not.
     * @param malicious  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param tldCategory  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecurityTopTldsByMaliciousAsync(String malicious, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String tldCategory, String format, final ApiCallback<RadarGetEmailSecurityTopTldsByMessages200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetEmailSecurityTopTldsByMaliciousValidateBeforeCall(malicious, limit, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, tldCategory, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetEmailSecurityTopTldsByMessages200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetEmailSecurityTopTldsByMessages
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param tldCategory  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecurityTopTldsByMessagesCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String tldCategory, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/email/security/top/tlds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (arc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "arc", arc));
        }

        if (dkim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dkim", dkim));
        }

        if (dmarc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dmarc", dmarc));
        }

        if (spf != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "spf", spf));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (tldCategory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tldCategory", tldCategory));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetEmailSecurityTopTldsByMessagesValidateBeforeCall(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String tldCategory, String format, final ApiCallback _callback) throws ApiException {
        return radarGetEmailSecurityTopTldsByMessagesCall(limit, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, tldCategory, format, _callback);

    }

    /**
     * Get Top TLDs By Email Messages
     * Get the top TLDs by email messages. Values are a percentage out of the total emails.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param tldCategory  (optional)
     * @param format  (optional)
     * @return RadarGetEmailSecurityTopTldsByMessages200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetEmailSecurityTopTldsByMessages200Response radarGetEmailSecurityTopTldsByMessages(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String tldCategory, String format) throws ApiException {
        ApiResponse<RadarGetEmailSecurityTopTldsByMessages200Response> localVarResp = radarGetEmailSecurityTopTldsByMessagesWithHttpInfo(limit, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, tldCategory, format);
        return localVarResp.getData();
    }

    /**
     * Get Top TLDs By Email Messages
     * Get the top TLDs by email messages. Values are a percentage out of the total emails.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param tldCategory  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetEmailSecurityTopTldsByMessages200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetEmailSecurityTopTldsByMessages200Response> radarGetEmailSecurityTopTldsByMessagesWithHttpInfo(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String tldCategory, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetEmailSecurityTopTldsByMessagesValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, tldCategory, format, null);
        Type localVarReturnType = new TypeToken<RadarGetEmailSecurityTopTldsByMessages200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Top TLDs By Email Messages (asynchronously)
     * Get the top TLDs by email messages. Values are a percentage out of the total emails.
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param tldCategory  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecurityTopTldsByMessagesAsync(Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String tldCategory, String format, final ApiCallback<RadarGetEmailSecurityTopTldsByMessages200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetEmailSecurityTopTldsByMessagesValidateBeforeCall(limit, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, tldCategory, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetEmailSecurityTopTldsByMessages200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetEmailSecurityTopTldsBySpam
     * @param spam  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param tldCategory  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecurityTopTldsBySpamCall(String spam, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String tldCategory, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/email/security/top/tlds/spam/{spam}"
            .replace("{" + "spam" + "}", localVarApiClient.escapeString(spam.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (arc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "arc", arc));
        }

        if (dkim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dkim", dkim));
        }

        if (dmarc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dmarc", dmarc));
        }

        if (spf != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "spf", spf));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (tldCategory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tldCategory", tldCategory));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetEmailSecurityTopTldsBySpamValidateBeforeCall(String spam, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String tldCategory, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spam' is set
        if (spam == null) {
            throw new ApiException("Missing the required parameter 'spam' when calling radarGetEmailSecurityTopTldsBySpam(Async)");
        }

        return radarGetEmailSecurityTopTldsBySpamCall(spam, limit, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, tldCategory, format, _callback);

    }

    /**
     * Get Top TLDs By Spam Classification
     * Get the top TLDs by emails classified as Spam or not.
     * @param spam  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param tldCategory  (optional)
     * @param format  (optional)
     * @return RadarGetEmailSecurityTopTldsByMessages200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetEmailSecurityTopTldsByMessages200Response radarGetEmailSecurityTopTldsBySpam(String spam, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String tldCategory, String format) throws ApiException {
        ApiResponse<RadarGetEmailSecurityTopTldsByMessages200Response> localVarResp = radarGetEmailSecurityTopTldsBySpamWithHttpInfo(spam, limit, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, tldCategory, format);
        return localVarResp.getData();
    }

    /**
     * Get Top TLDs By Spam Classification
     * Get the top TLDs by emails classified as Spam or not.
     * @param spam  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param tldCategory  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetEmailSecurityTopTldsByMessages200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetEmailSecurityTopTldsByMessages200Response> radarGetEmailSecurityTopTldsBySpamWithHttpInfo(String spam, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String tldCategory, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetEmailSecurityTopTldsBySpamValidateBeforeCall(spam, limit, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, tldCategory, format, null);
        Type localVarReturnType = new TypeToken<RadarGetEmailSecurityTopTldsByMessages200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Top TLDs By Spam Classification (asynchronously)
     * Get the top TLDs by emails classified as Spam or not.
     * @param spam  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param tldCategory  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecurityTopTldsBySpamAsync(String spam, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String tldCategory, String format, final ApiCallback<RadarGetEmailSecurityTopTldsByMessages200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetEmailSecurityTopTldsBySpamValidateBeforeCall(spam, limit, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, tldCategory, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetEmailSecurityTopTldsByMessages200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetEmailSecurityTopTldsBySpoof
     * @param spoof  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param tldCategory  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecurityTopTldsBySpoofCall(String spoof, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String tldCategory, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/email/security/top/tlds/spoof/{spoof}"
            .replace("{" + "spoof" + "}", localVarApiClient.escapeString(spoof.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (arc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "arc", arc));
        }

        if (dkim != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dkim", dkim));
        }

        if (dmarc != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dmarc", dmarc));
        }

        if (spf != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "spf", spf));
        }

        if (tlsVersion != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tlsVersion", tlsVersion));
        }

        if (tldCategory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tldCategory", tldCategory));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetEmailSecurityTopTldsBySpoofValidateBeforeCall(String spoof, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String tldCategory, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spoof' is set
        if (spoof == null) {
            throw new ApiException("Missing the required parameter 'spoof' when calling radarGetEmailSecurityTopTldsBySpoof(Async)");
        }

        return radarGetEmailSecurityTopTldsBySpoofCall(spoof, limit, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, tldCategory, format, _callback);

    }

    /**
     * Get Top TLDs By Spoof Classification
     * Get the TLDs by emails classified as spoof or not.
     * @param spoof  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param tldCategory  (optional)
     * @param format  (optional)
     * @return RadarGetEmailSecurityTopTldsByMessages200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetEmailSecurityTopTldsByMessages200Response radarGetEmailSecurityTopTldsBySpoof(String spoof, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String tldCategory, String format) throws ApiException {
        ApiResponse<RadarGetEmailSecurityTopTldsByMessages200Response> localVarResp = radarGetEmailSecurityTopTldsBySpoofWithHttpInfo(spoof, limit, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, tldCategory, format);
        return localVarResp.getData();
    }

    /**
     * Get Top TLDs By Spoof Classification
     * Get the TLDs by emails classified as spoof or not.
     * @param spoof  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param tldCategory  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetEmailSecurityTopTldsByMessages200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetEmailSecurityTopTldsByMessages200Response> radarGetEmailSecurityTopTldsBySpoofWithHttpInfo(String spoof, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String tldCategory, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetEmailSecurityTopTldsBySpoofValidateBeforeCall(spoof, limit, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, tldCategory, format, null);
        Type localVarReturnType = new TypeToken<RadarGetEmailSecurityTopTldsByMessages200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Top TLDs By Spoof Classification (asynchronously)
     * Get the TLDs by emails classified as spoof or not.
     * @param spoof  (required)
     * @param limit  (optional)
     * @param name  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param arc  (optional)
     * @param dkim  (optional)
     * @param dmarc  (optional)
     * @param spf  (optional)
     * @param tlsVersion  (optional)
     * @param tldCategory  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetEmailSecurityTopTldsBySpoofAsync(String spoof, Integer limit, List<String> name, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, List<String> arc, List<String> dkim, List<String> dmarc, List<String> spf, List<String> tlsVersion, String tldCategory, String format, final ApiCallback<RadarGetEmailSecurityTopTldsByMessages200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetEmailSecurityTopTldsBySpoofValidateBeforeCall(spoof, limit, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, tldCategory, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetEmailSecurityTopTldsByMessages200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
