/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import org.openapitools.client.model.RadarGetRankingDomainDetails200Response;
import org.openapitools.client.model.RadarGetRankingDomainTimeseries200Response;
import org.openapitools.client.model.RadarGetRankingTopDomains200Response;
import org.openapitools.client.model.WorkersAiListFinetunes400Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RadarRankingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RadarRankingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RadarRankingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for radarGetRankingDomainDetails
     * @param domain  (required)
     * @param limit  (optional)
     * @param rankingType  (optional, default to POPULAR)
     * @param name  (optional)
     * @param date  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetRankingDomainDetailsCall(String domain, Integer limit, String rankingType, List<String> name, List<String> date, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/ranking/domain/{domain}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (rankingType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rankingType", rankingType));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (date != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "date", date));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetRankingDomainDetailsValidateBeforeCall(String domain, Integer limit, String rankingType, List<String> name, List<String> date, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling radarGetRankingDomainDetails(Async)");
        }

        return radarGetRankingDomainDetailsCall(domain, limit, rankingType, name, date, format, _callback);

    }

    /**
     * Get Domains Rank details
     * Gets Domains Rank details.      Cloudflare provides an ordered rank for the top 100 domains, but for the remainder it only provides ranking buckets     like top 200 thousand, top one million, etc.. These are available through Radar datasets endpoints.
     * @param domain  (required)
     * @param limit  (optional)
     * @param rankingType  (optional, default to POPULAR)
     * @param name  (optional)
     * @param date  (optional)
     * @param format  (optional)
     * @return RadarGetRankingDomainDetails200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetRankingDomainDetails200Response radarGetRankingDomainDetails(String domain, Integer limit, String rankingType, List<String> name, List<String> date, String format) throws ApiException {
        ApiResponse<RadarGetRankingDomainDetails200Response> localVarResp = radarGetRankingDomainDetailsWithHttpInfo(domain, limit, rankingType, name, date, format);
        return localVarResp.getData();
    }

    /**
     * Get Domains Rank details
     * Gets Domains Rank details.      Cloudflare provides an ordered rank for the top 100 domains, but for the remainder it only provides ranking buckets     like top 200 thousand, top one million, etc.. These are available through Radar datasets endpoints.
     * @param domain  (required)
     * @param limit  (optional)
     * @param rankingType  (optional, default to POPULAR)
     * @param name  (optional)
     * @param date  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetRankingDomainDetails200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetRankingDomainDetails200Response> radarGetRankingDomainDetailsWithHttpInfo(String domain, Integer limit, String rankingType, List<String> name, List<String> date, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetRankingDomainDetailsValidateBeforeCall(domain, limit, rankingType, name, date, format, null);
        Type localVarReturnType = new TypeToken<RadarGetRankingDomainDetails200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Domains Rank details (asynchronously)
     * Gets Domains Rank details.      Cloudflare provides an ordered rank for the top 100 domains, but for the remainder it only provides ranking buckets     like top 200 thousand, top one million, etc.. These are available through Radar datasets endpoints.
     * @param domain  (required)
     * @param limit  (optional)
     * @param rankingType  (optional, default to POPULAR)
     * @param name  (optional)
     * @param date  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetRankingDomainDetailsAsync(String domain, Integer limit, String rankingType, List<String> name, List<String> date, String format, final ApiCallback<RadarGetRankingDomainDetails200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetRankingDomainDetailsValidateBeforeCall(domain, limit, rankingType, name, date, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetRankingDomainDetails200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetRankingDomainTimeseries
     * @param limit  (optional)
     * @param rankingType  (optional, default to POPULAR)
     * @param name  (optional)
     * @param location  (optional)
     * @param domains  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetRankingDomainTimeseriesCall(Integer limit, String rankingType, List<String> name, List<String> location, List<String> domains, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/ranking/timeseries_groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (rankingType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rankingType", rankingType));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (domains != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "domains", domains));
        }

        if (dateRange != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dateEnd", dateEnd));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetRankingDomainTimeseriesValidateBeforeCall(Integer limit, String rankingType, List<String> name, List<String> location, List<String> domains, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, String format, final ApiCallback _callback) throws ApiException {
        return radarGetRankingDomainTimeseriesCall(limit, rankingType, name, location, domains, dateRange, dateStart, dateEnd, format, _callback);

    }

    /**
     * Get Domains Rank time series
     * Gets Domains Rank updates change over time. Raw values are returned.
     * @param limit  (optional)
     * @param rankingType  (optional, default to POPULAR)
     * @param name  (optional)
     * @param location  (optional)
     * @param domains  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param format  (optional)
     * @return RadarGetRankingDomainTimeseries200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetRankingDomainTimeseries200Response radarGetRankingDomainTimeseries(Integer limit, String rankingType, List<String> name, List<String> location, List<String> domains, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, String format) throws ApiException {
        ApiResponse<RadarGetRankingDomainTimeseries200Response> localVarResp = radarGetRankingDomainTimeseriesWithHttpInfo(limit, rankingType, name, location, domains, dateRange, dateStart, dateEnd, format);
        return localVarResp.getData();
    }

    /**
     * Get Domains Rank time series
     * Gets Domains Rank updates change over time. Raw values are returned.
     * @param limit  (optional)
     * @param rankingType  (optional, default to POPULAR)
     * @param name  (optional)
     * @param location  (optional)
     * @param domains  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetRankingDomainTimeseries200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetRankingDomainTimeseries200Response> radarGetRankingDomainTimeseriesWithHttpInfo(Integer limit, String rankingType, List<String> name, List<String> location, List<String> domains, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetRankingDomainTimeseriesValidateBeforeCall(limit, rankingType, name, location, domains, dateRange, dateStart, dateEnd, format, null);
        Type localVarReturnType = new TypeToken<RadarGetRankingDomainTimeseries200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Domains Rank time series (asynchronously)
     * Gets Domains Rank updates change over time. Raw values are returned.
     * @param limit  (optional)
     * @param rankingType  (optional, default to POPULAR)
     * @param name  (optional)
     * @param location  (optional)
     * @param domains  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetRankingDomainTimeseriesAsync(Integer limit, String rankingType, List<String> name, List<String> location, List<String> domains, List<String> dateRange, List<OffsetDateTime> dateStart, List<OffsetDateTime> dateEnd, String format, final ApiCallback<RadarGetRankingDomainTimeseries200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetRankingDomainTimeseriesValidateBeforeCall(limit, rankingType, name, location, domains, dateRange, dateStart, dateEnd, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetRankingDomainTimeseries200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetRankingTopDomains
     * @param limit  (optional)
     * @param name  (optional)
     * @param location  (optional)
     * @param date  (optional)
     * @param rankingType  (optional, default to POPULAR)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetRankingTopDomainsCall(Integer limit, List<String> name, List<String> location, List<String> date, String rankingType, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/ranking/top";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "name", name));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (date != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "date", date));
        }

        if (rankingType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rankingType", rankingType));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetRankingTopDomainsValidateBeforeCall(Integer limit, List<String> name, List<String> location, List<String> date, String rankingType, String format, final ApiCallback _callback) throws ApiException {
        return radarGetRankingTopDomainsCall(limit, name, location, date, rankingType, format, _callback);

    }

    /**
     * Get Top or Trending Domains
     * Get top or trending domains based on their rank. Popular domains are domains of broad appeal based on how people use the Internet. Trending domains are domains that are generating a surge in interest. For more information on top domains, see https://blog.cloudflare.com/radar-domain-rankings/.
     * @param limit  (optional)
     * @param name  (optional)
     * @param location  (optional)
     * @param date  (optional)
     * @param rankingType  (optional, default to POPULAR)
     * @param format  (optional)
     * @return RadarGetRankingTopDomains200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetRankingTopDomains200Response radarGetRankingTopDomains(Integer limit, List<String> name, List<String> location, List<String> date, String rankingType, String format) throws ApiException {
        ApiResponse<RadarGetRankingTopDomains200Response> localVarResp = radarGetRankingTopDomainsWithHttpInfo(limit, name, location, date, rankingType, format);
        return localVarResp.getData();
    }

    /**
     * Get Top or Trending Domains
     * Get top or trending domains based on their rank. Popular domains are domains of broad appeal based on how people use the Internet. Trending domains are domains that are generating a surge in interest. For more information on top domains, see https://blog.cloudflare.com/radar-domain-rankings/.
     * @param limit  (optional)
     * @param name  (optional)
     * @param location  (optional)
     * @param date  (optional)
     * @param rankingType  (optional, default to POPULAR)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetRankingTopDomains200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetRankingTopDomains200Response> radarGetRankingTopDomainsWithHttpInfo(Integer limit, List<String> name, List<String> location, List<String> date, String rankingType, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetRankingTopDomainsValidateBeforeCall(limit, name, location, date, rankingType, format, null);
        Type localVarReturnType = new TypeToken<RadarGetRankingTopDomains200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Top or Trending Domains (asynchronously)
     * Get top or trending domains based on their rank. Popular domains are domains of broad appeal based on how people use the Internet. Trending domains are domains that are generating a surge in interest. For more information on top domains, see https://blog.cloudflare.com/radar-domain-rankings/.
     * @param limit  (optional)
     * @param name  (optional)
     * @param location  (optional)
     * @param date  (optional)
     * @param rankingType  (optional, default to POPULAR)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetRankingTopDomainsAsync(Integer limit, List<String> name, List<String> location, List<String> date, String rankingType, String format, final ApiCallback<RadarGetRankingTopDomains200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetRankingTopDomainsValidateBeforeCall(limit, name, location, date, rankingType, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetRankingTopDomains200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
