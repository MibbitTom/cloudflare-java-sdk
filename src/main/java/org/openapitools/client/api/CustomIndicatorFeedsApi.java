/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CustomIndicatorFeedsAddPermission4XXResponse;
import org.openapitools.client.model.CustomIndicatorFeedsApiResponseCommonFailure;
import org.openapitools.client.model.CustomIndicatorFeedsCreateFeed;
import org.openapitools.client.model.CustomIndicatorFeedsCreateFeedResponse;
import org.openapitools.client.model.CustomIndicatorFeedsCreateIndicatorFeeds4XXResponse;
import org.openapitools.client.model.CustomIndicatorFeedsGetIndicatorFeedMetadata4XXResponse;
import org.openapitools.client.model.CustomIndicatorFeedsGetIndicatorFeeds4XXResponse;
import org.openapitools.client.model.CustomIndicatorFeedsIndicatorFeedMetadataResponse;
import org.openapitools.client.model.CustomIndicatorFeedsIndicatorFeedResponse;
import org.openapitools.client.model.CustomIndicatorFeedsPermissionListItemResponse;
import org.openapitools.client.model.CustomIndicatorFeedsPermissionsRequest;
import org.openapitools.client.model.CustomIndicatorFeedsPermissionsResponse;
import org.openapitools.client.model.CustomIndicatorFeedsUpdateFeedResponse;
import org.openapitools.client.model.CustomIndicatorFeedsViewPermissions4XXResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CustomIndicatorFeedsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomIndicatorFeedsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CustomIndicatorFeedsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for customIndicatorFeedsAddPermission
     * @param accountId  (required)
     * @param customIndicatorFeedsPermissionsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get indicator feed metadata </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get indicator feeds response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customIndicatorFeedsAddPermissionCall(String accountId, CustomIndicatorFeedsPermissionsRequest customIndicatorFeedsPermissionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customIndicatorFeedsPermissionsRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/intel/indicator-feeds/permissions/add"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customIndicatorFeedsAddPermissionValidateBeforeCall(String accountId, CustomIndicatorFeedsPermissionsRequest customIndicatorFeedsPermissionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling customIndicatorFeedsAddPermission(Async)");
        }

        // verify the required parameter 'customIndicatorFeedsPermissionsRequest' is set
        if (customIndicatorFeedsPermissionsRequest == null) {
            throw new ApiException("Missing the required parameter 'customIndicatorFeedsPermissionsRequest' when calling customIndicatorFeedsAddPermission(Async)");
        }

        return customIndicatorFeedsAddPermissionCall(accountId, customIndicatorFeedsPermissionsRequest, _callback);

    }

    /**
     * Grant permission to indicator feed
     * 
     * @param accountId  (required)
     * @param customIndicatorFeedsPermissionsRequest  (required)
     * @return CustomIndicatorFeedsPermissionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get indicator feed metadata </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get indicator feeds response failure </td><td>  -  </td></tr>
     </table>
     */
    public CustomIndicatorFeedsPermissionsResponse customIndicatorFeedsAddPermission(String accountId, CustomIndicatorFeedsPermissionsRequest customIndicatorFeedsPermissionsRequest) throws ApiException {
        ApiResponse<CustomIndicatorFeedsPermissionsResponse> localVarResp = customIndicatorFeedsAddPermissionWithHttpInfo(accountId, customIndicatorFeedsPermissionsRequest);
        return localVarResp.getData();
    }

    /**
     * Grant permission to indicator feed
     * 
     * @param accountId  (required)
     * @param customIndicatorFeedsPermissionsRequest  (required)
     * @return ApiResponse&lt;CustomIndicatorFeedsPermissionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get indicator feed metadata </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get indicator feeds response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomIndicatorFeedsPermissionsResponse> customIndicatorFeedsAddPermissionWithHttpInfo(String accountId, CustomIndicatorFeedsPermissionsRequest customIndicatorFeedsPermissionsRequest) throws ApiException {
        okhttp3.Call localVarCall = customIndicatorFeedsAddPermissionValidateBeforeCall(accountId, customIndicatorFeedsPermissionsRequest, null);
        Type localVarReturnType = new TypeToken<CustomIndicatorFeedsPermissionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Grant permission to indicator feed (asynchronously)
     * 
     * @param accountId  (required)
     * @param customIndicatorFeedsPermissionsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get indicator feed metadata </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get indicator feeds response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customIndicatorFeedsAddPermissionAsync(String accountId, CustomIndicatorFeedsPermissionsRequest customIndicatorFeedsPermissionsRequest, final ApiCallback<CustomIndicatorFeedsPermissionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = customIndicatorFeedsAddPermissionValidateBeforeCall(accountId, customIndicatorFeedsPermissionsRequest, _callback);
        Type localVarReturnType = new TypeToken<CustomIndicatorFeedsPermissionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customIndicatorFeedsCreateIndicatorFeeds
     * @param accountId  (required)
     * @param customIndicatorFeedsCreateFeed  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create indicator feed response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get indicator feeds failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customIndicatorFeedsCreateIndicatorFeedsCall(String accountId, CustomIndicatorFeedsCreateFeed customIndicatorFeedsCreateFeed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customIndicatorFeedsCreateFeed;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/intel/indicator-feeds"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customIndicatorFeedsCreateIndicatorFeedsValidateBeforeCall(String accountId, CustomIndicatorFeedsCreateFeed customIndicatorFeedsCreateFeed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling customIndicatorFeedsCreateIndicatorFeeds(Async)");
        }

        // verify the required parameter 'customIndicatorFeedsCreateFeed' is set
        if (customIndicatorFeedsCreateFeed == null) {
            throw new ApiException("Missing the required parameter 'customIndicatorFeedsCreateFeed' when calling customIndicatorFeedsCreateIndicatorFeeds(Async)");
        }

        return customIndicatorFeedsCreateIndicatorFeedsCall(accountId, customIndicatorFeedsCreateFeed, _callback);

    }

    /**
     * Create new indicator feed
     * 
     * @param accountId  (required)
     * @param customIndicatorFeedsCreateFeed  (required)
     * @return CustomIndicatorFeedsCreateFeedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create indicator feed response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get indicator feeds failure response </td><td>  -  </td></tr>
     </table>
     */
    public CustomIndicatorFeedsCreateFeedResponse customIndicatorFeedsCreateIndicatorFeeds(String accountId, CustomIndicatorFeedsCreateFeed customIndicatorFeedsCreateFeed) throws ApiException {
        ApiResponse<CustomIndicatorFeedsCreateFeedResponse> localVarResp = customIndicatorFeedsCreateIndicatorFeedsWithHttpInfo(accountId, customIndicatorFeedsCreateFeed);
        return localVarResp.getData();
    }

    /**
     * Create new indicator feed
     * 
     * @param accountId  (required)
     * @param customIndicatorFeedsCreateFeed  (required)
     * @return ApiResponse&lt;CustomIndicatorFeedsCreateFeedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create indicator feed response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get indicator feeds failure response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomIndicatorFeedsCreateFeedResponse> customIndicatorFeedsCreateIndicatorFeedsWithHttpInfo(String accountId, CustomIndicatorFeedsCreateFeed customIndicatorFeedsCreateFeed) throws ApiException {
        okhttp3.Call localVarCall = customIndicatorFeedsCreateIndicatorFeedsValidateBeforeCall(accountId, customIndicatorFeedsCreateFeed, null);
        Type localVarReturnType = new TypeToken<CustomIndicatorFeedsCreateFeedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new indicator feed (asynchronously)
     * 
     * @param accountId  (required)
     * @param customIndicatorFeedsCreateFeed  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create indicator feed response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get indicator feeds failure response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customIndicatorFeedsCreateIndicatorFeedsAsync(String accountId, CustomIndicatorFeedsCreateFeed customIndicatorFeedsCreateFeed, final ApiCallback<CustomIndicatorFeedsCreateFeedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = customIndicatorFeedsCreateIndicatorFeedsValidateBeforeCall(accountId, customIndicatorFeedsCreateFeed, _callback);
        Type localVarReturnType = new TypeToken<CustomIndicatorFeedsCreateFeedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customIndicatorFeedsGetIndicatorFeedData
     * @param accountId  (required)
     * @param feedId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get indicator feed metadata </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get indicator feeds response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customIndicatorFeedsGetIndicatorFeedDataCall(String accountId, Integer feedId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/intel/indicator-feeds/{feed_id}/data"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "feed_id" + "}", localVarApiClient.escapeString(feedId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/csv",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customIndicatorFeedsGetIndicatorFeedDataValidateBeforeCall(String accountId, Integer feedId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling customIndicatorFeedsGetIndicatorFeedData(Async)");
        }

        // verify the required parameter 'feedId' is set
        if (feedId == null) {
            throw new ApiException("Missing the required parameter 'feedId' when calling customIndicatorFeedsGetIndicatorFeedData(Async)");
        }

        return customIndicatorFeedsGetIndicatorFeedDataCall(accountId, feedId, _callback);

    }

    /**
     * Get indicator feed data
     * 
     * @param accountId  (required)
     * @param feedId  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get indicator feed metadata </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get indicator feeds response failure </td><td>  -  </td></tr>
     </table>
     */
    public String customIndicatorFeedsGetIndicatorFeedData(String accountId, Integer feedId) throws ApiException {
        ApiResponse<String> localVarResp = customIndicatorFeedsGetIndicatorFeedDataWithHttpInfo(accountId, feedId);
        return localVarResp.getData();
    }

    /**
     * Get indicator feed data
     * 
     * @param accountId  (required)
     * @param feedId  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get indicator feed metadata </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get indicator feeds response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> customIndicatorFeedsGetIndicatorFeedDataWithHttpInfo(String accountId, Integer feedId) throws ApiException {
        okhttp3.Call localVarCall = customIndicatorFeedsGetIndicatorFeedDataValidateBeforeCall(accountId, feedId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get indicator feed data (asynchronously)
     * 
     * @param accountId  (required)
     * @param feedId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get indicator feed metadata </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get indicator feeds response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customIndicatorFeedsGetIndicatorFeedDataAsync(String accountId, Integer feedId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = customIndicatorFeedsGetIndicatorFeedDataValidateBeforeCall(accountId, feedId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customIndicatorFeedsGetIndicatorFeedMetadata
     * @param accountId  (required)
     * @param feedId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get indicator feed metadata </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get indicator feeds response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customIndicatorFeedsGetIndicatorFeedMetadataCall(String accountId, Integer feedId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/intel/indicator-feeds/{feed_id}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "feed_id" + "}", localVarApiClient.escapeString(feedId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customIndicatorFeedsGetIndicatorFeedMetadataValidateBeforeCall(String accountId, Integer feedId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling customIndicatorFeedsGetIndicatorFeedMetadata(Async)");
        }

        // verify the required parameter 'feedId' is set
        if (feedId == null) {
            throw new ApiException("Missing the required parameter 'feedId' when calling customIndicatorFeedsGetIndicatorFeedMetadata(Async)");
        }

        return customIndicatorFeedsGetIndicatorFeedMetadataCall(accountId, feedId, _callback);

    }

    /**
     * Get indicator feed metadata
     * 
     * @param accountId  (required)
     * @param feedId  (required)
     * @return CustomIndicatorFeedsIndicatorFeedMetadataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get indicator feed metadata </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get indicator feeds response failure </td><td>  -  </td></tr>
     </table>
     */
    public CustomIndicatorFeedsIndicatorFeedMetadataResponse customIndicatorFeedsGetIndicatorFeedMetadata(String accountId, Integer feedId) throws ApiException {
        ApiResponse<CustomIndicatorFeedsIndicatorFeedMetadataResponse> localVarResp = customIndicatorFeedsGetIndicatorFeedMetadataWithHttpInfo(accountId, feedId);
        return localVarResp.getData();
    }

    /**
     * Get indicator feed metadata
     * 
     * @param accountId  (required)
     * @param feedId  (required)
     * @return ApiResponse&lt;CustomIndicatorFeedsIndicatorFeedMetadataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get indicator feed metadata </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get indicator feeds response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomIndicatorFeedsIndicatorFeedMetadataResponse> customIndicatorFeedsGetIndicatorFeedMetadataWithHttpInfo(String accountId, Integer feedId) throws ApiException {
        okhttp3.Call localVarCall = customIndicatorFeedsGetIndicatorFeedMetadataValidateBeforeCall(accountId, feedId, null);
        Type localVarReturnType = new TypeToken<CustomIndicatorFeedsIndicatorFeedMetadataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get indicator feed metadata (asynchronously)
     * 
     * @param accountId  (required)
     * @param feedId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get indicator feed metadata </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get indicator feeds response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customIndicatorFeedsGetIndicatorFeedMetadataAsync(String accountId, Integer feedId, final ApiCallback<CustomIndicatorFeedsIndicatorFeedMetadataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = customIndicatorFeedsGetIndicatorFeedMetadataValidateBeforeCall(accountId, feedId, _callback);
        Type localVarReturnType = new TypeToken<CustomIndicatorFeedsIndicatorFeedMetadataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customIndicatorFeedsGetIndicatorFeeds
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get indicator feeds response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get indicator feeds response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customIndicatorFeedsGetIndicatorFeedsCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/intel/indicator-feeds"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customIndicatorFeedsGetIndicatorFeedsValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling customIndicatorFeedsGetIndicatorFeeds(Async)");
        }

        return customIndicatorFeedsGetIndicatorFeedsCall(accountId, _callback);

    }

    /**
     * Get indicator feeds owned by this account
     * 
     * @param accountId  (required)
     * @return CustomIndicatorFeedsIndicatorFeedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get indicator feeds response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get indicator feeds response failure </td><td>  -  </td></tr>
     </table>
     */
    public CustomIndicatorFeedsIndicatorFeedResponse customIndicatorFeedsGetIndicatorFeeds(String accountId) throws ApiException {
        ApiResponse<CustomIndicatorFeedsIndicatorFeedResponse> localVarResp = customIndicatorFeedsGetIndicatorFeedsWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Get indicator feeds owned by this account
     * 
     * @param accountId  (required)
     * @return ApiResponse&lt;CustomIndicatorFeedsIndicatorFeedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get indicator feeds response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get indicator feeds response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomIndicatorFeedsIndicatorFeedResponse> customIndicatorFeedsGetIndicatorFeedsWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = customIndicatorFeedsGetIndicatorFeedsValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<CustomIndicatorFeedsIndicatorFeedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get indicator feeds owned by this account (asynchronously)
     * 
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get indicator feeds response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get indicator feeds response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customIndicatorFeedsGetIndicatorFeedsAsync(String accountId, final ApiCallback<CustomIndicatorFeedsIndicatorFeedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = customIndicatorFeedsGetIndicatorFeedsValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<CustomIndicatorFeedsIndicatorFeedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customIndicatorFeedsRemovePermission
     * @param accountId  (required)
     * @param customIndicatorFeedsPermissionsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get indicator feed metadata </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get indicator feeds response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customIndicatorFeedsRemovePermissionCall(String accountId, CustomIndicatorFeedsPermissionsRequest customIndicatorFeedsPermissionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customIndicatorFeedsPermissionsRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/intel/indicator-feeds/permissions/remove"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customIndicatorFeedsRemovePermissionValidateBeforeCall(String accountId, CustomIndicatorFeedsPermissionsRequest customIndicatorFeedsPermissionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling customIndicatorFeedsRemovePermission(Async)");
        }

        // verify the required parameter 'customIndicatorFeedsPermissionsRequest' is set
        if (customIndicatorFeedsPermissionsRequest == null) {
            throw new ApiException("Missing the required parameter 'customIndicatorFeedsPermissionsRequest' when calling customIndicatorFeedsRemovePermission(Async)");
        }

        return customIndicatorFeedsRemovePermissionCall(accountId, customIndicatorFeedsPermissionsRequest, _callback);

    }

    /**
     * Revoke permission to indicator feed
     * 
     * @param accountId  (required)
     * @param customIndicatorFeedsPermissionsRequest  (required)
     * @return CustomIndicatorFeedsPermissionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get indicator feed metadata </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get indicator feeds response failure </td><td>  -  </td></tr>
     </table>
     */
    public CustomIndicatorFeedsPermissionsResponse customIndicatorFeedsRemovePermission(String accountId, CustomIndicatorFeedsPermissionsRequest customIndicatorFeedsPermissionsRequest) throws ApiException {
        ApiResponse<CustomIndicatorFeedsPermissionsResponse> localVarResp = customIndicatorFeedsRemovePermissionWithHttpInfo(accountId, customIndicatorFeedsPermissionsRequest);
        return localVarResp.getData();
    }

    /**
     * Revoke permission to indicator feed
     * 
     * @param accountId  (required)
     * @param customIndicatorFeedsPermissionsRequest  (required)
     * @return ApiResponse&lt;CustomIndicatorFeedsPermissionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get indicator feed metadata </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get indicator feeds response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomIndicatorFeedsPermissionsResponse> customIndicatorFeedsRemovePermissionWithHttpInfo(String accountId, CustomIndicatorFeedsPermissionsRequest customIndicatorFeedsPermissionsRequest) throws ApiException {
        okhttp3.Call localVarCall = customIndicatorFeedsRemovePermissionValidateBeforeCall(accountId, customIndicatorFeedsPermissionsRequest, null);
        Type localVarReturnType = new TypeToken<CustomIndicatorFeedsPermissionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Revoke permission to indicator feed (asynchronously)
     * 
     * @param accountId  (required)
     * @param customIndicatorFeedsPermissionsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get indicator feed metadata </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get indicator feeds response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customIndicatorFeedsRemovePermissionAsync(String accountId, CustomIndicatorFeedsPermissionsRequest customIndicatorFeedsPermissionsRequest, final ApiCallback<CustomIndicatorFeedsPermissionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = customIndicatorFeedsRemovePermissionValidateBeforeCall(accountId, customIndicatorFeedsPermissionsRequest, _callback);
        Type localVarReturnType = new TypeToken<CustomIndicatorFeedsPermissionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customIndicatorFeedsUpdateIndicatorFeedData
     * @param accountId  (required)
     * @param feedId  (required)
     * @param source The file to upload (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get indicator feed metadata </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get indicator feeds response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customIndicatorFeedsUpdateIndicatorFeedDataCall(String accountId, Integer feedId, String source, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/intel/indicator-feeds/{feed_id}/snapshot"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "feed_id" + "}", localVarApiClient.escapeString(feedId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (source != null) {
            localVarFormParams.put("source", source);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customIndicatorFeedsUpdateIndicatorFeedDataValidateBeforeCall(String accountId, Integer feedId, String source, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling customIndicatorFeedsUpdateIndicatorFeedData(Async)");
        }

        // verify the required parameter 'feedId' is set
        if (feedId == null) {
            throw new ApiException("Missing the required parameter 'feedId' when calling customIndicatorFeedsUpdateIndicatorFeedData(Async)");
        }

        return customIndicatorFeedsUpdateIndicatorFeedDataCall(accountId, feedId, source, _callback);

    }

    /**
     * Update indicator feed data
     * 
     * @param accountId  (required)
     * @param feedId  (required)
     * @param source The file to upload (optional)
     * @return CustomIndicatorFeedsUpdateFeedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get indicator feed metadata </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get indicator feeds response failure </td><td>  -  </td></tr>
     </table>
     */
    public CustomIndicatorFeedsUpdateFeedResponse customIndicatorFeedsUpdateIndicatorFeedData(String accountId, Integer feedId, String source) throws ApiException {
        ApiResponse<CustomIndicatorFeedsUpdateFeedResponse> localVarResp = customIndicatorFeedsUpdateIndicatorFeedDataWithHttpInfo(accountId, feedId, source);
        return localVarResp.getData();
    }

    /**
     * Update indicator feed data
     * 
     * @param accountId  (required)
     * @param feedId  (required)
     * @param source The file to upload (optional)
     * @return ApiResponse&lt;CustomIndicatorFeedsUpdateFeedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get indicator feed metadata </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get indicator feeds response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomIndicatorFeedsUpdateFeedResponse> customIndicatorFeedsUpdateIndicatorFeedDataWithHttpInfo(String accountId, Integer feedId, String source) throws ApiException {
        okhttp3.Call localVarCall = customIndicatorFeedsUpdateIndicatorFeedDataValidateBeforeCall(accountId, feedId, source, null);
        Type localVarReturnType = new TypeToken<CustomIndicatorFeedsUpdateFeedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update indicator feed data (asynchronously)
     * 
     * @param accountId  (required)
     * @param feedId  (required)
     * @param source The file to upload (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get indicator feed metadata </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get indicator feeds response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customIndicatorFeedsUpdateIndicatorFeedDataAsync(String accountId, Integer feedId, String source, final ApiCallback<CustomIndicatorFeedsUpdateFeedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = customIndicatorFeedsUpdateIndicatorFeedDataValidateBeforeCall(accountId, feedId, source, _callback);
        Type localVarReturnType = new TypeToken<CustomIndicatorFeedsUpdateFeedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customIndicatorFeedsViewPermissions
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get indicator feed metadata </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get indicator feeds response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customIndicatorFeedsViewPermissionsCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/intel/indicator-feeds/permissions/view"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customIndicatorFeedsViewPermissionsValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling customIndicatorFeedsViewPermissions(Async)");
        }

        return customIndicatorFeedsViewPermissionsCall(accountId, _callback);

    }

    /**
     * List indicator feed permissions
     * 
     * @param accountId  (required)
     * @return CustomIndicatorFeedsPermissionListItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get indicator feed metadata </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get indicator feeds response failure </td><td>  -  </td></tr>
     </table>
     */
    public CustomIndicatorFeedsPermissionListItemResponse customIndicatorFeedsViewPermissions(String accountId) throws ApiException {
        ApiResponse<CustomIndicatorFeedsPermissionListItemResponse> localVarResp = customIndicatorFeedsViewPermissionsWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * List indicator feed permissions
     * 
     * @param accountId  (required)
     * @return ApiResponse&lt;CustomIndicatorFeedsPermissionListItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get indicator feed metadata </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get indicator feeds response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomIndicatorFeedsPermissionListItemResponse> customIndicatorFeedsViewPermissionsWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = customIndicatorFeedsViewPermissionsValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<CustomIndicatorFeedsPermissionListItemResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List indicator feed permissions (asynchronously)
     * 
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get indicator feed metadata </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get indicator feeds response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customIndicatorFeedsViewPermissionsAsync(String accountId, final ApiCallback<CustomIndicatorFeedsPermissionListItemResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = customIndicatorFeedsViewPermissionsValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<CustomIndicatorFeedsPermissionListItemResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
