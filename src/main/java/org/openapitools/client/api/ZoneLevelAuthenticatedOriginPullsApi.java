/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CustomSslForAZoneCreateSslConfiguration4XXResponse;
import org.openapitools.client.model.TlsCertificatesAndHostnamesCertificateResponseSingle;
import org.openapitools.client.model.TlsCertificatesAndHostnamesComponentsSchemasCertificateResponseCollection;
import org.openapitools.client.model.TlsCertificatesAndHostnamesEnabledResponse;
import org.openapitools.client.model.ZoneLevelAuthenticatedOriginPullsGetEnablementSettingForZone4XXResponse;
import org.openapitools.client.model.ZoneLevelAuthenticatedOriginPullsListCertificates4XXResponse;
import org.openapitools.client.model.ZoneLevelAuthenticatedOriginPullsSetEnablementForZoneRequest;
import org.openapitools.client.model.ZoneLevelAuthenticatedOriginPullsUploadCertificateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ZoneLevelAuthenticatedOriginPullsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ZoneLevelAuthenticatedOriginPullsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ZoneLevelAuthenticatedOriginPullsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for zoneLevelAuthenticatedOriginPullsDeleteCertificate
     * @param certificateId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAuthenticatedOriginPullsDeleteCertificateCall(String certificateId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/origin_tls_client_auth/{certificate_id}"
            .replace("{" + "certificate_id" + "}", localVarApiClient.escapeString(certificateId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLevelAuthenticatedOriginPullsDeleteCertificateValidateBeforeCall(String certificateId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'certificateId' is set
        if (certificateId == null) {
            throw new ApiException("Missing the required parameter 'certificateId' when calling zoneLevelAuthenticatedOriginPullsDeleteCertificate(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneLevelAuthenticatedOriginPullsDeleteCertificate(Async)");
        }

        return zoneLevelAuthenticatedOriginPullsDeleteCertificateCall(certificateId, zoneId, _callback);

    }

    /**
     * Delete Certificate
     * 
     * @param certificateId  (required)
     * @param zoneId  (required)
     * @return TlsCertificatesAndHostnamesCertificateResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesCertificateResponseSingle zoneLevelAuthenticatedOriginPullsDeleteCertificate(String certificateId, String zoneId) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesCertificateResponseSingle> localVarResp = zoneLevelAuthenticatedOriginPullsDeleteCertificateWithHttpInfo(certificateId, zoneId);
        return localVarResp.getData();
    }

    /**
     * Delete Certificate
     * 
     * @param certificateId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesCertificateResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesCertificateResponseSingle> zoneLevelAuthenticatedOriginPullsDeleteCertificateWithHttpInfo(String certificateId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneLevelAuthenticatedOriginPullsDeleteCertificateValidateBeforeCall(certificateId, zoneId, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesCertificateResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Certificate (asynchronously)
     * 
     * @param certificateId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAuthenticatedOriginPullsDeleteCertificateAsync(String certificateId, String zoneId, final ApiCallback<TlsCertificatesAndHostnamesCertificateResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLevelAuthenticatedOriginPullsDeleteCertificateValidateBeforeCall(certificateId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesCertificateResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneLevelAuthenticatedOriginPullsGetCertificateDetails
     * @param certificateId  (required)
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Certificate Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Certificate Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAuthenticatedOriginPullsGetCertificateDetailsCall(String certificateId, String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/origin_tls_client_auth/{certificate_id}"
            .replace("{" + "certificate_id" + "}", localVarApiClient.escapeString(certificateId.toString()))
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLevelAuthenticatedOriginPullsGetCertificateDetailsValidateBeforeCall(String certificateId, String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'certificateId' is set
        if (certificateId == null) {
            throw new ApiException("Missing the required parameter 'certificateId' when calling zoneLevelAuthenticatedOriginPullsGetCertificateDetails(Async)");
        }

        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneLevelAuthenticatedOriginPullsGetCertificateDetails(Async)");
        }

        return zoneLevelAuthenticatedOriginPullsGetCertificateDetailsCall(certificateId, zoneId, _callback);

    }

    /**
     * Get Certificate Details
     * 
     * @param certificateId  (required)
     * @param zoneId  (required)
     * @return TlsCertificatesAndHostnamesCertificateResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Certificate Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Certificate Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesCertificateResponseSingle zoneLevelAuthenticatedOriginPullsGetCertificateDetails(String certificateId, String zoneId) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesCertificateResponseSingle> localVarResp = zoneLevelAuthenticatedOriginPullsGetCertificateDetailsWithHttpInfo(certificateId, zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Certificate Details
     * 
     * @param certificateId  (required)
     * @param zoneId  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesCertificateResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Certificate Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Certificate Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesCertificateResponseSingle> zoneLevelAuthenticatedOriginPullsGetCertificateDetailsWithHttpInfo(String certificateId, String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneLevelAuthenticatedOriginPullsGetCertificateDetailsValidateBeforeCall(certificateId, zoneId, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesCertificateResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Certificate Details (asynchronously)
     * 
     * @param certificateId  (required)
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Certificate Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Certificate Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAuthenticatedOriginPullsGetCertificateDetailsAsync(String certificateId, String zoneId, final ApiCallback<TlsCertificatesAndHostnamesCertificateResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLevelAuthenticatedOriginPullsGetCertificateDetailsValidateBeforeCall(certificateId, zoneId, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesCertificateResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneLevelAuthenticatedOriginPullsGetEnablementSettingForZone
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Enablement Setting for Zone response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Enablement Setting for Zone response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAuthenticatedOriginPullsGetEnablementSettingForZoneCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/origin_tls_client_auth/settings"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLevelAuthenticatedOriginPullsGetEnablementSettingForZoneValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneLevelAuthenticatedOriginPullsGetEnablementSettingForZone(Async)");
        }

        return zoneLevelAuthenticatedOriginPullsGetEnablementSettingForZoneCall(zoneId, _callback);

    }

    /**
     * Get Enablement Setting for Zone
     * Get whether zone-level authenticated origin pulls is enabled or not. It is false by default.
     * @param zoneId  (required)
     * @return TlsCertificatesAndHostnamesEnabledResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Enablement Setting for Zone response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Enablement Setting for Zone response failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesEnabledResponse zoneLevelAuthenticatedOriginPullsGetEnablementSettingForZone(String zoneId) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesEnabledResponse> localVarResp = zoneLevelAuthenticatedOriginPullsGetEnablementSettingForZoneWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Get Enablement Setting for Zone
     * Get whether zone-level authenticated origin pulls is enabled or not. It is false by default.
     * @param zoneId  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesEnabledResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Enablement Setting for Zone response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Enablement Setting for Zone response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesEnabledResponse> zoneLevelAuthenticatedOriginPullsGetEnablementSettingForZoneWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneLevelAuthenticatedOriginPullsGetEnablementSettingForZoneValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesEnabledResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Enablement Setting for Zone (asynchronously)
     * Get whether zone-level authenticated origin pulls is enabled or not. It is false by default.
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get Enablement Setting for Zone response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get Enablement Setting for Zone response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAuthenticatedOriginPullsGetEnablementSettingForZoneAsync(String zoneId, final ApiCallback<TlsCertificatesAndHostnamesEnabledResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLevelAuthenticatedOriginPullsGetEnablementSettingForZoneValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesEnabledResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneLevelAuthenticatedOriginPullsListCertificates
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Certificates response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Certificates response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAuthenticatedOriginPullsListCertificatesCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/origin_tls_client_auth"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLevelAuthenticatedOriginPullsListCertificatesValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneLevelAuthenticatedOriginPullsListCertificates(Async)");
        }

        return zoneLevelAuthenticatedOriginPullsListCertificatesCall(zoneId, _callback);

    }

    /**
     * List Certificates
     * 
     * @param zoneId  (required)
     * @return TlsCertificatesAndHostnamesComponentsSchemasCertificateResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Certificates response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Certificates response failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesComponentsSchemasCertificateResponseCollection zoneLevelAuthenticatedOriginPullsListCertificates(String zoneId) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesComponentsSchemasCertificateResponseCollection> localVarResp = zoneLevelAuthenticatedOriginPullsListCertificatesWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * List Certificates
     * 
     * @param zoneId  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesComponentsSchemasCertificateResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Certificates response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Certificates response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesComponentsSchemasCertificateResponseCollection> zoneLevelAuthenticatedOriginPullsListCertificatesWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = zoneLevelAuthenticatedOriginPullsListCertificatesValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesComponentsSchemasCertificateResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Certificates (asynchronously)
     * 
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Certificates response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Certificates response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAuthenticatedOriginPullsListCertificatesAsync(String zoneId, final ApiCallback<TlsCertificatesAndHostnamesComponentsSchemasCertificateResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLevelAuthenticatedOriginPullsListCertificatesValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesComponentsSchemasCertificateResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneLevelAuthenticatedOriginPullsSetEnablementForZone
     * @param zoneId  (required)
     * @param zoneLevelAuthenticatedOriginPullsSetEnablementForZoneRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set Enablement for Zone response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Set Enablement for Zone response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAuthenticatedOriginPullsSetEnablementForZoneCall(String zoneId, ZoneLevelAuthenticatedOriginPullsSetEnablementForZoneRequest zoneLevelAuthenticatedOriginPullsSetEnablementForZoneRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneLevelAuthenticatedOriginPullsSetEnablementForZoneRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/origin_tls_client_auth/settings"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLevelAuthenticatedOriginPullsSetEnablementForZoneValidateBeforeCall(String zoneId, ZoneLevelAuthenticatedOriginPullsSetEnablementForZoneRequest zoneLevelAuthenticatedOriginPullsSetEnablementForZoneRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneLevelAuthenticatedOriginPullsSetEnablementForZone(Async)");
        }

        // verify the required parameter 'zoneLevelAuthenticatedOriginPullsSetEnablementForZoneRequest' is set
        if (zoneLevelAuthenticatedOriginPullsSetEnablementForZoneRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneLevelAuthenticatedOriginPullsSetEnablementForZoneRequest' when calling zoneLevelAuthenticatedOriginPullsSetEnablementForZone(Async)");
        }

        return zoneLevelAuthenticatedOriginPullsSetEnablementForZoneCall(zoneId, zoneLevelAuthenticatedOriginPullsSetEnablementForZoneRequest, _callback);

    }

    /**
     * Set Enablement for Zone
     * Enable or disable zone-level authenticated origin pulls. &#39;enabled&#39; should be set true either before/after the certificate is uploaded to see the certificate in use.
     * @param zoneId  (required)
     * @param zoneLevelAuthenticatedOriginPullsSetEnablementForZoneRequest  (required)
     * @return TlsCertificatesAndHostnamesEnabledResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set Enablement for Zone response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Set Enablement for Zone response failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesEnabledResponse zoneLevelAuthenticatedOriginPullsSetEnablementForZone(String zoneId, ZoneLevelAuthenticatedOriginPullsSetEnablementForZoneRequest zoneLevelAuthenticatedOriginPullsSetEnablementForZoneRequest) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesEnabledResponse> localVarResp = zoneLevelAuthenticatedOriginPullsSetEnablementForZoneWithHttpInfo(zoneId, zoneLevelAuthenticatedOriginPullsSetEnablementForZoneRequest);
        return localVarResp.getData();
    }

    /**
     * Set Enablement for Zone
     * Enable or disable zone-level authenticated origin pulls. &#39;enabled&#39; should be set true either before/after the certificate is uploaded to see the certificate in use.
     * @param zoneId  (required)
     * @param zoneLevelAuthenticatedOriginPullsSetEnablementForZoneRequest  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesEnabledResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set Enablement for Zone response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Set Enablement for Zone response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesEnabledResponse> zoneLevelAuthenticatedOriginPullsSetEnablementForZoneWithHttpInfo(String zoneId, ZoneLevelAuthenticatedOriginPullsSetEnablementForZoneRequest zoneLevelAuthenticatedOriginPullsSetEnablementForZoneRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneLevelAuthenticatedOriginPullsSetEnablementForZoneValidateBeforeCall(zoneId, zoneLevelAuthenticatedOriginPullsSetEnablementForZoneRequest, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesEnabledResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set Enablement for Zone (asynchronously)
     * Enable or disable zone-level authenticated origin pulls. &#39;enabled&#39; should be set true either before/after the certificate is uploaded to see the certificate in use.
     * @param zoneId  (required)
     * @param zoneLevelAuthenticatedOriginPullsSetEnablementForZoneRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Set Enablement for Zone response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Set Enablement for Zone response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAuthenticatedOriginPullsSetEnablementForZoneAsync(String zoneId, ZoneLevelAuthenticatedOriginPullsSetEnablementForZoneRequest zoneLevelAuthenticatedOriginPullsSetEnablementForZoneRequest, final ApiCallback<TlsCertificatesAndHostnamesEnabledResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLevelAuthenticatedOriginPullsSetEnablementForZoneValidateBeforeCall(zoneId, zoneLevelAuthenticatedOriginPullsSetEnablementForZoneRequest, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesEnabledResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zoneLevelAuthenticatedOriginPullsUploadCertificate
     * @param zoneId  (required)
     * @param zoneLevelAuthenticatedOriginPullsUploadCertificateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload Certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload Certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAuthenticatedOriginPullsUploadCertificateCall(String zoneId, ZoneLevelAuthenticatedOriginPullsUploadCertificateRequest zoneLevelAuthenticatedOriginPullsUploadCertificateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = zoneLevelAuthenticatedOriginPullsUploadCertificateRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/origin_tls_client_auth"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zoneLevelAuthenticatedOriginPullsUploadCertificateValidateBeforeCall(String zoneId, ZoneLevelAuthenticatedOriginPullsUploadCertificateRequest zoneLevelAuthenticatedOriginPullsUploadCertificateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling zoneLevelAuthenticatedOriginPullsUploadCertificate(Async)");
        }

        // verify the required parameter 'zoneLevelAuthenticatedOriginPullsUploadCertificateRequest' is set
        if (zoneLevelAuthenticatedOriginPullsUploadCertificateRequest == null) {
            throw new ApiException("Missing the required parameter 'zoneLevelAuthenticatedOriginPullsUploadCertificateRequest' when calling zoneLevelAuthenticatedOriginPullsUploadCertificate(Async)");
        }

        return zoneLevelAuthenticatedOriginPullsUploadCertificateCall(zoneId, zoneLevelAuthenticatedOriginPullsUploadCertificateRequest, _callback);

    }

    /**
     * Upload Certificate
     * Upload your own certificate you want Cloudflare to use for edge-to-origin communication to override the shared certificate. Please note that it is important to keep only one certificate active. Also, make sure to enable zone-level authenticated origin pulls by making a PUT call to settings endpoint to see the uploaded certificate in use.
     * @param zoneId  (required)
     * @param zoneLevelAuthenticatedOriginPullsUploadCertificateRequest  (required)
     * @return TlsCertificatesAndHostnamesCertificateResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload Certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload Certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesCertificateResponseSingle zoneLevelAuthenticatedOriginPullsUploadCertificate(String zoneId, ZoneLevelAuthenticatedOriginPullsUploadCertificateRequest zoneLevelAuthenticatedOriginPullsUploadCertificateRequest) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesCertificateResponseSingle> localVarResp = zoneLevelAuthenticatedOriginPullsUploadCertificateWithHttpInfo(zoneId, zoneLevelAuthenticatedOriginPullsUploadCertificateRequest);
        return localVarResp.getData();
    }

    /**
     * Upload Certificate
     * Upload your own certificate you want Cloudflare to use for edge-to-origin communication to override the shared certificate. Please note that it is important to keep only one certificate active. Also, make sure to enable zone-level authenticated origin pulls by making a PUT call to settings endpoint to see the uploaded certificate in use.
     * @param zoneId  (required)
     * @param zoneLevelAuthenticatedOriginPullsUploadCertificateRequest  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesCertificateResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload Certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload Certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesCertificateResponseSingle> zoneLevelAuthenticatedOriginPullsUploadCertificateWithHttpInfo(String zoneId, ZoneLevelAuthenticatedOriginPullsUploadCertificateRequest zoneLevelAuthenticatedOriginPullsUploadCertificateRequest) throws ApiException {
        okhttp3.Call localVarCall = zoneLevelAuthenticatedOriginPullsUploadCertificateValidateBeforeCall(zoneId, zoneLevelAuthenticatedOriginPullsUploadCertificateRequest, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesCertificateResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload Certificate (asynchronously)
     * Upload your own certificate you want Cloudflare to use for edge-to-origin communication to override the shared certificate. Please note that it is important to keep only one certificate active. Also, make sure to enable zone-level authenticated origin pulls by making a PUT call to settings endpoint to see the uploaded certificate in use.
     * @param zoneId  (required)
     * @param zoneLevelAuthenticatedOriginPullsUploadCertificateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload Certificate response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Upload Certificate response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zoneLevelAuthenticatedOriginPullsUploadCertificateAsync(String zoneId, ZoneLevelAuthenticatedOriginPullsUploadCertificateRequest zoneLevelAuthenticatedOriginPullsUploadCertificateRequest, final ApiCallback<TlsCertificatesAndHostnamesCertificateResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = zoneLevelAuthenticatedOriginPullsUploadCertificateValidateBeforeCall(zoneId, zoneLevelAuthenticatedOriginPullsUploadCertificateRequest, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesCertificateResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
