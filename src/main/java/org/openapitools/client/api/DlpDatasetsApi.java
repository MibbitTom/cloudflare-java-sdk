/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DlpDatasetArrayResponse;
import org.openapitools.client.model.DlpDatasetCreationResponse;
import org.openapitools.client.model.DlpDatasetNewVersionResponse;
import org.openapitools.client.model.DlpDatasetResponse;
import org.openapitools.client.model.DlpDatasetUpdate;
import org.openapitools.client.model.DlpNewDataset;
import org.openapitools.client.model.DlpV4ResponseError;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DlpDatasetsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DlpDatasetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DlpDatasetsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for dlpDatasetsCreate
     * @param accountId  (required)
     * @param dlpNewDataset Dataset description (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset created successfully </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Dataset creation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpDatasetsCreateCall(String accountId, DlpNewDataset dlpNewDataset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dlpNewDataset;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/dlp/datasets"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dlpDatasetsCreateValidateBeforeCall(String accountId, DlpNewDataset dlpNewDataset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling dlpDatasetsCreate(Async)");
        }

        // verify the required parameter 'dlpNewDataset' is set
        if (dlpNewDataset == null) {
            throw new ApiException("Missing the required parameter 'dlpNewDataset' when calling dlpDatasetsCreate(Async)");
        }

        return dlpDatasetsCreateCall(accountId, dlpNewDataset, _callback);

    }

    /**
     * Create a new dataset.
     * Create a new dataset.
     * @param accountId  (required)
     * @param dlpNewDataset Dataset description (required)
     * @return DlpDatasetCreationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset created successfully </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Dataset creation failed </td><td>  -  </td></tr>
     </table>
     */
    public DlpDatasetCreationResponse dlpDatasetsCreate(String accountId, DlpNewDataset dlpNewDataset) throws ApiException {
        ApiResponse<DlpDatasetCreationResponse> localVarResp = dlpDatasetsCreateWithHttpInfo(accountId, dlpNewDataset);
        return localVarResp.getData();
    }

    /**
     * Create a new dataset.
     * Create a new dataset.
     * @param accountId  (required)
     * @param dlpNewDataset Dataset description (required)
     * @return ApiResponse&lt;DlpDatasetCreationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset created successfully </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Dataset creation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DlpDatasetCreationResponse> dlpDatasetsCreateWithHttpInfo(String accountId, DlpNewDataset dlpNewDataset) throws ApiException {
        okhttp3.Call localVarCall = dlpDatasetsCreateValidateBeforeCall(accountId, dlpNewDataset, null);
        Type localVarReturnType = new TypeToken<DlpDatasetCreationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new dataset. (asynchronously)
     * Create a new dataset.
     * @param accountId  (required)
     * @param dlpNewDataset Dataset description (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset created successfully </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Dataset creation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpDatasetsCreateAsync(String accountId, DlpNewDataset dlpNewDataset, final ApiCallback<DlpDatasetCreationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dlpDatasetsCreateValidateBeforeCall(accountId, dlpNewDataset, _callback);
        Type localVarReturnType = new TypeToken<DlpDatasetCreationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dlpDatasetsCreateVersion
     * @param accountId  (required)
     * @param datasetId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset version created successfully </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Dataset version creation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpDatasetsCreateVersionCall(String accountId, UUID datasetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/dlp/datasets/{dataset_id}/upload"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "dataset_id" + "}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dlpDatasetsCreateVersionValidateBeforeCall(String accountId, UUID datasetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling dlpDatasetsCreateVersion(Async)");
        }

        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling dlpDatasetsCreateVersion(Async)");
        }

        return dlpDatasetsCreateVersionCall(accountId, datasetId, _callback);

    }

    /**
     * Prepare to upload a new version of a dataset.
     * Prepare to upload a new version of a dataset.
     * @param accountId  (required)
     * @param datasetId  (required)
     * @return DlpDatasetNewVersionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset version created successfully </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Dataset version creation failed </td><td>  -  </td></tr>
     </table>
     */
    public DlpDatasetNewVersionResponse dlpDatasetsCreateVersion(String accountId, UUID datasetId) throws ApiException {
        ApiResponse<DlpDatasetNewVersionResponse> localVarResp = dlpDatasetsCreateVersionWithHttpInfo(accountId, datasetId);
        return localVarResp.getData();
    }

    /**
     * Prepare to upload a new version of a dataset.
     * Prepare to upload a new version of a dataset.
     * @param accountId  (required)
     * @param datasetId  (required)
     * @return ApiResponse&lt;DlpDatasetNewVersionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset version created successfully </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Dataset version creation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DlpDatasetNewVersionResponse> dlpDatasetsCreateVersionWithHttpInfo(String accountId, UUID datasetId) throws ApiException {
        okhttp3.Call localVarCall = dlpDatasetsCreateVersionValidateBeforeCall(accountId, datasetId, null);
        Type localVarReturnType = new TypeToken<DlpDatasetNewVersionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Prepare to upload a new version of a dataset. (asynchronously)
     * Prepare to upload a new version of a dataset.
     * @param accountId  (required)
     * @param datasetId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset version created successfully </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Dataset version creation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpDatasetsCreateVersionAsync(String accountId, UUID datasetId, final ApiCallback<DlpDatasetNewVersionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dlpDatasetsCreateVersionValidateBeforeCall(accountId, datasetId, _callback);
        Type localVarReturnType = new TypeToken<DlpDatasetNewVersionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dlpDatasetsDelete
     * @param accountId  (required)
     * @param datasetId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset deleted successfully </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Dataset delete failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpDatasetsDeleteCall(String accountId, UUID datasetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/dlp/datasets/{dataset_id}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "dataset_id" + "}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dlpDatasetsDeleteValidateBeforeCall(String accountId, UUID datasetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling dlpDatasetsDelete(Async)");
        }

        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling dlpDatasetsDelete(Async)");
        }

        return dlpDatasetsDeleteCall(accountId, datasetId, _callback);

    }

    /**
     * Delete a dataset.
     * Delete a dataset.  This deletes all versions of the dataset.
     * @param accountId  (required)
     * @param datasetId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset deleted successfully </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Dataset delete failed </td><td>  -  </td></tr>
     </table>
     */
    public void dlpDatasetsDelete(String accountId, UUID datasetId) throws ApiException {
        dlpDatasetsDeleteWithHttpInfo(accountId, datasetId);
    }

    /**
     * Delete a dataset.
     * Delete a dataset.  This deletes all versions of the dataset.
     * @param accountId  (required)
     * @param datasetId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset deleted successfully </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Dataset delete failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dlpDatasetsDeleteWithHttpInfo(String accountId, UUID datasetId) throws ApiException {
        okhttp3.Call localVarCall = dlpDatasetsDeleteValidateBeforeCall(accountId, datasetId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a dataset. (asynchronously)
     * Delete a dataset.  This deletes all versions of the dataset.
     * @param accountId  (required)
     * @param datasetId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset deleted successfully </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Dataset delete failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpDatasetsDeleteAsync(String accountId, UUID datasetId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dlpDatasetsDeleteValidateBeforeCall(accountId, datasetId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dlpDatasetsRead
     * @param accountId  (required)
     * @param datasetId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset read successfully </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Dataset read failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpDatasetsReadCall(String accountId, UUID datasetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/dlp/datasets/{dataset_id}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "dataset_id" + "}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dlpDatasetsReadValidateBeforeCall(String accountId, UUID datasetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling dlpDatasetsRead(Async)");
        }

        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling dlpDatasetsRead(Async)");
        }

        return dlpDatasetsReadCall(accountId, datasetId, _callback);

    }

    /**
     * Fetch a specific dataset with information about available versions.
     * Fetch a specific dataset with information about available versions.
     * @param accountId  (required)
     * @param datasetId  (required)
     * @return DlpDatasetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset read successfully </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Dataset read failed </td><td>  -  </td></tr>
     </table>
     */
    public DlpDatasetResponse dlpDatasetsRead(String accountId, UUID datasetId) throws ApiException {
        ApiResponse<DlpDatasetResponse> localVarResp = dlpDatasetsReadWithHttpInfo(accountId, datasetId);
        return localVarResp.getData();
    }

    /**
     * Fetch a specific dataset with information about available versions.
     * Fetch a specific dataset with information about available versions.
     * @param accountId  (required)
     * @param datasetId  (required)
     * @return ApiResponse&lt;DlpDatasetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset read successfully </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Dataset read failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DlpDatasetResponse> dlpDatasetsReadWithHttpInfo(String accountId, UUID datasetId) throws ApiException {
        okhttp3.Call localVarCall = dlpDatasetsReadValidateBeforeCall(accountId, datasetId, null);
        Type localVarReturnType = new TypeToken<DlpDatasetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a specific dataset with information about available versions. (asynchronously)
     * Fetch a specific dataset with information about available versions.
     * @param accountId  (required)
     * @param datasetId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset read successfully </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Dataset read failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpDatasetsReadAsync(String accountId, UUID datasetId, final ApiCallback<DlpDatasetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dlpDatasetsReadValidateBeforeCall(accountId, datasetId, _callback);
        Type localVarReturnType = new TypeToken<DlpDatasetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dlpDatasetsReadAll
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Datasets read successfully </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Datasets read failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpDatasetsReadAllCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/dlp/datasets"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dlpDatasetsReadAllValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling dlpDatasetsReadAll(Async)");
        }

        return dlpDatasetsReadAllCall(accountId, _callback);

    }

    /**
     * Fetch all datasets with information about available versions.
     * Fetch all datasets with information about available versions.
     * @param accountId  (required)
     * @return DlpDatasetArrayResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Datasets read successfully </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Datasets read failed </td><td>  -  </td></tr>
     </table>
     */
    public DlpDatasetArrayResponse dlpDatasetsReadAll(String accountId) throws ApiException {
        ApiResponse<DlpDatasetArrayResponse> localVarResp = dlpDatasetsReadAllWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Fetch all datasets with information about available versions.
     * Fetch all datasets with information about available versions.
     * @param accountId  (required)
     * @return ApiResponse&lt;DlpDatasetArrayResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Datasets read successfully </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Datasets read failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DlpDatasetArrayResponse> dlpDatasetsReadAllWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = dlpDatasetsReadAllValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<DlpDatasetArrayResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch all datasets with information about available versions. (asynchronously)
     * Fetch all datasets with information about available versions.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Datasets read successfully </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Datasets read failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpDatasetsReadAllAsync(String accountId, final ApiCallback<DlpDatasetArrayResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dlpDatasetsReadAllValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<DlpDatasetArrayResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dlpDatasetsUpdate
     * @param accountId  (required)
     * @param datasetId  (required)
     * @param dlpDatasetUpdate Dataset description (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset updated successfully </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Dataset update failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpDatasetsUpdateCall(String accountId, UUID datasetId, DlpDatasetUpdate dlpDatasetUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dlpDatasetUpdate;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/dlp/datasets/{dataset_id}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "dataset_id" + "}", localVarApiClient.escapeString(datasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dlpDatasetsUpdateValidateBeforeCall(String accountId, UUID datasetId, DlpDatasetUpdate dlpDatasetUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling dlpDatasetsUpdate(Async)");
        }

        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling dlpDatasetsUpdate(Async)");
        }

        // verify the required parameter 'dlpDatasetUpdate' is set
        if (dlpDatasetUpdate == null) {
            throw new ApiException("Missing the required parameter 'dlpDatasetUpdate' when calling dlpDatasetsUpdate(Async)");
        }

        return dlpDatasetsUpdateCall(accountId, datasetId, dlpDatasetUpdate, _callback);

    }

    /**
     * Update details about a dataset.
     * Update details about a dataset.
     * @param accountId  (required)
     * @param datasetId  (required)
     * @param dlpDatasetUpdate Dataset description (required)
     * @return DlpDatasetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset updated successfully </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Dataset update failed </td><td>  -  </td></tr>
     </table>
     */
    public DlpDatasetResponse dlpDatasetsUpdate(String accountId, UUID datasetId, DlpDatasetUpdate dlpDatasetUpdate) throws ApiException {
        ApiResponse<DlpDatasetResponse> localVarResp = dlpDatasetsUpdateWithHttpInfo(accountId, datasetId, dlpDatasetUpdate);
        return localVarResp.getData();
    }

    /**
     * Update details about a dataset.
     * Update details about a dataset.
     * @param accountId  (required)
     * @param datasetId  (required)
     * @param dlpDatasetUpdate Dataset description (required)
     * @return ApiResponse&lt;DlpDatasetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset updated successfully </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Dataset update failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DlpDatasetResponse> dlpDatasetsUpdateWithHttpInfo(String accountId, UUID datasetId, DlpDatasetUpdate dlpDatasetUpdate) throws ApiException {
        okhttp3.Call localVarCall = dlpDatasetsUpdateValidateBeforeCall(accountId, datasetId, dlpDatasetUpdate, null);
        Type localVarReturnType = new TypeToken<DlpDatasetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update details about a dataset. (asynchronously)
     * Update details about a dataset.
     * @param accountId  (required)
     * @param datasetId  (required)
     * @param dlpDatasetUpdate Dataset description (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset updated successfully </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Dataset update failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpDatasetsUpdateAsync(String accountId, UUID datasetId, DlpDatasetUpdate dlpDatasetUpdate, final ApiCallback<DlpDatasetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dlpDatasetsUpdateValidateBeforeCall(accountId, datasetId, dlpDatasetUpdate, _callback);
        Type localVarReturnType = new TypeToken<DlpDatasetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dlpDatasetsUploadVersion
     * @param accountId  (required)
     * @param datasetId  (required)
     * @param version  (required)
     * @param body Dataset. For custom wordlists this contains UTF-8 patterns separated by newline characters. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset version uploaded successfully </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Dataset version upload failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpDatasetsUploadVersionCall(String accountId, UUID datasetId, Long version, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/dlp/datasets/{dataset_id}/upload/{version}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "dataset_id" + "}", localVarApiClient.escapeString(datasetId.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dlpDatasetsUploadVersionValidateBeforeCall(String accountId, UUID datasetId, Long version, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling dlpDatasetsUploadVersion(Async)");
        }

        // verify the required parameter 'datasetId' is set
        if (datasetId == null) {
            throw new ApiException("Missing the required parameter 'datasetId' when calling dlpDatasetsUploadVersion(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling dlpDatasetsUploadVersion(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling dlpDatasetsUploadVersion(Async)");
        }

        return dlpDatasetsUploadVersionCall(accountId, datasetId, version, body, _callback);

    }

    /**
     * Upload a new version of a dataset.
     * Upload a new version of a dataset.
     * @param accountId  (required)
     * @param datasetId  (required)
     * @param version  (required)
     * @param body Dataset. For custom wordlists this contains UTF-8 patterns separated by newline characters. (required)
     * @return DlpDatasetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset version uploaded successfully </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Dataset version upload failed </td><td>  -  </td></tr>
     </table>
     */
    public DlpDatasetResponse dlpDatasetsUploadVersion(String accountId, UUID datasetId, Long version, String body) throws ApiException {
        ApiResponse<DlpDatasetResponse> localVarResp = dlpDatasetsUploadVersionWithHttpInfo(accountId, datasetId, version, body);
        return localVarResp.getData();
    }

    /**
     * Upload a new version of a dataset.
     * Upload a new version of a dataset.
     * @param accountId  (required)
     * @param datasetId  (required)
     * @param version  (required)
     * @param body Dataset. For custom wordlists this contains UTF-8 patterns separated by newline characters. (required)
     * @return ApiResponse&lt;DlpDatasetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset version uploaded successfully </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Dataset version upload failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DlpDatasetResponse> dlpDatasetsUploadVersionWithHttpInfo(String accountId, UUID datasetId, Long version, String body) throws ApiException {
        okhttp3.Call localVarCall = dlpDatasetsUploadVersionValidateBeforeCall(accountId, datasetId, version, body, null);
        Type localVarReturnType = new TypeToken<DlpDatasetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload a new version of a dataset. (asynchronously)
     * Upload a new version of a dataset.
     * @param accountId  (required)
     * @param datasetId  (required)
     * @param version  (required)
     * @param body Dataset. For custom wordlists this contains UTF-8 patterns separated by newline characters. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dataset version uploaded successfully </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Dataset version upload failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dlpDatasetsUploadVersionAsync(String accountId, UUID datasetId, Long version, String body, final ApiCallback<DlpDatasetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dlpDatasetsUploadVersionValidateBeforeCall(accountId, datasetId, version, body, _callback);
        Type localVarReturnType = new TypeToken<DlpDatasetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
