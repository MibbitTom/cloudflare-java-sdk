/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.ClientCertificateForAZoneCreateClientCertificate4XXResponse;
import org.openapitools.client.model.ClientCertificateForAZoneCreateClientCertificateRequest;
import org.openapitools.client.model.TlsCertificatesAndHostnamesApiResponseCommonFailure;
import org.openapitools.client.model.TlsCertificatesAndHostnamesClientCertificateResponseCollection;
import org.openapitools.client.model.TlsCertificatesAndHostnamesClientCertificateResponseSingle;
import org.openapitools.client.model.TlsCertificatesAndHostnamesHostnameAssociation;
import org.openapitools.client.model.TlsCertificatesAndHostnamesHostnameAssociationsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApiShieldClientCertificatesForAZoneApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApiShieldClientCertificatesForAZoneApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApiShieldClientCertificatesForAZoneApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for clientCertificateForAZoneClientCertificateDetails
     * @param zoneId  (required)
     * @param clientCertificateId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client Certificate Details Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Certificate Details Response Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientCertificateForAZoneClientCertificateDetailsCall(String zoneId, String clientCertificateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/client_certificates/{client_certificate_id}"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()))
            .replace("{" + "client_certificate_id" + "}", localVarApiClient.escapeString(clientCertificateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientCertificateForAZoneClientCertificateDetailsValidateBeforeCall(String zoneId, String clientCertificateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling clientCertificateForAZoneClientCertificateDetails(Async)");
        }

        // verify the required parameter 'clientCertificateId' is set
        if (clientCertificateId == null) {
            throw new ApiException("Missing the required parameter 'clientCertificateId' when calling clientCertificateForAZoneClientCertificateDetails(Async)");
        }

        return clientCertificateForAZoneClientCertificateDetailsCall(zoneId, clientCertificateId, _callback);

    }

    /**
     * Client Certificate Details
     * Get Details for a single mTLS API Shield Client Certificate
     * @param zoneId  (required)
     * @param clientCertificateId  (required)
     * @return TlsCertificatesAndHostnamesClientCertificateResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client Certificate Details Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Certificate Details Response Failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesClientCertificateResponseSingle clientCertificateForAZoneClientCertificateDetails(String zoneId, String clientCertificateId) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesClientCertificateResponseSingle> localVarResp = clientCertificateForAZoneClientCertificateDetailsWithHttpInfo(zoneId, clientCertificateId);
        return localVarResp.getData();
    }

    /**
     * Client Certificate Details
     * Get Details for a single mTLS API Shield Client Certificate
     * @param zoneId  (required)
     * @param clientCertificateId  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesClientCertificateResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client Certificate Details Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Certificate Details Response Failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesClientCertificateResponseSingle> clientCertificateForAZoneClientCertificateDetailsWithHttpInfo(String zoneId, String clientCertificateId) throws ApiException {
        okhttp3.Call localVarCall = clientCertificateForAZoneClientCertificateDetailsValidateBeforeCall(zoneId, clientCertificateId, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesClientCertificateResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Client Certificate Details (asynchronously)
     * Get Details for a single mTLS API Shield Client Certificate
     * @param zoneId  (required)
     * @param clientCertificateId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Client Certificate Details Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Client Certificate Details Response Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientCertificateForAZoneClientCertificateDetailsAsync(String zoneId, String clientCertificateId, final ApiCallback<TlsCertificatesAndHostnamesClientCertificateResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientCertificateForAZoneClientCertificateDetailsValidateBeforeCall(zoneId, clientCertificateId, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesClientCertificateResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientCertificateForAZoneCreateClientCertificate
     * @param zoneId  (required)
     * @param clientCertificateForAZoneCreateClientCertificateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Client Certificate Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Client Certificate Response Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientCertificateForAZoneCreateClientCertificateCall(String zoneId, ClientCertificateForAZoneCreateClientCertificateRequest clientCertificateForAZoneCreateClientCertificateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = clientCertificateForAZoneCreateClientCertificateRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/client_certificates"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientCertificateForAZoneCreateClientCertificateValidateBeforeCall(String zoneId, ClientCertificateForAZoneCreateClientCertificateRequest clientCertificateForAZoneCreateClientCertificateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling clientCertificateForAZoneCreateClientCertificate(Async)");
        }

        // verify the required parameter 'clientCertificateForAZoneCreateClientCertificateRequest' is set
        if (clientCertificateForAZoneCreateClientCertificateRequest == null) {
            throw new ApiException("Missing the required parameter 'clientCertificateForAZoneCreateClientCertificateRequest' when calling clientCertificateForAZoneCreateClientCertificate(Async)");
        }

        return clientCertificateForAZoneCreateClientCertificateCall(zoneId, clientCertificateForAZoneCreateClientCertificateRequest, _callback);

    }

    /**
     * Create Client Certificate
     * Create a new API Shield mTLS Client Certificate
     * @param zoneId  (required)
     * @param clientCertificateForAZoneCreateClientCertificateRequest  (required)
     * @return TlsCertificatesAndHostnamesClientCertificateResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Client Certificate Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Client Certificate Response Failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesClientCertificateResponseSingle clientCertificateForAZoneCreateClientCertificate(String zoneId, ClientCertificateForAZoneCreateClientCertificateRequest clientCertificateForAZoneCreateClientCertificateRequest) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesClientCertificateResponseSingle> localVarResp = clientCertificateForAZoneCreateClientCertificateWithHttpInfo(zoneId, clientCertificateForAZoneCreateClientCertificateRequest);
        return localVarResp.getData();
    }

    /**
     * Create Client Certificate
     * Create a new API Shield mTLS Client Certificate
     * @param zoneId  (required)
     * @param clientCertificateForAZoneCreateClientCertificateRequest  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesClientCertificateResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Client Certificate Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Client Certificate Response Failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesClientCertificateResponseSingle> clientCertificateForAZoneCreateClientCertificateWithHttpInfo(String zoneId, ClientCertificateForAZoneCreateClientCertificateRequest clientCertificateForAZoneCreateClientCertificateRequest) throws ApiException {
        okhttp3.Call localVarCall = clientCertificateForAZoneCreateClientCertificateValidateBeforeCall(zoneId, clientCertificateForAZoneCreateClientCertificateRequest, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesClientCertificateResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Client Certificate (asynchronously)
     * Create a new API Shield mTLS Client Certificate
     * @param zoneId  (required)
     * @param clientCertificateForAZoneCreateClientCertificateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Client Certificate Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Client Certificate Response Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientCertificateForAZoneCreateClientCertificateAsync(String zoneId, ClientCertificateForAZoneCreateClientCertificateRequest clientCertificateForAZoneCreateClientCertificateRequest, final ApiCallback<TlsCertificatesAndHostnamesClientCertificateResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientCertificateForAZoneCreateClientCertificateValidateBeforeCall(zoneId, clientCertificateForAZoneCreateClientCertificateRequest, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesClientCertificateResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientCertificateForAZoneDeleteClientCertificate
     * @param zoneId  (required)
     * @param clientCertificateId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Revoke Client Certificate Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Revoke Client Certificate Response Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientCertificateForAZoneDeleteClientCertificateCall(String zoneId, String clientCertificateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/client_certificates/{client_certificate_id}"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()))
            .replace("{" + "client_certificate_id" + "}", localVarApiClient.escapeString(clientCertificateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientCertificateForAZoneDeleteClientCertificateValidateBeforeCall(String zoneId, String clientCertificateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling clientCertificateForAZoneDeleteClientCertificate(Async)");
        }

        // verify the required parameter 'clientCertificateId' is set
        if (clientCertificateId == null) {
            throw new ApiException("Missing the required parameter 'clientCertificateId' when calling clientCertificateForAZoneDeleteClientCertificate(Async)");
        }

        return clientCertificateForAZoneDeleteClientCertificateCall(zoneId, clientCertificateId, _callback);

    }

    /**
     * Revoke Client Certificate
     * Set a API Shield mTLS Client Certificate to pending_revocation status for processing to revoked status.
     * @param zoneId  (required)
     * @param clientCertificateId  (required)
     * @return TlsCertificatesAndHostnamesClientCertificateResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Revoke Client Certificate Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Revoke Client Certificate Response Failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesClientCertificateResponseSingle clientCertificateForAZoneDeleteClientCertificate(String zoneId, String clientCertificateId) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesClientCertificateResponseSingle> localVarResp = clientCertificateForAZoneDeleteClientCertificateWithHttpInfo(zoneId, clientCertificateId);
        return localVarResp.getData();
    }

    /**
     * Revoke Client Certificate
     * Set a API Shield mTLS Client Certificate to pending_revocation status for processing to revoked status.
     * @param zoneId  (required)
     * @param clientCertificateId  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesClientCertificateResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Revoke Client Certificate Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Revoke Client Certificate Response Failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesClientCertificateResponseSingle> clientCertificateForAZoneDeleteClientCertificateWithHttpInfo(String zoneId, String clientCertificateId) throws ApiException {
        okhttp3.Call localVarCall = clientCertificateForAZoneDeleteClientCertificateValidateBeforeCall(zoneId, clientCertificateId, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesClientCertificateResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Revoke Client Certificate (asynchronously)
     * Set a API Shield mTLS Client Certificate to pending_revocation status for processing to revoked status.
     * @param zoneId  (required)
     * @param clientCertificateId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Revoke Client Certificate Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Revoke Client Certificate Response Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientCertificateForAZoneDeleteClientCertificateAsync(String zoneId, String clientCertificateId, final ApiCallback<TlsCertificatesAndHostnamesClientCertificateResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientCertificateForAZoneDeleteClientCertificateValidateBeforeCall(zoneId, clientCertificateId, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesClientCertificateResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientCertificateForAZoneEditClientCertificate
     * @param zoneId  (required)
     * @param clientCertificateId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reactivate Client Certificate Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Reactivate Client Certificate Response Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientCertificateForAZoneEditClientCertificateCall(String zoneId, String clientCertificateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/client_certificates/{client_certificate_id}"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()))
            .replace("{" + "client_certificate_id" + "}", localVarApiClient.escapeString(clientCertificateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientCertificateForAZoneEditClientCertificateValidateBeforeCall(String zoneId, String clientCertificateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling clientCertificateForAZoneEditClientCertificate(Async)");
        }

        // verify the required parameter 'clientCertificateId' is set
        if (clientCertificateId == null) {
            throw new ApiException("Missing the required parameter 'clientCertificateId' when calling clientCertificateForAZoneEditClientCertificate(Async)");
        }

        return clientCertificateForAZoneEditClientCertificateCall(zoneId, clientCertificateId, _callback);

    }

    /**
     * Reactivate Client Certificate
     * If a API Shield mTLS Client Certificate is in a pending_revocation state, you may reactivate it with this endpoint.
     * @param zoneId  (required)
     * @param clientCertificateId  (required)
     * @return TlsCertificatesAndHostnamesClientCertificateResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reactivate Client Certificate Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Reactivate Client Certificate Response Failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesClientCertificateResponseSingle clientCertificateForAZoneEditClientCertificate(String zoneId, String clientCertificateId) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesClientCertificateResponseSingle> localVarResp = clientCertificateForAZoneEditClientCertificateWithHttpInfo(zoneId, clientCertificateId);
        return localVarResp.getData();
    }

    /**
     * Reactivate Client Certificate
     * If a API Shield mTLS Client Certificate is in a pending_revocation state, you may reactivate it with this endpoint.
     * @param zoneId  (required)
     * @param clientCertificateId  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesClientCertificateResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reactivate Client Certificate Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Reactivate Client Certificate Response Failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesClientCertificateResponseSingle> clientCertificateForAZoneEditClientCertificateWithHttpInfo(String zoneId, String clientCertificateId) throws ApiException {
        okhttp3.Call localVarCall = clientCertificateForAZoneEditClientCertificateValidateBeforeCall(zoneId, clientCertificateId, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesClientCertificateResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reactivate Client Certificate (asynchronously)
     * If a API Shield mTLS Client Certificate is in a pending_revocation state, you may reactivate it with this endpoint.
     * @param zoneId  (required)
     * @param clientCertificateId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reactivate Client Certificate Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Reactivate Client Certificate Response Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientCertificateForAZoneEditClientCertificateAsync(String zoneId, String clientCertificateId, final ApiCallback<TlsCertificatesAndHostnamesClientCertificateResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientCertificateForAZoneEditClientCertificateValidateBeforeCall(zoneId, clientCertificateId, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesClientCertificateResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientCertificateForAZoneListClientCertificates
     * @param zoneId  (required)
     * @param status  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Client Certificates Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Client Certificates Response Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientCertificateForAZoneListClientCertificatesCall(String zoneId, String status, BigDecimal page, BigDecimal perPage, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/client_certificates"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientCertificateForAZoneListClientCertificatesValidateBeforeCall(String zoneId, String status, BigDecimal page, BigDecimal perPage, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling clientCertificateForAZoneListClientCertificates(Async)");
        }

        return clientCertificateForAZoneListClientCertificatesCall(zoneId, status, page, perPage, limit, offset, _callback);

    }

    /**
     * List Client Certificates
     * List all of your Zone&#39;s API Shield mTLS Client Certificates by Status and/or using Pagination
     * @param zoneId  (required)
     * @param status  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param limit  (optional)
     * @param offset  (optional)
     * @return TlsCertificatesAndHostnamesClientCertificateResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Client Certificates Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Client Certificates Response Failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesClientCertificateResponseCollection clientCertificateForAZoneListClientCertificates(String zoneId, String status, BigDecimal page, BigDecimal perPage, Integer limit, Integer offset) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesClientCertificateResponseCollection> localVarResp = clientCertificateForAZoneListClientCertificatesWithHttpInfo(zoneId, status, page, perPage, limit, offset);
        return localVarResp.getData();
    }

    /**
     * List Client Certificates
     * List all of your Zone&#39;s API Shield mTLS Client Certificates by Status and/or using Pagination
     * @param zoneId  (required)
     * @param status  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param limit  (optional)
     * @param offset  (optional)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesClientCertificateResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Client Certificates Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Client Certificates Response Failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesClientCertificateResponseCollection> clientCertificateForAZoneListClientCertificatesWithHttpInfo(String zoneId, String status, BigDecimal page, BigDecimal perPage, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = clientCertificateForAZoneListClientCertificatesValidateBeforeCall(zoneId, status, page, perPage, limit, offset, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesClientCertificateResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Client Certificates (asynchronously)
     * List all of your Zone&#39;s API Shield mTLS Client Certificates by Status and/or using Pagination
     * @param zoneId  (required)
     * @param status  (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 20)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Client Certificates Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Client Certificates Response Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientCertificateForAZoneListClientCertificatesAsync(String zoneId, String status, BigDecimal page, BigDecimal perPage, Integer limit, Integer offset, final ApiCallback<TlsCertificatesAndHostnamesClientCertificateResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientCertificateForAZoneListClientCertificatesValidateBeforeCall(zoneId, status, page, perPage, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesClientCertificateResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientCertificateForAZoneListHostnameAssociations
     * @param zoneId  (required)
     * @param mtlsCertificateId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Hostname Associations Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Hostname Associations Response Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientCertificateForAZoneListHostnameAssociationsCall(String zoneId, String mtlsCertificateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/certificate_authorities/hostname_associations"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mtlsCertificateId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mtls_certificate_id", mtlsCertificateId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientCertificateForAZoneListHostnameAssociationsValidateBeforeCall(String zoneId, String mtlsCertificateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling clientCertificateForAZoneListHostnameAssociations(Async)");
        }

        return clientCertificateForAZoneListHostnameAssociationsCall(zoneId, mtlsCertificateId, _callback);

    }

    /**
     * List Hostname Associations
     * List Hostname Associations
     * @param zoneId  (required)
     * @param mtlsCertificateId  (optional)
     * @return TlsCertificatesAndHostnamesHostnameAssociationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Hostname Associations Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Hostname Associations Response Failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesHostnameAssociationsResponse clientCertificateForAZoneListHostnameAssociations(String zoneId, String mtlsCertificateId) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesHostnameAssociationsResponse> localVarResp = clientCertificateForAZoneListHostnameAssociationsWithHttpInfo(zoneId, mtlsCertificateId);
        return localVarResp.getData();
    }

    /**
     * List Hostname Associations
     * List Hostname Associations
     * @param zoneId  (required)
     * @param mtlsCertificateId  (optional)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesHostnameAssociationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Hostname Associations Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Hostname Associations Response Failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesHostnameAssociationsResponse> clientCertificateForAZoneListHostnameAssociationsWithHttpInfo(String zoneId, String mtlsCertificateId) throws ApiException {
        okhttp3.Call localVarCall = clientCertificateForAZoneListHostnameAssociationsValidateBeforeCall(zoneId, mtlsCertificateId, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesHostnameAssociationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Hostname Associations (asynchronously)
     * List Hostname Associations
     * @param zoneId  (required)
     * @param mtlsCertificateId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Hostname Associations Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Hostname Associations Response Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientCertificateForAZoneListHostnameAssociationsAsync(String zoneId, String mtlsCertificateId, final ApiCallback<TlsCertificatesAndHostnamesHostnameAssociationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientCertificateForAZoneListHostnameAssociationsValidateBeforeCall(zoneId, mtlsCertificateId, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesHostnameAssociationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientCertificateForAZonePutHostnameAssociations
     * @param zoneId  (required)
     * @param tlsCertificatesAndHostnamesHostnameAssociation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Replace Hostname Associations Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Replace Hostname Associations Response Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientCertificateForAZonePutHostnameAssociationsCall(String zoneId, TlsCertificatesAndHostnamesHostnameAssociation tlsCertificatesAndHostnamesHostnameAssociation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tlsCertificatesAndHostnamesHostnameAssociation;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/certificate_authorities/hostname_associations"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientCertificateForAZonePutHostnameAssociationsValidateBeforeCall(String zoneId, TlsCertificatesAndHostnamesHostnameAssociation tlsCertificatesAndHostnamesHostnameAssociation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling clientCertificateForAZonePutHostnameAssociations(Async)");
        }

        // verify the required parameter 'tlsCertificatesAndHostnamesHostnameAssociation' is set
        if (tlsCertificatesAndHostnamesHostnameAssociation == null) {
            throw new ApiException("Missing the required parameter 'tlsCertificatesAndHostnamesHostnameAssociation' when calling clientCertificateForAZonePutHostnameAssociations(Async)");
        }

        return clientCertificateForAZonePutHostnameAssociationsCall(zoneId, tlsCertificatesAndHostnamesHostnameAssociation, _callback);

    }

    /**
     * Replace Hostname Associations
     * Replace Hostname Associations
     * @param zoneId  (required)
     * @param tlsCertificatesAndHostnamesHostnameAssociation  (required)
     * @return TlsCertificatesAndHostnamesHostnameAssociationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Replace Hostname Associations Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Replace Hostname Associations Response Failure </td><td>  -  </td></tr>
     </table>
     */
    public TlsCertificatesAndHostnamesHostnameAssociationsResponse clientCertificateForAZonePutHostnameAssociations(String zoneId, TlsCertificatesAndHostnamesHostnameAssociation tlsCertificatesAndHostnamesHostnameAssociation) throws ApiException {
        ApiResponse<TlsCertificatesAndHostnamesHostnameAssociationsResponse> localVarResp = clientCertificateForAZonePutHostnameAssociationsWithHttpInfo(zoneId, tlsCertificatesAndHostnamesHostnameAssociation);
        return localVarResp.getData();
    }

    /**
     * Replace Hostname Associations
     * Replace Hostname Associations
     * @param zoneId  (required)
     * @param tlsCertificatesAndHostnamesHostnameAssociation  (required)
     * @return ApiResponse&lt;TlsCertificatesAndHostnamesHostnameAssociationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Replace Hostname Associations Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Replace Hostname Associations Response Failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TlsCertificatesAndHostnamesHostnameAssociationsResponse> clientCertificateForAZonePutHostnameAssociationsWithHttpInfo(String zoneId, TlsCertificatesAndHostnamesHostnameAssociation tlsCertificatesAndHostnamesHostnameAssociation) throws ApiException {
        okhttp3.Call localVarCall = clientCertificateForAZonePutHostnameAssociationsValidateBeforeCall(zoneId, tlsCertificatesAndHostnamesHostnameAssociation, null);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesHostnameAssociationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace Hostname Associations (asynchronously)
     * Replace Hostname Associations
     * @param zoneId  (required)
     * @param tlsCertificatesAndHostnamesHostnameAssociation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Replace Hostname Associations Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Replace Hostname Associations Response Failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientCertificateForAZonePutHostnameAssociationsAsync(String zoneId, TlsCertificatesAndHostnamesHostnameAssociation tlsCertificatesAndHostnamesHostnameAssociation, final ApiCallback<TlsCertificatesAndHostnamesHostnameAssociationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientCertificateForAZonePutHostnameAssociationsValidateBeforeCall(zoneId, tlsCertificatesAndHostnamesHostnameAssociation, _callback);
        Type localVarReturnType = new TypeToken<TlsCertificatesAndHostnamesHostnameAssociationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
