/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DeviceManagedNetworksCreateDeviceManagedNetwork4XXResponse;
import org.openapitools.client.model.DeviceManagedNetworksCreateDeviceManagedNetworkRequest;
import org.openapitools.client.model.DeviceManagedNetworksListDeviceManagedNetworks4XXResponse;
import org.openapitools.client.model.DeviceManagedNetworksUpdateDeviceManagedNetworkRequest;
import org.openapitools.client.model.TeamsDevicesComponentsSchemasResponseCollection;
import org.openapitools.client.model.TeamsDevicesComponentsSchemasSingleResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DeviceManagedNetworksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DeviceManagedNetworksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DeviceManagedNetworksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deviceManagedNetworksCreateDeviceManagedNetwork
     * @param accountId  (required)
     * @param deviceManagedNetworksCreateDeviceManagedNetworkRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a device managed networks response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a device managed networks response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deviceManagedNetworksCreateDeviceManagedNetworkCall(Object accountId, DeviceManagedNetworksCreateDeviceManagedNetworkRequest deviceManagedNetworksCreateDeviceManagedNetworkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceManagedNetworksCreateDeviceManagedNetworkRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/devices/networks"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deviceManagedNetworksCreateDeviceManagedNetworkValidateBeforeCall(Object accountId, DeviceManagedNetworksCreateDeviceManagedNetworkRequest deviceManagedNetworksCreateDeviceManagedNetworkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling deviceManagedNetworksCreateDeviceManagedNetwork(Async)");
        }

        // verify the required parameter 'deviceManagedNetworksCreateDeviceManagedNetworkRequest' is set
        if (deviceManagedNetworksCreateDeviceManagedNetworkRequest == null) {
            throw new ApiException("Missing the required parameter 'deviceManagedNetworksCreateDeviceManagedNetworkRequest' when calling deviceManagedNetworksCreateDeviceManagedNetwork(Async)");
        }

        return deviceManagedNetworksCreateDeviceManagedNetworkCall(accountId, deviceManagedNetworksCreateDeviceManagedNetworkRequest, _callback);

    }

    /**
     * Create a device managed network
     * Creates a new device managed network.
     * @param accountId  (required)
     * @param deviceManagedNetworksCreateDeviceManagedNetworkRequest  (required)
     * @return TeamsDevicesComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a device managed networks response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a device managed networks response failure </td><td>  -  </td></tr>
     </table>
     */
    public TeamsDevicesComponentsSchemasSingleResponse deviceManagedNetworksCreateDeviceManagedNetwork(Object accountId, DeviceManagedNetworksCreateDeviceManagedNetworkRequest deviceManagedNetworksCreateDeviceManagedNetworkRequest) throws ApiException {
        ApiResponse<TeamsDevicesComponentsSchemasSingleResponse> localVarResp = deviceManagedNetworksCreateDeviceManagedNetworkWithHttpInfo(accountId, deviceManagedNetworksCreateDeviceManagedNetworkRequest);
        return localVarResp.getData();
    }

    /**
     * Create a device managed network
     * Creates a new device managed network.
     * @param accountId  (required)
     * @param deviceManagedNetworksCreateDeviceManagedNetworkRequest  (required)
     * @return ApiResponse&lt;TeamsDevicesComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a device managed networks response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a device managed networks response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsDevicesComponentsSchemasSingleResponse> deviceManagedNetworksCreateDeviceManagedNetworkWithHttpInfo(Object accountId, DeviceManagedNetworksCreateDeviceManagedNetworkRequest deviceManagedNetworksCreateDeviceManagedNetworkRequest) throws ApiException {
        okhttp3.Call localVarCall = deviceManagedNetworksCreateDeviceManagedNetworkValidateBeforeCall(accountId, deviceManagedNetworksCreateDeviceManagedNetworkRequest, null);
        Type localVarReturnType = new TypeToken<TeamsDevicesComponentsSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a device managed network (asynchronously)
     * Creates a new device managed network.
     * @param accountId  (required)
     * @param deviceManagedNetworksCreateDeviceManagedNetworkRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create a device managed networks response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create a device managed networks response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deviceManagedNetworksCreateDeviceManagedNetworkAsync(Object accountId, DeviceManagedNetworksCreateDeviceManagedNetworkRequest deviceManagedNetworksCreateDeviceManagedNetworkRequest, final ApiCallback<TeamsDevicesComponentsSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deviceManagedNetworksCreateDeviceManagedNetworkValidateBeforeCall(accountId, deviceManagedNetworksCreateDeviceManagedNetworkRequest, _callback);
        Type localVarReturnType = new TypeToken<TeamsDevicesComponentsSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deviceManagedNetworksDeleteDeviceManagedNetwork
     * @param networkId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a device managed network response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a device managed network response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deviceManagedNetworksDeleteDeviceManagedNetworkCall(String networkId, Object accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/devices/networks/{network_id}"
            .replace("{" + "network_id" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deviceManagedNetworksDeleteDeviceManagedNetworkValidateBeforeCall(String networkId, Object accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deviceManagedNetworksDeleteDeviceManagedNetwork(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling deviceManagedNetworksDeleteDeviceManagedNetwork(Async)");
        }

        return deviceManagedNetworksDeleteDeviceManagedNetworkCall(networkId, accountId, _callback);

    }

    /**
     * Delete a device managed network
     * Deletes a device managed network and fetches a list of the remaining device managed networks for an account.
     * @param networkId  (required)
     * @param accountId  (required)
     * @return TeamsDevicesComponentsSchemasResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a device managed network response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a device managed network response failure </td><td>  -  </td></tr>
     </table>
     */
    public TeamsDevicesComponentsSchemasResponseCollection deviceManagedNetworksDeleteDeviceManagedNetwork(String networkId, Object accountId) throws ApiException {
        ApiResponse<TeamsDevicesComponentsSchemasResponseCollection> localVarResp = deviceManagedNetworksDeleteDeviceManagedNetworkWithHttpInfo(networkId, accountId);
        return localVarResp.getData();
    }

    /**
     * Delete a device managed network
     * Deletes a device managed network and fetches a list of the remaining device managed networks for an account.
     * @param networkId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;TeamsDevicesComponentsSchemasResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a device managed network response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a device managed network response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsDevicesComponentsSchemasResponseCollection> deviceManagedNetworksDeleteDeviceManagedNetworkWithHttpInfo(String networkId, Object accountId) throws ApiException {
        okhttp3.Call localVarCall = deviceManagedNetworksDeleteDeviceManagedNetworkValidateBeforeCall(networkId, accountId, null);
        Type localVarReturnType = new TypeToken<TeamsDevicesComponentsSchemasResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a device managed network (asynchronously)
     * Deletes a device managed network and fetches a list of the remaining device managed networks for an account.
     * @param networkId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a device managed network response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete a device managed network response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deviceManagedNetworksDeleteDeviceManagedNetworkAsync(String networkId, Object accountId, final ApiCallback<TeamsDevicesComponentsSchemasResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = deviceManagedNetworksDeleteDeviceManagedNetworkValidateBeforeCall(networkId, accountId, _callback);
        Type localVarReturnType = new TypeToken<TeamsDevicesComponentsSchemasResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deviceManagedNetworksDeviceManagedNetworkDetails
     * @param networkId  (required)
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get device managed network details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get device managed network details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deviceManagedNetworksDeviceManagedNetworkDetailsCall(String networkId, Object accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/devices/networks/{network_id}"
            .replace("{" + "network_id" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deviceManagedNetworksDeviceManagedNetworkDetailsValidateBeforeCall(String networkId, Object accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deviceManagedNetworksDeviceManagedNetworkDetails(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling deviceManagedNetworksDeviceManagedNetworkDetails(Async)");
        }

        return deviceManagedNetworksDeviceManagedNetworkDetailsCall(networkId, accountId, _callback);

    }

    /**
     * Get device managed network details
     * Fetches details for a single managed network.
     * @param networkId  (required)
     * @param accountId  (required)
     * @return TeamsDevicesComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get device managed network details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get device managed network details response failure </td><td>  -  </td></tr>
     </table>
     */
    public TeamsDevicesComponentsSchemasSingleResponse deviceManagedNetworksDeviceManagedNetworkDetails(String networkId, Object accountId) throws ApiException {
        ApiResponse<TeamsDevicesComponentsSchemasSingleResponse> localVarResp = deviceManagedNetworksDeviceManagedNetworkDetailsWithHttpInfo(networkId, accountId);
        return localVarResp.getData();
    }

    /**
     * Get device managed network details
     * Fetches details for a single managed network.
     * @param networkId  (required)
     * @param accountId  (required)
     * @return ApiResponse&lt;TeamsDevicesComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get device managed network details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get device managed network details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsDevicesComponentsSchemasSingleResponse> deviceManagedNetworksDeviceManagedNetworkDetailsWithHttpInfo(String networkId, Object accountId) throws ApiException {
        okhttp3.Call localVarCall = deviceManagedNetworksDeviceManagedNetworkDetailsValidateBeforeCall(networkId, accountId, null);
        Type localVarReturnType = new TypeToken<TeamsDevicesComponentsSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get device managed network details (asynchronously)
     * Fetches details for a single managed network.
     * @param networkId  (required)
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get device managed network details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Get device managed network details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deviceManagedNetworksDeviceManagedNetworkDetailsAsync(String networkId, Object accountId, final ApiCallback<TeamsDevicesComponentsSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deviceManagedNetworksDeviceManagedNetworkDetailsValidateBeforeCall(networkId, accountId, _callback);
        Type localVarReturnType = new TypeToken<TeamsDevicesComponentsSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deviceManagedNetworksListDeviceManagedNetworks
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List your device managed networks response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List your device managed networks response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deviceManagedNetworksListDeviceManagedNetworksCall(Object accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/devices/networks"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deviceManagedNetworksListDeviceManagedNetworksValidateBeforeCall(Object accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling deviceManagedNetworksListDeviceManagedNetworks(Async)");
        }

        return deviceManagedNetworksListDeviceManagedNetworksCall(accountId, _callback);

    }

    /**
     * List your device managed networks
     * Fetches a list of managed networks for an account.
     * @param accountId  (required)
     * @return TeamsDevicesComponentsSchemasResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List your device managed networks response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List your device managed networks response failure </td><td>  -  </td></tr>
     </table>
     */
    public TeamsDevicesComponentsSchemasResponseCollection deviceManagedNetworksListDeviceManagedNetworks(Object accountId) throws ApiException {
        ApiResponse<TeamsDevicesComponentsSchemasResponseCollection> localVarResp = deviceManagedNetworksListDeviceManagedNetworksWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * List your device managed networks
     * Fetches a list of managed networks for an account.
     * @param accountId  (required)
     * @return ApiResponse&lt;TeamsDevicesComponentsSchemasResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List your device managed networks response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List your device managed networks response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsDevicesComponentsSchemasResponseCollection> deviceManagedNetworksListDeviceManagedNetworksWithHttpInfo(Object accountId) throws ApiException {
        okhttp3.Call localVarCall = deviceManagedNetworksListDeviceManagedNetworksValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<TeamsDevicesComponentsSchemasResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List your device managed networks (asynchronously)
     * Fetches a list of managed networks for an account.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List your device managed networks response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List your device managed networks response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deviceManagedNetworksListDeviceManagedNetworksAsync(Object accountId, final ApiCallback<TeamsDevicesComponentsSchemasResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = deviceManagedNetworksListDeviceManagedNetworksValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<TeamsDevicesComponentsSchemasResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deviceManagedNetworksUpdateDeviceManagedNetwork
     * @param networkId  (required)
     * @param accountId  (required)
     * @param deviceManagedNetworksUpdateDeviceManagedNetworkRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a device managed network response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a device managed network response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deviceManagedNetworksUpdateDeviceManagedNetworkCall(String networkId, Object accountId, DeviceManagedNetworksUpdateDeviceManagedNetworkRequest deviceManagedNetworksUpdateDeviceManagedNetworkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceManagedNetworksUpdateDeviceManagedNetworkRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/devices/networks/{network_id}"
            .replace("{" + "network_id" + "}", localVarApiClient.escapeString(networkId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deviceManagedNetworksUpdateDeviceManagedNetworkValidateBeforeCall(String networkId, Object accountId, DeviceManagedNetworksUpdateDeviceManagedNetworkRequest deviceManagedNetworksUpdateDeviceManagedNetworkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkId' is set
        if (networkId == null) {
            throw new ApiException("Missing the required parameter 'networkId' when calling deviceManagedNetworksUpdateDeviceManagedNetwork(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling deviceManagedNetworksUpdateDeviceManagedNetwork(Async)");
        }

        // verify the required parameter 'deviceManagedNetworksUpdateDeviceManagedNetworkRequest' is set
        if (deviceManagedNetworksUpdateDeviceManagedNetworkRequest == null) {
            throw new ApiException("Missing the required parameter 'deviceManagedNetworksUpdateDeviceManagedNetworkRequest' when calling deviceManagedNetworksUpdateDeviceManagedNetwork(Async)");
        }

        return deviceManagedNetworksUpdateDeviceManagedNetworkCall(networkId, accountId, deviceManagedNetworksUpdateDeviceManagedNetworkRequest, _callback);

    }

    /**
     * Update a device managed network
     * Updates a configured device managed network.
     * @param networkId  (required)
     * @param accountId  (required)
     * @param deviceManagedNetworksUpdateDeviceManagedNetworkRequest  (required)
     * @return TeamsDevicesComponentsSchemasSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a device managed network response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a device managed network response failure </td><td>  -  </td></tr>
     </table>
     */
    public TeamsDevicesComponentsSchemasSingleResponse deviceManagedNetworksUpdateDeviceManagedNetwork(String networkId, Object accountId, DeviceManagedNetworksUpdateDeviceManagedNetworkRequest deviceManagedNetworksUpdateDeviceManagedNetworkRequest) throws ApiException {
        ApiResponse<TeamsDevicesComponentsSchemasSingleResponse> localVarResp = deviceManagedNetworksUpdateDeviceManagedNetworkWithHttpInfo(networkId, accountId, deviceManagedNetworksUpdateDeviceManagedNetworkRequest);
        return localVarResp.getData();
    }

    /**
     * Update a device managed network
     * Updates a configured device managed network.
     * @param networkId  (required)
     * @param accountId  (required)
     * @param deviceManagedNetworksUpdateDeviceManagedNetworkRequest  (required)
     * @return ApiResponse&lt;TeamsDevicesComponentsSchemasSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a device managed network response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a device managed network response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsDevicesComponentsSchemasSingleResponse> deviceManagedNetworksUpdateDeviceManagedNetworkWithHttpInfo(String networkId, Object accountId, DeviceManagedNetworksUpdateDeviceManagedNetworkRequest deviceManagedNetworksUpdateDeviceManagedNetworkRequest) throws ApiException {
        okhttp3.Call localVarCall = deviceManagedNetworksUpdateDeviceManagedNetworkValidateBeforeCall(networkId, accountId, deviceManagedNetworksUpdateDeviceManagedNetworkRequest, null);
        Type localVarReturnType = new TypeToken<TeamsDevicesComponentsSchemasSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a device managed network (asynchronously)
     * Updates a configured device managed network.
     * @param networkId  (required)
     * @param accountId  (required)
     * @param deviceManagedNetworksUpdateDeviceManagedNetworkRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a device managed network response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update a device managed network response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deviceManagedNetworksUpdateDeviceManagedNetworkAsync(String networkId, Object accountId, DeviceManagedNetworksUpdateDeviceManagedNetworkRequest deviceManagedNetworksUpdateDeviceManagedNetworkRequest, final ApiCallback<TeamsDevicesComponentsSchemasSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deviceManagedNetworksUpdateDeviceManagedNetworkValidateBeforeCall(networkId, accountId, deviceManagedNetworksUpdateDeviceManagedNetworkRequest, _callback);
        Type localVarReturnType = new TypeToken<TeamsDevicesComponentsSchemasSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
