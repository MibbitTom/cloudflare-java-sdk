/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.MagicNetworkMonitoringConfigurationListAccountConfiguration4XXResponse;
import org.openapitools.client.model.MagicVisibilityMnmConfigSingleResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MagicNetworkMonitoringConfigurationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MagicNetworkMonitoringConfigurationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MagicNetworkMonitoringConfigurationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for magicNetworkMonitoringConfigurationCreateAccountConfiguration
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create account configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create account configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicNetworkMonitoringConfigurationCreateAccountConfigurationCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/mnm/config"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicNetworkMonitoringConfigurationCreateAccountConfigurationValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicNetworkMonitoringConfigurationCreateAccountConfiguration(Async)");
        }

        return magicNetworkMonitoringConfigurationCreateAccountConfigurationCall(accountId, _callback);

    }

    /**
     * Create account configuration
     * Create a new network monitoring configuration.
     * @param accountId  (required)
     * @return MagicVisibilityMnmConfigSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create account configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create account configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicVisibilityMnmConfigSingleResponse magicNetworkMonitoringConfigurationCreateAccountConfiguration(String accountId) throws ApiException {
        ApiResponse<MagicVisibilityMnmConfigSingleResponse> localVarResp = magicNetworkMonitoringConfigurationCreateAccountConfigurationWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Create account configuration
     * Create a new network monitoring configuration.
     * @param accountId  (required)
     * @return ApiResponse&lt;MagicVisibilityMnmConfigSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create account configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create account configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicVisibilityMnmConfigSingleResponse> magicNetworkMonitoringConfigurationCreateAccountConfigurationWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = magicNetworkMonitoringConfigurationCreateAccountConfigurationValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<MagicVisibilityMnmConfigSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create account configuration (asynchronously)
     * Create a new network monitoring configuration.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create account configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create account configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicNetworkMonitoringConfigurationCreateAccountConfigurationAsync(String accountId, final ApiCallback<MagicVisibilityMnmConfigSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicNetworkMonitoringConfigurationCreateAccountConfigurationValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<MagicVisibilityMnmConfigSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicNetworkMonitoringConfigurationDeleteAccountConfiguration
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete account configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete account configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicNetworkMonitoringConfigurationDeleteAccountConfigurationCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/mnm/config"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicNetworkMonitoringConfigurationDeleteAccountConfigurationValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicNetworkMonitoringConfigurationDeleteAccountConfiguration(Async)");
        }

        return magicNetworkMonitoringConfigurationDeleteAccountConfigurationCall(accountId, _callback);

    }

    /**
     * Delete account configuration
     * Delete an existing network monitoring configuration.
     * @param accountId  (required)
     * @return MagicVisibilityMnmConfigSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete account configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete account configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicVisibilityMnmConfigSingleResponse magicNetworkMonitoringConfigurationDeleteAccountConfiguration(String accountId) throws ApiException {
        ApiResponse<MagicVisibilityMnmConfigSingleResponse> localVarResp = magicNetworkMonitoringConfigurationDeleteAccountConfigurationWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Delete account configuration
     * Delete an existing network monitoring configuration.
     * @param accountId  (required)
     * @return ApiResponse&lt;MagicVisibilityMnmConfigSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete account configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete account configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicVisibilityMnmConfigSingleResponse> magicNetworkMonitoringConfigurationDeleteAccountConfigurationWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = magicNetworkMonitoringConfigurationDeleteAccountConfigurationValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<MagicVisibilityMnmConfigSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete account configuration (asynchronously)
     * Delete an existing network monitoring configuration.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete account configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete account configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicNetworkMonitoringConfigurationDeleteAccountConfigurationAsync(String accountId, final ApiCallback<MagicVisibilityMnmConfigSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicNetworkMonitoringConfigurationDeleteAccountConfigurationValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<MagicVisibilityMnmConfigSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicNetworkMonitoringConfigurationListAccountConfiguration
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List account configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List account configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicNetworkMonitoringConfigurationListAccountConfigurationCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/mnm/config"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicNetworkMonitoringConfigurationListAccountConfigurationValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicNetworkMonitoringConfigurationListAccountConfiguration(Async)");
        }

        return magicNetworkMonitoringConfigurationListAccountConfigurationCall(accountId, _callback);

    }

    /**
     * List account configuration
     * Lists default sampling and router IPs for account.
     * @param accountId  (required)
     * @return MagicVisibilityMnmConfigSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List account configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List account configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicVisibilityMnmConfigSingleResponse magicNetworkMonitoringConfigurationListAccountConfiguration(String accountId) throws ApiException {
        ApiResponse<MagicVisibilityMnmConfigSingleResponse> localVarResp = magicNetworkMonitoringConfigurationListAccountConfigurationWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * List account configuration
     * Lists default sampling and router IPs for account.
     * @param accountId  (required)
     * @return ApiResponse&lt;MagicVisibilityMnmConfigSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List account configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List account configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicVisibilityMnmConfigSingleResponse> magicNetworkMonitoringConfigurationListAccountConfigurationWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = magicNetworkMonitoringConfigurationListAccountConfigurationValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<MagicVisibilityMnmConfigSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List account configuration (asynchronously)
     * Lists default sampling and router IPs for account.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List account configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List account configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicNetworkMonitoringConfigurationListAccountConfigurationAsync(String accountId, final ApiCallback<MagicVisibilityMnmConfigSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicNetworkMonitoringConfigurationListAccountConfigurationValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<MagicVisibilityMnmConfigSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicNetworkMonitoringConfigurationListRulesAndAccountConfiguration
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List rules and account configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List rules and account configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicNetworkMonitoringConfigurationListRulesAndAccountConfigurationCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/mnm/config/full"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicNetworkMonitoringConfigurationListRulesAndAccountConfigurationValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicNetworkMonitoringConfigurationListRulesAndAccountConfiguration(Async)");
        }

        return magicNetworkMonitoringConfigurationListRulesAndAccountConfigurationCall(accountId, _callback);

    }

    /**
     * List rules and account configuration
     * Lists default sampling, router IPs, and rules for account.
     * @param accountId  (required)
     * @return MagicVisibilityMnmConfigSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List rules and account configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List rules and account configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicVisibilityMnmConfigSingleResponse magicNetworkMonitoringConfigurationListRulesAndAccountConfiguration(String accountId) throws ApiException {
        ApiResponse<MagicVisibilityMnmConfigSingleResponse> localVarResp = magicNetworkMonitoringConfigurationListRulesAndAccountConfigurationWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * List rules and account configuration
     * Lists default sampling, router IPs, and rules for account.
     * @param accountId  (required)
     * @return ApiResponse&lt;MagicVisibilityMnmConfigSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List rules and account configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List rules and account configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicVisibilityMnmConfigSingleResponse> magicNetworkMonitoringConfigurationListRulesAndAccountConfigurationWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = magicNetworkMonitoringConfigurationListRulesAndAccountConfigurationValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<MagicVisibilityMnmConfigSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List rules and account configuration (asynchronously)
     * Lists default sampling, router IPs, and rules for account.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List rules and account configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List rules and account configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicNetworkMonitoringConfigurationListRulesAndAccountConfigurationAsync(String accountId, final ApiCallback<MagicVisibilityMnmConfigSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicNetworkMonitoringConfigurationListRulesAndAccountConfigurationValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<MagicVisibilityMnmConfigSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicNetworkMonitoringConfigurationUpdateAccountConfigurationFields
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update account configuration fields response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update account configuration fields response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicNetworkMonitoringConfigurationUpdateAccountConfigurationFieldsCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/mnm/config"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicNetworkMonitoringConfigurationUpdateAccountConfigurationFieldsValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicNetworkMonitoringConfigurationUpdateAccountConfigurationFields(Async)");
        }

        return magicNetworkMonitoringConfigurationUpdateAccountConfigurationFieldsCall(accountId, _callback);

    }

    /**
     * Update account configuration fields
     * Update fields in an existing network monitoring configuration.
     * @param accountId  (required)
     * @return MagicVisibilityMnmConfigSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update account configuration fields response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update account configuration fields response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicVisibilityMnmConfigSingleResponse magicNetworkMonitoringConfigurationUpdateAccountConfigurationFields(String accountId) throws ApiException {
        ApiResponse<MagicVisibilityMnmConfigSingleResponse> localVarResp = magicNetworkMonitoringConfigurationUpdateAccountConfigurationFieldsWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Update account configuration fields
     * Update fields in an existing network monitoring configuration.
     * @param accountId  (required)
     * @return ApiResponse&lt;MagicVisibilityMnmConfigSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update account configuration fields response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update account configuration fields response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicVisibilityMnmConfigSingleResponse> magicNetworkMonitoringConfigurationUpdateAccountConfigurationFieldsWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = magicNetworkMonitoringConfigurationUpdateAccountConfigurationFieldsValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<MagicVisibilityMnmConfigSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update account configuration fields (asynchronously)
     * Update fields in an existing network monitoring configuration.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update account configuration fields response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update account configuration fields response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicNetworkMonitoringConfigurationUpdateAccountConfigurationFieldsAsync(String accountId, final ApiCallback<MagicVisibilityMnmConfigSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicNetworkMonitoringConfigurationUpdateAccountConfigurationFieldsValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<MagicVisibilityMnmConfigSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for magicNetworkMonitoringConfigurationUpdateAnEntireAccountConfiguration
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an entire account configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an entire account configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicNetworkMonitoringConfigurationUpdateAnEntireAccountConfigurationCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/mnm/config"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call magicNetworkMonitoringConfigurationUpdateAnEntireAccountConfigurationValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling magicNetworkMonitoringConfigurationUpdateAnEntireAccountConfiguration(Async)");
        }

        return magicNetworkMonitoringConfigurationUpdateAnEntireAccountConfigurationCall(accountId, _callback);

    }

    /**
     * Update an entire account configuration
     * Update an existing network monitoring configuration, requires the entire configuration to be updated at once.
     * @param accountId  (required)
     * @return MagicVisibilityMnmConfigSingleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an entire account configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an entire account configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public MagicVisibilityMnmConfigSingleResponse magicNetworkMonitoringConfigurationUpdateAnEntireAccountConfiguration(String accountId) throws ApiException {
        ApiResponse<MagicVisibilityMnmConfigSingleResponse> localVarResp = magicNetworkMonitoringConfigurationUpdateAnEntireAccountConfigurationWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Update an entire account configuration
     * Update an existing network monitoring configuration, requires the entire configuration to be updated at once.
     * @param accountId  (required)
     * @return ApiResponse&lt;MagicVisibilityMnmConfigSingleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an entire account configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an entire account configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MagicVisibilityMnmConfigSingleResponse> magicNetworkMonitoringConfigurationUpdateAnEntireAccountConfigurationWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = magicNetworkMonitoringConfigurationUpdateAnEntireAccountConfigurationValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<MagicVisibilityMnmConfigSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an entire account configuration (asynchronously)
     * Update an existing network monitoring configuration, requires the entire configuration to be updated at once.
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an entire account configuration response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update an entire account configuration response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call magicNetworkMonitoringConfigurationUpdateAnEntireAccountConfigurationAsync(String accountId, final ApiCallback<MagicVisibilityMnmConfigSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = magicNetworkMonitoringConfigurationUpdateAnEntireAccountConfigurationValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<MagicVisibilityMnmConfigSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
