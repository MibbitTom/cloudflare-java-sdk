/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiShieldApiDiscoveryOrigin;
import org.openapitools.client.model.ApiShieldApiDiscoveryPatchMultipleRequestEntry;
import org.openapitools.client.model.ApiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZone200Response;
import org.openapitools.client.model.ApiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZoneAsOpenapi4XXResponse;
import org.openapitools.client.model.ApiShieldApiDiscoveryState;
import org.openapitools.client.model.ApiShieldApiPatchDiscoveredOperationRequest;
import org.openapitools.client.model.ApiShieldApiResponseCommonFailure;
import org.openapitools.client.model.ApiShieldPatchDiscoveriesResponse;
import org.openapitools.client.model.ApiShieldPatchDiscoveryResponse;
import org.openapitools.client.model.ApiShieldSchemaResponseDiscovery;
import java.util.Set;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApiShieldApiDiscoveryApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApiShieldApiDiscoveryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApiShieldApiDiscoveryApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZone
     * @param zoneId  (required)
     * @param page Page number of paginated results. (optional, default to 1)
     * @param perPage Maximum number of results per page. (optional, default to 20)
     * @param host  (optional)
     * @param method  (optional)
     * @param endpoint  (optional)
     * @param direction  (optional)
     * @param order  (optional)
     * @param diff  (optional)
     * @param origin Filter results to only include discovery results sourced from a particular discovery engine   * &#x60;ML&#x60; - Discovered operations that were sourced using ML API Discovery   * &#x60;SessionIdentifier&#x60; - Discovered operations that were sourced using Session Identifier API Discovery  (optional)
     * @param state Filter results to only include discovery results in a particular state. States are as follows   * &#x60;review&#x60; - Discovered operations that are not saved into API Shield Endpoint Management   * &#x60;saved&#x60; - Discovered operations that are already saved into API Shield Endpoint Management   * &#x60;ignored&#x60; - Discovered operations that have been marked as ignored  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve discovered operations on a zone response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retrieve discovered operations on a zone response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZoneCall(String zoneId, Object page, Object perPage, Set<String> host, Set<String> method, String endpoint, String direction, String order, Boolean diff, ApiShieldApiDiscoveryOrigin origin, ApiShieldApiDiscoveryState state, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/api_gateway/discovery/operations"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (host != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "host", host));
        }

        if (method != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "method", method));
        }

        if (endpoint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endpoint", endpoint));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (diff != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("diff", diff));
        }

        if (origin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("origin", origin));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZoneValidateBeforeCall(String zoneId, Object page, Object perPage, Set<String> host, Set<String> method, String endpoint, String direction, String order, Boolean diff, ApiShieldApiDiscoveryOrigin origin, ApiShieldApiDiscoveryState state, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling apiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZone(Async)");
        }

        return apiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZoneCall(zoneId, page, perPage, host, method, endpoint, direction, order, diff, origin, state, _callback);

    }

    /**
     * Retrieve discovered operations on a zone
     * Retrieve the most up to date view of discovered operations
     * @param zoneId  (required)
     * @param page Page number of paginated results. (optional, default to 1)
     * @param perPage Maximum number of results per page. (optional, default to 20)
     * @param host  (optional)
     * @param method  (optional)
     * @param endpoint  (optional)
     * @param direction  (optional)
     * @param order  (optional)
     * @param diff  (optional)
     * @param origin Filter results to only include discovery results sourced from a particular discovery engine   * &#x60;ML&#x60; - Discovered operations that were sourced using ML API Discovery   * &#x60;SessionIdentifier&#x60; - Discovered operations that were sourced using Session Identifier API Discovery  (optional)
     * @param state Filter results to only include discovery results in a particular state. States are as follows   * &#x60;review&#x60; - Discovered operations that are not saved into API Shield Endpoint Management   * &#x60;saved&#x60; - Discovered operations that are already saved into API Shield Endpoint Management   * &#x60;ignored&#x60; - Discovered operations that have been marked as ignored  (optional)
     * @return ApiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZone200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve discovered operations on a zone response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retrieve discovered operations on a zone response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZone200Response apiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZone(String zoneId, Object page, Object perPage, Set<String> host, Set<String> method, String endpoint, String direction, String order, Boolean diff, ApiShieldApiDiscoveryOrigin origin, ApiShieldApiDiscoveryState state) throws ApiException {
        ApiResponse<ApiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZone200Response> localVarResp = apiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZoneWithHttpInfo(zoneId, page, perPage, host, method, endpoint, direction, order, diff, origin, state);
        return localVarResp.getData();
    }

    /**
     * Retrieve discovered operations on a zone
     * Retrieve the most up to date view of discovered operations
     * @param zoneId  (required)
     * @param page Page number of paginated results. (optional, default to 1)
     * @param perPage Maximum number of results per page. (optional, default to 20)
     * @param host  (optional)
     * @param method  (optional)
     * @param endpoint  (optional)
     * @param direction  (optional)
     * @param order  (optional)
     * @param diff  (optional)
     * @param origin Filter results to only include discovery results sourced from a particular discovery engine   * &#x60;ML&#x60; - Discovered operations that were sourced using ML API Discovery   * &#x60;SessionIdentifier&#x60; - Discovered operations that were sourced using Session Identifier API Discovery  (optional)
     * @param state Filter results to only include discovery results in a particular state. States are as follows   * &#x60;review&#x60; - Discovered operations that are not saved into API Shield Endpoint Management   * &#x60;saved&#x60; - Discovered operations that are already saved into API Shield Endpoint Management   * &#x60;ignored&#x60; - Discovered operations that have been marked as ignored  (optional)
     * @return ApiResponse&lt;ApiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZone200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve discovered operations on a zone response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retrieve discovered operations on a zone response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZone200Response> apiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZoneWithHttpInfo(String zoneId, Object page, Object perPage, Set<String> host, Set<String> method, String endpoint, String direction, String order, Boolean diff, ApiShieldApiDiscoveryOrigin origin, ApiShieldApiDiscoveryState state) throws ApiException {
        okhttp3.Call localVarCall = apiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZoneValidateBeforeCall(zoneId, page, perPage, host, method, endpoint, direction, order, diff, origin, state, null);
        Type localVarReturnType = new TypeToken<ApiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZone200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve discovered operations on a zone (asynchronously)
     * Retrieve the most up to date view of discovered operations
     * @param zoneId  (required)
     * @param page Page number of paginated results. (optional, default to 1)
     * @param perPage Maximum number of results per page. (optional, default to 20)
     * @param host  (optional)
     * @param method  (optional)
     * @param endpoint  (optional)
     * @param direction  (optional)
     * @param order  (optional)
     * @param diff  (optional)
     * @param origin Filter results to only include discovery results sourced from a particular discovery engine   * &#x60;ML&#x60; - Discovered operations that were sourced using ML API Discovery   * &#x60;SessionIdentifier&#x60; - Discovered operations that were sourced using Session Identifier API Discovery  (optional)
     * @param state Filter results to only include discovery results in a particular state. States are as follows   * &#x60;review&#x60; - Discovered operations that are not saved into API Shield Endpoint Management   * &#x60;saved&#x60; - Discovered operations that are already saved into API Shield Endpoint Management   * &#x60;ignored&#x60; - Discovered operations that have been marked as ignored  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve discovered operations on a zone response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retrieve discovered operations on a zone response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZoneAsync(String zoneId, Object page, Object perPage, Set<String> host, Set<String> method, String endpoint, String direction, String order, Boolean diff, ApiShieldApiDiscoveryOrigin origin, ApiShieldApiDiscoveryState state, final ApiCallback<ApiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZone200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZoneValidateBeforeCall(zoneId, page, perPage, host, method, endpoint, direction, order, diff, origin, state, _callback);
        Type localVarReturnType = new TypeToken<ApiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZone200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZoneAsOpenapi
     * @param zoneId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve discovered operations on a zone, rendered as OpenAPI schemas response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retrieve discovered operations on a zone, rendered as OpenAPI schemas response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZoneAsOpenapiCall(String zoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/api_gateway/discovery"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZoneAsOpenapiValidateBeforeCall(String zoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling apiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZoneAsOpenapi(Async)");
        }

        return apiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZoneAsOpenapiCall(zoneId, _callback);

    }

    /**
     * Retrieve discovered operations on a zone rendered as OpenAPI schemas
     * Retrieve the most up to date view of discovered operations, rendered as OpenAPI schemas
     * @param zoneId  (required)
     * @return ApiShieldSchemaResponseDiscovery
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve discovered operations on a zone, rendered as OpenAPI schemas response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retrieve discovered operations on a zone, rendered as OpenAPI schemas response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiShieldSchemaResponseDiscovery apiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZoneAsOpenapi(String zoneId) throws ApiException {
        ApiResponse<ApiShieldSchemaResponseDiscovery> localVarResp = apiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZoneAsOpenapiWithHttpInfo(zoneId);
        return localVarResp.getData();
    }

    /**
     * Retrieve discovered operations on a zone rendered as OpenAPI schemas
     * Retrieve the most up to date view of discovered operations, rendered as OpenAPI schemas
     * @param zoneId  (required)
     * @return ApiResponse&lt;ApiShieldSchemaResponseDiscovery&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve discovered operations on a zone, rendered as OpenAPI schemas response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retrieve discovered operations on a zone, rendered as OpenAPI schemas response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiShieldSchemaResponseDiscovery> apiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZoneAsOpenapiWithHttpInfo(String zoneId) throws ApiException {
        okhttp3.Call localVarCall = apiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZoneAsOpenapiValidateBeforeCall(zoneId, null);
        Type localVarReturnType = new TypeToken<ApiShieldSchemaResponseDiscovery>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve discovered operations on a zone rendered as OpenAPI schemas (asynchronously)
     * Retrieve the most up to date view of discovered operations, rendered as OpenAPI schemas
     * @param zoneId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve discovered operations on a zone, rendered as OpenAPI schemas response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Retrieve discovered operations on a zone, rendered as OpenAPI schemas response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZoneAsOpenapiAsync(String zoneId, final ApiCallback<ApiShieldSchemaResponseDiscovery> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiShieldApiDiscoveryRetrieveDiscoveredOperationsOnAZoneAsOpenapiValidateBeforeCall(zoneId, _callback);
        Type localVarReturnType = new TypeToken<ApiShieldSchemaResponseDiscovery>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiShieldApiPatchDiscoveredOperation
     * @param zoneId  (required)
     * @param operationId Identifier for the discovered operation (required)
     * @param apiShieldApiPatchDiscoveredOperationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch discovered operation response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch discovered operation response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiShieldApiPatchDiscoveredOperationCall(String zoneId, UUID operationId, ApiShieldApiPatchDiscoveredOperationRequest apiShieldApiPatchDiscoveredOperationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiShieldApiPatchDiscoveredOperationRequest;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/api_gateway/discovery/operations/{operation_id}"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()))
            .replace("{" + "operation_id" + "}", localVarApiClient.escapeString(operationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiShieldApiPatchDiscoveredOperationValidateBeforeCall(String zoneId, UUID operationId, ApiShieldApiPatchDiscoveredOperationRequest apiShieldApiPatchDiscoveredOperationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling apiShieldApiPatchDiscoveredOperation(Async)");
        }

        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling apiShieldApiPatchDiscoveredOperation(Async)");
        }

        // verify the required parameter 'apiShieldApiPatchDiscoveredOperationRequest' is set
        if (apiShieldApiPatchDiscoveredOperationRequest == null) {
            throw new ApiException("Missing the required parameter 'apiShieldApiPatchDiscoveredOperationRequest' when calling apiShieldApiPatchDiscoveredOperation(Async)");
        }

        return apiShieldApiPatchDiscoveredOperationCall(zoneId, operationId, apiShieldApiPatchDiscoveredOperationRequest, _callback);

    }

    /**
     * Patch discovered operation
     * Update the &#x60;state&#x60; on a discovered operation
     * @param zoneId  (required)
     * @param operationId Identifier for the discovered operation (required)
     * @param apiShieldApiPatchDiscoveredOperationRequest  (required)
     * @return ApiShieldPatchDiscoveryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch discovered operation response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch discovered operation response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiShieldPatchDiscoveryResponse apiShieldApiPatchDiscoveredOperation(String zoneId, UUID operationId, ApiShieldApiPatchDiscoveredOperationRequest apiShieldApiPatchDiscoveredOperationRequest) throws ApiException {
        ApiResponse<ApiShieldPatchDiscoveryResponse> localVarResp = apiShieldApiPatchDiscoveredOperationWithHttpInfo(zoneId, operationId, apiShieldApiPatchDiscoveredOperationRequest);
        return localVarResp.getData();
    }

    /**
     * Patch discovered operation
     * Update the &#x60;state&#x60; on a discovered operation
     * @param zoneId  (required)
     * @param operationId Identifier for the discovered operation (required)
     * @param apiShieldApiPatchDiscoveredOperationRequest  (required)
     * @return ApiResponse&lt;ApiShieldPatchDiscoveryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch discovered operation response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch discovered operation response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiShieldPatchDiscoveryResponse> apiShieldApiPatchDiscoveredOperationWithHttpInfo(String zoneId, UUID operationId, ApiShieldApiPatchDiscoveredOperationRequest apiShieldApiPatchDiscoveredOperationRequest) throws ApiException {
        okhttp3.Call localVarCall = apiShieldApiPatchDiscoveredOperationValidateBeforeCall(zoneId, operationId, apiShieldApiPatchDiscoveredOperationRequest, null);
        Type localVarReturnType = new TypeToken<ApiShieldPatchDiscoveryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch discovered operation (asynchronously)
     * Update the &#x60;state&#x60; on a discovered operation
     * @param zoneId  (required)
     * @param operationId Identifier for the discovered operation (required)
     * @param apiShieldApiPatchDiscoveredOperationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch discovered operation response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch discovered operation response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiShieldApiPatchDiscoveredOperationAsync(String zoneId, UUID operationId, ApiShieldApiPatchDiscoveredOperationRequest apiShieldApiPatchDiscoveredOperationRequest, final ApiCallback<ApiShieldPatchDiscoveryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiShieldApiPatchDiscoveredOperationValidateBeforeCall(zoneId, operationId, apiShieldApiPatchDiscoveredOperationRequest, _callback);
        Type localVarReturnType = new TypeToken<ApiShieldPatchDiscoveryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiShieldApiPatchDiscoveredOperations
     * @param zoneId  (required)
     * @param requestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch discovered operations response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch discovered operations response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiShieldApiPatchDiscoveredOperationsCall(String zoneId, Map<String, ApiShieldApiDiscoveryPatchMultipleRequestEntry> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/zones/{zone_id}/api_gateway/discovery/operations"
            .replace("{" + "zone_id" + "}", localVarApiClient.escapeString(zoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiShieldApiPatchDiscoveredOperationsValidateBeforeCall(String zoneId, Map<String, ApiShieldApiDiscoveryPatchMultipleRequestEntry> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'zoneId' is set
        if (zoneId == null) {
            throw new ApiException("Missing the required parameter 'zoneId' when calling apiShieldApiPatchDiscoveredOperations(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling apiShieldApiPatchDiscoveredOperations(Async)");
        }

        return apiShieldApiPatchDiscoveredOperationsCall(zoneId, requestBody, _callback);

    }

    /**
     * Patch discovered operations
     * Update the &#x60;state&#x60; on one or more discovered operations
     * @param zoneId  (required)
     * @param requestBody  (required)
     * @return ApiShieldPatchDiscoveriesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch discovered operations response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch discovered operations response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiShieldPatchDiscoveriesResponse apiShieldApiPatchDiscoveredOperations(String zoneId, Map<String, ApiShieldApiDiscoveryPatchMultipleRequestEntry> requestBody) throws ApiException {
        ApiResponse<ApiShieldPatchDiscoveriesResponse> localVarResp = apiShieldApiPatchDiscoveredOperationsWithHttpInfo(zoneId, requestBody);
        return localVarResp.getData();
    }

    /**
     * Patch discovered operations
     * Update the &#x60;state&#x60; on one or more discovered operations
     * @param zoneId  (required)
     * @param requestBody  (required)
     * @return ApiResponse&lt;ApiShieldPatchDiscoveriesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch discovered operations response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch discovered operations response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiShieldPatchDiscoveriesResponse> apiShieldApiPatchDiscoveredOperationsWithHttpInfo(String zoneId, Map<String, ApiShieldApiDiscoveryPatchMultipleRequestEntry> requestBody) throws ApiException {
        okhttp3.Call localVarCall = apiShieldApiPatchDiscoveredOperationsValidateBeforeCall(zoneId, requestBody, null);
        Type localVarReturnType = new TypeToken<ApiShieldPatchDiscoveriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch discovered operations (asynchronously)
     * Update the &#x60;state&#x60; on one or more discovered operations
     * @param zoneId  (required)
     * @param requestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch discovered operations response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch discovered operations response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiShieldApiPatchDiscoveredOperationsAsync(String zoneId, Map<String, ApiShieldApiDiscoveryPatchMultipleRequestEntry> requestBody, final ApiCallback<ApiShieldPatchDiscoveriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiShieldApiPatchDiscoveredOperationsValidateBeforeCall(zoneId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<ApiShieldPatchDiscoveriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
