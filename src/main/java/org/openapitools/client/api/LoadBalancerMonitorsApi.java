/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountLoadBalancerMonitorsCreateMonitor4XXResponse;
import org.openapitools.client.model.AccountLoadBalancerMonitorsCreateMonitorRequest;
import org.openapitools.client.model.AccountLoadBalancerMonitorsDeleteMonitor4XXResponse;
import org.openapitools.client.model.AccountLoadBalancerMonitorsListMonitorReferences4XXResponse;
import org.openapitools.client.model.AccountLoadBalancerMonitorsListMonitors4XXResponse;
import org.openapitools.client.model.AccountLoadBalancerMonitorsPreviewMonitor4XXResponse;
import org.openapitools.client.model.AccountLoadBalancerMonitorsPreviewResult4XXResponse;
import org.openapitools.client.model.LoadBalancingIdResponse;
import org.openapitools.client.model.LoadBalancingMonitorResponseCollection;
import org.openapitools.client.model.LoadBalancingMonitorResponseSingle;
import org.openapitools.client.model.LoadBalancingPreviewResponse;
import org.openapitools.client.model.LoadBalancingPreviewResultResponse;
import org.openapitools.client.model.LoadBalancingReferencesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LoadBalancerMonitorsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LoadBalancerMonitorsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LoadBalancerMonitorsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for loadBalancerMonitorsCreateMonitor
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerMonitorsCreateMonitorCall(AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountLoadBalancerMonitorsCreateMonitorRequest;

        // create path and map variables
        String localVarPath = "/user/load_balancers/monitors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loadBalancerMonitorsCreateMonitorValidateBeforeCall(AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountLoadBalancerMonitorsCreateMonitorRequest' is set
        if (accountLoadBalancerMonitorsCreateMonitorRequest == null) {
            throw new ApiException("Missing the required parameter 'accountLoadBalancerMonitorsCreateMonitorRequest' when calling loadBalancerMonitorsCreateMonitor(Async)");
        }

        return loadBalancerMonitorsCreateMonitorCall(accountLoadBalancerMonitorsCreateMonitorRequest, _callback);

    }

    /**
     * Create Monitor
     * Create a configured monitor.
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @return LoadBalancingMonitorResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingMonitorResponseSingle loadBalancerMonitorsCreateMonitor(AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest) throws ApiException {
        ApiResponse<LoadBalancingMonitorResponseSingle> localVarResp = loadBalancerMonitorsCreateMonitorWithHttpInfo(accountLoadBalancerMonitorsCreateMonitorRequest);
        return localVarResp.getData();
    }

    /**
     * Create Monitor
     * Create a configured monitor.
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @return ApiResponse&lt;LoadBalancingMonitorResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingMonitorResponseSingle> loadBalancerMonitorsCreateMonitorWithHttpInfo(AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest) throws ApiException {
        okhttp3.Call localVarCall = loadBalancerMonitorsCreateMonitorValidateBeforeCall(accountLoadBalancerMonitorsCreateMonitorRequest, null);
        Type localVarReturnType = new TypeToken<LoadBalancingMonitorResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Monitor (asynchronously)
     * Create a configured monitor.
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerMonitorsCreateMonitorAsync(AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest, final ApiCallback<LoadBalancingMonitorResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = loadBalancerMonitorsCreateMonitorValidateBeforeCall(accountLoadBalancerMonitorsCreateMonitorRequest, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingMonitorResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for loadBalancerMonitorsDeleteMonitor
     * @param monitorId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerMonitorsDeleteMonitorCall(String monitorId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/load_balancers/monitors/{monitor_id}"
            .replace("{" + "monitor_id" + "}", localVarApiClient.escapeString(monitorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loadBalancerMonitorsDeleteMonitorValidateBeforeCall(String monitorId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'monitorId' is set
        if (monitorId == null) {
            throw new ApiException("Missing the required parameter 'monitorId' when calling loadBalancerMonitorsDeleteMonitor(Async)");
        }

        return loadBalancerMonitorsDeleteMonitorCall(monitorId, _callback);

    }

    /**
     * Delete Monitor
     * Delete a configured monitor.
     * @param monitorId  (required)
     * @return LoadBalancingIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingIdResponse loadBalancerMonitorsDeleteMonitor(String monitorId) throws ApiException {
        ApiResponse<LoadBalancingIdResponse> localVarResp = loadBalancerMonitorsDeleteMonitorWithHttpInfo(monitorId);
        return localVarResp.getData();
    }

    /**
     * Delete Monitor
     * Delete a configured monitor.
     * @param monitorId  (required)
     * @return ApiResponse&lt;LoadBalancingIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingIdResponse> loadBalancerMonitorsDeleteMonitorWithHttpInfo(String monitorId) throws ApiException {
        okhttp3.Call localVarCall = loadBalancerMonitorsDeleteMonitorValidateBeforeCall(monitorId, null);
        Type localVarReturnType = new TypeToken<LoadBalancingIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Monitor (asynchronously)
     * Delete a configured monitor.
     * @param monitorId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Delete Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerMonitorsDeleteMonitorAsync(String monitorId, final ApiCallback<LoadBalancingIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = loadBalancerMonitorsDeleteMonitorValidateBeforeCall(monitorId, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for loadBalancerMonitorsListMonitorReferences
     * @param monitorId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Monitor References response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Monitor References response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerMonitorsListMonitorReferencesCall(String monitorId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/load_balancers/monitors/{monitor_id}/references"
            .replace("{" + "monitor_id" + "}", localVarApiClient.escapeString(monitorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loadBalancerMonitorsListMonitorReferencesValidateBeforeCall(String monitorId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'monitorId' is set
        if (monitorId == null) {
            throw new ApiException("Missing the required parameter 'monitorId' when calling loadBalancerMonitorsListMonitorReferences(Async)");
        }

        return loadBalancerMonitorsListMonitorReferencesCall(monitorId, _callback);

    }

    /**
     * List Monitor References
     * Get the list of resources that reference the provided monitor.
     * @param monitorId  (required)
     * @return LoadBalancingReferencesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Monitor References response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Monitor References response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingReferencesResponse loadBalancerMonitorsListMonitorReferences(String monitorId) throws ApiException {
        ApiResponse<LoadBalancingReferencesResponse> localVarResp = loadBalancerMonitorsListMonitorReferencesWithHttpInfo(monitorId);
        return localVarResp.getData();
    }

    /**
     * List Monitor References
     * Get the list of resources that reference the provided monitor.
     * @param monitorId  (required)
     * @return ApiResponse&lt;LoadBalancingReferencesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Monitor References response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Monitor References response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingReferencesResponse> loadBalancerMonitorsListMonitorReferencesWithHttpInfo(String monitorId) throws ApiException {
        okhttp3.Call localVarCall = loadBalancerMonitorsListMonitorReferencesValidateBeforeCall(monitorId, null);
        Type localVarReturnType = new TypeToken<LoadBalancingReferencesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Monitor References (asynchronously)
     * Get the list of resources that reference the provided monitor.
     * @param monitorId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Monitor References response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Monitor References response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerMonitorsListMonitorReferencesAsync(String monitorId, final ApiCallback<LoadBalancingReferencesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = loadBalancerMonitorsListMonitorReferencesValidateBeforeCall(monitorId, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingReferencesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for loadBalancerMonitorsListMonitors
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Monitors response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Monitors response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerMonitorsListMonitorsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/load_balancers/monitors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loadBalancerMonitorsListMonitorsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return loadBalancerMonitorsListMonitorsCall(_callback);

    }

    /**
     * List Monitors
     * List configured monitors for a user.
     * @return LoadBalancingMonitorResponseCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Monitors response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Monitors response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingMonitorResponseCollection loadBalancerMonitorsListMonitors() throws ApiException {
        ApiResponse<LoadBalancingMonitorResponseCollection> localVarResp = loadBalancerMonitorsListMonitorsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List Monitors
     * List configured monitors for a user.
     * @return ApiResponse&lt;LoadBalancingMonitorResponseCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Monitors response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Monitors response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingMonitorResponseCollection> loadBalancerMonitorsListMonitorsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = loadBalancerMonitorsListMonitorsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<LoadBalancingMonitorResponseCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Monitors (asynchronously)
     * List configured monitors for a user.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Monitors response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> List Monitors response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerMonitorsListMonitorsAsync(final ApiCallback<LoadBalancingMonitorResponseCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = loadBalancerMonitorsListMonitorsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<LoadBalancingMonitorResponseCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for loadBalancerMonitorsMonitorDetails
     * @param monitorId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Monitor Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Monitor Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerMonitorsMonitorDetailsCall(String monitorId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/load_balancers/monitors/{monitor_id}"
            .replace("{" + "monitor_id" + "}", localVarApiClient.escapeString(monitorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loadBalancerMonitorsMonitorDetailsValidateBeforeCall(String monitorId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'monitorId' is set
        if (monitorId == null) {
            throw new ApiException("Missing the required parameter 'monitorId' when calling loadBalancerMonitorsMonitorDetails(Async)");
        }

        return loadBalancerMonitorsMonitorDetailsCall(monitorId, _callback);

    }

    /**
     * Monitor Details
     * List a single configured monitor for a user.
     * @param monitorId  (required)
     * @return LoadBalancingMonitorResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Monitor Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Monitor Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingMonitorResponseSingle loadBalancerMonitorsMonitorDetails(String monitorId) throws ApiException {
        ApiResponse<LoadBalancingMonitorResponseSingle> localVarResp = loadBalancerMonitorsMonitorDetailsWithHttpInfo(monitorId);
        return localVarResp.getData();
    }

    /**
     * Monitor Details
     * List a single configured monitor for a user.
     * @param monitorId  (required)
     * @return ApiResponse&lt;LoadBalancingMonitorResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Monitor Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Monitor Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingMonitorResponseSingle> loadBalancerMonitorsMonitorDetailsWithHttpInfo(String monitorId) throws ApiException {
        okhttp3.Call localVarCall = loadBalancerMonitorsMonitorDetailsValidateBeforeCall(monitorId, null);
        Type localVarReturnType = new TypeToken<LoadBalancingMonitorResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Monitor Details (asynchronously)
     * List a single configured monitor for a user.
     * @param monitorId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Monitor Details response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Monitor Details response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerMonitorsMonitorDetailsAsync(String monitorId, final ApiCallback<LoadBalancingMonitorResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = loadBalancerMonitorsMonitorDetailsValidateBeforeCall(monitorId, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingMonitorResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for loadBalancerMonitorsPatchMonitor
     * @param monitorId  (required)
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerMonitorsPatchMonitorCall(String monitorId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountLoadBalancerMonitorsCreateMonitorRequest;

        // create path and map variables
        String localVarPath = "/user/load_balancers/monitors/{monitor_id}"
            .replace("{" + "monitor_id" + "}", localVarApiClient.escapeString(monitorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loadBalancerMonitorsPatchMonitorValidateBeforeCall(String monitorId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'monitorId' is set
        if (monitorId == null) {
            throw new ApiException("Missing the required parameter 'monitorId' when calling loadBalancerMonitorsPatchMonitor(Async)");
        }

        // verify the required parameter 'accountLoadBalancerMonitorsCreateMonitorRequest' is set
        if (accountLoadBalancerMonitorsCreateMonitorRequest == null) {
            throw new ApiException("Missing the required parameter 'accountLoadBalancerMonitorsCreateMonitorRequest' when calling loadBalancerMonitorsPatchMonitor(Async)");
        }

        return loadBalancerMonitorsPatchMonitorCall(monitorId, accountLoadBalancerMonitorsCreateMonitorRequest, _callback);

    }

    /**
     * Patch Monitor
     * Apply changes to an existing monitor, overwriting the supplied properties.
     * @param monitorId  (required)
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @return LoadBalancingMonitorResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingMonitorResponseSingle loadBalancerMonitorsPatchMonitor(String monitorId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest) throws ApiException {
        ApiResponse<LoadBalancingMonitorResponseSingle> localVarResp = loadBalancerMonitorsPatchMonitorWithHttpInfo(monitorId, accountLoadBalancerMonitorsCreateMonitorRequest);
        return localVarResp.getData();
    }

    /**
     * Patch Monitor
     * Apply changes to an existing monitor, overwriting the supplied properties.
     * @param monitorId  (required)
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @return ApiResponse&lt;LoadBalancingMonitorResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingMonitorResponseSingle> loadBalancerMonitorsPatchMonitorWithHttpInfo(String monitorId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest) throws ApiException {
        okhttp3.Call localVarCall = loadBalancerMonitorsPatchMonitorValidateBeforeCall(monitorId, accountLoadBalancerMonitorsCreateMonitorRequest, null);
        Type localVarReturnType = new TypeToken<LoadBalancingMonitorResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch Monitor (asynchronously)
     * Apply changes to an existing monitor, overwriting the supplied properties.
     * @param monitorId  (required)
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Patch Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Patch Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerMonitorsPatchMonitorAsync(String monitorId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest, final ApiCallback<LoadBalancingMonitorResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = loadBalancerMonitorsPatchMonitorValidateBeforeCall(monitorId, accountLoadBalancerMonitorsCreateMonitorRequest, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingMonitorResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for loadBalancerMonitorsPreviewMonitor
     * @param monitorId  (required)
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Preview Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Preview Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerMonitorsPreviewMonitorCall(String monitorId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountLoadBalancerMonitorsCreateMonitorRequest;

        // create path and map variables
        String localVarPath = "/user/load_balancers/monitors/{monitor_id}/preview"
            .replace("{" + "monitor_id" + "}", localVarApiClient.escapeString(monitorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loadBalancerMonitorsPreviewMonitorValidateBeforeCall(String monitorId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'monitorId' is set
        if (monitorId == null) {
            throw new ApiException("Missing the required parameter 'monitorId' when calling loadBalancerMonitorsPreviewMonitor(Async)");
        }

        // verify the required parameter 'accountLoadBalancerMonitorsCreateMonitorRequest' is set
        if (accountLoadBalancerMonitorsCreateMonitorRequest == null) {
            throw new ApiException("Missing the required parameter 'accountLoadBalancerMonitorsCreateMonitorRequest' when calling loadBalancerMonitorsPreviewMonitor(Async)");
        }

        return loadBalancerMonitorsPreviewMonitorCall(monitorId, accountLoadBalancerMonitorsCreateMonitorRequest, _callback);

    }

    /**
     * Preview Monitor
     * Preview pools using the specified monitor with provided monitor details. The returned preview_id can be used in the preview endpoint to retrieve the results.
     * @param monitorId  (required)
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @return LoadBalancingPreviewResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Preview Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Preview Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingPreviewResponse loadBalancerMonitorsPreviewMonitor(String monitorId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest) throws ApiException {
        ApiResponse<LoadBalancingPreviewResponse> localVarResp = loadBalancerMonitorsPreviewMonitorWithHttpInfo(monitorId, accountLoadBalancerMonitorsCreateMonitorRequest);
        return localVarResp.getData();
    }

    /**
     * Preview Monitor
     * Preview pools using the specified monitor with provided monitor details. The returned preview_id can be used in the preview endpoint to retrieve the results.
     * @param monitorId  (required)
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @return ApiResponse&lt;LoadBalancingPreviewResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Preview Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Preview Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingPreviewResponse> loadBalancerMonitorsPreviewMonitorWithHttpInfo(String monitorId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest) throws ApiException {
        okhttp3.Call localVarCall = loadBalancerMonitorsPreviewMonitorValidateBeforeCall(monitorId, accountLoadBalancerMonitorsCreateMonitorRequest, null);
        Type localVarReturnType = new TypeToken<LoadBalancingPreviewResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Preview Monitor (asynchronously)
     * Preview pools using the specified monitor with provided monitor details. The returned preview_id can be used in the preview endpoint to retrieve the results.
     * @param monitorId  (required)
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Preview Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Preview Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerMonitorsPreviewMonitorAsync(String monitorId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest, final ApiCallback<LoadBalancingPreviewResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = loadBalancerMonitorsPreviewMonitorValidateBeforeCall(monitorId, accountLoadBalancerMonitorsCreateMonitorRequest, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingPreviewResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for loadBalancerMonitorsPreviewResult
     * @param previewId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Preview Result response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Preview Result response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerMonitorsPreviewResultCall(Object previewId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/load_balancers/preview/{preview_id}"
            .replace("{" + "preview_id" + "}", localVarApiClient.escapeString(previewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loadBalancerMonitorsPreviewResultValidateBeforeCall(Object previewId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'previewId' is set
        if (previewId == null) {
            throw new ApiException("Missing the required parameter 'previewId' when calling loadBalancerMonitorsPreviewResult(Async)");
        }

        return loadBalancerMonitorsPreviewResultCall(previewId, _callback);

    }

    /**
     * Preview Result
     * Get the result of a previous preview operation using the provided preview_id.
     * @param previewId  (required)
     * @return LoadBalancingPreviewResultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Preview Result response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Preview Result response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingPreviewResultResponse loadBalancerMonitorsPreviewResult(Object previewId) throws ApiException {
        ApiResponse<LoadBalancingPreviewResultResponse> localVarResp = loadBalancerMonitorsPreviewResultWithHttpInfo(previewId);
        return localVarResp.getData();
    }

    /**
     * Preview Result
     * Get the result of a previous preview operation using the provided preview_id.
     * @param previewId  (required)
     * @return ApiResponse&lt;LoadBalancingPreviewResultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Preview Result response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Preview Result response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingPreviewResultResponse> loadBalancerMonitorsPreviewResultWithHttpInfo(Object previewId) throws ApiException {
        okhttp3.Call localVarCall = loadBalancerMonitorsPreviewResultValidateBeforeCall(previewId, null);
        Type localVarReturnType = new TypeToken<LoadBalancingPreviewResultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Preview Result (asynchronously)
     * Get the result of a previous preview operation using the provided preview_id.
     * @param previewId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Preview Result response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Preview Result response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerMonitorsPreviewResultAsync(Object previewId, final ApiCallback<LoadBalancingPreviewResultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = loadBalancerMonitorsPreviewResultValidateBeforeCall(previewId, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingPreviewResultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for loadBalancerMonitorsUpdateMonitor
     * @param monitorId  (required)
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerMonitorsUpdateMonitorCall(String monitorId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountLoadBalancerMonitorsCreateMonitorRequest;

        // create path and map variables
        String localVarPath = "/user/load_balancers/monitors/{monitor_id}"
            .replace("{" + "monitor_id" + "}", localVarApiClient.escapeString(monitorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loadBalancerMonitorsUpdateMonitorValidateBeforeCall(String monitorId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'monitorId' is set
        if (monitorId == null) {
            throw new ApiException("Missing the required parameter 'monitorId' when calling loadBalancerMonitorsUpdateMonitor(Async)");
        }

        // verify the required parameter 'accountLoadBalancerMonitorsCreateMonitorRequest' is set
        if (accountLoadBalancerMonitorsCreateMonitorRequest == null) {
            throw new ApiException("Missing the required parameter 'accountLoadBalancerMonitorsCreateMonitorRequest' when calling loadBalancerMonitorsUpdateMonitor(Async)");
        }

        return loadBalancerMonitorsUpdateMonitorCall(monitorId, accountLoadBalancerMonitorsCreateMonitorRequest, _callback);

    }

    /**
     * Update Monitor
     * Modify a configured monitor.
     * @param monitorId  (required)
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @return LoadBalancingMonitorResponseSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public LoadBalancingMonitorResponseSingle loadBalancerMonitorsUpdateMonitor(String monitorId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest) throws ApiException {
        ApiResponse<LoadBalancingMonitorResponseSingle> localVarResp = loadBalancerMonitorsUpdateMonitorWithHttpInfo(monitorId, accountLoadBalancerMonitorsCreateMonitorRequest);
        return localVarResp.getData();
    }

    /**
     * Update Monitor
     * Modify a configured monitor.
     * @param monitorId  (required)
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @return ApiResponse&lt;LoadBalancingMonitorResponseSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoadBalancingMonitorResponseSingle> loadBalancerMonitorsUpdateMonitorWithHttpInfo(String monitorId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest) throws ApiException {
        okhttp3.Call localVarCall = loadBalancerMonitorsUpdateMonitorValidateBeforeCall(monitorId, accountLoadBalancerMonitorsCreateMonitorRequest, null);
        Type localVarReturnType = new TypeToken<LoadBalancingMonitorResponseSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Monitor (asynchronously)
     * Modify a configured monitor.
     * @param monitorId  (required)
     * @param accountLoadBalancerMonitorsCreateMonitorRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update Monitor response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Update Monitor response failure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadBalancerMonitorsUpdateMonitorAsync(String monitorId, AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest, final ApiCallback<LoadBalancingMonitorResponseSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = loadBalancerMonitorsUpdateMonitorValidateBeforeCall(monitorId, accountLoadBalancerMonitorsCreateMonitorRequest, _callback);
        Type localVarReturnType = new TypeToken<LoadBalancingMonitorResponseSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
