/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import org.openapitools.client.model.RadarGetTrafficAnomalies200Response;
import org.openapitools.client.model.RadarGetTrafficAnomaliesTop200Response;
import org.openapitools.client.model.WorkersAiListFinetunes400Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RadarTrafficAnomaliesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RadarTrafficAnomaliesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RadarTrafficAnomaliesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for radarGetTrafficAnomalies
     * @param limit  (optional)
     * @param offset  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param status  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Internet traffic anomalies </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetTrafficAnomaliesCall(Integer limit, Integer offset, String dateRange, OffsetDateTime dateStart, OffsetDateTime dateEnd, String status, Integer asn, String location, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/traffic_anomalies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (dateRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateEnd", dateEnd));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (asn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asn", asn));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetTrafficAnomaliesValidateBeforeCall(Integer limit, Integer offset, String dateRange, OffsetDateTime dateStart, OffsetDateTime dateEnd, String status, Integer asn, String location, String format, final ApiCallback _callback) throws ApiException {
        return radarGetTrafficAnomaliesCall(limit, offset, dateRange, dateStart, dateEnd, status, asn, location, format, _callback);

    }

    /**
     * Get latest Internet traffic anomalies.
     * Internet traffic anomalies are signals that might point to an outage,         These alerts are automatically detected by Radar and then manually verified by our team.         This endpoint returns the latest alerts.         
     * @param limit  (optional)
     * @param offset  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param status  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param format  (optional)
     * @return RadarGetTrafficAnomalies200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Internet traffic anomalies </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetTrafficAnomalies200Response radarGetTrafficAnomalies(Integer limit, Integer offset, String dateRange, OffsetDateTime dateStart, OffsetDateTime dateEnd, String status, Integer asn, String location, String format) throws ApiException {
        ApiResponse<RadarGetTrafficAnomalies200Response> localVarResp = radarGetTrafficAnomaliesWithHttpInfo(limit, offset, dateRange, dateStart, dateEnd, status, asn, location, format);
        return localVarResp.getData();
    }

    /**
     * Get latest Internet traffic anomalies.
     * Internet traffic anomalies are signals that might point to an outage,         These alerts are automatically detected by Radar and then manually verified by our team.         This endpoint returns the latest alerts.         
     * @param limit  (optional)
     * @param offset  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param status  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetTrafficAnomalies200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Internet traffic anomalies </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetTrafficAnomalies200Response> radarGetTrafficAnomaliesWithHttpInfo(Integer limit, Integer offset, String dateRange, OffsetDateTime dateStart, OffsetDateTime dateEnd, String status, Integer asn, String location, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetTrafficAnomaliesValidateBeforeCall(limit, offset, dateRange, dateStart, dateEnd, status, asn, location, format, null);
        Type localVarReturnType = new TypeToken<RadarGetTrafficAnomalies200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get latest Internet traffic anomalies. (asynchronously)
     * Internet traffic anomalies are signals that might point to an outage,         These alerts are automatically detected by Radar and then manually verified by our team.         This endpoint returns the latest alerts.         
     * @param limit  (optional)
     * @param offset  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param status  (optional)
     * @param asn  (optional)
     * @param location  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Internet traffic anomalies </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetTrafficAnomaliesAsync(Integer limit, Integer offset, String dateRange, OffsetDateTime dateStart, OffsetDateTime dateEnd, String status, Integer asn, String location, String format, final ApiCallback<RadarGetTrafficAnomalies200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetTrafficAnomaliesValidateBeforeCall(limit, offset, dateRange, dateStart, dateEnd, status, asn, location, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetTrafficAnomalies200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for radarGetTrafficAnomaliesTop
     * @param limit  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param status  (optional)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of locations with number of traffic anomalies </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetTrafficAnomaliesTopCall(Integer limit, String dateRange, OffsetDateTime dateStart, OffsetDateTime dateEnd, String status, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/radar/traffic_anomalies/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (dateRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateRange", dateRange));
        }

        if (dateStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateStart", dateStart));
        }

        if (dateEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateEnd", dateEnd));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "api_token", "api_email" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call radarGetTrafficAnomaliesTopValidateBeforeCall(Integer limit, String dateRange, OffsetDateTime dateStart, OffsetDateTime dateEnd, String status, String format, final ApiCallback _callback) throws ApiException {
        return radarGetTrafficAnomaliesTopCall(limit, dateRange, dateStart, dateEnd, status, format, _callback);

    }

    /**
     * Get top locations by total traffic anomalies generated.
     * Internet traffic anomalies are signals that might point to an outage,         These alerts are automatically detected by Radar and then manually verified by our team.         This endpoint returns the sum of alerts grouped by location.         
     * @param limit  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param status  (optional)
     * @param format  (optional)
     * @return RadarGetTrafficAnomaliesTop200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of locations with number of traffic anomalies </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RadarGetTrafficAnomaliesTop200Response radarGetTrafficAnomaliesTop(Integer limit, String dateRange, OffsetDateTime dateStart, OffsetDateTime dateEnd, String status, String format) throws ApiException {
        ApiResponse<RadarGetTrafficAnomaliesTop200Response> localVarResp = radarGetTrafficAnomaliesTopWithHttpInfo(limit, dateRange, dateStart, dateEnd, status, format);
        return localVarResp.getData();
    }

    /**
     * Get top locations by total traffic anomalies generated.
     * Internet traffic anomalies are signals that might point to an outage,         These alerts are automatically detected by Radar and then manually verified by our team.         This endpoint returns the sum of alerts grouped by location.         
     * @param limit  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param status  (optional)
     * @param format  (optional)
     * @return ApiResponse&lt;RadarGetTrafficAnomaliesTop200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of locations with number of traffic anomalies </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadarGetTrafficAnomaliesTop200Response> radarGetTrafficAnomaliesTopWithHttpInfo(Integer limit, String dateRange, OffsetDateTime dateStart, OffsetDateTime dateEnd, String status, String format) throws ApiException {
        okhttp3.Call localVarCall = radarGetTrafficAnomaliesTopValidateBeforeCall(limit, dateRange, dateStart, dateEnd, status, format, null);
        Type localVarReturnType = new TypeToken<RadarGetTrafficAnomaliesTop200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get top locations by total traffic anomalies generated. (asynchronously)
     * Internet traffic anomalies are signals that might point to an outage,         These alerts are automatically detected by Radar and then manually verified by our team.         This endpoint returns the sum of alerts grouped by location.         
     * @param limit  (optional)
     * @param dateRange  (optional)
     * @param dateStart  (optional)
     * @param dateEnd  (optional)
     * @param status  (optional)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of locations with number of traffic anomalies </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call radarGetTrafficAnomaliesTopAsync(Integer limit, String dateRange, OffsetDateTime dateStart, OffsetDateTime dateEnd, String status, String format, final ApiCallback<RadarGetTrafficAnomaliesTop200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = radarGetTrafficAnomaliesTopValidateBeforeCall(limit, dateRange, dateStart, dateEnd, status, format, _callback);
        Type localVarReturnType = new TypeToken<RadarGetTrafficAnomaliesTop200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
