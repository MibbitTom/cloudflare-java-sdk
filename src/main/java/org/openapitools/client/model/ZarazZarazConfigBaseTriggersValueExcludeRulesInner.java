/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ZarazClickListenerRule;
import org.openapitools.client.model.ZarazElementVisibilityRule;
import org.openapitools.client.model.ZarazElementVisibilityRuleSettings;
import org.openapitools.client.model.ZarazFormSubmissionRule;
import org.openapitools.client.model.ZarazLoadRule;
import org.openapitools.client.model.ZarazScrollDepthRule;
import org.openapitools.client.model.ZarazTimerRule;
import org.openapitools.client.model.ZarazVariableMatchRule;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class ZarazZarazConfigBaseTriggersValueExcludeRulesInner extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(ZarazZarazConfigBaseTriggersValueExcludeRulesInner.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ZarazZarazConfigBaseTriggersValueExcludeRulesInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ZarazZarazConfigBaseTriggersValueExcludeRulesInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ZarazLoadRule> adapterZarazLoadRule = gson.getDelegateAdapter(this, TypeToken.get(ZarazLoadRule.class));
            final TypeAdapter<ZarazClickListenerRule> adapterZarazClickListenerRule = gson.getDelegateAdapter(this, TypeToken.get(ZarazClickListenerRule.class));
            final TypeAdapter<ZarazTimerRule> adapterZarazTimerRule = gson.getDelegateAdapter(this, TypeToken.get(ZarazTimerRule.class));
            final TypeAdapter<ZarazFormSubmissionRule> adapterZarazFormSubmissionRule = gson.getDelegateAdapter(this, TypeToken.get(ZarazFormSubmissionRule.class));
            final TypeAdapter<ZarazVariableMatchRule> adapterZarazVariableMatchRule = gson.getDelegateAdapter(this, TypeToken.get(ZarazVariableMatchRule.class));
            final TypeAdapter<ZarazScrollDepthRule> adapterZarazScrollDepthRule = gson.getDelegateAdapter(this, TypeToken.get(ZarazScrollDepthRule.class));
            final TypeAdapter<ZarazElementVisibilityRule> adapterZarazElementVisibilityRule = gson.getDelegateAdapter(this, TypeToken.get(ZarazElementVisibilityRule.class));

            return (TypeAdapter<T>) new TypeAdapter<ZarazZarazConfigBaseTriggersValueExcludeRulesInner>() {
                @Override
                public void write(JsonWriter out, ZarazZarazConfigBaseTriggersValueExcludeRulesInner value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `ZarazLoadRule`
                    if (value.getActualInstance() instanceof ZarazLoadRule) {
                        JsonElement element = adapterZarazLoadRule.toJsonTree((ZarazLoadRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZarazClickListenerRule`
                    if (value.getActualInstance() instanceof ZarazClickListenerRule) {
                        JsonElement element = adapterZarazClickListenerRule.toJsonTree((ZarazClickListenerRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZarazTimerRule`
                    if (value.getActualInstance() instanceof ZarazTimerRule) {
                        JsonElement element = adapterZarazTimerRule.toJsonTree((ZarazTimerRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZarazFormSubmissionRule`
                    if (value.getActualInstance() instanceof ZarazFormSubmissionRule) {
                        JsonElement element = adapterZarazFormSubmissionRule.toJsonTree((ZarazFormSubmissionRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZarazVariableMatchRule`
                    if (value.getActualInstance() instanceof ZarazVariableMatchRule) {
                        JsonElement element = adapterZarazVariableMatchRule.toJsonTree((ZarazVariableMatchRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZarazScrollDepthRule`
                    if (value.getActualInstance() instanceof ZarazScrollDepthRule) {
                        JsonElement element = adapterZarazScrollDepthRule.toJsonTree((ZarazScrollDepthRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZarazElementVisibilityRule`
                    if (value.getActualInstance() instanceof ZarazElementVisibilityRule) {
                        JsonElement element = adapterZarazElementVisibilityRule.toJsonTree((ZarazElementVisibilityRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemas: ZarazClickListenerRule, ZarazElementVisibilityRule, ZarazFormSubmissionRule, ZarazLoadRule, ZarazScrollDepthRule, ZarazTimerRule, ZarazVariableMatchRule");
                }

                @Override
                public ZarazZarazConfigBaseTriggersValueExcludeRulesInner read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize ZarazLoadRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZarazLoadRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterZarazLoadRule;
                        ZarazZarazConfigBaseTriggersValueExcludeRulesInner ret = new ZarazZarazConfigBaseTriggersValueExcludeRulesInner();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZarazLoadRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZarazLoadRule'", e);
                    }
                    // deserialize ZarazClickListenerRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZarazClickListenerRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterZarazClickListenerRule;
                        ZarazZarazConfigBaseTriggersValueExcludeRulesInner ret = new ZarazZarazConfigBaseTriggersValueExcludeRulesInner();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZarazClickListenerRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZarazClickListenerRule'", e);
                    }
                    // deserialize ZarazTimerRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZarazTimerRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterZarazTimerRule;
                        ZarazZarazConfigBaseTriggersValueExcludeRulesInner ret = new ZarazZarazConfigBaseTriggersValueExcludeRulesInner();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZarazTimerRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZarazTimerRule'", e);
                    }
                    // deserialize ZarazFormSubmissionRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZarazFormSubmissionRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterZarazFormSubmissionRule;
                        ZarazZarazConfigBaseTriggersValueExcludeRulesInner ret = new ZarazZarazConfigBaseTriggersValueExcludeRulesInner();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZarazFormSubmissionRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZarazFormSubmissionRule'", e);
                    }
                    // deserialize ZarazVariableMatchRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZarazVariableMatchRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterZarazVariableMatchRule;
                        ZarazZarazConfigBaseTriggersValueExcludeRulesInner ret = new ZarazZarazConfigBaseTriggersValueExcludeRulesInner();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZarazVariableMatchRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZarazVariableMatchRule'", e);
                    }
                    // deserialize ZarazScrollDepthRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZarazScrollDepthRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterZarazScrollDepthRule;
                        ZarazZarazConfigBaseTriggersValueExcludeRulesInner ret = new ZarazZarazConfigBaseTriggersValueExcludeRulesInner();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZarazScrollDepthRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZarazScrollDepthRule'", e);
                    }
                    // deserialize ZarazElementVisibilityRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZarazElementVisibilityRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterZarazElementVisibilityRule;
                        ZarazZarazConfigBaseTriggersValueExcludeRulesInner ret = new ZarazZarazConfigBaseTriggersValueExcludeRulesInner();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZarazElementVisibilityRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZarazElementVisibilityRule'", e);
                    }

                    throw new IOException(String.format("Failed deserialization for ZarazZarazConfigBaseTriggersValueExcludeRulesInner: no class matches result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public ZarazZarazConfigBaseTriggersValueExcludeRulesInner() {
        super("anyOf", Boolean.FALSE);
    }

    public ZarazZarazConfigBaseTriggersValueExcludeRulesInner(ZarazClickListenerRule o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZarazZarazConfigBaseTriggersValueExcludeRulesInner(ZarazElementVisibilityRule o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZarazZarazConfigBaseTriggersValueExcludeRulesInner(ZarazFormSubmissionRule o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZarazZarazConfigBaseTriggersValueExcludeRulesInner(ZarazLoadRule o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZarazZarazConfigBaseTriggersValueExcludeRulesInner(ZarazScrollDepthRule o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZarazZarazConfigBaseTriggersValueExcludeRulesInner(ZarazTimerRule o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZarazZarazConfigBaseTriggersValueExcludeRulesInner(ZarazVariableMatchRule o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ZarazLoadRule", ZarazLoadRule.class);
        schemas.put("ZarazClickListenerRule", ZarazClickListenerRule.class);
        schemas.put("ZarazTimerRule", ZarazTimerRule.class);
        schemas.put("ZarazFormSubmissionRule", ZarazFormSubmissionRule.class);
        schemas.put("ZarazVariableMatchRule", ZarazVariableMatchRule.class);
        schemas.put("ZarazScrollDepthRule", ZarazScrollDepthRule.class);
        schemas.put("ZarazElementVisibilityRule", ZarazElementVisibilityRule.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return ZarazZarazConfigBaseTriggersValueExcludeRulesInner.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * ZarazClickListenerRule, ZarazElementVisibilityRule, ZarazFormSubmissionRule, ZarazLoadRule, ZarazScrollDepthRule, ZarazTimerRule, ZarazVariableMatchRule
     *
     * It could be an instance of the 'anyOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof ZarazLoadRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZarazClickListenerRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZarazTimerRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZarazFormSubmissionRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZarazVariableMatchRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZarazScrollDepthRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZarazElementVisibilityRule) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ZarazClickListenerRule, ZarazElementVisibilityRule, ZarazFormSubmissionRule, ZarazLoadRule, ZarazScrollDepthRule, ZarazTimerRule, ZarazVariableMatchRule");
    }

    /**
     * Get the actual instance, which can be the following:
     * ZarazClickListenerRule, ZarazElementVisibilityRule, ZarazFormSubmissionRule, ZarazLoadRule, ZarazScrollDepthRule, ZarazTimerRule, ZarazVariableMatchRule
     *
     * @return The actual instance (ZarazClickListenerRule, ZarazElementVisibilityRule, ZarazFormSubmissionRule, ZarazLoadRule, ZarazScrollDepthRule, ZarazTimerRule, ZarazVariableMatchRule)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ZarazLoadRule`. If the actual instance is not `ZarazLoadRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZarazLoadRule`
     * @throws ClassCastException if the instance is not `ZarazLoadRule`
     */
    public ZarazLoadRule getZarazLoadRule() throws ClassCastException {
        return (ZarazLoadRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZarazClickListenerRule`. If the actual instance is not `ZarazClickListenerRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZarazClickListenerRule`
     * @throws ClassCastException if the instance is not `ZarazClickListenerRule`
     */
    public ZarazClickListenerRule getZarazClickListenerRule() throws ClassCastException {
        return (ZarazClickListenerRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZarazTimerRule`. If the actual instance is not `ZarazTimerRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZarazTimerRule`
     * @throws ClassCastException if the instance is not `ZarazTimerRule`
     */
    public ZarazTimerRule getZarazTimerRule() throws ClassCastException {
        return (ZarazTimerRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZarazFormSubmissionRule`. If the actual instance is not `ZarazFormSubmissionRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZarazFormSubmissionRule`
     * @throws ClassCastException if the instance is not `ZarazFormSubmissionRule`
     */
    public ZarazFormSubmissionRule getZarazFormSubmissionRule() throws ClassCastException {
        return (ZarazFormSubmissionRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZarazVariableMatchRule`. If the actual instance is not `ZarazVariableMatchRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZarazVariableMatchRule`
     * @throws ClassCastException if the instance is not `ZarazVariableMatchRule`
     */
    public ZarazVariableMatchRule getZarazVariableMatchRule() throws ClassCastException {
        return (ZarazVariableMatchRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZarazScrollDepthRule`. If the actual instance is not `ZarazScrollDepthRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZarazScrollDepthRule`
     * @throws ClassCastException if the instance is not `ZarazScrollDepthRule`
     */
    public ZarazScrollDepthRule getZarazScrollDepthRule() throws ClassCastException {
        return (ZarazScrollDepthRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZarazElementVisibilityRule`. If the actual instance is not `ZarazElementVisibilityRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZarazElementVisibilityRule`
     * @throws ClassCastException if the instance is not `ZarazElementVisibilityRule`
     */
    public ZarazElementVisibilityRule getZarazElementVisibilityRule() throws ClassCastException {
        return (ZarazElementVisibilityRule)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to ZarazZarazConfigBaseTriggersValueExcludeRulesInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate anyOf schemas one by one
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with ZarazLoadRule
        try {
            ZarazLoadRule.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZarazLoadRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZarazClickListenerRule
        try {
            ZarazClickListenerRule.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZarazClickListenerRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZarazTimerRule
        try {
            ZarazTimerRule.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZarazTimerRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZarazFormSubmissionRule
        try {
            ZarazFormSubmissionRule.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZarazFormSubmissionRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZarazVariableMatchRule
        try {
            ZarazVariableMatchRule.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZarazVariableMatchRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZarazScrollDepthRule
        try {
            ZarazScrollDepthRule.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZarazScrollDepthRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZarazElementVisibilityRule
        try {
            ZarazElementVisibilityRule.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZarazElementVisibilityRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        throw new IOException(String.format("The JSON string is invalid for ZarazZarazConfigBaseTriggersValueExcludeRulesInner with anyOf schemas: ZarazClickListenerRule, ZarazElementVisibilityRule, ZarazFormSubmissionRule, ZarazLoadRule, ZarazScrollDepthRule, ZarazTimerRule, ZarazVariableMatchRule. no class match the result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
    }

    /**
     * Create an instance of ZarazZarazConfigBaseTriggersValueExcludeRulesInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ZarazZarazConfigBaseTriggersValueExcludeRulesInner
     * @throws IOException if the JSON string is invalid with respect to ZarazZarazConfigBaseTriggersValueExcludeRulesInner
     */
    public static ZarazZarazConfigBaseTriggersValueExcludeRulesInner fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ZarazZarazConfigBaseTriggersValueExcludeRulesInner.class);
    }

    /**
     * Convert an instance of ZarazZarazConfigBaseTriggersValueExcludeRulesInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

