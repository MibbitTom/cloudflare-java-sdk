/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.ObservatoryDeviceType;
import org.openapitools.client.model.ObservatoryLighthouseReportError;
import org.openapitools.client.model.ObservatoryLighthouseState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Lighthouse report.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class ObservatoryLighthouseReport {
  public static final String SERIALIZED_NAME_CLS = "cls";
  @SerializedName(SERIALIZED_NAME_CLS)
  private BigDecimal cls;

  public static final String SERIALIZED_NAME_DEVICE_TYPE = "deviceType";
  @SerializedName(SERIALIZED_NAME_DEVICE_TYPE)
  private ObservatoryDeviceType deviceType;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private ObservatoryLighthouseReportError error;

  public static final String SERIALIZED_NAME_FCP = "fcp";
  @SerializedName(SERIALIZED_NAME_FCP)
  private BigDecimal fcp;

  public static final String SERIALIZED_NAME_JSON_REPORT_URL = "jsonReportUrl";
  @SerializedName(SERIALIZED_NAME_JSON_REPORT_URL)
  private String jsonReportUrl;

  public static final String SERIALIZED_NAME_LCP = "lcp";
  @SerializedName(SERIALIZED_NAME_LCP)
  private BigDecimal lcp;

  public static final String SERIALIZED_NAME_PERFORMANCE_SCORE = "performanceScore";
  @SerializedName(SERIALIZED_NAME_PERFORMANCE_SCORE)
  private BigDecimal performanceScore;

  public static final String SERIALIZED_NAME_SI = "si";
  @SerializedName(SERIALIZED_NAME_SI)
  private BigDecimal si;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private ObservatoryLighthouseState state;

  public static final String SERIALIZED_NAME_TBT = "tbt";
  @SerializedName(SERIALIZED_NAME_TBT)
  private BigDecimal tbt;

  public static final String SERIALIZED_NAME_TTFB = "ttfb";
  @SerializedName(SERIALIZED_NAME_TTFB)
  private BigDecimal ttfb;

  public static final String SERIALIZED_NAME_TTI = "tti";
  @SerializedName(SERIALIZED_NAME_TTI)
  private BigDecimal tti;

  public ObservatoryLighthouseReport() {
  }

  public ObservatoryLighthouseReport cls(BigDecimal cls) {
    this.cls = cls;
    return this;
  }

   /**
   * Cumulative Layout Shift.
   * @return cls
  **/
  @javax.annotation.Nullable
  public BigDecimal getCls() {
    return cls;
  }

  public void setCls(BigDecimal cls) {
    this.cls = cls;
  }


  public ObservatoryLighthouseReport deviceType(ObservatoryDeviceType deviceType) {
    this.deviceType = deviceType;
    return this;
  }

   /**
   * Get deviceType
   * @return deviceType
  **/
  @javax.annotation.Nullable
  public ObservatoryDeviceType getDeviceType() {
    return deviceType;
  }

  public void setDeviceType(ObservatoryDeviceType deviceType) {
    this.deviceType = deviceType;
  }


  public ObservatoryLighthouseReport error(ObservatoryLighthouseReportError error) {
    this.error = error;
    return this;
  }

   /**
   * Get error
   * @return error
  **/
  @javax.annotation.Nullable
  public ObservatoryLighthouseReportError getError() {
    return error;
  }

  public void setError(ObservatoryLighthouseReportError error) {
    this.error = error;
  }


  public ObservatoryLighthouseReport fcp(BigDecimal fcp) {
    this.fcp = fcp;
    return this;
  }

   /**
   * First Contentful Paint.
   * @return fcp
  **/
  @javax.annotation.Nullable
  public BigDecimal getFcp() {
    return fcp;
  }

  public void setFcp(BigDecimal fcp) {
    this.fcp = fcp;
  }


  public ObservatoryLighthouseReport jsonReportUrl(String jsonReportUrl) {
    this.jsonReportUrl = jsonReportUrl;
    return this;
  }

   /**
   * The URL to the full Lighthouse JSON report.
   * @return jsonReportUrl
  **/
  @javax.annotation.Nullable
  public String getJsonReportUrl() {
    return jsonReportUrl;
  }

  public void setJsonReportUrl(String jsonReportUrl) {
    this.jsonReportUrl = jsonReportUrl;
  }


  public ObservatoryLighthouseReport lcp(BigDecimal lcp) {
    this.lcp = lcp;
    return this;
  }

   /**
   * Largest Contentful Paint.
   * @return lcp
  **/
  @javax.annotation.Nullable
  public BigDecimal getLcp() {
    return lcp;
  }

  public void setLcp(BigDecimal lcp) {
    this.lcp = lcp;
  }


  public ObservatoryLighthouseReport performanceScore(BigDecimal performanceScore) {
    this.performanceScore = performanceScore;
    return this;
  }

   /**
   * The Lighthouse performance score.
   * @return performanceScore
  **/
  @javax.annotation.Nullable
  public BigDecimal getPerformanceScore() {
    return performanceScore;
  }

  public void setPerformanceScore(BigDecimal performanceScore) {
    this.performanceScore = performanceScore;
  }


  public ObservatoryLighthouseReport si(BigDecimal si) {
    this.si = si;
    return this;
  }

   /**
   * Speed Index.
   * @return si
  **/
  @javax.annotation.Nullable
  public BigDecimal getSi() {
    return si;
  }

  public void setSi(BigDecimal si) {
    this.si = si;
  }


  public ObservatoryLighthouseReport state(ObservatoryLighthouseState state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  public ObservatoryLighthouseState getState() {
    return state;
  }

  public void setState(ObservatoryLighthouseState state) {
    this.state = state;
  }


  public ObservatoryLighthouseReport tbt(BigDecimal tbt) {
    this.tbt = tbt;
    return this;
  }

   /**
   * Total Blocking Time.
   * @return tbt
  **/
  @javax.annotation.Nullable
  public BigDecimal getTbt() {
    return tbt;
  }

  public void setTbt(BigDecimal tbt) {
    this.tbt = tbt;
  }


  public ObservatoryLighthouseReport ttfb(BigDecimal ttfb) {
    this.ttfb = ttfb;
    return this;
  }

   /**
   * Time To First Byte.
   * @return ttfb
  **/
  @javax.annotation.Nullable
  public BigDecimal getTtfb() {
    return ttfb;
  }

  public void setTtfb(BigDecimal ttfb) {
    this.ttfb = ttfb;
  }


  public ObservatoryLighthouseReport tti(BigDecimal tti) {
    this.tti = tti;
    return this;
  }

   /**
   * Time To Interactive.
   * @return tti
  **/
  @javax.annotation.Nullable
  public BigDecimal getTti() {
    return tti;
  }

  public void setTti(BigDecimal tti) {
    this.tti = tti;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObservatoryLighthouseReport observatoryLighthouseReport = (ObservatoryLighthouseReport) o;
    return Objects.equals(this.cls, observatoryLighthouseReport.cls) &&
        Objects.equals(this.deviceType, observatoryLighthouseReport.deviceType) &&
        Objects.equals(this.error, observatoryLighthouseReport.error) &&
        Objects.equals(this.fcp, observatoryLighthouseReport.fcp) &&
        Objects.equals(this.jsonReportUrl, observatoryLighthouseReport.jsonReportUrl) &&
        Objects.equals(this.lcp, observatoryLighthouseReport.lcp) &&
        Objects.equals(this.performanceScore, observatoryLighthouseReport.performanceScore) &&
        Objects.equals(this.si, observatoryLighthouseReport.si) &&
        Objects.equals(this.state, observatoryLighthouseReport.state) &&
        Objects.equals(this.tbt, observatoryLighthouseReport.tbt) &&
        Objects.equals(this.ttfb, observatoryLighthouseReport.ttfb) &&
        Objects.equals(this.tti, observatoryLighthouseReport.tti);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cls, deviceType, error, fcp, jsonReportUrl, lcp, performanceScore, si, state, tbt, ttfb, tti);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObservatoryLighthouseReport {\n");
    sb.append("    cls: ").append(toIndentedString(cls)).append("\n");
    sb.append("    deviceType: ").append(toIndentedString(deviceType)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    fcp: ").append(toIndentedString(fcp)).append("\n");
    sb.append("    jsonReportUrl: ").append(toIndentedString(jsonReportUrl)).append("\n");
    sb.append("    lcp: ").append(toIndentedString(lcp)).append("\n");
    sb.append("    performanceScore: ").append(toIndentedString(performanceScore)).append("\n");
    sb.append("    si: ").append(toIndentedString(si)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    tbt: ").append(toIndentedString(tbt)).append("\n");
    sb.append("    ttfb: ").append(toIndentedString(ttfb)).append("\n");
    sb.append("    tti: ").append(toIndentedString(tti)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cls");
    openapiFields.add("deviceType");
    openapiFields.add("error");
    openapiFields.add("fcp");
    openapiFields.add("jsonReportUrl");
    openapiFields.add("lcp");
    openapiFields.add("performanceScore");
    openapiFields.add("si");
    openapiFields.add("state");
    openapiFields.add("tbt");
    openapiFields.add("ttfb");
    openapiFields.add("tti");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ObservatoryLighthouseReport
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ObservatoryLighthouseReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ObservatoryLighthouseReport is not found in the empty JSON string", ObservatoryLighthouseReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ObservatoryLighthouseReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ObservatoryLighthouseReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `deviceType`
      if (jsonObj.get("deviceType") != null && !jsonObj.get("deviceType").isJsonNull()) {
        ObservatoryDeviceType.validateJsonElement(jsonObj.get("deviceType"));
      }
      // validate the optional field `error`
      if (jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) {
        ObservatoryLighthouseReportError.validateJsonElement(jsonObj.get("error"));
      }
      if ((jsonObj.get("jsonReportUrl") != null && !jsonObj.get("jsonReportUrl").isJsonNull()) && !jsonObj.get("jsonReportUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jsonReportUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jsonReportUrl").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        ObservatoryLighthouseState.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ObservatoryLighthouseReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ObservatoryLighthouseReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ObservatoryLighthouseReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ObservatoryLighthouseReport.class));

       return (TypeAdapter<T>) new TypeAdapter<ObservatoryLighthouseReport>() {
           @Override
           public void write(JsonWriter out, ObservatoryLighthouseReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ObservatoryLighthouseReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ObservatoryLighthouseReport given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ObservatoryLighthouseReport
  * @throws IOException if the JSON string is invalid with respect to ObservatoryLighthouseReport
  */
  public static ObservatoryLighthouseReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ObservatoryLighthouseReport.class);
  }

 /**
  * Convert an instance of ObservatoryLighthouseReport to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

