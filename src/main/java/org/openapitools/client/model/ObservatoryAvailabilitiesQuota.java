/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * ObservatoryAvailabilitiesQuota
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class ObservatoryAvailabilitiesQuota {
  public static final String SERIALIZED_NAME_PLAN = "plan";
  @SerializedName(SERIALIZED_NAME_PLAN)
  private String plan;

  public static final String SERIALIZED_NAME_QUOTAS_PER_PLAN = "quotasPerPlan";
  @SerializedName(SERIALIZED_NAME_QUOTAS_PER_PLAN)
  private Map<String, BigDecimal> quotasPerPlan = new HashMap<>();

  public static final String SERIALIZED_NAME_REMAINING_SCHEDULES = "remainingSchedules";
  @SerializedName(SERIALIZED_NAME_REMAINING_SCHEDULES)
  private BigDecimal remainingSchedules;

  public static final String SERIALIZED_NAME_REMAINING_TESTS = "remainingTests";
  @SerializedName(SERIALIZED_NAME_REMAINING_TESTS)
  private BigDecimal remainingTests;

  public static final String SERIALIZED_NAME_SCHEDULE_QUOTAS_PER_PLAN = "scheduleQuotasPerPlan";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_QUOTAS_PER_PLAN)
  private Map<String, BigDecimal> scheduleQuotasPerPlan = new HashMap<>();

  public ObservatoryAvailabilitiesQuota() {
  }

  public ObservatoryAvailabilitiesQuota plan(String plan) {
    this.plan = plan;
    return this;
  }

   /**
   * Cloudflare plan.
   * @return plan
  **/
  @javax.annotation.Nullable
  public String getPlan() {
    return plan;
  }

  public void setPlan(String plan) {
    this.plan = plan;
  }


  public ObservatoryAvailabilitiesQuota quotasPerPlan(Map<String, BigDecimal> quotasPerPlan) {
    this.quotasPerPlan = quotasPerPlan;
    return this;
  }

  public ObservatoryAvailabilitiesQuota putQuotasPerPlanItem(String key, BigDecimal quotasPerPlanItem) {
    if (this.quotasPerPlan == null) {
      this.quotasPerPlan = new HashMap<>();
    }
    this.quotasPerPlan.put(key, quotasPerPlanItem);
    return this;
  }

   /**
   * The number of tests available per plan.
   * @return quotasPerPlan
  **/
  @javax.annotation.Nullable
  public Map<String, BigDecimal> getQuotasPerPlan() {
    return quotasPerPlan;
  }

  public void setQuotasPerPlan(Map<String, BigDecimal> quotasPerPlan) {
    this.quotasPerPlan = quotasPerPlan;
  }


  public ObservatoryAvailabilitiesQuota remainingSchedules(BigDecimal remainingSchedules) {
    this.remainingSchedules = remainingSchedules;
    return this;
  }

   /**
   * The number of remaining schedules available.
   * @return remainingSchedules
  **/
  @javax.annotation.Nullable
  public BigDecimal getRemainingSchedules() {
    return remainingSchedules;
  }

  public void setRemainingSchedules(BigDecimal remainingSchedules) {
    this.remainingSchedules = remainingSchedules;
  }


  public ObservatoryAvailabilitiesQuota remainingTests(BigDecimal remainingTests) {
    this.remainingTests = remainingTests;
    return this;
  }

   /**
   * The number of remaining tests available.
   * @return remainingTests
  **/
  @javax.annotation.Nullable
  public BigDecimal getRemainingTests() {
    return remainingTests;
  }

  public void setRemainingTests(BigDecimal remainingTests) {
    this.remainingTests = remainingTests;
  }


  public ObservatoryAvailabilitiesQuota scheduleQuotasPerPlan(Map<String, BigDecimal> scheduleQuotasPerPlan) {
    this.scheduleQuotasPerPlan = scheduleQuotasPerPlan;
    return this;
  }

  public ObservatoryAvailabilitiesQuota putScheduleQuotasPerPlanItem(String key, BigDecimal scheduleQuotasPerPlanItem) {
    if (this.scheduleQuotasPerPlan == null) {
      this.scheduleQuotasPerPlan = new HashMap<>();
    }
    this.scheduleQuotasPerPlan.put(key, scheduleQuotasPerPlanItem);
    return this;
  }

   /**
   * The number of schedules available per plan.
   * @return scheduleQuotasPerPlan
  **/
  @javax.annotation.Nullable
  public Map<String, BigDecimal> getScheduleQuotasPerPlan() {
    return scheduleQuotasPerPlan;
  }

  public void setScheduleQuotasPerPlan(Map<String, BigDecimal> scheduleQuotasPerPlan) {
    this.scheduleQuotasPerPlan = scheduleQuotasPerPlan;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObservatoryAvailabilitiesQuota observatoryAvailabilitiesQuota = (ObservatoryAvailabilitiesQuota) o;
    return Objects.equals(this.plan, observatoryAvailabilitiesQuota.plan) &&
        Objects.equals(this.quotasPerPlan, observatoryAvailabilitiesQuota.quotasPerPlan) &&
        Objects.equals(this.remainingSchedules, observatoryAvailabilitiesQuota.remainingSchedules) &&
        Objects.equals(this.remainingTests, observatoryAvailabilitiesQuota.remainingTests) &&
        Objects.equals(this.scheduleQuotasPerPlan, observatoryAvailabilitiesQuota.scheduleQuotasPerPlan);
  }

  @Override
  public int hashCode() {
    return Objects.hash(plan, quotasPerPlan, remainingSchedules, remainingTests, scheduleQuotasPerPlan);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObservatoryAvailabilitiesQuota {\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("    quotasPerPlan: ").append(toIndentedString(quotasPerPlan)).append("\n");
    sb.append("    remainingSchedules: ").append(toIndentedString(remainingSchedules)).append("\n");
    sb.append("    remainingTests: ").append(toIndentedString(remainingTests)).append("\n");
    sb.append("    scheduleQuotasPerPlan: ").append(toIndentedString(scheduleQuotasPerPlan)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("plan");
    openapiFields.add("quotasPerPlan");
    openapiFields.add("remainingSchedules");
    openapiFields.add("remainingTests");
    openapiFields.add("scheduleQuotasPerPlan");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ObservatoryAvailabilitiesQuota
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ObservatoryAvailabilitiesQuota.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ObservatoryAvailabilitiesQuota is not found in the empty JSON string", ObservatoryAvailabilitiesQuota.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ObservatoryAvailabilitiesQuota.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ObservatoryAvailabilitiesQuota` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("plan") != null && !jsonObj.get("plan").isJsonNull()) && !jsonObj.get("plan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plan").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ObservatoryAvailabilitiesQuota.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ObservatoryAvailabilitiesQuota' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ObservatoryAvailabilitiesQuota> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ObservatoryAvailabilitiesQuota.class));

       return (TypeAdapter<T>) new TypeAdapter<ObservatoryAvailabilitiesQuota>() {
           @Override
           public void write(JsonWriter out, ObservatoryAvailabilitiesQuota value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ObservatoryAvailabilitiesQuota read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ObservatoryAvailabilitiesQuota given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ObservatoryAvailabilitiesQuota
  * @throws IOException if the JSON string is invalid with respect to ObservatoryAvailabilitiesQuota
  */
  public static ObservatoryAvailabilitiesQuota fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ObservatoryAvailabilitiesQuota.class);
  }

 /**
  * Convert an instance of ObservatoryAvailabilitiesQuota to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

