/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Specifies the type of session affinity the load balancer should use unless specified as &#x60;\&quot;none\&quot;&#x60; or \&quot;\&quot; (default). The supported types are: - &#x60;\&quot;cookie\&quot;&#x60;: On the first request to a proxied load balancer, a cookie is generated, encoding information of which origin the request will be forwarded to. Subsequent requests, by the same client to the same load balancer, will be sent to the origin server the cookie encodes, for the duration of the cookie and as long as the origin server remains healthy. If the cookie has expired or the origin server is unhealthy, then a new origin server is calculated and used. - &#x60;\&quot;ip_cookie\&quot;&#x60;: Behaves the same as &#x60;\&quot;cookie\&quot;&#x60; except the initial origin selection is stable and based on the client&#39;s ip address. - &#x60;\&quot;header\&quot;&#x60;: On the first request to a proxied load balancer, a session key based on the configured HTTP headers (see &#x60;session_affinity_attributes.headers&#x60;) is generated, encoding the request headers used for storing in the load balancer session state which origin the request will be forwarded to. Subsequent requests to the load balancer with the same headers will be sent to the same origin server, for the duration of the session and as long as the origin server remains healthy. If the session has been idle for the duration of &#x60;session_affinity_ttl&#x60; seconds or the origin server is unhealthy, then a new origin server is calculated and used. See &#x60;headers&#x60; in &#x60;session_affinity_attributes&#x60; for additional required configuration.
 */
@JsonAdapter(LoadBalancingSessionAffinity.Adapter.class)
public enum LoadBalancingSessionAffinity {
  
  NONE("none"),
  
  COOKIE("cookie"),
  
  IP_COOKIE("ip_cookie"),
  
  HEADER("header"),
  
  u("\"\"");

  private String value;

  LoadBalancingSessionAffinity(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static LoadBalancingSessionAffinity fromValue(String value) {
    for (LoadBalancingSessionAffinity b : LoadBalancingSessionAffinity.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<LoadBalancingSessionAffinity> {
    @Override
    public void write(final JsonWriter jsonWriter, final LoadBalancingSessionAffinity enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public LoadBalancingSessionAffinity read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return LoadBalancingSessionAffinity.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    LoadBalancingSessionAffinity.fromValue(value);
  }
}

