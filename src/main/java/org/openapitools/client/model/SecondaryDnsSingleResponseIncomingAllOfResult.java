/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SecondaryDnsSingleResponseIncomingAllOfResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class SecondaryDnsSingleResponseIncomingAllOfResult {
  public static final String SERIALIZED_NAME_AUTO_REFRESH_SECONDS = "auto_refresh_seconds";
  @SerializedName(SERIALIZED_NAME_AUTO_REFRESH_SECONDS)
  private BigDecimal autoRefreshSeconds;

  public static final String SERIALIZED_NAME_CHECKED_TIME = "checked_time";
  @SerializedName(SERIALIZED_NAME_CHECKED_TIME)
  private String checkedTime;

  public static final String SERIALIZED_NAME_CREATED_TIME = "created_time";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private String createdTime;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Object id = null;

  public static final String SERIALIZED_NAME_MODIFIED_TIME = "modified_time";
  @SerializedName(SERIALIZED_NAME_MODIFIED_TIME)
  private String modifiedTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PEERS = "peers";
  @SerializedName(SERIALIZED_NAME_PEERS)
  private List<Object> peers = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOA_SERIAL = "soa_serial";
  @SerializedName(SERIALIZED_NAME_SOA_SERIAL)
  private BigDecimal soaSerial;

  public SecondaryDnsSingleResponseIncomingAllOfResult() {
  }

  public SecondaryDnsSingleResponseIncomingAllOfResult(
     Object id
  ) {
    this();
    this.id = id;
  }

  public SecondaryDnsSingleResponseIncomingAllOfResult autoRefreshSeconds(BigDecimal autoRefreshSeconds) {
    this.autoRefreshSeconds = autoRefreshSeconds;
    return this;
  }

   /**
   * How often should a secondary zone auto refresh regardless of DNS NOTIFY. Not applicable for primary zones.
   * @return autoRefreshSeconds
  **/
  @javax.annotation.Nullable
  public BigDecimal getAutoRefreshSeconds() {
    return autoRefreshSeconds;
  }

  public void setAutoRefreshSeconds(BigDecimal autoRefreshSeconds) {
    this.autoRefreshSeconds = autoRefreshSeconds;
  }


  public SecondaryDnsSingleResponseIncomingAllOfResult checkedTime(String checkedTime) {
    this.checkedTime = checkedTime;
    return this;
  }

   /**
   * The time for a specific event.
   * @return checkedTime
  **/
  @javax.annotation.Nullable
  public String getCheckedTime() {
    return checkedTime;
  }

  public void setCheckedTime(String checkedTime) {
    this.checkedTime = checkedTime;
  }


  public SecondaryDnsSingleResponseIncomingAllOfResult createdTime(String createdTime) {
    this.createdTime = createdTime;
    return this;
  }

   /**
   * The time for a specific event.
   * @return createdTime
  **/
  @javax.annotation.Nullable
  public String getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(String createdTime) {
    this.createdTime = createdTime;
  }


   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public Object getId() {
    return id;
  }



  public SecondaryDnsSingleResponseIncomingAllOfResult modifiedTime(String modifiedTime) {
    this.modifiedTime = modifiedTime;
    return this;
  }

   /**
   * The time for a specific event.
   * @return modifiedTime
  **/
  @javax.annotation.Nullable
  public String getModifiedTime() {
    return modifiedTime;
  }

  public void setModifiedTime(String modifiedTime) {
    this.modifiedTime = modifiedTime;
  }


  public SecondaryDnsSingleResponseIncomingAllOfResult name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Zone name.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SecondaryDnsSingleResponseIncomingAllOfResult peers(List<Object> peers) {
    this.peers = peers;
    return this;
  }

  public SecondaryDnsSingleResponseIncomingAllOfResult addPeersItem(Object peersItem) {
    if (this.peers == null) {
      this.peers = new ArrayList<>();
    }
    this.peers.add(peersItem);
    return this;
  }

   /**
   * A list of peer tags.
   * @return peers
  **/
  @javax.annotation.Nullable
  public List<Object> getPeers() {
    return peers;
  }

  public void setPeers(List<Object> peers) {
    this.peers = peers;
  }


  public SecondaryDnsSingleResponseIncomingAllOfResult soaSerial(BigDecimal soaSerial) {
    this.soaSerial = soaSerial;
    return this;
  }

   /**
   * The serial number of the SOA for the given zone.
   * @return soaSerial
  **/
  @javax.annotation.Nullable
  public BigDecimal getSoaSerial() {
    return soaSerial;
  }

  public void setSoaSerial(BigDecimal soaSerial) {
    this.soaSerial = soaSerial;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SecondaryDnsSingleResponseIncomingAllOfResult secondaryDnsSingleResponseIncomingAllOfResult = (SecondaryDnsSingleResponseIncomingAllOfResult) o;
    return Objects.equals(this.autoRefreshSeconds, secondaryDnsSingleResponseIncomingAllOfResult.autoRefreshSeconds) &&
        Objects.equals(this.checkedTime, secondaryDnsSingleResponseIncomingAllOfResult.checkedTime) &&
        Objects.equals(this.createdTime, secondaryDnsSingleResponseIncomingAllOfResult.createdTime) &&
        Objects.equals(this.id, secondaryDnsSingleResponseIncomingAllOfResult.id) &&
        Objects.equals(this.modifiedTime, secondaryDnsSingleResponseIncomingAllOfResult.modifiedTime) &&
        Objects.equals(this.name, secondaryDnsSingleResponseIncomingAllOfResult.name) &&
        Objects.equals(this.peers, secondaryDnsSingleResponseIncomingAllOfResult.peers) &&
        Objects.equals(this.soaSerial, secondaryDnsSingleResponseIncomingAllOfResult.soaSerial);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoRefreshSeconds, checkedTime, createdTime, id, modifiedTime, name, peers, soaSerial);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SecondaryDnsSingleResponseIncomingAllOfResult {\n");
    sb.append("    autoRefreshSeconds: ").append(toIndentedString(autoRefreshSeconds)).append("\n");
    sb.append("    checkedTime: ").append(toIndentedString(checkedTime)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    modifiedTime: ").append(toIndentedString(modifiedTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    peers: ").append(toIndentedString(peers)).append("\n");
    sb.append("    soaSerial: ").append(toIndentedString(soaSerial)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auto_refresh_seconds");
    openapiFields.add("checked_time");
    openapiFields.add("created_time");
    openapiFields.add("id");
    openapiFields.add("modified_time");
    openapiFields.add("name");
    openapiFields.add("peers");
    openapiFields.add("soa_serial");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SecondaryDnsSingleResponseIncomingAllOfResult
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SecondaryDnsSingleResponseIncomingAllOfResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SecondaryDnsSingleResponseIncomingAllOfResult is not found in the empty JSON string", SecondaryDnsSingleResponseIncomingAllOfResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SecondaryDnsSingleResponseIncomingAllOfResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SecondaryDnsSingleResponseIncomingAllOfResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("checked_time") != null && !jsonObj.get("checked_time").isJsonNull()) && !jsonObj.get("checked_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checked_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checked_time").toString()));
      }
      if ((jsonObj.get("created_time") != null && !jsonObj.get("created_time").isJsonNull()) && !jsonObj.get("created_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_time").toString()));
      }
      if ((jsonObj.get("modified_time") != null && !jsonObj.get("modified_time").isJsonNull()) && !jsonObj.get("modified_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modified_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modified_time").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("peers") != null && !jsonObj.get("peers").isJsonNull() && !jsonObj.get("peers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `peers` to be an array in the JSON string but got `%s`", jsonObj.get("peers").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SecondaryDnsSingleResponseIncomingAllOfResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SecondaryDnsSingleResponseIncomingAllOfResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SecondaryDnsSingleResponseIncomingAllOfResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SecondaryDnsSingleResponseIncomingAllOfResult.class));

       return (TypeAdapter<T>) new TypeAdapter<SecondaryDnsSingleResponseIncomingAllOfResult>() {
           @Override
           public void write(JsonWriter out, SecondaryDnsSingleResponseIncomingAllOfResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SecondaryDnsSingleResponseIncomingAllOfResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SecondaryDnsSingleResponseIncomingAllOfResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SecondaryDnsSingleResponseIncomingAllOfResult
  * @throws IOException if the JSON string is invalid with respect to SecondaryDnsSingleResponseIncomingAllOfResult
  */
  public static SecondaryDnsSingleResponseIncomingAllOfResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SecondaryDnsSingleResponseIncomingAllOfResult.class);
  }

 /**
  * Convert an instance of SecondaryDnsSingleResponseIncomingAllOfResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

