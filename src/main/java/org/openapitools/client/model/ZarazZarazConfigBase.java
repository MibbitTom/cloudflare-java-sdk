/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ZarazZarazConfigBaseConsent;
import org.openapitools.client.model.ZarazZarazConfigBaseSettings;
import org.openapitools.client.model.ZarazZarazConfigBaseTriggersValue;
import org.openapitools.client.model.ZarazZarazConfigBaseVariablesValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Zaraz configuration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class ZarazZarazConfigBase {
  public static final String SERIALIZED_NAME_CONSENT = "consent";
  @SerializedName(SERIALIZED_NAME_CONSENT)
  private ZarazZarazConfigBaseConsent consent;

  public static final String SERIALIZED_NAME_DATA_LAYER = "dataLayer";
  @SerializedName(SERIALIZED_NAME_DATA_LAYER)
  private Boolean dataLayer;

  public static final String SERIALIZED_NAME_DEBUG_KEY = "debugKey";
  @SerializedName(SERIALIZED_NAME_DEBUG_KEY)
  private String debugKey;

  public static final String SERIALIZED_NAME_HISTORY_CHANGE = "historyChange";
  @SerializedName(SERIALIZED_NAME_HISTORY_CHANGE)
  private Boolean historyChange;

  public static final String SERIALIZED_NAME_SETTINGS = "settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private ZarazZarazConfigBaseSettings settings;

  public static final String SERIALIZED_NAME_TRIGGERS = "triggers";
  @SerializedName(SERIALIZED_NAME_TRIGGERS)
  private Map<String, ZarazZarazConfigBaseTriggersValue> triggers = new HashMap<>();

  public static final String SERIALIZED_NAME_VARIABLES = "variables";
  @SerializedName(SERIALIZED_NAME_VARIABLES)
  private Map<String, ZarazZarazConfigBaseVariablesValue> variables = new HashMap<>();

  public static final String SERIALIZED_NAME_ZARAZ_VERSION = "zarazVersion";
  @SerializedName(SERIALIZED_NAME_ZARAZ_VERSION)
  private Integer zarazVersion;

  public ZarazZarazConfigBase() {
  }

  public ZarazZarazConfigBase consent(ZarazZarazConfigBaseConsent consent) {
    this.consent = consent;
    return this;
  }

   /**
   * Get consent
   * @return consent
  **/
  @javax.annotation.Nullable
  public ZarazZarazConfigBaseConsent getConsent() {
    return consent;
  }

  public void setConsent(ZarazZarazConfigBaseConsent consent) {
    this.consent = consent;
  }


  public ZarazZarazConfigBase dataLayer(Boolean dataLayer) {
    this.dataLayer = dataLayer;
    return this;
  }

   /**
   * Data layer compatibility mode enabled.
   * @return dataLayer
  **/
  @javax.annotation.Nonnull
  public Boolean getDataLayer() {
    return dataLayer;
  }

  public void setDataLayer(Boolean dataLayer) {
    this.dataLayer = dataLayer;
  }


  public ZarazZarazConfigBase debugKey(String debugKey) {
    this.debugKey = debugKey;
    return this;
  }

   /**
   * The key for Zaraz debug mode.
   * @return debugKey
  **/
  @javax.annotation.Nonnull
  public String getDebugKey() {
    return debugKey;
  }

  public void setDebugKey(String debugKey) {
    this.debugKey = debugKey;
  }


  public ZarazZarazConfigBase historyChange(Boolean historyChange) {
    this.historyChange = historyChange;
    return this;
  }

   /**
   * Single Page Application support enabled.
   * @return historyChange
  **/
  @javax.annotation.Nullable
  public Boolean getHistoryChange() {
    return historyChange;
  }

  public void setHistoryChange(Boolean historyChange) {
    this.historyChange = historyChange;
  }


  public ZarazZarazConfigBase settings(ZarazZarazConfigBaseSettings settings) {
    this.settings = settings;
    return this;
  }

   /**
   * Get settings
   * @return settings
  **/
  @javax.annotation.Nonnull
  public ZarazZarazConfigBaseSettings getSettings() {
    return settings;
  }

  public void setSettings(ZarazZarazConfigBaseSettings settings) {
    this.settings = settings;
  }


  public ZarazZarazConfigBase triggers(Map<String, ZarazZarazConfigBaseTriggersValue> triggers) {
    this.triggers = triggers;
    return this;
  }

  public ZarazZarazConfigBase putTriggersItem(String key, ZarazZarazConfigBaseTriggersValue triggersItem) {
    if (this.triggers == null) {
      this.triggers = new HashMap<>();
    }
    this.triggers.put(key, triggersItem);
    return this;
  }

   /**
   * Triggers set up under Zaraz configuration, where key is the trigger alpha-numeric ID and value is the trigger configuration.
   * @return triggers
  **/
  @javax.annotation.Nonnull
  public Map<String, ZarazZarazConfigBaseTriggersValue> getTriggers() {
    return triggers;
  }

  public void setTriggers(Map<String, ZarazZarazConfigBaseTriggersValue> triggers) {
    this.triggers = triggers;
  }


  public ZarazZarazConfigBase variables(Map<String, ZarazZarazConfigBaseVariablesValue> variables) {
    this.variables = variables;
    return this;
  }

  public ZarazZarazConfigBase putVariablesItem(String key, ZarazZarazConfigBaseVariablesValue variablesItem) {
    if (this.variables == null) {
      this.variables = new HashMap<>();
    }
    this.variables.put(key, variablesItem);
    return this;
  }

   /**
   * Variables set up under Zaraz configuration, where key is the variable alpha-numeric ID and value is the variable configuration. Values of variables of type secret are not included.
   * @return variables
  **/
  @javax.annotation.Nonnull
  public Map<String, ZarazZarazConfigBaseVariablesValue> getVariables() {
    return variables;
  }

  public void setVariables(Map<String, ZarazZarazConfigBaseVariablesValue> variables) {
    this.variables = variables;
  }


  public ZarazZarazConfigBase zarazVersion(Integer zarazVersion) {
    this.zarazVersion = zarazVersion;
    return this;
  }

   /**
   * Zaraz internal version of the config.
   * @return zarazVersion
  **/
  @javax.annotation.Nonnull
  public Integer getZarazVersion() {
    return zarazVersion;
  }

  public void setZarazVersion(Integer zarazVersion) {
    this.zarazVersion = zarazVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ZarazZarazConfigBase zarazZarazConfigBase = (ZarazZarazConfigBase) o;
    return Objects.equals(this.consent, zarazZarazConfigBase.consent) &&
        Objects.equals(this.dataLayer, zarazZarazConfigBase.dataLayer) &&
        Objects.equals(this.debugKey, zarazZarazConfigBase.debugKey) &&
        Objects.equals(this.historyChange, zarazZarazConfigBase.historyChange) &&
        Objects.equals(this.settings, zarazZarazConfigBase.settings) &&
        Objects.equals(this.triggers, zarazZarazConfigBase.triggers) &&
        Objects.equals(this.variables, zarazZarazConfigBase.variables) &&
        Objects.equals(this.zarazVersion, zarazZarazConfigBase.zarazVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(consent, dataLayer, debugKey, historyChange, settings, triggers, variables, zarazVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ZarazZarazConfigBase {\n");
    sb.append("    consent: ").append(toIndentedString(consent)).append("\n");
    sb.append("    dataLayer: ").append(toIndentedString(dataLayer)).append("\n");
    sb.append("    debugKey: ").append(toIndentedString(debugKey)).append("\n");
    sb.append("    historyChange: ").append(toIndentedString(historyChange)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    triggers: ").append(toIndentedString(triggers)).append("\n");
    sb.append("    variables: ").append(toIndentedString(variables)).append("\n");
    sb.append("    zarazVersion: ").append(toIndentedString(zarazVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("consent");
    openapiFields.add("dataLayer");
    openapiFields.add("debugKey");
    openapiFields.add("historyChange");
    openapiFields.add("settings");
    openapiFields.add("triggers");
    openapiFields.add("variables");
    openapiFields.add("zarazVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dataLayer");
    openapiRequiredFields.add("debugKey");
    openapiRequiredFields.add("settings");
    openapiRequiredFields.add("triggers");
    openapiRequiredFields.add("variables");
    openapiRequiredFields.add("zarazVersion");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ZarazZarazConfigBase
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ZarazZarazConfigBase.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ZarazZarazConfigBase is not found in the empty JSON string", ZarazZarazConfigBase.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ZarazZarazConfigBase.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ZarazZarazConfigBase` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ZarazZarazConfigBase.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `consent`
      if (jsonObj.get("consent") != null && !jsonObj.get("consent").isJsonNull()) {
        ZarazZarazConfigBaseConsent.validateJsonElement(jsonObj.get("consent"));
      }
      if (!jsonObj.get("debugKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debugKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debugKey").toString()));
      }
      // validate the required field `settings`
      ZarazZarazConfigBaseSettings.validateJsonElement(jsonObj.get("settings"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ZarazZarazConfigBase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ZarazZarazConfigBase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ZarazZarazConfigBase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ZarazZarazConfigBase.class));

       return (TypeAdapter<T>) new TypeAdapter<ZarazZarazConfigBase>() {
           @Override
           public void write(JsonWriter out, ZarazZarazConfigBase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ZarazZarazConfigBase read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ZarazZarazConfigBase given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ZarazZarazConfigBase
  * @throws IOException if the JSON string is invalid with respect to ZarazZarazConfigBase
  */
  public static ZarazZarazConfigBase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ZarazZarazConfigBase.class);
  }

 /**
  * Convert an instance of ZarazZarazConfigBase to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

