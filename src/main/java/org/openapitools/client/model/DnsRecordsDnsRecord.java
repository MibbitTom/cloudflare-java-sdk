/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DnsRecordsAAAARecord;
import org.openapitools.client.model.DnsRecordsARecord;
import org.openapitools.client.model.DnsRecordsBaseMeta;
import org.openapitools.client.model.DnsRecordsCAARecord;
import org.openapitools.client.model.DnsRecordsCERTRecord;
import org.openapitools.client.model.DnsRecordsCNAMERecord;
import org.openapitools.client.model.DnsRecordsDNSKEYRecord;
import org.openapitools.client.model.DnsRecordsDSRecord;
import org.openapitools.client.model.DnsRecordsHTTPSRecord;
import org.openapitools.client.model.DnsRecordsLOCRecord;
import org.openapitools.client.model.DnsRecordsMXRecord;
import org.openapitools.client.model.DnsRecordsNAPTRRecord;
import org.openapitools.client.model.DnsRecordsNSRecord;
import org.openapitools.client.model.DnsRecordsPTRRecord;
import org.openapitools.client.model.DnsRecordsSMIMEARecord;
import org.openapitools.client.model.DnsRecordsSRVRecord;
import org.openapitools.client.model.DnsRecordsSSHFPRecord;
import org.openapitools.client.model.DnsRecordsSVCBRecord;
import org.openapitools.client.model.DnsRecordsTLSARecord;
import org.openapitools.client.model.DnsRecordsTXTRecord;
import org.openapitools.client.model.DnsRecordsTtl;
import org.openapitools.client.model.DnsRecordsURIRecord;
import org.openapitools.client.model.DnsRecordsURIRecordAllOfData;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import invalidPackageName.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class DnsRecordsDnsRecord extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(DnsRecordsDnsRecord.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!DnsRecordsDnsRecord.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'DnsRecordsDnsRecord' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<DnsRecordsARecord> adapterDnsRecordsARecord = gson.getDelegateAdapter(this, TypeToken.get(DnsRecordsARecord.class));
            final TypeAdapter<DnsRecordsAAAARecord> adapterDnsRecordsAAAARecord = gson.getDelegateAdapter(this, TypeToken.get(DnsRecordsAAAARecord.class));
            final TypeAdapter<DnsRecordsCAARecord> adapterDnsRecordsCAARecord = gson.getDelegateAdapter(this, TypeToken.get(DnsRecordsCAARecord.class));
            final TypeAdapter<DnsRecordsCERTRecord> adapterDnsRecordsCERTRecord = gson.getDelegateAdapter(this, TypeToken.get(DnsRecordsCERTRecord.class));
            final TypeAdapter<DnsRecordsCNAMERecord> adapterDnsRecordsCNAMERecord = gson.getDelegateAdapter(this, TypeToken.get(DnsRecordsCNAMERecord.class));
            final TypeAdapter<DnsRecordsDNSKEYRecord> adapterDnsRecordsDNSKEYRecord = gson.getDelegateAdapter(this, TypeToken.get(DnsRecordsDNSKEYRecord.class));
            final TypeAdapter<DnsRecordsDSRecord> adapterDnsRecordsDSRecord = gson.getDelegateAdapter(this, TypeToken.get(DnsRecordsDSRecord.class));
            final TypeAdapter<DnsRecordsHTTPSRecord> adapterDnsRecordsHTTPSRecord = gson.getDelegateAdapter(this, TypeToken.get(DnsRecordsHTTPSRecord.class));
            final TypeAdapter<DnsRecordsLOCRecord> adapterDnsRecordsLOCRecord = gson.getDelegateAdapter(this, TypeToken.get(DnsRecordsLOCRecord.class));
            final TypeAdapter<DnsRecordsMXRecord> adapterDnsRecordsMXRecord = gson.getDelegateAdapter(this, TypeToken.get(DnsRecordsMXRecord.class));
            final TypeAdapter<DnsRecordsNAPTRRecord> adapterDnsRecordsNAPTRRecord = gson.getDelegateAdapter(this, TypeToken.get(DnsRecordsNAPTRRecord.class));
            final TypeAdapter<DnsRecordsNSRecord> adapterDnsRecordsNSRecord = gson.getDelegateAdapter(this, TypeToken.get(DnsRecordsNSRecord.class));
            final TypeAdapter<DnsRecordsPTRRecord> adapterDnsRecordsPTRRecord = gson.getDelegateAdapter(this, TypeToken.get(DnsRecordsPTRRecord.class));
            final TypeAdapter<DnsRecordsSMIMEARecord> adapterDnsRecordsSMIMEARecord = gson.getDelegateAdapter(this, TypeToken.get(DnsRecordsSMIMEARecord.class));
            final TypeAdapter<DnsRecordsSRVRecord> adapterDnsRecordsSRVRecord = gson.getDelegateAdapter(this, TypeToken.get(DnsRecordsSRVRecord.class));
            final TypeAdapter<DnsRecordsSSHFPRecord> adapterDnsRecordsSSHFPRecord = gson.getDelegateAdapter(this, TypeToken.get(DnsRecordsSSHFPRecord.class));
            final TypeAdapter<DnsRecordsSVCBRecord> adapterDnsRecordsSVCBRecord = gson.getDelegateAdapter(this, TypeToken.get(DnsRecordsSVCBRecord.class));
            final TypeAdapter<DnsRecordsTLSARecord> adapterDnsRecordsTLSARecord = gson.getDelegateAdapter(this, TypeToken.get(DnsRecordsTLSARecord.class));
            final TypeAdapter<DnsRecordsTXTRecord> adapterDnsRecordsTXTRecord = gson.getDelegateAdapter(this, TypeToken.get(DnsRecordsTXTRecord.class));
            final TypeAdapter<DnsRecordsURIRecord> adapterDnsRecordsURIRecord = gson.getDelegateAdapter(this, TypeToken.get(DnsRecordsURIRecord.class));

            return (TypeAdapter<T>) new TypeAdapter<DnsRecordsDnsRecord>() {
                @Override
                public void write(JsonWriter out, DnsRecordsDnsRecord value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `DnsRecordsARecord`
                    if (value.getActualInstance() instanceof DnsRecordsARecord) {
                        JsonElement element = adapterDnsRecordsARecord.toJsonTree((DnsRecordsARecord)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DnsRecordsAAAARecord`
                    if (value.getActualInstance() instanceof DnsRecordsAAAARecord) {
                        JsonElement element = adapterDnsRecordsAAAARecord.toJsonTree((DnsRecordsAAAARecord)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DnsRecordsCAARecord`
                    if (value.getActualInstance() instanceof DnsRecordsCAARecord) {
                        JsonElement element = adapterDnsRecordsCAARecord.toJsonTree((DnsRecordsCAARecord)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DnsRecordsCERTRecord`
                    if (value.getActualInstance() instanceof DnsRecordsCERTRecord) {
                        JsonElement element = adapterDnsRecordsCERTRecord.toJsonTree((DnsRecordsCERTRecord)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DnsRecordsCNAMERecord`
                    if (value.getActualInstance() instanceof DnsRecordsCNAMERecord) {
                        JsonElement element = adapterDnsRecordsCNAMERecord.toJsonTree((DnsRecordsCNAMERecord)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DnsRecordsDNSKEYRecord`
                    if (value.getActualInstance() instanceof DnsRecordsDNSKEYRecord) {
                        JsonElement element = adapterDnsRecordsDNSKEYRecord.toJsonTree((DnsRecordsDNSKEYRecord)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DnsRecordsDSRecord`
                    if (value.getActualInstance() instanceof DnsRecordsDSRecord) {
                        JsonElement element = adapterDnsRecordsDSRecord.toJsonTree((DnsRecordsDSRecord)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DnsRecordsHTTPSRecord`
                    if (value.getActualInstance() instanceof DnsRecordsHTTPSRecord) {
                        JsonElement element = adapterDnsRecordsHTTPSRecord.toJsonTree((DnsRecordsHTTPSRecord)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DnsRecordsLOCRecord`
                    if (value.getActualInstance() instanceof DnsRecordsLOCRecord) {
                        JsonElement element = adapterDnsRecordsLOCRecord.toJsonTree((DnsRecordsLOCRecord)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DnsRecordsMXRecord`
                    if (value.getActualInstance() instanceof DnsRecordsMXRecord) {
                        JsonElement element = adapterDnsRecordsMXRecord.toJsonTree((DnsRecordsMXRecord)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DnsRecordsNAPTRRecord`
                    if (value.getActualInstance() instanceof DnsRecordsNAPTRRecord) {
                        JsonElement element = adapterDnsRecordsNAPTRRecord.toJsonTree((DnsRecordsNAPTRRecord)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DnsRecordsNSRecord`
                    if (value.getActualInstance() instanceof DnsRecordsNSRecord) {
                        JsonElement element = adapterDnsRecordsNSRecord.toJsonTree((DnsRecordsNSRecord)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DnsRecordsPTRRecord`
                    if (value.getActualInstance() instanceof DnsRecordsPTRRecord) {
                        JsonElement element = adapterDnsRecordsPTRRecord.toJsonTree((DnsRecordsPTRRecord)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DnsRecordsSMIMEARecord`
                    if (value.getActualInstance() instanceof DnsRecordsSMIMEARecord) {
                        JsonElement element = adapterDnsRecordsSMIMEARecord.toJsonTree((DnsRecordsSMIMEARecord)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DnsRecordsSRVRecord`
                    if (value.getActualInstance() instanceof DnsRecordsSRVRecord) {
                        JsonElement element = adapterDnsRecordsSRVRecord.toJsonTree((DnsRecordsSRVRecord)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DnsRecordsSSHFPRecord`
                    if (value.getActualInstance() instanceof DnsRecordsSSHFPRecord) {
                        JsonElement element = adapterDnsRecordsSSHFPRecord.toJsonTree((DnsRecordsSSHFPRecord)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DnsRecordsSVCBRecord`
                    if (value.getActualInstance() instanceof DnsRecordsSVCBRecord) {
                        JsonElement element = adapterDnsRecordsSVCBRecord.toJsonTree((DnsRecordsSVCBRecord)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DnsRecordsTLSARecord`
                    if (value.getActualInstance() instanceof DnsRecordsTLSARecord) {
                        JsonElement element = adapterDnsRecordsTLSARecord.toJsonTree((DnsRecordsTLSARecord)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DnsRecordsTXTRecord`
                    if (value.getActualInstance() instanceof DnsRecordsTXTRecord) {
                        JsonElement element = adapterDnsRecordsTXTRecord.toJsonTree((DnsRecordsTXTRecord)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DnsRecordsURIRecord`
                    if (value.getActualInstance() instanceof DnsRecordsURIRecord) {
                        JsonElement element = adapterDnsRecordsURIRecord.toJsonTree((DnsRecordsURIRecord)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: DnsRecordsAAAARecord, DnsRecordsARecord, DnsRecordsCAARecord, DnsRecordsCERTRecord, DnsRecordsCNAMERecord, DnsRecordsDNSKEYRecord, DnsRecordsDSRecord, DnsRecordsHTTPSRecord, DnsRecordsLOCRecord, DnsRecordsMXRecord, DnsRecordsNAPTRRecord, DnsRecordsNSRecord, DnsRecordsPTRRecord, DnsRecordsSMIMEARecord, DnsRecordsSRVRecord, DnsRecordsSSHFPRecord, DnsRecordsSVCBRecord, DnsRecordsTLSARecord, DnsRecordsTXTRecord, DnsRecordsURIRecord");
                }

                @Override
                public DnsRecordsDnsRecord read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize DnsRecordsARecord
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DnsRecordsARecord.validateJsonElement(jsonElement);
                        actualAdapter = adapterDnsRecordsARecord;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DnsRecordsARecord'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DnsRecordsARecord failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DnsRecordsARecord'", e);
                    }
                    // deserialize DnsRecordsAAAARecord
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DnsRecordsAAAARecord.validateJsonElement(jsonElement);
                        actualAdapter = adapterDnsRecordsAAAARecord;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DnsRecordsAAAARecord'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DnsRecordsAAAARecord failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DnsRecordsAAAARecord'", e);
                    }
                    // deserialize DnsRecordsCAARecord
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DnsRecordsCAARecord.validateJsonElement(jsonElement);
                        actualAdapter = adapterDnsRecordsCAARecord;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DnsRecordsCAARecord'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DnsRecordsCAARecord failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DnsRecordsCAARecord'", e);
                    }
                    // deserialize DnsRecordsCERTRecord
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DnsRecordsCERTRecord.validateJsonElement(jsonElement);
                        actualAdapter = adapterDnsRecordsCERTRecord;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DnsRecordsCERTRecord'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DnsRecordsCERTRecord failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DnsRecordsCERTRecord'", e);
                    }
                    // deserialize DnsRecordsCNAMERecord
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DnsRecordsCNAMERecord.validateJsonElement(jsonElement);
                        actualAdapter = adapterDnsRecordsCNAMERecord;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DnsRecordsCNAMERecord'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DnsRecordsCNAMERecord failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DnsRecordsCNAMERecord'", e);
                    }
                    // deserialize DnsRecordsDNSKEYRecord
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DnsRecordsDNSKEYRecord.validateJsonElement(jsonElement);
                        actualAdapter = adapterDnsRecordsDNSKEYRecord;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DnsRecordsDNSKEYRecord'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DnsRecordsDNSKEYRecord failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DnsRecordsDNSKEYRecord'", e);
                    }
                    // deserialize DnsRecordsDSRecord
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DnsRecordsDSRecord.validateJsonElement(jsonElement);
                        actualAdapter = adapterDnsRecordsDSRecord;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DnsRecordsDSRecord'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DnsRecordsDSRecord failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DnsRecordsDSRecord'", e);
                    }
                    // deserialize DnsRecordsHTTPSRecord
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DnsRecordsHTTPSRecord.validateJsonElement(jsonElement);
                        actualAdapter = adapterDnsRecordsHTTPSRecord;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DnsRecordsHTTPSRecord'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DnsRecordsHTTPSRecord failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DnsRecordsHTTPSRecord'", e);
                    }
                    // deserialize DnsRecordsLOCRecord
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DnsRecordsLOCRecord.validateJsonElement(jsonElement);
                        actualAdapter = adapterDnsRecordsLOCRecord;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DnsRecordsLOCRecord'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DnsRecordsLOCRecord failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DnsRecordsLOCRecord'", e);
                    }
                    // deserialize DnsRecordsMXRecord
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DnsRecordsMXRecord.validateJsonElement(jsonElement);
                        actualAdapter = adapterDnsRecordsMXRecord;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DnsRecordsMXRecord'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DnsRecordsMXRecord failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DnsRecordsMXRecord'", e);
                    }
                    // deserialize DnsRecordsNAPTRRecord
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DnsRecordsNAPTRRecord.validateJsonElement(jsonElement);
                        actualAdapter = adapterDnsRecordsNAPTRRecord;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DnsRecordsNAPTRRecord'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DnsRecordsNAPTRRecord failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DnsRecordsNAPTRRecord'", e);
                    }
                    // deserialize DnsRecordsNSRecord
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DnsRecordsNSRecord.validateJsonElement(jsonElement);
                        actualAdapter = adapterDnsRecordsNSRecord;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DnsRecordsNSRecord'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DnsRecordsNSRecord failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DnsRecordsNSRecord'", e);
                    }
                    // deserialize DnsRecordsPTRRecord
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DnsRecordsPTRRecord.validateJsonElement(jsonElement);
                        actualAdapter = adapterDnsRecordsPTRRecord;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DnsRecordsPTRRecord'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DnsRecordsPTRRecord failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DnsRecordsPTRRecord'", e);
                    }
                    // deserialize DnsRecordsSMIMEARecord
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DnsRecordsSMIMEARecord.validateJsonElement(jsonElement);
                        actualAdapter = adapterDnsRecordsSMIMEARecord;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DnsRecordsSMIMEARecord'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DnsRecordsSMIMEARecord failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DnsRecordsSMIMEARecord'", e);
                    }
                    // deserialize DnsRecordsSRVRecord
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DnsRecordsSRVRecord.validateJsonElement(jsonElement);
                        actualAdapter = adapterDnsRecordsSRVRecord;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DnsRecordsSRVRecord'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DnsRecordsSRVRecord failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DnsRecordsSRVRecord'", e);
                    }
                    // deserialize DnsRecordsSSHFPRecord
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DnsRecordsSSHFPRecord.validateJsonElement(jsonElement);
                        actualAdapter = adapterDnsRecordsSSHFPRecord;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DnsRecordsSSHFPRecord'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DnsRecordsSSHFPRecord failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DnsRecordsSSHFPRecord'", e);
                    }
                    // deserialize DnsRecordsSVCBRecord
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DnsRecordsSVCBRecord.validateJsonElement(jsonElement);
                        actualAdapter = adapterDnsRecordsSVCBRecord;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DnsRecordsSVCBRecord'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DnsRecordsSVCBRecord failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DnsRecordsSVCBRecord'", e);
                    }
                    // deserialize DnsRecordsTLSARecord
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DnsRecordsTLSARecord.validateJsonElement(jsonElement);
                        actualAdapter = adapterDnsRecordsTLSARecord;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DnsRecordsTLSARecord'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DnsRecordsTLSARecord failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DnsRecordsTLSARecord'", e);
                    }
                    // deserialize DnsRecordsTXTRecord
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DnsRecordsTXTRecord.validateJsonElement(jsonElement);
                        actualAdapter = adapterDnsRecordsTXTRecord;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DnsRecordsTXTRecord'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DnsRecordsTXTRecord failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DnsRecordsTXTRecord'", e);
                    }
                    // deserialize DnsRecordsURIRecord
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DnsRecordsURIRecord.validateJsonElement(jsonElement);
                        actualAdapter = adapterDnsRecordsURIRecord;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DnsRecordsURIRecord'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DnsRecordsURIRecord failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DnsRecordsURIRecord'", e);
                    }

                    if (match == 1) {
                        DnsRecordsDnsRecord ret = new DnsRecordsDnsRecord();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for DnsRecordsDnsRecord: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public DnsRecordsDnsRecord() {
        super("oneOf", Boolean.FALSE);
    }

    public DnsRecordsDnsRecord(DnsRecordsAAAARecord o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DnsRecordsDnsRecord(DnsRecordsARecord o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DnsRecordsDnsRecord(DnsRecordsCAARecord o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DnsRecordsDnsRecord(DnsRecordsCERTRecord o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DnsRecordsDnsRecord(DnsRecordsCNAMERecord o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DnsRecordsDnsRecord(DnsRecordsDNSKEYRecord o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DnsRecordsDnsRecord(DnsRecordsDSRecord o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DnsRecordsDnsRecord(DnsRecordsHTTPSRecord o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DnsRecordsDnsRecord(DnsRecordsLOCRecord o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DnsRecordsDnsRecord(DnsRecordsMXRecord o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DnsRecordsDnsRecord(DnsRecordsNAPTRRecord o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DnsRecordsDnsRecord(DnsRecordsNSRecord o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DnsRecordsDnsRecord(DnsRecordsPTRRecord o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DnsRecordsDnsRecord(DnsRecordsSMIMEARecord o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DnsRecordsDnsRecord(DnsRecordsSRVRecord o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DnsRecordsDnsRecord(DnsRecordsSSHFPRecord o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DnsRecordsDnsRecord(DnsRecordsSVCBRecord o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DnsRecordsDnsRecord(DnsRecordsTLSARecord o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DnsRecordsDnsRecord(DnsRecordsTXTRecord o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public DnsRecordsDnsRecord(DnsRecordsURIRecord o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("DnsRecordsARecord", DnsRecordsARecord.class);
        schemas.put("DnsRecordsAAAARecord", DnsRecordsAAAARecord.class);
        schemas.put("DnsRecordsCAARecord", DnsRecordsCAARecord.class);
        schemas.put("DnsRecordsCERTRecord", DnsRecordsCERTRecord.class);
        schemas.put("DnsRecordsCNAMERecord", DnsRecordsCNAMERecord.class);
        schemas.put("DnsRecordsDNSKEYRecord", DnsRecordsDNSKEYRecord.class);
        schemas.put("DnsRecordsDSRecord", DnsRecordsDSRecord.class);
        schemas.put("DnsRecordsHTTPSRecord", DnsRecordsHTTPSRecord.class);
        schemas.put("DnsRecordsLOCRecord", DnsRecordsLOCRecord.class);
        schemas.put("DnsRecordsMXRecord", DnsRecordsMXRecord.class);
        schemas.put("DnsRecordsNAPTRRecord", DnsRecordsNAPTRRecord.class);
        schemas.put("DnsRecordsNSRecord", DnsRecordsNSRecord.class);
        schemas.put("DnsRecordsPTRRecord", DnsRecordsPTRRecord.class);
        schemas.put("DnsRecordsSMIMEARecord", DnsRecordsSMIMEARecord.class);
        schemas.put("DnsRecordsSRVRecord", DnsRecordsSRVRecord.class);
        schemas.put("DnsRecordsSSHFPRecord", DnsRecordsSSHFPRecord.class);
        schemas.put("DnsRecordsSVCBRecord", DnsRecordsSVCBRecord.class);
        schemas.put("DnsRecordsTLSARecord", DnsRecordsTLSARecord.class);
        schemas.put("DnsRecordsTXTRecord", DnsRecordsTXTRecord.class);
        schemas.put("DnsRecordsURIRecord", DnsRecordsURIRecord.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return DnsRecordsDnsRecord.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * DnsRecordsAAAARecord, DnsRecordsARecord, DnsRecordsCAARecord, DnsRecordsCERTRecord, DnsRecordsCNAMERecord, DnsRecordsDNSKEYRecord, DnsRecordsDSRecord, DnsRecordsHTTPSRecord, DnsRecordsLOCRecord, DnsRecordsMXRecord, DnsRecordsNAPTRRecord, DnsRecordsNSRecord, DnsRecordsPTRRecord, DnsRecordsSMIMEARecord, DnsRecordsSRVRecord, DnsRecordsSSHFPRecord, DnsRecordsSVCBRecord, DnsRecordsTLSARecord, DnsRecordsTXTRecord, DnsRecordsURIRecord
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof DnsRecordsARecord) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DnsRecordsAAAARecord) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DnsRecordsCAARecord) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DnsRecordsCERTRecord) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DnsRecordsCNAMERecord) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DnsRecordsDNSKEYRecord) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DnsRecordsDSRecord) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DnsRecordsHTTPSRecord) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DnsRecordsLOCRecord) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DnsRecordsMXRecord) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DnsRecordsNAPTRRecord) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DnsRecordsNSRecord) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DnsRecordsPTRRecord) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DnsRecordsSMIMEARecord) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DnsRecordsSRVRecord) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DnsRecordsSSHFPRecord) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DnsRecordsSVCBRecord) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DnsRecordsTLSARecord) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DnsRecordsTXTRecord) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DnsRecordsURIRecord) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be DnsRecordsAAAARecord, DnsRecordsARecord, DnsRecordsCAARecord, DnsRecordsCERTRecord, DnsRecordsCNAMERecord, DnsRecordsDNSKEYRecord, DnsRecordsDSRecord, DnsRecordsHTTPSRecord, DnsRecordsLOCRecord, DnsRecordsMXRecord, DnsRecordsNAPTRRecord, DnsRecordsNSRecord, DnsRecordsPTRRecord, DnsRecordsSMIMEARecord, DnsRecordsSRVRecord, DnsRecordsSSHFPRecord, DnsRecordsSVCBRecord, DnsRecordsTLSARecord, DnsRecordsTXTRecord, DnsRecordsURIRecord");
    }

    /**
     * Get the actual instance, which can be the following:
     * DnsRecordsAAAARecord, DnsRecordsARecord, DnsRecordsCAARecord, DnsRecordsCERTRecord, DnsRecordsCNAMERecord, DnsRecordsDNSKEYRecord, DnsRecordsDSRecord, DnsRecordsHTTPSRecord, DnsRecordsLOCRecord, DnsRecordsMXRecord, DnsRecordsNAPTRRecord, DnsRecordsNSRecord, DnsRecordsPTRRecord, DnsRecordsSMIMEARecord, DnsRecordsSRVRecord, DnsRecordsSSHFPRecord, DnsRecordsSVCBRecord, DnsRecordsTLSARecord, DnsRecordsTXTRecord, DnsRecordsURIRecord
     *
     * @return The actual instance (DnsRecordsAAAARecord, DnsRecordsARecord, DnsRecordsCAARecord, DnsRecordsCERTRecord, DnsRecordsCNAMERecord, DnsRecordsDNSKEYRecord, DnsRecordsDSRecord, DnsRecordsHTTPSRecord, DnsRecordsLOCRecord, DnsRecordsMXRecord, DnsRecordsNAPTRRecord, DnsRecordsNSRecord, DnsRecordsPTRRecord, DnsRecordsSMIMEARecord, DnsRecordsSRVRecord, DnsRecordsSSHFPRecord, DnsRecordsSVCBRecord, DnsRecordsTLSARecord, DnsRecordsTXTRecord, DnsRecordsURIRecord)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `DnsRecordsARecord`. If the actual instance is not `DnsRecordsARecord`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DnsRecordsARecord`
     * @throws ClassCastException if the instance is not `DnsRecordsARecord`
     */
    public DnsRecordsARecord getDnsRecordsARecord() throws ClassCastException {
        return (DnsRecordsARecord)super.getActualInstance();
    }
    /**
     * Get the actual instance of `DnsRecordsAAAARecord`. If the actual instance is not `DnsRecordsAAAARecord`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DnsRecordsAAAARecord`
     * @throws ClassCastException if the instance is not `DnsRecordsAAAARecord`
     */
    public DnsRecordsAAAARecord getDnsRecordsAAAARecord() throws ClassCastException {
        return (DnsRecordsAAAARecord)super.getActualInstance();
    }
    /**
     * Get the actual instance of `DnsRecordsCAARecord`. If the actual instance is not `DnsRecordsCAARecord`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DnsRecordsCAARecord`
     * @throws ClassCastException if the instance is not `DnsRecordsCAARecord`
     */
    public DnsRecordsCAARecord getDnsRecordsCAARecord() throws ClassCastException {
        return (DnsRecordsCAARecord)super.getActualInstance();
    }
    /**
     * Get the actual instance of `DnsRecordsCERTRecord`. If the actual instance is not `DnsRecordsCERTRecord`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DnsRecordsCERTRecord`
     * @throws ClassCastException if the instance is not `DnsRecordsCERTRecord`
     */
    public DnsRecordsCERTRecord getDnsRecordsCERTRecord() throws ClassCastException {
        return (DnsRecordsCERTRecord)super.getActualInstance();
    }
    /**
     * Get the actual instance of `DnsRecordsCNAMERecord`. If the actual instance is not `DnsRecordsCNAMERecord`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DnsRecordsCNAMERecord`
     * @throws ClassCastException if the instance is not `DnsRecordsCNAMERecord`
     */
    public DnsRecordsCNAMERecord getDnsRecordsCNAMERecord() throws ClassCastException {
        return (DnsRecordsCNAMERecord)super.getActualInstance();
    }
    /**
     * Get the actual instance of `DnsRecordsDNSKEYRecord`. If the actual instance is not `DnsRecordsDNSKEYRecord`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DnsRecordsDNSKEYRecord`
     * @throws ClassCastException if the instance is not `DnsRecordsDNSKEYRecord`
     */
    public DnsRecordsDNSKEYRecord getDnsRecordsDNSKEYRecord() throws ClassCastException {
        return (DnsRecordsDNSKEYRecord)super.getActualInstance();
    }
    /**
     * Get the actual instance of `DnsRecordsDSRecord`. If the actual instance is not `DnsRecordsDSRecord`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DnsRecordsDSRecord`
     * @throws ClassCastException if the instance is not `DnsRecordsDSRecord`
     */
    public DnsRecordsDSRecord getDnsRecordsDSRecord() throws ClassCastException {
        return (DnsRecordsDSRecord)super.getActualInstance();
    }
    /**
     * Get the actual instance of `DnsRecordsHTTPSRecord`. If the actual instance is not `DnsRecordsHTTPSRecord`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DnsRecordsHTTPSRecord`
     * @throws ClassCastException if the instance is not `DnsRecordsHTTPSRecord`
     */
    public DnsRecordsHTTPSRecord getDnsRecordsHTTPSRecord() throws ClassCastException {
        return (DnsRecordsHTTPSRecord)super.getActualInstance();
    }
    /**
     * Get the actual instance of `DnsRecordsLOCRecord`. If the actual instance is not `DnsRecordsLOCRecord`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DnsRecordsLOCRecord`
     * @throws ClassCastException if the instance is not `DnsRecordsLOCRecord`
     */
    public DnsRecordsLOCRecord getDnsRecordsLOCRecord() throws ClassCastException {
        return (DnsRecordsLOCRecord)super.getActualInstance();
    }
    /**
     * Get the actual instance of `DnsRecordsMXRecord`. If the actual instance is not `DnsRecordsMXRecord`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DnsRecordsMXRecord`
     * @throws ClassCastException if the instance is not `DnsRecordsMXRecord`
     */
    public DnsRecordsMXRecord getDnsRecordsMXRecord() throws ClassCastException {
        return (DnsRecordsMXRecord)super.getActualInstance();
    }
    /**
     * Get the actual instance of `DnsRecordsNAPTRRecord`. If the actual instance is not `DnsRecordsNAPTRRecord`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DnsRecordsNAPTRRecord`
     * @throws ClassCastException if the instance is not `DnsRecordsNAPTRRecord`
     */
    public DnsRecordsNAPTRRecord getDnsRecordsNAPTRRecord() throws ClassCastException {
        return (DnsRecordsNAPTRRecord)super.getActualInstance();
    }
    /**
     * Get the actual instance of `DnsRecordsNSRecord`. If the actual instance is not `DnsRecordsNSRecord`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DnsRecordsNSRecord`
     * @throws ClassCastException if the instance is not `DnsRecordsNSRecord`
     */
    public DnsRecordsNSRecord getDnsRecordsNSRecord() throws ClassCastException {
        return (DnsRecordsNSRecord)super.getActualInstance();
    }
    /**
     * Get the actual instance of `DnsRecordsPTRRecord`. If the actual instance is not `DnsRecordsPTRRecord`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DnsRecordsPTRRecord`
     * @throws ClassCastException if the instance is not `DnsRecordsPTRRecord`
     */
    public DnsRecordsPTRRecord getDnsRecordsPTRRecord() throws ClassCastException {
        return (DnsRecordsPTRRecord)super.getActualInstance();
    }
    /**
     * Get the actual instance of `DnsRecordsSMIMEARecord`. If the actual instance is not `DnsRecordsSMIMEARecord`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DnsRecordsSMIMEARecord`
     * @throws ClassCastException if the instance is not `DnsRecordsSMIMEARecord`
     */
    public DnsRecordsSMIMEARecord getDnsRecordsSMIMEARecord() throws ClassCastException {
        return (DnsRecordsSMIMEARecord)super.getActualInstance();
    }
    /**
     * Get the actual instance of `DnsRecordsSRVRecord`. If the actual instance is not `DnsRecordsSRVRecord`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DnsRecordsSRVRecord`
     * @throws ClassCastException if the instance is not `DnsRecordsSRVRecord`
     */
    public DnsRecordsSRVRecord getDnsRecordsSRVRecord() throws ClassCastException {
        return (DnsRecordsSRVRecord)super.getActualInstance();
    }
    /**
     * Get the actual instance of `DnsRecordsSSHFPRecord`. If the actual instance is not `DnsRecordsSSHFPRecord`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DnsRecordsSSHFPRecord`
     * @throws ClassCastException if the instance is not `DnsRecordsSSHFPRecord`
     */
    public DnsRecordsSSHFPRecord getDnsRecordsSSHFPRecord() throws ClassCastException {
        return (DnsRecordsSSHFPRecord)super.getActualInstance();
    }
    /**
     * Get the actual instance of `DnsRecordsSVCBRecord`. If the actual instance is not `DnsRecordsSVCBRecord`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DnsRecordsSVCBRecord`
     * @throws ClassCastException if the instance is not `DnsRecordsSVCBRecord`
     */
    public DnsRecordsSVCBRecord getDnsRecordsSVCBRecord() throws ClassCastException {
        return (DnsRecordsSVCBRecord)super.getActualInstance();
    }
    /**
     * Get the actual instance of `DnsRecordsTLSARecord`. If the actual instance is not `DnsRecordsTLSARecord`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DnsRecordsTLSARecord`
     * @throws ClassCastException if the instance is not `DnsRecordsTLSARecord`
     */
    public DnsRecordsTLSARecord getDnsRecordsTLSARecord() throws ClassCastException {
        return (DnsRecordsTLSARecord)super.getActualInstance();
    }
    /**
     * Get the actual instance of `DnsRecordsTXTRecord`. If the actual instance is not `DnsRecordsTXTRecord`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DnsRecordsTXTRecord`
     * @throws ClassCastException if the instance is not `DnsRecordsTXTRecord`
     */
    public DnsRecordsTXTRecord getDnsRecordsTXTRecord() throws ClassCastException {
        return (DnsRecordsTXTRecord)super.getActualInstance();
    }
    /**
     * Get the actual instance of `DnsRecordsURIRecord`. If the actual instance is not `DnsRecordsURIRecord`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DnsRecordsURIRecord`
     * @throws ClassCastException if the instance is not `DnsRecordsURIRecord`
     */
    public DnsRecordsURIRecord getDnsRecordsURIRecord() throws ClassCastException {
        return (DnsRecordsURIRecord)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to DnsRecordsDnsRecord
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with DnsRecordsARecord
        try {
            DnsRecordsARecord.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DnsRecordsARecord failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DnsRecordsAAAARecord
        try {
            DnsRecordsAAAARecord.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DnsRecordsAAAARecord failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DnsRecordsCAARecord
        try {
            DnsRecordsCAARecord.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DnsRecordsCAARecord failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DnsRecordsCERTRecord
        try {
            DnsRecordsCERTRecord.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DnsRecordsCERTRecord failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DnsRecordsCNAMERecord
        try {
            DnsRecordsCNAMERecord.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DnsRecordsCNAMERecord failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DnsRecordsDNSKEYRecord
        try {
            DnsRecordsDNSKEYRecord.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DnsRecordsDNSKEYRecord failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DnsRecordsDSRecord
        try {
            DnsRecordsDSRecord.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DnsRecordsDSRecord failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DnsRecordsHTTPSRecord
        try {
            DnsRecordsHTTPSRecord.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DnsRecordsHTTPSRecord failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DnsRecordsLOCRecord
        try {
            DnsRecordsLOCRecord.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DnsRecordsLOCRecord failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DnsRecordsMXRecord
        try {
            DnsRecordsMXRecord.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DnsRecordsMXRecord failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DnsRecordsNAPTRRecord
        try {
            DnsRecordsNAPTRRecord.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DnsRecordsNAPTRRecord failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DnsRecordsNSRecord
        try {
            DnsRecordsNSRecord.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DnsRecordsNSRecord failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DnsRecordsPTRRecord
        try {
            DnsRecordsPTRRecord.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DnsRecordsPTRRecord failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DnsRecordsSMIMEARecord
        try {
            DnsRecordsSMIMEARecord.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DnsRecordsSMIMEARecord failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DnsRecordsSRVRecord
        try {
            DnsRecordsSRVRecord.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DnsRecordsSRVRecord failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DnsRecordsSSHFPRecord
        try {
            DnsRecordsSSHFPRecord.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DnsRecordsSSHFPRecord failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DnsRecordsSVCBRecord
        try {
            DnsRecordsSVCBRecord.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DnsRecordsSVCBRecord failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DnsRecordsTLSARecord
        try {
            DnsRecordsTLSARecord.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DnsRecordsTLSARecord failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DnsRecordsTXTRecord
        try {
            DnsRecordsTXTRecord.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DnsRecordsTXTRecord failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DnsRecordsURIRecord
        try {
            DnsRecordsURIRecord.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DnsRecordsURIRecord failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for DnsRecordsDnsRecord with oneOf schemas: DnsRecordsAAAARecord, DnsRecordsARecord, DnsRecordsCAARecord, DnsRecordsCERTRecord, DnsRecordsCNAMERecord, DnsRecordsDNSKEYRecord, DnsRecordsDSRecord, DnsRecordsHTTPSRecord, DnsRecordsLOCRecord, DnsRecordsMXRecord, DnsRecordsNAPTRRecord, DnsRecordsNSRecord, DnsRecordsPTRRecord, DnsRecordsSMIMEARecord, DnsRecordsSRVRecord, DnsRecordsSSHFPRecord, DnsRecordsSVCBRecord, DnsRecordsTLSARecord, DnsRecordsTXTRecord, DnsRecordsURIRecord. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of DnsRecordsDnsRecord given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of DnsRecordsDnsRecord
     * @throws IOException if the JSON string is invalid with respect to DnsRecordsDnsRecord
     */
    public static DnsRecordsDnsRecord fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, DnsRecordsDnsRecord.class);
    }

    /**
     * Convert an instance of DnsRecordsDnsRecord to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

