/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AccessAccessGroupRule;
import org.openapitools.client.model.AccessAccessGroupRuleGroup;
import org.openapitools.client.model.AccessAnyValidServiceTokenRule;
import org.openapitools.client.model.AccessAuthenticationMethodRule;
import org.openapitools.client.model.AccessAuthenticationMethodRuleAuthMethod;
import org.openapitools.client.model.AccessAzureGroupRule;
import org.openapitools.client.model.AccessAzureGroupRuleAzureAD;
import org.openapitools.client.model.AccessCertificateRule;
import org.openapitools.client.model.AccessCountryRule;
import org.openapitools.client.model.AccessCountryRuleGeo;
import org.openapitools.client.model.AccessDevicePostureRule;
import org.openapitools.client.model.AccessDevicePostureRuleDevicePosture;
import org.openapitools.client.model.AccessDomainRule;
import org.openapitools.client.model.AccessDomainRuleEmailDomain;
import org.openapitools.client.model.AccessEmailListRule;
import org.openapitools.client.model.AccessEmailListRuleEmailList;
import org.openapitools.client.model.AccessEmailRule;
import org.openapitools.client.model.AccessEmailRuleEmail;
import org.openapitools.client.model.AccessEveryoneRule;
import org.openapitools.client.model.AccessExternalEvaluationRule;
import org.openapitools.client.model.AccessExternalEvaluationRuleExternalEvaluation;
import org.openapitools.client.model.AccessGithubOrganizationRule;
import org.openapitools.client.model.AccessGithubOrganizationRuleGithubOrganization;
import org.openapitools.client.model.AccessGsuiteGroupRule;
import org.openapitools.client.model.AccessGsuiteGroupRuleGsuite;
import org.openapitools.client.model.AccessIpListRule;
import org.openapitools.client.model.AccessIpListRuleIpList;
import org.openapitools.client.model.AccessIpRule;
import org.openapitools.client.model.AccessIpRuleIp;
import org.openapitools.client.model.AccessOktaGroupRule;
import org.openapitools.client.model.AccessOktaGroupRuleOkta;
import org.openapitools.client.model.AccessSamlGroupRule;
import org.openapitools.client.model.AccessSamlGroupRuleSaml;
import org.openapitools.client.model.AccessServiceTokenRule;
import org.openapitools.client.model.AccessServiceTokenRuleServiceToken;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class AccessRule extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(AccessRule.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AccessRule.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'AccessRule' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AccessEmailRule> adapterAccessEmailRule = gson.getDelegateAdapter(this, TypeToken.get(AccessEmailRule.class));
            final TypeAdapter<AccessEmailListRule> adapterAccessEmailListRule = gson.getDelegateAdapter(this, TypeToken.get(AccessEmailListRule.class));
            final TypeAdapter<AccessDomainRule> adapterAccessDomainRule = gson.getDelegateAdapter(this, TypeToken.get(AccessDomainRule.class));
            final TypeAdapter<AccessEveryoneRule> adapterAccessEveryoneRule = gson.getDelegateAdapter(this, TypeToken.get(AccessEveryoneRule.class));
            final TypeAdapter<AccessIpRule> adapterAccessIpRule = gson.getDelegateAdapter(this, TypeToken.get(AccessIpRule.class));
            final TypeAdapter<AccessIpListRule> adapterAccessIpListRule = gson.getDelegateAdapter(this, TypeToken.get(AccessIpListRule.class));
            final TypeAdapter<AccessCertificateRule> adapterAccessCertificateRule = gson.getDelegateAdapter(this, TypeToken.get(AccessCertificateRule.class));
            final TypeAdapter<AccessAccessGroupRule> adapterAccessAccessGroupRule = gson.getDelegateAdapter(this, TypeToken.get(AccessAccessGroupRule.class));
            final TypeAdapter<AccessAzureGroupRule> adapterAccessAzureGroupRule = gson.getDelegateAdapter(this, TypeToken.get(AccessAzureGroupRule.class));
            final TypeAdapter<AccessGithubOrganizationRule> adapterAccessGithubOrganizationRule = gson.getDelegateAdapter(this, TypeToken.get(AccessGithubOrganizationRule.class));
            final TypeAdapter<AccessGsuiteGroupRule> adapterAccessGsuiteGroupRule = gson.getDelegateAdapter(this, TypeToken.get(AccessGsuiteGroupRule.class));
            final TypeAdapter<AccessOktaGroupRule> adapterAccessOktaGroupRule = gson.getDelegateAdapter(this, TypeToken.get(AccessOktaGroupRule.class));
            final TypeAdapter<AccessSamlGroupRule> adapterAccessSamlGroupRule = gson.getDelegateAdapter(this, TypeToken.get(AccessSamlGroupRule.class));
            final TypeAdapter<AccessServiceTokenRule> adapterAccessServiceTokenRule = gson.getDelegateAdapter(this, TypeToken.get(AccessServiceTokenRule.class));
            final TypeAdapter<AccessAnyValidServiceTokenRule> adapterAccessAnyValidServiceTokenRule = gson.getDelegateAdapter(this, TypeToken.get(AccessAnyValidServiceTokenRule.class));
            final TypeAdapter<AccessExternalEvaluationRule> adapterAccessExternalEvaluationRule = gson.getDelegateAdapter(this, TypeToken.get(AccessExternalEvaluationRule.class));
            final TypeAdapter<AccessCountryRule> adapterAccessCountryRule = gson.getDelegateAdapter(this, TypeToken.get(AccessCountryRule.class));
            final TypeAdapter<AccessAuthenticationMethodRule> adapterAccessAuthenticationMethodRule = gson.getDelegateAdapter(this, TypeToken.get(AccessAuthenticationMethodRule.class));
            final TypeAdapter<AccessDevicePostureRule> adapterAccessDevicePostureRule = gson.getDelegateAdapter(this, TypeToken.get(AccessDevicePostureRule.class));

            return (TypeAdapter<T>) new TypeAdapter<AccessRule>() {
                @Override
                public void write(JsonWriter out, AccessRule value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `AccessEmailRule`
                    if (value.getActualInstance() instanceof AccessEmailRule) {
                        JsonElement element = adapterAccessEmailRule.toJsonTree((AccessEmailRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessEmailListRule`
                    if (value.getActualInstance() instanceof AccessEmailListRule) {
                        JsonElement element = adapterAccessEmailListRule.toJsonTree((AccessEmailListRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessDomainRule`
                    if (value.getActualInstance() instanceof AccessDomainRule) {
                        JsonElement element = adapterAccessDomainRule.toJsonTree((AccessDomainRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessEveryoneRule`
                    if (value.getActualInstance() instanceof AccessEveryoneRule) {
                        JsonElement element = adapterAccessEveryoneRule.toJsonTree((AccessEveryoneRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessIpRule`
                    if (value.getActualInstance() instanceof AccessIpRule) {
                        JsonElement element = adapterAccessIpRule.toJsonTree((AccessIpRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessIpListRule`
                    if (value.getActualInstance() instanceof AccessIpListRule) {
                        JsonElement element = adapterAccessIpListRule.toJsonTree((AccessIpListRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessCertificateRule`
                    if (value.getActualInstance() instanceof AccessCertificateRule) {
                        JsonElement element = adapterAccessCertificateRule.toJsonTree((AccessCertificateRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessAccessGroupRule`
                    if (value.getActualInstance() instanceof AccessAccessGroupRule) {
                        JsonElement element = adapterAccessAccessGroupRule.toJsonTree((AccessAccessGroupRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessAzureGroupRule`
                    if (value.getActualInstance() instanceof AccessAzureGroupRule) {
                        JsonElement element = adapterAccessAzureGroupRule.toJsonTree((AccessAzureGroupRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessGithubOrganizationRule`
                    if (value.getActualInstance() instanceof AccessGithubOrganizationRule) {
                        JsonElement element = adapterAccessGithubOrganizationRule.toJsonTree((AccessGithubOrganizationRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessGsuiteGroupRule`
                    if (value.getActualInstance() instanceof AccessGsuiteGroupRule) {
                        JsonElement element = adapterAccessGsuiteGroupRule.toJsonTree((AccessGsuiteGroupRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessOktaGroupRule`
                    if (value.getActualInstance() instanceof AccessOktaGroupRule) {
                        JsonElement element = adapterAccessOktaGroupRule.toJsonTree((AccessOktaGroupRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessSamlGroupRule`
                    if (value.getActualInstance() instanceof AccessSamlGroupRule) {
                        JsonElement element = adapterAccessSamlGroupRule.toJsonTree((AccessSamlGroupRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessServiceTokenRule`
                    if (value.getActualInstance() instanceof AccessServiceTokenRule) {
                        JsonElement element = adapterAccessServiceTokenRule.toJsonTree((AccessServiceTokenRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessAnyValidServiceTokenRule`
                    if (value.getActualInstance() instanceof AccessAnyValidServiceTokenRule) {
                        JsonElement element = adapterAccessAnyValidServiceTokenRule.toJsonTree((AccessAnyValidServiceTokenRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessExternalEvaluationRule`
                    if (value.getActualInstance() instanceof AccessExternalEvaluationRule) {
                        JsonElement element = adapterAccessExternalEvaluationRule.toJsonTree((AccessExternalEvaluationRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessCountryRule`
                    if (value.getActualInstance() instanceof AccessCountryRule) {
                        JsonElement element = adapterAccessCountryRule.toJsonTree((AccessCountryRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessAuthenticationMethodRule`
                    if (value.getActualInstance() instanceof AccessAuthenticationMethodRule) {
                        JsonElement element = adapterAccessAuthenticationMethodRule.toJsonTree((AccessAuthenticationMethodRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessDevicePostureRule`
                    if (value.getActualInstance() instanceof AccessDevicePostureRule) {
                        JsonElement element = adapterAccessDevicePostureRule.toJsonTree((AccessDevicePostureRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: AccessAccessGroupRule, AccessAnyValidServiceTokenRule, AccessAuthenticationMethodRule, AccessAzureGroupRule, AccessCertificateRule, AccessCountryRule, AccessDevicePostureRule, AccessDomainRule, AccessEmailListRule, AccessEmailRule, AccessEveryoneRule, AccessExternalEvaluationRule, AccessGithubOrganizationRule, AccessGsuiteGroupRule, AccessIpListRule, AccessIpRule, AccessOktaGroupRule, AccessSamlGroupRule, AccessServiceTokenRule");
                }

                @Override
                public AccessRule read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize AccessEmailRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessEmailRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessEmailRule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AccessEmailRule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessEmailRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessEmailRule'", e);
                    }
                    // deserialize AccessEmailListRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessEmailListRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessEmailListRule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AccessEmailListRule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessEmailListRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessEmailListRule'", e);
                    }
                    // deserialize AccessDomainRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessDomainRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessDomainRule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AccessDomainRule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessDomainRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessDomainRule'", e);
                    }
                    // deserialize AccessEveryoneRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessEveryoneRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessEveryoneRule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AccessEveryoneRule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessEveryoneRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessEveryoneRule'", e);
                    }
                    // deserialize AccessIpRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessIpRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessIpRule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AccessIpRule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessIpRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessIpRule'", e);
                    }
                    // deserialize AccessIpListRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessIpListRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessIpListRule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AccessIpListRule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessIpListRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessIpListRule'", e);
                    }
                    // deserialize AccessCertificateRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessCertificateRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessCertificateRule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AccessCertificateRule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessCertificateRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessCertificateRule'", e);
                    }
                    // deserialize AccessAccessGroupRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessAccessGroupRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessAccessGroupRule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AccessAccessGroupRule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessAccessGroupRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessAccessGroupRule'", e);
                    }
                    // deserialize AccessAzureGroupRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessAzureGroupRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessAzureGroupRule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AccessAzureGroupRule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessAzureGroupRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessAzureGroupRule'", e);
                    }
                    // deserialize AccessGithubOrganizationRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessGithubOrganizationRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessGithubOrganizationRule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AccessGithubOrganizationRule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessGithubOrganizationRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessGithubOrganizationRule'", e);
                    }
                    // deserialize AccessGsuiteGroupRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessGsuiteGroupRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessGsuiteGroupRule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AccessGsuiteGroupRule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessGsuiteGroupRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessGsuiteGroupRule'", e);
                    }
                    // deserialize AccessOktaGroupRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessOktaGroupRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessOktaGroupRule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AccessOktaGroupRule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessOktaGroupRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessOktaGroupRule'", e);
                    }
                    // deserialize AccessSamlGroupRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessSamlGroupRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessSamlGroupRule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AccessSamlGroupRule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessSamlGroupRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessSamlGroupRule'", e);
                    }
                    // deserialize AccessServiceTokenRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessServiceTokenRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessServiceTokenRule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AccessServiceTokenRule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessServiceTokenRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessServiceTokenRule'", e);
                    }
                    // deserialize AccessAnyValidServiceTokenRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessAnyValidServiceTokenRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessAnyValidServiceTokenRule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AccessAnyValidServiceTokenRule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessAnyValidServiceTokenRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessAnyValidServiceTokenRule'", e);
                    }
                    // deserialize AccessExternalEvaluationRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessExternalEvaluationRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessExternalEvaluationRule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AccessExternalEvaluationRule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessExternalEvaluationRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessExternalEvaluationRule'", e);
                    }
                    // deserialize AccessCountryRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessCountryRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessCountryRule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AccessCountryRule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessCountryRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessCountryRule'", e);
                    }
                    // deserialize AccessAuthenticationMethodRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessAuthenticationMethodRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessAuthenticationMethodRule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AccessAuthenticationMethodRule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessAuthenticationMethodRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessAuthenticationMethodRule'", e);
                    }
                    // deserialize AccessDevicePostureRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessDevicePostureRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessDevicePostureRule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AccessDevicePostureRule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessDevicePostureRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessDevicePostureRule'", e);
                    }

                    if (match == 1) {
                        AccessRule ret = new AccessRule();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for AccessRule: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public AccessRule() {
        super("oneOf", Boolean.FALSE);
    }

    public AccessRule(AccessAccessGroupRule o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessRule(AccessAnyValidServiceTokenRule o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessRule(AccessAuthenticationMethodRule o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessRule(AccessAzureGroupRule o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessRule(AccessCertificateRule o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessRule(AccessCountryRule o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessRule(AccessDevicePostureRule o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessRule(AccessDomainRule o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessRule(AccessEmailListRule o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessRule(AccessEmailRule o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessRule(AccessEveryoneRule o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessRule(AccessExternalEvaluationRule o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessRule(AccessGithubOrganizationRule o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessRule(AccessGsuiteGroupRule o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessRule(AccessIpListRule o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessRule(AccessIpRule o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessRule(AccessOktaGroupRule o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessRule(AccessSamlGroupRule o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessRule(AccessServiceTokenRule o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("AccessEmailRule", AccessEmailRule.class);
        schemas.put("AccessEmailListRule", AccessEmailListRule.class);
        schemas.put("AccessDomainRule", AccessDomainRule.class);
        schemas.put("AccessEveryoneRule", AccessEveryoneRule.class);
        schemas.put("AccessIpRule", AccessIpRule.class);
        schemas.put("AccessIpListRule", AccessIpListRule.class);
        schemas.put("AccessCertificateRule", AccessCertificateRule.class);
        schemas.put("AccessAccessGroupRule", AccessAccessGroupRule.class);
        schemas.put("AccessAzureGroupRule", AccessAzureGroupRule.class);
        schemas.put("AccessGithubOrganizationRule", AccessGithubOrganizationRule.class);
        schemas.put("AccessGsuiteGroupRule", AccessGsuiteGroupRule.class);
        schemas.put("AccessOktaGroupRule", AccessOktaGroupRule.class);
        schemas.put("AccessSamlGroupRule", AccessSamlGroupRule.class);
        schemas.put("AccessServiceTokenRule", AccessServiceTokenRule.class);
        schemas.put("AccessAnyValidServiceTokenRule", AccessAnyValidServiceTokenRule.class);
        schemas.put("AccessExternalEvaluationRule", AccessExternalEvaluationRule.class);
        schemas.put("AccessCountryRule", AccessCountryRule.class);
        schemas.put("AccessAuthenticationMethodRule", AccessAuthenticationMethodRule.class);
        schemas.put("AccessDevicePostureRule", AccessDevicePostureRule.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return AccessRule.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * AccessAccessGroupRule, AccessAnyValidServiceTokenRule, AccessAuthenticationMethodRule, AccessAzureGroupRule, AccessCertificateRule, AccessCountryRule, AccessDevicePostureRule, AccessDomainRule, AccessEmailListRule, AccessEmailRule, AccessEveryoneRule, AccessExternalEvaluationRule, AccessGithubOrganizationRule, AccessGsuiteGroupRule, AccessIpListRule, AccessIpRule, AccessOktaGroupRule, AccessSamlGroupRule, AccessServiceTokenRule
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof AccessEmailRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessEmailListRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessDomainRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessEveryoneRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessIpRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessIpListRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessCertificateRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessAccessGroupRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessAzureGroupRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessGithubOrganizationRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessGsuiteGroupRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessOktaGroupRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessSamlGroupRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessServiceTokenRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessAnyValidServiceTokenRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessExternalEvaluationRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessCountryRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessAuthenticationMethodRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessDevicePostureRule) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be AccessAccessGroupRule, AccessAnyValidServiceTokenRule, AccessAuthenticationMethodRule, AccessAzureGroupRule, AccessCertificateRule, AccessCountryRule, AccessDevicePostureRule, AccessDomainRule, AccessEmailListRule, AccessEmailRule, AccessEveryoneRule, AccessExternalEvaluationRule, AccessGithubOrganizationRule, AccessGsuiteGroupRule, AccessIpListRule, AccessIpRule, AccessOktaGroupRule, AccessSamlGroupRule, AccessServiceTokenRule");
    }

    /**
     * Get the actual instance, which can be the following:
     * AccessAccessGroupRule, AccessAnyValidServiceTokenRule, AccessAuthenticationMethodRule, AccessAzureGroupRule, AccessCertificateRule, AccessCountryRule, AccessDevicePostureRule, AccessDomainRule, AccessEmailListRule, AccessEmailRule, AccessEveryoneRule, AccessExternalEvaluationRule, AccessGithubOrganizationRule, AccessGsuiteGroupRule, AccessIpListRule, AccessIpRule, AccessOktaGroupRule, AccessSamlGroupRule, AccessServiceTokenRule
     *
     * @return The actual instance (AccessAccessGroupRule, AccessAnyValidServiceTokenRule, AccessAuthenticationMethodRule, AccessAzureGroupRule, AccessCertificateRule, AccessCountryRule, AccessDevicePostureRule, AccessDomainRule, AccessEmailListRule, AccessEmailRule, AccessEveryoneRule, AccessExternalEvaluationRule, AccessGithubOrganizationRule, AccessGsuiteGroupRule, AccessIpListRule, AccessIpRule, AccessOktaGroupRule, AccessSamlGroupRule, AccessServiceTokenRule)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `AccessEmailRule`. If the actual instance is not `AccessEmailRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessEmailRule`
     * @throws ClassCastException if the instance is not `AccessEmailRule`
     */
    public AccessEmailRule getAccessEmailRule() throws ClassCastException {
        return (AccessEmailRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessEmailListRule`. If the actual instance is not `AccessEmailListRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessEmailListRule`
     * @throws ClassCastException if the instance is not `AccessEmailListRule`
     */
    public AccessEmailListRule getAccessEmailListRule() throws ClassCastException {
        return (AccessEmailListRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessDomainRule`. If the actual instance is not `AccessDomainRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessDomainRule`
     * @throws ClassCastException if the instance is not `AccessDomainRule`
     */
    public AccessDomainRule getAccessDomainRule() throws ClassCastException {
        return (AccessDomainRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessEveryoneRule`. If the actual instance is not `AccessEveryoneRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessEveryoneRule`
     * @throws ClassCastException if the instance is not `AccessEveryoneRule`
     */
    public AccessEveryoneRule getAccessEveryoneRule() throws ClassCastException {
        return (AccessEveryoneRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessIpRule`. If the actual instance is not `AccessIpRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessIpRule`
     * @throws ClassCastException if the instance is not `AccessIpRule`
     */
    public AccessIpRule getAccessIpRule() throws ClassCastException {
        return (AccessIpRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessIpListRule`. If the actual instance is not `AccessIpListRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessIpListRule`
     * @throws ClassCastException if the instance is not `AccessIpListRule`
     */
    public AccessIpListRule getAccessIpListRule() throws ClassCastException {
        return (AccessIpListRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessCertificateRule`. If the actual instance is not `AccessCertificateRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessCertificateRule`
     * @throws ClassCastException if the instance is not `AccessCertificateRule`
     */
    public AccessCertificateRule getAccessCertificateRule() throws ClassCastException {
        return (AccessCertificateRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessAccessGroupRule`. If the actual instance is not `AccessAccessGroupRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessAccessGroupRule`
     * @throws ClassCastException if the instance is not `AccessAccessGroupRule`
     */
    public AccessAccessGroupRule getAccessAccessGroupRule() throws ClassCastException {
        return (AccessAccessGroupRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessAzureGroupRule`. If the actual instance is not `AccessAzureGroupRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessAzureGroupRule`
     * @throws ClassCastException if the instance is not `AccessAzureGroupRule`
     */
    public AccessAzureGroupRule getAccessAzureGroupRule() throws ClassCastException {
        return (AccessAzureGroupRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessGithubOrganizationRule`. If the actual instance is not `AccessGithubOrganizationRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessGithubOrganizationRule`
     * @throws ClassCastException if the instance is not `AccessGithubOrganizationRule`
     */
    public AccessGithubOrganizationRule getAccessGithubOrganizationRule() throws ClassCastException {
        return (AccessGithubOrganizationRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessGsuiteGroupRule`. If the actual instance is not `AccessGsuiteGroupRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessGsuiteGroupRule`
     * @throws ClassCastException if the instance is not `AccessGsuiteGroupRule`
     */
    public AccessGsuiteGroupRule getAccessGsuiteGroupRule() throws ClassCastException {
        return (AccessGsuiteGroupRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessOktaGroupRule`. If the actual instance is not `AccessOktaGroupRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessOktaGroupRule`
     * @throws ClassCastException if the instance is not `AccessOktaGroupRule`
     */
    public AccessOktaGroupRule getAccessOktaGroupRule() throws ClassCastException {
        return (AccessOktaGroupRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessSamlGroupRule`. If the actual instance is not `AccessSamlGroupRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessSamlGroupRule`
     * @throws ClassCastException if the instance is not `AccessSamlGroupRule`
     */
    public AccessSamlGroupRule getAccessSamlGroupRule() throws ClassCastException {
        return (AccessSamlGroupRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessServiceTokenRule`. If the actual instance is not `AccessServiceTokenRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessServiceTokenRule`
     * @throws ClassCastException if the instance is not `AccessServiceTokenRule`
     */
    public AccessServiceTokenRule getAccessServiceTokenRule() throws ClassCastException {
        return (AccessServiceTokenRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessAnyValidServiceTokenRule`. If the actual instance is not `AccessAnyValidServiceTokenRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessAnyValidServiceTokenRule`
     * @throws ClassCastException if the instance is not `AccessAnyValidServiceTokenRule`
     */
    public AccessAnyValidServiceTokenRule getAccessAnyValidServiceTokenRule() throws ClassCastException {
        return (AccessAnyValidServiceTokenRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessExternalEvaluationRule`. If the actual instance is not `AccessExternalEvaluationRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessExternalEvaluationRule`
     * @throws ClassCastException if the instance is not `AccessExternalEvaluationRule`
     */
    public AccessExternalEvaluationRule getAccessExternalEvaluationRule() throws ClassCastException {
        return (AccessExternalEvaluationRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessCountryRule`. If the actual instance is not `AccessCountryRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessCountryRule`
     * @throws ClassCastException if the instance is not `AccessCountryRule`
     */
    public AccessCountryRule getAccessCountryRule() throws ClassCastException {
        return (AccessCountryRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessAuthenticationMethodRule`. If the actual instance is not `AccessAuthenticationMethodRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessAuthenticationMethodRule`
     * @throws ClassCastException if the instance is not `AccessAuthenticationMethodRule`
     */
    public AccessAuthenticationMethodRule getAccessAuthenticationMethodRule() throws ClassCastException {
        return (AccessAuthenticationMethodRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessDevicePostureRule`. If the actual instance is not `AccessDevicePostureRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessDevicePostureRule`
     * @throws ClassCastException if the instance is not `AccessDevicePostureRule`
     */
    public AccessDevicePostureRule getAccessDevicePostureRule() throws ClassCastException {
        return (AccessDevicePostureRule)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to AccessRule
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with AccessEmailRule
        try {
            AccessEmailRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessEmailRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessEmailListRule
        try {
            AccessEmailListRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessEmailListRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessDomainRule
        try {
            AccessDomainRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessDomainRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessEveryoneRule
        try {
            AccessEveryoneRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessEveryoneRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessIpRule
        try {
            AccessIpRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessIpRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessIpListRule
        try {
            AccessIpListRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessIpListRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessCertificateRule
        try {
            AccessCertificateRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessCertificateRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessAccessGroupRule
        try {
            AccessAccessGroupRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessAccessGroupRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessAzureGroupRule
        try {
            AccessAzureGroupRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessAzureGroupRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessGithubOrganizationRule
        try {
            AccessGithubOrganizationRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessGithubOrganizationRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessGsuiteGroupRule
        try {
            AccessGsuiteGroupRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessGsuiteGroupRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessOktaGroupRule
        try {
            AccessOktaGroupRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessOktaGroupRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessSamlGroupRule
        try {
            AccessSamlGroupRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessSamlGroupRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessServiceTokenRule
        try {
            AccessServiceTokenRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessServiceTokenRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessAnyValidServiceTokenRule
        try {
            AccessAnyValidServiceTokenRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessAnyValidServiceTokenRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessExternalEvaluationRule
        try {
            AccessExternalEvaluationRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessExternalEvaluationRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessCountryRule
        try {
            AccessCountryRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessCountryRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessAuthenticationMethodRule
        try {
            AccessAuthenticationMethodRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessAuthenticationMethodRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessDevicePostureRule
        try {
            AccessDevicePostureRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessDevicePostureRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for AccessRule with oneOf schemas: AccessAccessGroupRule, AccessAnyValidServiceTokenRule, AccessAuthenticationMethodRule, AccessAzureGroupRule, AccessCertificateRule, AccessCountryRule, AccessDevicePostureRule, AccessDomainRule, AccessEmailListRule, AccessEmailRule, AccessEveryoneRule, AccessExternalEvaluationRule, AccessGithubOrganizationRule, AccessGsuiteGroupRule, AccessIpListRule, AccessIpRule, AccessOktaGroupRule, AccessSamlGroupRule, AccessServiceTokenRule. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of AccessRule given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of AccessRule
     * @throws IOException if the JSON string is invalid with respect to AccessRule
     */
    public static AccessRule fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, AccessRule.class);
    }

    /**
     * Convert an instance of AccessRule to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

