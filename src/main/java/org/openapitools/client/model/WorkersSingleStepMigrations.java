/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.WorkersMigrationStepRenamedClassesInner;
import org.openapitools.client.model.WorkersMigrationStepTransferredClassesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single set of migrations to apply.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class WorkersSingleStepMigrations {
  public static final String SERIALIZED_NAME_NEW_TAG = "new_tag";
  @SerializedName(SERIALIZED_NAME_NEW_TAG)
  private String newTag;

  public static final String SERIALIZED_NAME_OLD_TAG = "old_tag";
  @SerializedName(SERIALIZED_NAME_OLD_TAG)
  private String oldTag;

  public static final String SERIALIZED_NAME_DELETED_CLASSES = "deleted_classes";
  @SerializedName(SERIALIZED_NAME_DELETED_CLASSES)
  private List<String> deletedClasses = new ArrayList<>();

  public static final String SERIALIZED_NAME_NEW_CLASSES = "new_classes";
  @SerializedName(SERIALIZED_NAME_NEW_CLASSES)
  private List<String> newClasses = new ArrayList<>();

  public static final String SERIALIZED_NAME_RENAMED_CLASSES = "renamed_classes";
  @SerializedName(SERIALIZED_NAME_RENAMED_CLASSES)
  private List<WorkersMigrationStepRenamedClassesInner> renamedClasses = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSFERRED_CLASSES = "transferred_classes";
  @SerializedName(SERIALIZED_NAME_TRANSFERRED_CLASSES)
  private List<WorkersMigrationStepTransferredClassesInner> transferredClasses = new ArrayList<>();

  public WorkersSingleStepMigrations() {
  }

  public WorkersSingleStepMigrations newTag(String newTag) {
    this.newTag = newTag;
    return this;
  }

   /**
   * Tag to set as the latest migration tag.
   * @return newTag
  **/
  @javax.annotation.Nullable
  public String getNewTag() {
    return newTag;
  }

  public void setNewTag(String newTag) {
    this.newTag = newTag;
  }


  public WorkersSingleStepMigrations oldTag(String oldTag) {
    this.oldTag = oldTag;
    return this;
  }

   /**
   * Tag used to verify against the latest migration tag for this Worker. If they don&#39;t match, the upload is rejected.
   * @return oldTag
  **/
  @javax.annotation.Nullable
  public String getOldTag() {
    return oldTag;
  }

  public void setOldTag(String oldTag) {
    this.oldTag = oldTag;
  }


  public WorkersSingleStepMigrations deletedClasses(List<String> deletedClasses) {
    this.deletedClasses = deletedClasses;
    return this;
  }

  public WorkersSingleStepMigrations addDeletedClassesItem(String deletedClassesItem) {
    if (this.deletedClasses == null) {
      this.deletedClasses = new ArrayList<>();
    }
    this.deletedClasses.add(deletedClassesItem);
    return this;
  }

   /**
   * A list of classes to delete Durable Object namespaces from.
   * @return deletedClasses
  **/
  @javax.annotation.Nullable
  public List<String> getDeletedClasses() {
    return deletedClasses;
  }

  public void setDeletedClasses(List<String> deletedClasses) {
    this.deletedClasses = deletedClasses;
  }


  public WorkersSingleStepMigrations newClasses(List<String> newClasses) {
    this.newClasses = newClasses;
    return this;
  }

  public WorkersSingleStepMigrations addNewClassesItem(String newClassesItem) {
    if (this.newClasses == null) {
      this.newClasses = new ArrayList<>();
    }
    this.newClasses.add(newClassesItem);
    return this;
  }

   /**
   * A list of classes to create Durable Object namespaces from.
   * @return newClasses
  **/
  @javax.annotation.Nullable
  public List<String> getNewClasses() {
    return newClasses;
  }

  public void setNewClasses(List<String> newClasses) {
    this.newClasses = newClasses;
  }


  public WorkersSingleStepMigrations renamedClasses(List<WorkersMigrationStepRenamedClassesInner> renamedClasses) {
    this.renamedClasses = renamedClasses;
    return this;
  }

  public WorkersSingleStepMigrations addRenamedClassesItem(WorkersMigrationStepRenamedClassesInner renamedClassesItem) {
    if (this.renamedClasses == null) {
      this.renamedClasses = new ArrayList<>();
    }
    this.renamedClasses.add(renamedClassesItem);
    return this;
  }

   /**
   * A list of classes with Durable Object namespaces that were renamed.
   * @return renamedClasses
  **/
  @javax.annotation.Nullable
  public List<WorkersMigrationStepRenamedClassesInner> getRenamedClasses() {
    return renamedClasses;
  }

  public void setRenamedClasses(List<WorkersMigrationStepRenamedClassesInner> renamedClasses) {
    this.renamedClasses = renamedClasses;
  }


  public WorkersSingleStepMigrations transferredClasses(List<WorkersMigrationStepTransferredClassesInner> transferredClasses) {
    this.transferredClasses = transferredClasses;
    return this;
  }

  public WorkersSingleStepMigrations addTransferredClassesItem(WorkersMigrationStepTransferredClassesInner transferredClassesItem) {
    if (this.transferredClasses == null) {
      this.transferredClasses = new ArrayList<>();
    }
    this.transferredClasses.add(transferredClassesItem);
    return this;
  }

   /**
   * A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker.
   * @return transferredClasses
  **/
  @javax.annotation.Nullable
  public List<WorkersMigrationStepTransferredClassesInner> getTransferredClasses() {
    return transferredClasses;
  }

  public void setTransferredClasses(List<WorkersMigrationStepTransferredClassesInner> transferredClasses) {
    this.transferredClasses = transferredClasses;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkersSingleStepMigrations workersSingleStepMigrations = (WorkersSingleStepMigrations) o;
    return Objects.equals(this.newTag, workersSingleStepMigrations.newTag) &&
        Objects.equals(this.oldTag, workersSingleStepMigrations.oldTag) &&
        Objects.equals(this.deletedClasses, workersSingleStepMigrations.deletedClasses) &&
        Objects.equals(this.newClasses, workersSingleStepMigrations.newClasses) &&
        Objects.equals(this.renamedClasses, workersSingleStepMigrations.renamedClasses) &&
        Objects.equals(this.transferredClasses, workersSingleStepMigrations.transferredClasses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(newTag, oldTag, deletedClasses, newClasses, renamedClasses, transferredClasses);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkersSingleStepMigrations {\n");
    sb.append("    newTag: ").append(toIndentedString(newTag)).append("\n");
    sb.append("    oldTag: ").append(toIndentedString(oldTag)).append("\n");
    sb.append("    deletedClasses: ").append(toIndentedString(deletedClasses)).append("\n");
    sb.append("    newClasses: ").append(toIndentedString(newClasses)).append("\n");
    sb.append("    renamedClasses: ").append(toIndentedString(renamedClasses)).append("\n");
    sb.append("    transferredClasses: ").append(toIndentedString(transferredClasses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("new_tag");
    openapiFields.add("old_tag");
    openapiFields.add("deleted_classes");
    openapiFields.add("new_classes");
    openapiFields.add("renamed_classes");
    openapiFields.add("transferred_classes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to WorkersSingleStepMigrations
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkersSingleStepMigrations.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkersSingleStepMigrations is not found in the empty JSON string", WorkersSingleStepMigrations.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkersSingleStepMigrations.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkersSingleStepMigrations` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("new_tag") != null && !jsonObj.get("new_tag").isJsonNull()) && !jsonObj.get("new_tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `new_tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("new_tag").toString()));
      }
      if ((jsonObj.get("old_tag") != null && !jsonObj.get("old_tag").isJsonNull()) && !jsonObj.get("old_tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `old_tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("old_tag").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("deleted_classes") != null && !jsonObj.get("deleted_classes").isJsonNull() && !jsonObj.get("deleted_classes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleted_classes` to be an array in the JSON string but got `%s`", jsonObj.get("deleted_classes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("new_classes") != null && !jsonObj.get("new_classes").isJsonNull() && !jsonObj.get("new_classes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `new_classes` to be an array in the JSON string but got `%s`", jsonObj.get("new_classes").toString()));
      }
      if (jsonObj.get("renamed_classes") != null && !jsonObj.get("renamed_classes").isJsonNull()) {
        JsonArray jsonArrayrenamedClasses = jsonObj.getAsJsonArray("renamed_classes");
        if (jsonArrayrenamedClasses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("renamed_classes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `renamed_classes` to be an array in the JSON string but got `%s`", jsonObj.get("renamed_classes").toString()));
          }

          // validate the optional field `renamed_classes` (array)
          for (int i = 0; i < jsonArrayrenamedClasses.size(); i++) {
            WorkersMigrationStepRenamedClassesInner.validateJsonElement(jsonArrayrenamedClasses.get(i));
          };
        }
      }
      if (jsonObj.get("transferred_classes") != null && !jsonObj.get("transferred_classes").isJsonNull()) {
        JsonArray jsonArraytransferredClasses = jsonObj.getAsJsonArray("transferred_classes");
        if (jsonArraytransferredClasses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transferred_classes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transferred_classes` to be an array in the JSON string but got `%s`", jsonObj.get("transferred_classes").toString()));
          }

          // validate the optional field `transferred_classes` (array)
          for (int i = 0; i < jsonArraytransferredClasses.size(); i++) {
            WorkersMigrationStepTransferredClassesInner.validateJsonElement(jsonArraytransferredClasses.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkersSingleStepMigrations.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkersSingleStepMigrations' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkersSingleStepMigrations> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkersSingleStepMigrations.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkersSingleStepMigrations>() {
           @Override
           public void write(JsonWriter out, WorkersSingleStepMigrations value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkersSingleStepMigrations read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WorkersSingleStepMigrations given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WorkersSingleStepMigrations
  * @throws IOException if the JSON string is invalid with respect to WorkersSingleStepMigrations
  */
  public static WorkersSingleStepMigrations fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkersSingleStepMigrations.class);
  }

 /**
  * Convert an instance of WorkersSingleStepMigrations to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

