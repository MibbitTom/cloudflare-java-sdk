/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configs for the project build process.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class PagesBuildConfig {
  public static final String SERIALIZED_NAME_BUILD_CACHING = "build_caching";
  @SerializedName(SERIALIZED_NAME_BUILD_CACHING)
  private Boolean buildCaching;

  public static final String SERIALIZED_NAME_BUILD_COMMAND = "build_command";
  @SerializedName(SERIALIZED_NAME_BUILD_COMMAND)
  private String buildCommand;

  public static final String SERIALIZED_NAME_DESTINATION_DIR = "destination_dir";
  @SerializedName(SERIALIZED_NAME_DESTINATION_DIR)
  private String destinationDir;

  public static final String SERIALIZED_NAME_ROOT_DIR = "root_dir";
  @SerializedName(SERIALIZED_NAME_ROOT_DIR)
  private String rootDir;

  public static final String SERIALIZED_NAME_WEB_ANALYTICS_TAG = "web_analytics_tag";
  @SerializedName(SERIALIZED_NAME_WEB_ANALYTICS_TAG)
  private String webAnalyticsTag;

  public static final String SERIALIZED_NAME_WEB_ANALYTICS_TOKEN = "web_analytics_token";
  @SerializedName(SERIALIZED_NAME_WEB_ANALYTICS_TOKEN)
  private String webAnalyticsToken;

  public PagesBuildConfig() {
  }

  public PagesBuildConfig buildCaching(Boolean buildCaching) {
    this.buildCaching = buildCaching;
    return this;
  }

   /**
   * Enable build caching for the project.
   * @return buildCaching
  **/
  @javax.annotation.Nullable
  public Boolean getBuildCaching() {
    return buildCaching;
  }

  public void setBuildCaching(Boolean buildCaching) {
    this.buildCaching = buildCaching;
  }


  public PagesBuildConfig buildCommand(String buildCommand) {
    this.buildCommand = buildCommand;
    return this;
  }

   /**
   * Command used to build project.
   * @return buildCommand
  **/
  @javax.annotation.Nullable
  public String getBuildCommand() {
    return buildCommand;
  }

  public void setBuildCommand(String buildCommand) {
    this.buildCommand = buildCommand;
  }


  public PagesBuildConfig destinationDir(String destinationDir) {
    this.destinationDir = destinationDir;
    return this;
  }

   /**
   * Output directory of the build.
   * @return destinationDir
  **/
  @javax.annotation.Nullable
  public String getDestinationDir() {
    return destinationDir;
  }

  public void setDestinationDir(String destinationDir) {
    this.destinationDir = destinationDir;
  }


  public PagesBuildConfig rootDir(String rootDir) {
    this.rootDir = rootDir;
    return this;
  }

   /**
   * Directory to run the command.
   * @return rootDir
  **/
  @javax.annotation.Nullable
  public String getRootDir() {
    return rootDir;
  }

  public void setRootDir(String rootDir) {
    this.rootDir = rootDir;
  }


  public PagesBuildConfig webAnalyticsTag(String webAnalyticsTag) {
    this.webAnalyticsTag = webAnalyticsTag;
    return this;
  }

   /**
   * The classifying tag for analytics.
   * @return webAnalyticsTag
  **/
  @javax.annotation.Nullable
  public String getWebAnalyticsTag() {
    return webAnalyticsTag;
  }

  public void setWebAnalyticsTag(String webAnalyticsTag) {
    this.webAnalyticsTag = webAnalyticsTag;
  }


  public PagesBuildConfig webAnalyticsToken(String webAnalyticsToken) {
    this.webAnalyticsToken = webAnalyticsToken;
    return this;
  }

   /**
   * The auth token for analytics.
   * @return webAnalyticsToken
  **/
  @javax.annotation.Nullable
  public String getWebAnalyticsToken() {
    return webAnalyticsToken;
  }

  public void setWebAnalyticsToken(String webAnalyticsToken) {
    this.webAnalyticsToken = webAnalyticsToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PagesBuildConfig pagesBuildConfig = (PagesBuildConfig) o;
    return Objects.equals(this.buildCaching, pagesBuildConfig.buildCaching) &&
        Objects.equals(this.buildCommand, pagesBuildConfig.buildCommand) &&
        Objects.equals(this.destinationDir, pagesBuildConfig.destinationDir) &&
        Objects.equals(this.rootDir, pagesBuildConfig.rootDir) &&
        Objects.equals(this.webAnalyticsTag, pagesBuildConfig.webAnalyticsTag) &&
        Objects.equals(this.webAnalyticsToken, pagesBuildConfig.webAnalyticsToken);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(buildCaching, buildCommand, destinationDir, rootDir, webAnalyticsTag, webAnalyticsToken);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PagesBuildConfig {\n");
    sb.append("    buildCaching: ").append(toIndentedString(buildCaching)).append("\n");
    sb.append("    buildCommand: ").append(toIndentedString(buildCommand)).append("\n");
    sb.append("    destinationDir: ").append(toIndentedString(destinationDir)).append("\n");
    sb.append("    rootDir: ").append(toIndentedString(rootDir)).append("\n");
    sb.append("    webAnalyticsTag: ").append(toIndentedString(webAnalyticsTag)).append("\n");
    sb.append("    webAnalyticsToken: ").append(toIndentedString(webAnalyticsToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("build_caching");
    openapiFields.add("build_command");
    openapiFields.add("destination_dir");
    openapiFields.add("root_dir");
    openapiFields.add("web_analytics_tag");
    openapiFields.add("web_analytics_token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PagesBuildConfig
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PagesBuildConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PagesBuildConfig is not found in the empty JSON string", PagesBuildConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PagesBuildConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PagesBuildConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("build_command") != null && !jsonObj.get("build_command").isJsonNull()) && !jsonObj.get("build_command").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `build_command` to be a primitive type in the JSON string but got `%s`", jsonObj.get("build_command").toString()));
      }
      if ((jsonObj.get("destination_dir") != null && !jsonObj.get("destination_dir").isJsonNull()) && !jsonObj.get("destination_dir").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination_dir` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destination_dir").toString()));
      }
      if ((jsonObj.get("root_dir") != null && !jsonObj.get("root_dir").isJsonNull()) && !jsonObj.get("root_dir").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `root_dir` to be a primitive type in the JSON string but got `%s`", jsonObj.get("root_dir").toString()));
      }
      if ((jsonObj.get("web_analytics_tag") != null && !jsonObj.get("web_analytics_tag").isJsonNull()) && !jsonObj.get("web_analytics_tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `web_analytics_tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("web_analytics_tag").toString()));
      }
      if ((jsonObj.get("web_analytics_token") != null && !jsonObj.get("web_analytics_token").isJsonNull()) && !jsonObj.get("web_analytics_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `web_analytics_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("web_analytics_token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PagesBuildConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PagesBuildConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PagesBuildConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PagesBuildConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<PagesBuildConfig>() {
           @Override
           public void write(JsonWriter out, PagesBuildConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PagesBuildConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PagesBuildConfig given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PagesBuildConfig
  * @throws IOException if the JSON string is invalid with respect to PagesBuildConfig
  */
  public static PagesBuildConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PagesBuildConfig.class);
  }

 /**
  * Convert an instance of PagesBuildConfig to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

