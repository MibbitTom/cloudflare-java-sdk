/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPullComponentsSchemasStatus;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TlsCertificatesAndHostnamesHostnameCertidObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class TlsCertificatesAndHostnamesHostnameCertidObject {
  public static final String SERIALIZED_NAME_CERT_ID = "cert_id";
  @SerializedName(SERIALIZED_NAME_CERT_ID)
  private String certId;

  public static final String SERIALIZED_NAME_CERT_STATUS = "cert_status";
  @SerializedName(SERIALIZED_NAME_CERT_STATUS)
  private TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPullComponentsSchemasStatus certStatus;

  public static final String SERIALIZED_NAME_CERT_UPDATED_AT = "cert_updated_at";
  @SerializedName(SERIALIZED_NAME_CERT_UPDATED_AT)
  private OffsetDateTime certUpdatedAt;

  public static final String SERIALIZED_NAME_CERT_UPLOADED_ON = "cert_uploaded_on";
  @SerializedName(SERIALIZED_NAME_CERT_UPLOADED_ON)
  private OffsetDateTime certUploadedOn;

  public static final String SERIALIZED_NAME_CERTIFICATE = "certificate";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE)
  private String certificate;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_EXPIRES_ON = "expires_on";
  @SerializedName(SERIALIZED_NAME_EXPIRES_ON)
  private OffsetDateTime expiresOn;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_ISSUER = "issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private String issuer;

  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "serial_number";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  private String serialNumber;

  public static final String SERIALIZED_NAME_SIGNATURE = "signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private String signature;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPullComponentsSchemasStatus status;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public TlsCertificatesAndHostnamesHostnameCertidObject() {
  }

  public TlsCertificatesAndHostnamesHostnameCertidObject(
     String certId, 
     OffsetDateTime certUpdatedAt, 
     OffsetDateTime createdAt, 
     OffsetDateTime expiresOn, 
     String issuer, 
     String signature, 
     OffsetDateTime updatedAt
  ) {
    this();
    this.certId = certId;
    this.certUpdatedAt = certUpdatedAt;
    this.createdAt = createdAt;
    this.expiresOn = expiresOn;
    this.issuer = issuer;
    this.signature = signature;
    this.updatedAt = updatedAt;
  }

   /**
   * Identifier
   * @return certId
  **/
  @javax.annotation.Nullable
  public String getCertId() {
    return certId;
  }



  public TlsCertificatesAndHostnamesHostnameCertidObject certStatus(TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPullComponentsSchemasStatus certStatus) {
    this.certStatus = certStatus;
    return this;
  }

   /**
   * Get certStatus
   * @return certStatus
  **/
  @javax.annotation.Nullable
  public TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPullComponentsSchemasStatus getCertStatus() {
    return certStatus;
  }

  public void setCertStatus(TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPullComponentsSchemasStatus certStatus) {
    this.certStatus = certStatus;
  }


   /**
   * The time when the certificate was updated.
   * @return certUpdatedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCertUpdatedAt() {
    return certUpdatedAt;
  }



  public TlsCertificatesAndHostnamesHostnameCertidObject certUploadedOn(OffsetDateTime certUploadedOn) {
    this.certUploadedOn = certUploadedOn;
    return this;
  }

   /**
   * The time when the certificate was uploaded.
   * @return certUploadedOn
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCertUploadedOn() {
    return certUploadedOn;
  }

  public void setCertUploadedOn(OffsetDateTime certUploadedOn) {
    this.certUploadedOn = certUploadedOn;
  }


  public TlsCertificatesAndHostnamesHostnameCertidObject certificate(String certificate) {
    this.certificate = certificate;
    return this;
  }

   /**
   * The hostname certificate.
   * @return certificate
  **/
  @javax.annotation.Nullable
  public String getCertificate() {
    return certificate;
  }

  public void setCertificate(String certificate) {
    this.certificate = certificate;
  }


   /**
   * The time when the certificate was created.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  public TlsCertificatesAndHostnamesHostnameCertidObject enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates whether hostname-level authenticated origin pulls is enabled. A null value voids the association.
   * @return enabled
  **/
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


   /**
   * The date when the certificate expires.
   * @return expiresOn
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getExpiresOn() {
    return expiresOn;
  }



  public TlsCertificatesAndHostnamesHostnameCertidObject hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

   /**
   * The hostname on the origin for which the client certificate uploaded will be used.
   * @return hostname
  **/
  @javax.annotation.Nullable
  public String getHostname() {
    return hostname;
  }

  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


   /**
   * The certificate authority that issued the certificate.
   * @return issuer
  **/
  @javax.annotation.Nullable
  public String getIssuer() {
    return issuer;
  }



  public TlsCertificatesAndHostnamesHostnameCertidObject serialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

   /**
   * The serial number on the uploaded certificate.
   * @return serialNumber
  **/
  @javax.annotation.Nullable
  public String getSerialNumber() {
    return serialNumber;
  }

  public void setSerialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
  }


   /**
   * The type of hash used for the certificate.
   * @return signature
  **/
  @javax.annotation.Nullable
  public String getSignature() {
    return signature;
  }



  public TlsCertificatesAndHostnamesHostnameCertidObject status(TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPullComponentsSchemasStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  public TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPullComponentsSchemasStatus getStatus() {
    return status;
  }

  public void setStatus(TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPullComponentsSchemasStatus status) {
    this.status = status;
  }


   /**
   * The time when the certificate was updated.
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TlsCertificatesAndHostnamesHostnameCertidObject tlsCertificatesAndHostnamesHostnameCertidObject = (TlsCertificatesAndHostnamesHostnameCertidObject) o;
    return Objects.equals(this.certId, tlsCertificatesAndHostnamesHostnameCertidObject.certId) &&
        Objects.equals(this.certStatus, tlsCertificatesAndHostnamesHostnameCertidObject.certStatus) &&
        Objects.equals(this.certUpdatedAt, tlsCertificatesAndHostnamesHostnameCertidObject.certUpdatedAt) &&
        Objects.equals(this.certUploadedOn, tlsCertificatesAndHostnamesHostnameCertidObject.certUploadedOn) &&
        Objects.equals(this.certificate, tlsCertificatesAndHostnamesHostnameCertidObject.certificate) &&
        Objects.equals(this.createdAt, tlsCertificatesAndHostnamesHostnameCertidObject.createdAt) &&
        Objects.equals(this.enabled, tlsCertificatesAndHostnamesHostnameCertidObject.enabled) &&
        Objects.equals(this.expiresOn, tlsCertificatesAndHostnamesHostnameCertidObject.expiresOn) &&
        Objects.equals(this.hostname, tlsCertificatesAndHostnamesHostnameCertidObject.hostname) &&
        Objects.equals(this.issuer, tlsCertificatesAndHostnamesHostnameCertidObject.issuer) &&
        Objects.equals(this.serialNumber, tlsCertificatesAndHostnamesHostnameCertidObject.serialNumber) &&
        Objects.equals(this.signature, tlsCertificatesAndHostnamesHostnameCertidObject.signature) &&
        Objects.equals(this.status, tlsCertificatesAndHostnamesHostnameCertidObject.status) &&
        Objects.equals(this.updatedAt, tlsCertificatesAndHostnamesHostnameCertidObject.updatedAt);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(certId, certStatus, certUpdatedAt, certUploadedOn, certificate, createdAt, enabled, expiresOn, hostname, issuer, serialNumber, signature, status, updatedAt);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TlsCertificatesAndHostnamesHostnameCertidObject {\n");
    sb.append("    certId: ").append(toIndentedString(certId)).append("\n");
    sb.append("    certStatus: ").append(toIndentedString(certStatus)).append("\n");
    sb.append("    certUpdatedAt: ").append(toIndentedString(certUpdatedAt)).append("\n");
    sb.append("    certUploadedOn: ").append(toIndentedString(certUploadedOn)).append("\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    expiresOn: ").append(toIndentedString(expiresOn)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cert_id");
    openapiFields.add("cert_status");
    openapiFields.add("cert_updated_at");
    openapiFields.add("cert_uploaded_on");
    openapiFields.add("certificate");
    openapiFields.add("created_at");
    openapiFields.add("enabled");
    openapiFields.add("expires_on");
    openapiFields.add("hostname");
    openapiFields.add("issuer");
    openapiFields.add("serial_number");
    openapiFields.add("signature");
    openapiFields.add("status");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TlsCertificatesAndHostnamesHostnameCertidObject
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TlsCertificatesAndHostnamesHostnameCertidObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TlsCertificatesAndHostnamesHostnameCertidObject is not found in the empty JSON string", TlsCertificatesAndHostnamesHostnameCertidObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TlsCertificatesAndHostnamesHostnameCertidObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TlsCertificatesAndHostnamesHostnameCertidObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cert_id") != null && !jsonObj.get("cert_id").isJsonNull()) && !jsonObj.get("cert_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cert_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cert_id").toString()));
      }
      // validate the optional field `cert_status`
      if (jsonObj.get("cert_status") != null && !jsonObj.get("cert_status").isJsonNull()) {
        TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPullComponentsSchemasStatus.validateJsonElement(jsonObj.get("cert_status"));
      }
      if ((jsonObj.get("certificate") != null && !jsonObj.get("certificate").isJsonNull()) && !jsonObj.get("certificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificate").toString()));
      }
      if ((jsonObj.get("hostname") != null && !jsonObj.get("hostname").isJsonNull()) && !jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
      if ((jsonObj.get("issuer") != null && !jsonObj.get("issuer").isJsonNull()) && !jsonObj.get("issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer").toString()));
      }
      if ((jsonObj.get("serial_number") != null && !jsonObj.get("serial_number").isJsonNull()) && !jsonObj.get("serial_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serial_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serial_number").toString()));
      }
      if ((jsonObj.get("signature") != null && !jsonObj.get("signature").isJsonNull()) && !jsonObj.get("signature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signature").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        TlsCertificatesAndHostnamesHostnameAuthenticatedOriginPullComponentsSchemasStatus.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TlsCertificatesAndHostnamesHostnameCertidObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TlsCertificatesAndHostnamesHostnameCertidObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TlsCertificatesAndHostnamesHostnameCertidObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TlsCertificatesAndHostnamesHostnameCertidObject.class));

       return (TypeAdapter<T>) new TypeAdapter<TlsCertificatesAndHostnamesHostnameCertidObject>() {
           @Override
           public void write(JsonWriter out, TlsCertificatesAndHostnamesHostnameCertidObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TlsCertificatesAndHostnamesHostnameCertidObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TlsCertificatesAndHostnamesHostnameCertidObject given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TlsCertificatesAndHostnamesHostnameCertidObject
  * @throws IOException if the JSON string is invalid with respect to TlsCertificatesAndHostnamesHostnameCertidObject
  */
  public static TlsCertificatesAndHostnamesHostnameCertidObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TlsCertificatesAndHostnamesHostnameCertidObject.class);
  }

 /**
  * Convert an instance of TlsCertificatesAndHostnamesHostnameCertidObject to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

