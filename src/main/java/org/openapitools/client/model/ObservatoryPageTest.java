/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ObservatoryLabeledRegion;
import org.openapitools.client.model.ObservatoryLighthouseReport;
import org.openapitools.client.model.ObservatoryScheduleFrequency;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ObservatoryPageTest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class ObservatoryPageTest {
  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_DESKTOP_REPORT = "desktopReport";
  @SerializedName(SERIALIZED_NAME_DESKTOP_REPORT)
  private ObservatoryLighthouseReport desktopReport;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MOBILE_REPORT = "mobileReport";
  @SerializedName(SERIALIZED_NAME_MOBILE_REPORT)
  private ObservatoryLighthouseReport mobileReport;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private ObservatoryLabeledRegion region;

  public static final String SERIALIZED_NAME_SCHEDULE_FREQUENCY = "scheduleFrequency";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_FREQUENCY)
  private ObservatoryScheduleFrequency scheduleFrequency;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public ObservatoryPageTest() {
  }

  public ObservatoryPageTest(
     OffsetDateTime date, 
     String id
  ) {
    this();
    this.date = date;
    this.id = id;
  }

   /**
   * Get date
   * @return date
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }



  public ObservatoryPageTest desktopReport(ObservatoryLighthouseReport desktopReport) {
    this.desktopReport = desktopReport;
    return this;
  }

   /**
   * Get desktopReport
   * @return desktopReport
  **/
  @javax.annotation.Nullable
  public ObservatoryLighthouseReport getDesktopReport() {
    return desktopReport;
  }

  public void setDesktopReport(ObservatoryLighthouseReport desktopReport) {
    this.desktopReport = desktopReport;
  }


   /**
   * UUID
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public ObservatoryPageTest mobileReport(ObservatoryLighthouseReport mobileReport) {
    this.mobileReport = mobileReport;
    return this;
  }

   /**
   * Get mobileReport
   * @return mobileReport
  **/
  @javax.annotation.Nullable
  public ObservatoryLighthouseReport getMobileReport() {
    return mobileReport;
  }

  public void setMobileReport(ObservatoryLighthouseReport mobileReport) {
    this.mobileReport = mobileReport;
  }


  public ObservatoryPageTest region(ObservatoryLabeledRegion region) {
    this.region = region;
    return this;
  }

   /**
   * Get region
   * @return region
  **/
  @javax.annotation.Nullable
  public ObservatoryLabeledRegion getRegion() {
    return region;
  }

  public void setRegion(ObservatoryLabeledRegion region) {
    this.region = region;
  }


  public ObservatoryPageTest scheduleFrequency(ObservatoryScheduleFrequency scheduleFrequency) {
    this.scheduleFrequency = scheduleFrequency;
    return this;
  }

   /**
   * Get scheduleFrequency
   * @return scheduleFrequency
  **/
  @javax.annotation.Nullable
  public ObservatoryScheduleFrequency getScheduleFrequency() {
    return scheduleFrequency;
  }

  public void setScheduleFrequency(ObservatoryScheduleFrequency scheduleFrequency) {
    this.scheduleFrequency = scheduleFrequency;
  }


  public ObservatoryPageTest url(String url) {
    this.url = url;
    return this;
  }

   /**
   * A URL.
   * @return url
  **/
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObservatoryPageTest observatoryPageTest = (ObservatoryPageTest) o;
    return Objects.equals(this.date, observatoryPageTest.date) &&
        Objects.equals(this.desktopReport, observatoryPageTest.desktopReport) &&
        Objects.equals(this.id, observatoryPageTest.id) &&
        Objects.equals(this.mobileReport, observatoryPageTest.mobileReport) &&
        Objects.equals(this.region, observatoryPageTest.region) &&
        Objects.equals(this.scheduleFrequency, observatoryPageTest.scheduleFrequency) &&
        Objects.equals(this.url, observatoryPageTest.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, desktopReport, id, mobileReport, region, scheduleFrequency, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObservatoryPageTest {\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    desktopReport: ").append(toIndentedString(desktopReport)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    mobileReport: ").append(toIndentedString(mobileReport)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    scheduleFrequency: ").append(toIndentedString(scheduleFrequency)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("date");
    openapiFields.add("desktopReport");
    openapiFields.add("id");
    openapiFields.add("mobileReport");
    openapiFields.add("region");
    openapiFields.add("scheduleFrequency");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ObservatoryPageTest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ObservatoryPageTest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ObservatoryPageTest is not found in the empty JSON string", ObservatoryPageTest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ObservatoryPageTest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ObservatoryPageTest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `desktopReport`
      if (jsonObj.get("desktopReport") != null && !jsonObj.get("desktopReport").isJsonNull()) {
        ObservatoryLighthouseReport.validateJsonElement(jsonObj.get("desktopReport"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `mobileReport`
      if (jsonObj.get("mobileReport") != null && !jsonObj.get("mobileReport").isJsonNull()) {
        ObservatoryLighthouseReport.validateJsonElement(jsonObj.get("mobileReport"));
      }
      // validate the optional field `region`
      if (jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) {
        ObservatoryLabeledRegion.validateJsonElement(jsonObj.get("region"));
      }
      // validate the optional field `scheduleFrequency`
      if (jsonObj.get("scheduleFrequency") != null && !jsonObj.get("scheduleFrequency").isJsonNull()) {
        ObservatoryScheduleFrequency.validateJsonElement(jsonObj.get("scheduleFrequency"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ObservatoryPageTest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ObservatoryPageTest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ObservatoryPageTest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ObservatoryPageTest.class));

       return (TypeAdapter<T>) new TypeAdapter<ObservatoryPageTest>() {
           @Override
           public void write(JsonWriter out, ObservatoryPageTest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ObservatoryPageTest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ObservatoryPageTest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ObservatoryPageTest
  * @throws IOException if the JSON string is invalid with respect to ObservatoryPageTest
  */
  public static ObservatoryPageTest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ObservatoryPageTest.class);
  }

 /**
  * Convert an instance of ObservatoryPageTest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

