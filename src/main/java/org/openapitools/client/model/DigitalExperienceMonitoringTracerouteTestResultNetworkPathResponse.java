/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponse {
  public static final String SERIALIZED_NAME_DEVICE_NAME = "deviceName";
  @SerializedName(SERIALIZED_NAME_DEVICE_NAME)
  private String deviceName;

  public static final String SERIALIZED_NAME_HOPS = "hops";
  @SerializedName(SERIALIZED_NAME_HOPS)
  private List<DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner> hops = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESULT_ID = "resultId";
  @SerializedName(SERIALIZED_NAME_RESULT_ID)
  private String resultId;

  public static final String SERIALIZED_NAME_TEST_ID = "testId";
  @SerializedName(SERIALIZED_NAME_TEST_ID)
  private String testId;

  public static final String SERIALIZED_NAME_TEST_NAME = "testName";
  @SerializedName(SERIALIZED_NAME_TEST_NAME)
  private String testName;

  public static final String SERIALIZED_NAME_TIME_START = "time_start";
  @SerializedName(SERIALIZED_NAME_TIME_START)
  private String timeStart;

  public DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponse() {
  }

  public DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponse deviceName(String deviceName) {
    this.deviceName = deviceName;
    return this;
  }

   /**
   * name of the device associated with this network path response
   * @return deviceName
  **/
  @javax.annotation.Nullable
  public String getDeviceName() {
    return deviceName;
  }

  public void setDeviceName(String deviceName) {
    this.deviceName = deviceName;
  }


  public DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponse hops(List<DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner> hops) {
    this.hops = hops;
    return this;
  }

  public DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponse addHopsItem(DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner hopsItem) {
    if (this.hops == null) {
      this.hops = new ArrayList<>();
    }
    this.hops.add(hopsItem);
    return this;
  }

   /**
   * an array of the hops taken by the device to reach the end destination
   * @return hops
  **/
  @javax.annotation.Nonnull
  public List<DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner> getHops() {
    return hops;
  }

  public void setHops(List<DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner> hops) {
    this.hops = hops;
  }


  public DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponse resultId(String resultId) {
    this.resultId = resultId;
    return this;
  }

   /**
   * API Resource UUID tag.
   * @return resultId
  **/
  @javax.annotation.Nonnull
  public String getResultId() {
    return resultId;
  }

  public void setResultId(String resultId) {
    this.resultId = resultId;
  }


  public DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponse testId(String testId) {
    this.testId = testId;
    return this;
  }

   /**
   * API Resource UUID tag.
   * @return testId
  **/
  @javax.annotation.Nullable
  public String getTestId() {
    return testId;
  }

  public void setTestId(String testId) {
    this.testId = testId;
  }


  public DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponse testName(String testName) {
    this.testName = testName;
    return this;
  }

   /**
   * name of the tracroute test
   * @return testName
  **/
  @javax.annotation.Nullable
  public String getTestName() {
    return testName;
  }

  public void setTestName(String testName) {
    this.testName = testName;
  }


  public DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponse timeStart(String timeStart) {
    this.timeStart = timeStart;
    return this;
  }

   /**
   * date time of this traceroute test
   * @return timeStart
  **/
  @javax.annotation.Nonnull
  public String getTimeStart() {
    return timeStart;
  }

  public void setTimeStart(String timeStart) {
    this.timeStart = timeStart;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponse digitalExperienceMonitoringTracerouteTestResultNetworkPathResponse = (DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponse) o;
    return Objects.equals(this.deviceName, digitalExperienceMonitoringTracerouteTestResultNetworkPathResponse.deviceName) &&
        Objects.equals(this.hops, digitalExperienceMonitoringTracerouteTestResultNetworkPathResponse.hops) &&
        Objects.equals(this.resultId, digitalExperienceMonitoringTracerouteTestResultNetworkPathResponse.resultId) &&
        Objects.equals(this.testId, digitalExperienceMonitoringTracerouteTestResultNetworkPathResponse.testId) &&
        Objects.equals(this.testName, digitalExperienceMonitoringTracerouteTestResultNetworkPathResponse.testName) &&
        Objects.equals(this.timeStart, digitalExperienceMonitoringTracerouteTestResultNetworkPathResponse.timeStart);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceName, hops, resultId, testId, testName, timeStart);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponse {\n");
    sb.append("    deviceName: ").append(toIndentedString(deviceName)).append("\n");
    sb.append("    hops: ").append(toIndentedString(hops)).append("\n");
    sb.append("    resultId: ").append(toIndentedString(resultId)).append("\n");
    sb.append("    testId: ").append(toIndentedString(testId)).append("\n");
    sb.append("    testName: ").append(toIndentedString(testName)).append("\n");
    sb.append("    timeStart: ").append(toIndentedString(timeStart)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deviceName");
    openapiFields.add("hops");
    openapiFields.add("resultId");
    openapiFields.add("testId");
    openapiFields.add("testName");
    openapiFields.add("time_start");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("hops");
    openapiRequiredFields.add("resultId");
    openapiRequiredFields.add("time_start");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponse is not found in the empty JSON string", DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("deviceName") != null && !jsonObj.get("deviceName").isJsonNull()) && !jsonObj.get("deviceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceName").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("hops").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hops` to be an array in the JSON string but got `%s`", jsonObj.get("hops").toString()));
      }

      JsonArray jsonArrayhops = jsonObj.getAsJsonArray("hops");
      // validate the required field `hops` (array)
      for (int i = 0; i < jsonArrayhops.size(); i++) {
        DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponseHopsInner.validateJsonElement(jsonArrayhops.get(i));
      };
      if (!jsonObj.get("resultId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resultId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resultId").toString()));
      }
      if ((jsonObj.get("testId") != null && !jsonObj.get("testId").isJsonNull()) && !jsonObj.get("testId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testId").toString()));
      }
      if ((jsonObj.get("testName") != null && !jsonObj.get("testName").isJsonNull()) && !jsonObj.get("testName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testName").toString()));
      }
      if (!jsonObj.get("time_start").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_start` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_start").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponse>() {
           @Override
           public void write(JsonWriter out, DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponse
  * @throws IOException if the JSON string is invalid with respect to DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponse
  */
  public static DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponse.class);
  }

 /**
  * Convert an instance of DigitalExperienceMonitoringTracerouteTestResultNetworkPathResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

