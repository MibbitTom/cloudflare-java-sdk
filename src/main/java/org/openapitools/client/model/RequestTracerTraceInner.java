/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * List of steps acting on request/response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class RequestTracerTraceInner {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private String action;

  public static final String SERIALIZED_NAME_ACTION_PARAMETERS = "action_parameters";
  @SerializedName(SERIALIZED_NAME_ACTION_PARAMETERS)
  private Object actionParameters;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXPRESSION = "expression";
  @SerializedName(SERIALIZED_NAME_EXPRESSION)
  private String expression;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_MATCHED = "matched";
  @SerializedName(SERIALIZED_NAME_MATCHED)
  private Boolean matched;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STEP_NAME = "step_name";
  @SerializedName(SERIALIZED_NAME_STEP_NAME)
  private String stepName;

  public static final String SERIALIZED_NAME_TRACE = "trace";
  @SerializedName(SERIALIZED_NAME_TRACE)
  private List<RequestTracerTraceInner> trace = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public RequestTracerTraceInner() {
  }

  public RequestTracerTraceInner action(String action) {
    this.action = action;
    return this;
  }

   /**
   * If step type is rule, then action performed by this rule
   * @return action
  **/
  @javax.annotation.Nullable
  public String getAction() {
    return action;
  }

  public void setAction(String action) {
    this.action = action;
  }


  public RequestTracerTraceInner actionParameters(Object actionParameters) {
    this.actionParameters = actionParameters;
    return this;
  }

   /**
   * If step type is rule, then action parameters of this rule as JSON
   * @return actionParameters
  **/
  @javax.annotation.Nullable
  public Object getActionParameters() {
    return actionParameters;
  }

  public void setActionParameters(Object actionParameters) {
    this.actionParameters = actionParameters;
  }


  public RequestTracerTraceInner description(String description) {
    this.description = description;
    return this;
  }

   /**
   * If step type is rule or ruleset, the description of this entity
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public RequestTracerTraceInner expression(String expression) {
    this.expression = expression;
    return this;
  }

   /**
   * If step type is rule, then expression used to match for this rule
   * @return expression
  **/
  @javax.annotation.Nullable
  public String getExpression() {
    return expression;
  }

  public void setExpression(String expression) {
    this.expression = expression;
  }


  public RequestTracerTraceInner kind(String kind) {
    this.kind = kind;
    return this;
  }

   /**
   * If step type is ruleset, then kind of this ruleset
   * @return kind
  **/
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public RequestTracerTraceInner matched(Boolean matched) {
    this.matched = matched;
    return this;
  }

   /**
   * Whether tracing step affected tracing request/response
   * @return matched
  **/
  @javax.annotation.Nullable
  public Boolean getMatched() {
    return matched;
  }

  public void setMatched(Boolean matched) {
    this.matched = matched;
  }


  public RequestTracerTraceInner name(String name) {
    this.name = name;
    return this;
  }

   /**
   * If step type is ruleset, then name of this ruleset
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public RequestTracerTraceInner stepName(String stepName) {
    this.stepName = stepName;
    return this;
  }

   /**
   * Tracing step identifying name
   * @return stepName
  **/
  @javax.annotation.Nullable
  public String getStepName() {
    return stepName;
  }

  public void setStepName(String stepName) {
    this.stepName = stepName;
  }


  public RequestTracerTraceInner trace(List<RequestTracerTraceInner> trace) {
    this.trace = trace;
    return this;
  }

  public RequestTracerTraceInner addTraceItem(RequestTracerTraceInner traceItem) {
    if (this.trace == null) {
      this.trace = new ArrayList<>();
    }
    this.trace.add(traceItem);
    return this;
  }

   /**
   * Get trace
   * @return trace
  **/
  @javax.annotation.Nullable
  public List<RequestTracerTraceInner> getTrace() {
    return trace;
  }

  public void setTrace(List<RequestTracerTraceInner> trace) {
    this.trace = trace;
  }


  public RequestTracerTraceInner type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Tracing step type
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestTracerTraceInner requestTracerTraceInner = (RequestTracerTraceInner) o;
    return Objects.equals(this.action, requestTracerTraceInner.action) &&
        Objects.equals(this.actionParameters, requestTracerTraceInner.actionParameters) &&
        Objects.equals(this.description, requestTracerTraceInner.description) &&
        Objects.equals(this.expression, requestTracerTraceInner.expression) &&
        Objects.equals(this.kind, requestTracerTraceInner.kind) &&
        Objects.equals(this.matched, requestTracerTraceInner.matched) &&
        Objects.equals(this.name, requestTracerTraceInner.name) &&
        Objects.equals(this.stepName, requestTracerTraceInner.stepName) &&
        Objects.equals(this.trace, requestTracerTraceInner.trace) &&
        Objects.equals(this.type, requestTracerTraceInner.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, actionParameters, description, expression, kind, matched, name, stepName, trace, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestTracerTraceInner {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    actionParameters: ").append(toIndentedString(actionParameters)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    expression: ").append(toIndentedString(expression)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    matched: ").append(toIndentedString(matched)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    stepName: ").append(toIndentedString(stepName)).append("\n");
    sb.append("    trace: ").append(toIndentedString(trace)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("action_parameters");
    openapiFields.add("description");
    openapiFields.add("expression");
    openapiFields.add("kind");
    openapiFields.add("matched");
    openapiFields.add("name");
    openapiFields.add("step_name");
    openapiFields.add("trace");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RequestTracerTraceInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RequestTracerTraceInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RequestTracerTraceInner is not found in the empty JSON string", RequestTracerTraceInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RequestTracerTraceInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RequestTracerTraceInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("expression") != null && !jsonObj.get("expression").isJsonNull()) && !jsonObj.get("expression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expression").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("step_name") != null && !jsonObj.get("step_name").isJsonNull()) && !jsonObj.get("step_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `step_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("step_name").toString()));
      }
      if (jsonObj.get("trace") != null && !jsonObj.get("trace").isJsonNull()) {
        JsonArray jsonArraytrace = jsonObj.getAsJsonArray("trace");
        if (jsonArraytrace != null) {
          // ensure the json data is an array
          if (!jsonObj.get("trace").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `trace` to be an array in the JSON string but got `%s`", jsonObj.get("trace").toString()));
          }

          // validate the optional field `trace` (array)
          for (int i = 0; i < jsonArraytrace.size(); i++) {
            RequestTracerTraceInner.validateJsonElement(jsonArraytrace.get(i));
          };
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RequestTracerTraceInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RequestTracerTraceInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RequestTracerTraceInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RequestTracerTraceInner.class));

       return (TypeAdapter<T>) new TypeAdapter<RequestTracerTraceInner>() {
           @Override
           public void write(JsonWriter out, RequestTracerTraceInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RequestTracerTraceInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RequestTracerTraceInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RequestTracerTraceInner
  * @throws IOException if the JSON string is invalid with respect to RequestTracerTraceInner
  */
  public static RequestTracerTraceInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RequestTracerTraceInner.class);
  }

 /**
  * Convert an instance of RequestTracerTraceInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

