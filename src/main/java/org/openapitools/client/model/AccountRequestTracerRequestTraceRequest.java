/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.AccountRequestTracerRequestTraceRequestBody;
import org.openapitools.client.model.AccountRequestTracerRequestTraceRequestContext;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * AccountRequestTracerRequestTraceRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class AccountRequestTracerRequestTraceRequest {
  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private AccountRequestTracerRequestTraceRequestBody body;

  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private AccountRequestTracerRequestTraceRequestContext context;

  public static final String SERIALIZED_NAME_COOKIES = "cookies";
  @SerializedName(SERIALIZED_NAME_COOKIES)
  private Map<String, String> cookies = new HashMap<>();

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private Map<String, String> headers = new HashMap<>();

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private String method;

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private String protocol;

  public static final String SERIALIZED_NAME_SKIP_RESPONSE = "skip_response";
  @SerializedName(SERIALIZED_NAME_SKIP_RESPONSE)
  private Boolean skipResponse;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public AccountRequestTracerRequestTraceRequest() {
  }

  public AccountRequestTracerRequestTraceRequest body(AccountRequestTracerRequestTraceRequestBody body) {
    this.body = body;
    return this;
  }

   /**
   * Get body
   * @return body
  **/
  @javax.annotation.Nullable
  public AccountRequestTracerRequestTraceRequestBody getBody() {
    return body;
  }

  public void setBody(AccountRequestTracerRequestTraceRequestBody body) {
    this.body = body;
  }


  public AccountRequestTracerRequestTraceRequest context(AccountRequestTracerRequestTraceRequestContext context) {
    this.context = context;
    return this;
  }

   /**
   * Get context
   * @return context
  **/
  @javax.annotation.Nullable
  public AccountRequestTracerRequestTraceRequestContext getContext() {
    return context;
  }

  public void setContext(AccountRequestTracerRequestTraceRequestContext context) {
    this.context = context;
  }


  public AccountRequestTracerRequestTraceRequest cookies(Map<String, String> cookies) {
    this.cookies = cookies;
    return this;
  }

  public AccountRequestTracerRequestTraceRequest putCookiesItem(String key, String cookiesItem) {
    if (this.cookies == null) {
      this.cookies = new HashMap<>();
    }
    this.cookies.put(key, cookiesItem);
    return this;
  }

   /**
   * Cookies added to tracing request
   * @return cookies
  **/
  @javax.annotation.Nullable
  public Map<String, String> getCookies() {
    return cookies;
  }

  public void setCookies(Map<String, String> cookies) {
    this.cookies = cookies;
  }


  public AccountRequestTracerRequestTraceRequest headers(Map<String, String> headers) {
    this.headers = headers;
    return this;
  }

  public AccountRequestTracerRequestTraceRequest putHeadersItem(String key, String headersItem) {
    if (this.headers == null) {
      this.headers = new HashMap<>();
    }
    this.headers.put(key, headersItem);
    return this;
  }

   /**
   * Headers added to tracing request
   * @return headers
  **/
  @javax.annotation.Nullable
  public Map<String, String> getHeaders() {
    return headers;
  }

  public void setHeaders(Map<String, String> headers) {
    this.headers = headers;
  }


  public AccountRequestTracerRequestTraceRequest method(String method) {
    this.method = method;
    return this;
  }

   /**
   * HTTP Method of tracing request
   * @return method
  **/
  @javax.annotation.Nonnull
  public String getMethod() {
    return method;
  }

  public void setMethod(String method) {
    this.method = method;
  }


  public AccountRequestTracerRequestTraceRequest protocol(String protocol) {
    this.protocol = protocol;
    return this;
  }

   /**
   * HTTP Protocol of tracing request
   * @return protocol
  **/
  @javax.annotation.Nullable
  public String getProtocol() {
    return protocol;
  }

  public void setProtocol(String protocol) {
    this.protocol = protocol;
  }


  public AccountRequestTracerRequestTraceRequest skipResponse(Boolean skipResponse) {
    this.skipResponse = skipResponse;
    return this;
  }

   /**
   * Skip sending the request to the Origin server after all rules evaluation
   * @return skipResponse
  **/
  @javax.annotation.Nullable
  public Boolean getSkipResponse() {
    return skipResponse;
  }

  public void setSkipResponse(Boolean skipResponse) {
    this.skipResponse = skipResponse;
  }


  public AccountRequestTracerRequestTraceRequest url(String url) {
    this.url = url;
    return this;
  }

   /**
   * URL to which perform tracing request
   * @return url
  **/
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountRequestTracerRequestTraceRequest accountRequestTracerRequestTraceRequest = (AccountRequestTracerRequestTraceRequest) o;
    return Objects.equals(this.body, accountRequestTracerRequestTraceRequest.body) &&
        Objects.equals(this.context, accountRequestTracerRequestTraceRequest.context) &&
        Objects.equals(this.cookies, accountRequestTracerRequestTraceRequest.cookies) &&
        Objects.equals(this.headers, accountRequestTracerRequestTraceRequest.headers) &&
        Objects.equals(this.method, accountRequestTracerRequestTraceRequest.method) &&
        Objects.equals(this.protocol, accountRequestTracerRequestTraceRequest.protocol) &&
        Objects.equals(this.skipResponse, accountRequestTracerRequestTraceRequest.skipResponse) &&
        Objects.equals(this.url, accountRequestTracerRequestTraceRequest.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(body, context, cookies, headers, method, protocol, skipResponse, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountRequestTracerRequestTraceRequest {\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    cookies: ").append(toIndentedString(cookies)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    skipResponse: ").append(toIndentedString(skipResponse)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("body");
    openapiFields.add("context");
    openapiFields.add("cookies");
    openapiFields.add("headers");
    openapiFields.add("method");
    openapiFields.add("protocol");
    openapiFields.add("skip_response");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("method");
    openapiRequiredFields.add("url");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AccountRequestTracerRequestTraceRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountRequestTracerRequestTraceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountRequestTracerRequestTraceRequest is not found in the empty JSON string", AccountRequestTracerRequestTraceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountRequestTracerRequestTraceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountRequestTracerRequestTraceRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AccountRequestTracerRequestTraceRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `body`
      if (jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) {
        AccountRequestTracerRequestTraceRequestBody.validateJsonElement(jsonObj.get("body"));
      }
      // validate the optional field `context`
      if (jsonObj.get("context") != null && !jsonObj.get("context").isJsonNull()) {
        AccountRequestTracerRequestTraceRequestContext.validateJsonElement(jsonObj.get("context"));
      }
      if (!jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountRequestTracerRequestTraceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountRequestTracerRequestTraceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountRequestTracerRequestTraceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountRequestTracerRequestTraceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountRequestTracerRequestTraceRequest>() {
           @Override
           public void write(JsonWriter out, AccountRequestTracerRequestTraceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountRequestTracerRequestTraceRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AccountRequestTracerRequestTraceRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AccountRequestTracerRequestTraceRequest
  * @throws IOException if the JSON string is invalid with respect to AccountRequestTracerRequestTraceRequest
  */
  public static AccountRequestTracerRequestTraceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountRequestTracerRequestTraceRequest.class);
  }

 /**
  * Convert an instance of AccountRequestTracerRequestTraceRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

