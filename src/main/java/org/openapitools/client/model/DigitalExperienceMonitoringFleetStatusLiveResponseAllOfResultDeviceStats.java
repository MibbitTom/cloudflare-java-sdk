/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DigitalExperienceMonitoringLiveStat;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * DigitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class DigitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats {
  public static final String SERIALIZED_NAME_BY_COLO = "byColo";
  @SerializedName(SERIALIZED_NAME_BY_COLO)
  private List<DigitalExperienceMonitoringLiveStat> byColo;

  public static final String SERIALIZED_NAME_BY_MODE = "byMode";
  @SerializedName(SERIALIZED_NAME_BY_MODE)
  private List<DigitalExperienceMonitoringLiveStat> byMode;

  public static final String SERIALIZED_NAME_BY_PLATFORM = "byPlatform";
  @SerializedName(SERIALIZED_NAME_BY_PLATFORM)
  private List<DigitalExperienceMonitoringLiveStat> byPlatform;

  public static final String SERIALIZED_NAME_BY_STATUS = "byStatus";
  @SerializedName(SERIALIZED_NAME_BY_STATUS)
  private List<DigitalExperienceMonitoringLiveStat> byStatus;

  public static final String SERIALIZED_NAME_BY_VERSION = "byVersion";
  @SerializedName(SERIALIZED_NAME_BY_VERSION)
  private List<DigitalExperienceMonitoringLiveStat> byVersion;

  public static final String SERIALIZED_NAME_UNIQUE_DEVICES_TOTAL = "uniqueDevicesTotal";
  @SerializedName(SERIALIZED_NAME_UNIQUE_DEVICES_TOTAL)
  private BigDecimal uniqueDevicesTotal;

  public DigitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats() {
  }

  public DigitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats byColo(List<DigitalExperienceMonitoringLiveStat> byColo) {
    this.byColo = byColo;
    return this;
  }

  public DigitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats addByColoItem(DigitalExperienceMonitoringLiveStat byColoItem) {
    if (this.byColo == null) {
      this.byColo = new ArrayList<>();
    }
    this.byColo.add(byColoItem);
    return this;
  }

   /**
   * Get byColo
   * @return byColo
  **/
  @javax.annotation.Nullable
  public List<DigitalExperienceMonitoringLiveStat> getByColo() {
    return byColo;
  }

  public void setByColo(List<DigitalExperienceMonitoringLiveStat> byColo) {
    this.byColo = byColo;
  }


  public DigitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats byMode(List<DigitalExperienceMonitoringLiveStat> byMode) {
    this.byMode = byMode;
    return this;
  }

  public DigitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats addByModeItem(DigitalExperienceMonitoringLiveStat byModeItem) {
    if (this.byMode == null) {
      this.byMode = new ArrayList<>();
    }
    this.byMode.add(byModeItem);
    return this;
  }

   /**
   * Get byMode
   * @return byMode
  **/
  @javax.annotation.Nullable
  public List<DigitalExperienceMonitoringLiveStat> getByMode() {
    return byMode;
  }

  public void setByMode(List<DigitalExperienceMonitoringLiveStat> byMode) {
    this.byMode = byMode;
  }


  public DigitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats byPlatform(List<DigitalExperienceMonitoringLiveStat> byPlatform) {
    this.byPlatform = byPlatform;
    return this;
  }

  public DigitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats addByPlatformItem(DigitalExperienceMonitoringLiveStat byPlatformItem) {
    if (this.byPlatform == null) {
      this.byPlatform = new ArrayList<>();
    }
    this.byPlatform.add(byPlatformItem);
    return this;
  }

   /**
   * Get byPlatform
   * @return byPlatform
  **/
  @javax.annotation.Nullable
  public List<DigitalExperienceMonitoringLiveStat> getByPlatform() {
    return byPlatform;
  }

  public void setByPlatform(List<DigitalExperienceMonitoringLiveStat> byPlatform) {
    this.byPlatform = byPlatform;
  }


  public DigitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats byStatus(List<DigitalExperienceMonitoringLiveStat> byStatus) {
    this.byStatus = byStatus;
    return this;
  }

  public DigitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats addByStatusItem(DigitalExperienceMonitoringLiveStat byStatusItem) {
    if (this.byStatus == null) {
      this.byStatus = new ArrayList<>();
    }
    this.byStatus.add(byStatusItem);
    return this;
  }

   /**
   * Get byStatus
   * @return byStatus
  **/
  @javax.annotation.Nullable
  public List<DigitalExperienceMonitoringLiveStat> getByStatus() {
    return byStatus;
  }

  public void setByStatus(List<DigitalExperienceMonitoringLiveStat> byStatus) {
    this.byStatus = byStatus;
  }


  public DigitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats byVersion(List<DigitalExperienceMonitoringLiveStat> byVersion) {
    this.byVersion = byVersion;
    return this;
  }

  public DigitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats addByVersionItem(DigitalExperienceMonitoringLiveStat byVersionItem) {
    if (this.byVersion == null) {
      this.byVersion = new ArrayList<>();
    }
    this.byVersion.add(byVersionItem);
    return this;
  }

   /**
   * Get byVersion
   * @return byVersion
  **/
  @javax.annotation.Nullable
  public List<DigitalExperienceMonitoringLiveStat> getByVersion() {
    return byVersion;
  }

  public void setByVersion(List<DigitalExperienceMonitoringLiveStat> byVersion) {
    this.byVersion = byVersion;
  }


  public DigitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats uniqueDevicesTotal(BigDecimal uniqueDevicesTotal) {
    this.uniqueDevicesTotal = uniqueDevicesTotal;
    return this;
  }

   /**
   * Number of unique devices
   * @return uniqueDevicesTotal
  **/
  @javax.annotation.Nullable
  public BigDecimal getUniqueDevicesTotal() {
    return uniqueDevicesTotal;
  }

  public void setUniqueDevicesTotal(BigDecimal uniqueDevicesTotal) {
    this.uniqueDevicesTotal = uniqueDevicesTotal;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DigitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats digitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats = (DigitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats) o;
    return Objects.equals(this.byColo, digitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats.byColo) &&
        Objects.equals(this.byMode, digitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats.byMode) &&
        Objects.equals(this.byPlatform, digitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats.byPlatform) &&
        Objects.equals(this.byStatus, digitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats.byStatus) &&
        Objects.equals(this.byVersion, digitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats.byVersion) &&
        Objects.equals(this.uniqueDevicesTotal, digitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats.uniqueDevicesTotal);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(byColo, byMode, byPlatform, byStatus, byVersion, uniqueDevicesTotal);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DigitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats {\n");
    sb.append("    byColo: ").append(toIndentedString(byColo)).append("\n");
    sb.append("    byMode: ").append(toIndentedString(byMode)).append("\n");
    sb.append("    byPlatform: ").append(toIndentedString(byPlatform)).append("\n");
    sb.append("    byStatus: ").append(toIndentedString(byStatus)).append("\n");
    sb.append("    byVersion: ").append(toIndentedString(byVersion)).append("\n");
    sb.append("    uniqueDevicesTotal: ").append(toIndentedString(uniqueDevicesTotal)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("byColo");
    openapiFields.add("byMode");
    openapiFields.add("byPlatform");
    openapiFields.add("byStatus");
    openapiFields.add("byVersion");
    openapiFields.add("uniqueDevicesTotal");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DigitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DigitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DigitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats is not found in the empty JSON string", DigitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DigitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DigitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("byColo") != null && !jsonObj.get("byColo").isJsonNull()) {
        JsonArray jsonArraybyColo = jsonObj.getAsJsonArray("byColo");
        if (jsonArraybyColo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("byColo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `byColo` to be an array in the JSON string but got `%s`", jsonObj.get("byColo").toString()));
          }

          // validate the optional field `byColo` (array)
          for (int i = 0; i < jsonArraybyColo.size(); i++) {
            DigitalExperienceMonitoringLiveStat.validateJsonElement(jsonArraybyColo.get(i));
          };
        }
      }
      if (jsonObj.get("byMode") != null && !jsonObj.get("byMode").isJsonNull()) {
        JsonArray jsonArraybyMode = jsonObj.getAsJsonArray("byMode");
        if (jsonArraybyMode != null) {
          // ensure the json data is an array
          if (!jsonObj.get("byMode").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `byMode` to be an array in the JSON string but got `%s`", jsonObj.get("byMode").toString()));
          }

          // validate the optional field `byMode` (array)
          for (int i = 0; i < jsonArraybyMode.size(); i++) {
            DigitalExperienceMonitoringLiveStat.validateJsonElement(jsonArraybyMode.get(i));
          };
        }
      }
      if (jsonObj.get("byPlatform") != null && !jsonObj.get("byPlatform").isJsonNull()) {
        JsonArray jsonArraybyPlatform = jsonObj.getAsJsonArray("byPlatform");
        if (jsonArraybyPlatform != null) {
          // ensure the json data is an array
          if (!jsonObj.get("byPlatform").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `byPlatform` to be an array in the JSON string but got `%s`", jsonObj.get("byPlatform").toString()));
          }

          // validate the optional field `byPlatform` (array)
          for (int i = 0; i < jsonArraybyPlatform.size(); i++) {
            DigitalExperienceMonitoringLiveStat.validateJsonElement(jsonArraybyPlatform.get(i));
          };
        }
      }
      if (jsonObj.get("byStatus") != null && !jsonObj.get("byStatus").isJsonNull()) {
        JsonArray jsonArraybyStatus = jsonObj.getAsJsonArray("byStatus");
        if (jsonArraybyStatus != null) {
          // ensure the json data is an array
          if (!jsonObj.get("byStatus").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `byStatus` to be an array in the JSON string but got `%s`", jsonObj.get("byStatus").toString()));
          }

          // validate the optional field `byStatus` (array)
          for (int i = 0; i < jsonArraybyStatus.size(); i++) {
            DigitalExperienceMonitoringLiveStat.validateJsonElement(jsonArraybyStatus.get(i));
          };
        }
      }
      if (jsonObj.get("byVersion") != null && !jsonObj.get("byVersion").isJsonNull()) {
        JsonArray jsonArraybyVersion = jsonObj.getAsJsonArray("byVersion");
        if (jsonArraybyVersion != null) {
          // ensure the json data is an array
          if (!jsonObj.get("byVersion").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `byVersion` to be an array in the JSON string but got `%s`", jsonObj.get("byVersion").toString()));
          }

          // validate the optional field `byVersion` (array)
          for (int i = 0; i < jsonArraybyVersion.size(); i++) {
            DigitalExperienceMonitoringLiveStat.validateJsonElement(jsonArraybyVersion.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DigitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DigitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DigitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DigitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats.class));

       return (TypeAdapter<T>) new TypeAdapter<DigitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats>() {
           @Override
           public void write(JsonWriter out, DigitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DigitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DigitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DigitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats
  * @throws IOException if the JSON string is invalid with respect to DigitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats
  */
  public static DigitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DigitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats.class);
  }

 /**
  * Convert an instance of DigitalExperienceMonitoringFleetStatusLiveResponseAllOfResultDeviceStats to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

