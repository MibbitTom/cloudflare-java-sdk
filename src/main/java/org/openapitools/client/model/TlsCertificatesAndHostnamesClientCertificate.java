/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TlsCertificatesAndHostnamesClientCertificatesComponentsSchemasCertificateAuthority;
import org.openapitools.client.model.TlsCertificatesAndHostnamesClientCertificatesComponentsSchemasStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * TlsCertificatesAndHostnamesClientCertificate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class TlsCertificatesAndHostnamesClientCertificate {
  public static final String SERIALIZED_NAME_CERTIFICATE = "certificate";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE)
  private String certificate;

  public static final String SERIALIZED_NAME_CERTIFICATE_AUTHORITY = "certificate_authority";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_AUTHORITY)
  private TlsCertificatesAndHostnamesClientCertificatesComponentsSchemasCertificateAuthority certificateAuthority;

  public static final String SERIALIZED_NAME_COMMON_NAME = "common_name";
  @SerializedName(SERIALIZED_NAME_COMMON_NAME)
  private String commonName;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_CSR = "csr";
  @SerializedName(SERIALIZED_NAME_CSR)
  private String csr;

  public static final String SERIALIZED_NAME_EXPIRES_ON = "expires_on";
  @SerializedName(SERIALIZED_NAME_EXPIRES_ON)
  private String expiresOn;

  public static final String SERIALIZED_NAME_FINGERPRINT_SHA256 = "fingerprint_sha256";
  @SerializedName(SERIALIZED_NAME_FINGERPRINT_SHA256)
  private String fingerprintSha256;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ISSUED_ON = "issued_on";
  @SerializedName(SERIALIZED_NAME_ISSUED_ON)
  private String issuedOn;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_ORGANIZATION = "organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  private String organization;

  public static final String SERIALIZED_NAME_ORGANIZATIONAL_UNIT = "organizational_unit";
  @SerializedName(SERIALIZED_NAME_ORGANIZATIONAL_UNIT)
  private String organizationalUnit;

  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "serial_number";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  private String serialNumber;

  public static final String SERIALIZED_NAME_SIGNATURE = "signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private String signature;

  public static final String SERIALIZED_NAME_SKI = "ski";
  @SerializedName(SERIALIZED_NAME_SKI)
  private String ski;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private TlsCertificatesAndHostnamesClientCertificatesComponentsSchemasStatus status;

  public static final String SERIALIZED_NAME_VALIDITY_DAYS = "validity_days";
  @SerializedName(SERIALIZED_NAME_VALIDITY_DAYS)
  private Integer validityDays;

  public TlsCertificatesAndHostnamesClientCertificate() {
  }

  public TlsCertificatesAndHostnamesClientCertificate(
     String certificate, 
     String commonName, 
     String country, 
     String expiresOn, 
     String fingerprintSha256, 
     String id, 
     String issuedOn, 
     String location, 
     String organization, 
     String organizationalUnit, 
     String serialNumber, 
     String signature, 
     String ski, 
     String state
  ) {
    this();
    this.certificate = certificate;
    this.commonName = commonName;
    this.country = country;
    this.expiresOn = expiresOn;
    this.fingerprintSha256 = fingerprintSha256;
    this.id = id;
    this.issuedOn = issuedOn;
    this.location = location;
    this.organization = organization;
    this.organizationalUnit = organizationalUnit;
    this.serialNumber = serialNumber;
    this.signature = signature;
    this.ski = ski;
    this.state = state;
  }

   /**
   * The Client Certificate PEM
   * @return certificate
  **/
  @javax.annotation.Nullable
  public String getCertificate() {
    return certificate;
  }



  public TlsCertificatesAndHostnamesClientCertificate certificateAuthority(TlsCertificatesAndHostnamesClientCertificatesComponentsSchemasCertificateAuthority certificateAuthority) {
    this.certificateAuthority = certificateAuthority;
    return this;
  }

   /**
   * Get certificateAuthority
   * @return certificateAuthority
  **/
  @javax.annotation.Nullable
  public TlsCertificatesAndHostnamesClientCertificatesComponentsSchemasCertificateAuthority getCertificateAuthority() {
    return certificateAuthority;
  }

  public void setCertificateAuthority(TlsCertificatesAndHostnamesClientCertificatesComponentsSchemasCertificateAuthority certificateAuthority) {
    this.certificateAuthority = certificateAuthority;
  }


   /**
   * Common Name of the Client Certificate
   * @return commonName
  **/
  @javax.annotation.Nullable
  public String getCommonName() {
    return commonName;
  }



   /**
   * Country, provided by the CSR
   * @return country
  **/
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }



  public TlsCertificatesAndHostnamesClientCertificate csr(String csr) {
    this.csr = csr;
    return this;
  }

   /**
   * The Certificate Signing Request (CSR). Must be newline-encoded.
   * @return csr
  **/
  @javax.annotation.Nullable
  public String getCsr() {
    return csr;
  }

  public void setCsr(String csr) {
    this.csr = csr;
  }


   /**
   * Date that the Client Certificate expires
   * @return expiresOn
  **/
  @javax.annotation.Nullable
  public String getExpiresOn() {
    return expiresOn;
  }



   /**
   * Unique identifier of the Client Certificate
   * @return fingerprintSha256
  **/
  @javax.annotation.Nullable
  public String getFingerprintSha256() {
    return fingerprintSha256;
  }



   /**
   * Identifier
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



   /**
   * Date that the Client Certificate was issued by the Certificate Authority
   * @return issuedOn
  **/
  @javax.annotation.Nullable
  public String getIssuedOn() {
    return issuedOn;
  }



   /**
   * Location, provided by the CSR
   * @return location
  **/
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }



   /**
   * Organization, provided by the CSR
   * @return organization
  **/
  @javax.annotation.Nullable
  public String getOrganization() {
    return organization;
  }



   /**
   * Organizational Unit, provided by the CSR
   * @return organizationalUnit
  **/
  @javax.annotation.Nullable
  public String getOrganizationalUnit() {
    return organizationalUnit;
  }



   /**
   * The serial number on the created Client Certificate.
   * @return serialNumber
  **/
  @javax.annotation.Nullable
  public String getSerialNumber() {
    return serialNumber;
  }



   /**
   * The type of hash used for the Client Certificate..
   * @return signature
  **/
  @javax.annotation.Nullable
  public String getSignature() {
    return signature;
  }



   /**
   * Subject Key Identifier
   * @return ski
  **/
  @javax.annotation.Nullable
  public String getSki() {
    return ski;
  }



   /**
   * State, provided by the CSR
   * @return state
  **/
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }



  public TlsCertificatesAndHostnamesClientCertificate status(TlsCertificatesAndHostnamesClientCertificatesComponentsSchemasStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  public TlsCertificatesAndHostnamesClientCertificatesComponentsSchemasStatus getStatus() {
    return status;
  }

  public void setStatus(TlsCertificatesAndHostnamesClientCertificatesComponentsSchemasStatus status) {
    this.status = status;
  }


  public TlsCertificatesAndHostnamesClientCertificate validityDays(Integer validityDays) {
    this.validityDays = validityDays;
    return this;
  }

   /**
   * The number of days the Client Certificate will be valid after the issued_on date
   * @return validityDays
  **/
  @javax.annotation.Nullable
  public Integer getValidityDays() {
    return validityDays;
  }

  public void setValidityDays(Integer validityDays) {
    this.validityDays = validityDays;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TlsCertificatesAndHostnamesClientCertificate tlsCertificatesAndHostnamesClientCertificate = (TlsCertificatesAndHostnamesClientCertificate) o;
    return Objects.equals(this.certificate, tlsCertificatesAndHostnamesClientCertificate.certificate) &&
        Objects.equals(this.certificateAuthority, tlsCertificatesAndHostnamesClientCertificate.certificateAuthority) &&
        Objects.equals(this.commonName, tlsCertificatesAndHostnamesClientCertificate.commonName) &&
        Objects.equals(this.country, tlsCertificatesAndHostnamesClientCertificate.country) &&
        Objects.equals(this.csr, tlsCertificatesAndHostnamesClientCertificate.csr) &&
        Objects.equals(this.expiresOn, tlsCertificatesAndHostnamesClientCertificate.expiresOn) &&
        Objects.equals(this.fingerprintSha256, tlsCertificatesAndHostnamesClientCertificate.fingerprintSha256) &&
        Objects.equals(this.id, tlsCertificatesAndHostnamesClientCertificate.id) &&
        Objects.equals(this.issuedOn, tlsCertificatesAndHostnamesClientCertificate.issuedOn) &&
        Objects.equals(this.location, tlsCertificatesAndHostnamesClientCertificate.location) &&
        Objects.equals(this.organization, tlsCertificatesAndHostnamesClientCertificate.organization) &&
        Objects.equals(this.organizationalUnit, tlsCertificatesAndHostnamesClientCertificate.organizationalUnit) &&
        Objects.equals(this.serialNumber, tlsCertificatesAndHostnamesClientCertificate.serialNumber) &&
        Objects.equals(this.signature, tlsCertificatesAndHostnamesClientCertificate.signature) &&
        Objects.equals(this.ski, tlsCertificatesAndHostnamesClientCertificate.ski) &&
        Objects.equals(this.state, tlsCertificatesAndHostnamesClientCertificate.state) &&
        Objects.equals(this.status, tlsCertificatesAndHostnamesClientCertificate.status) &&
        Objects.equals(this.validityDays, tlsCertificatesAndHostnamesClientCertificate.validityDays);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificate, certificateAuthority, commonName, country, csr, expiresOn, fingerprintSha256, id, issuedOn, location, organization, organizationalUnit, serialNumber, signature, ski, state, status, validityDays);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TlsCertificatesAndHostnamesClientCertificate {\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    certificateAuthority: ").append(toIndentedString(certificateAuthority)).append("\n");
    sb.append("    commonName: ").append(toIndentedString(commonName)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    csr: ").append(toIndentedString(csr)).append("\n");
    sb.append("    expiresOn: ").append(toIndentedString(expiresOn)).append("\n");
    sb.append("    fingerprintSha256: ").append(toIndentedString(fingerprintSha256)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    issuedOn: ").append(toIndentedString(issuedOn)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    organizationalUnit: ").append(toIndentedString(organizationalUnit)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    ski: ").append(toIndentedString(ski)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    validityDays: ").append(toIndentedString(validityDays)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("certificate");
    openapiFields.add("certificate_authority");
    openapiFields.add("common_name");
    openapiFields.add("country");
    openapiFields.add("csr");
    openapiFields.add("expires_on");
    openapiFields.add("fingerprint_sha256");
    openapiFields.add("id");
    openapiFields.add("issued_on");
    openapiFields.add("location");
    openapiFields.add("organization");
    openapiFields.add("organizational_unit");
    openapiFields.add("serial_number");
    openapiFields.add("signature");
    openapiFields.add("ski");
    openapiFields.add("state");
    openapiFields.add("status");
    openapiFields.add("validity_days");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TlsCertificatesAndHostnamesClientCertificate
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TlsCertificatesAndHostnamesClientCertificate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TlsCertificatesAndHostnamesClientCertificate is not found in the empty JSON string", TlsCertificatesAndHostnamesClientCertificate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TlsCertificatesAndHostnamesClientCertificate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TlsCertificatesAndHostnamesClientCertificate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("certificate") != null && !jsonObj.get("certificate").isJsonNull()) && !jsonObj.get("certificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificate").toString()));
      }
      // validate the optional field `certificate_authority`
      if (jsonObj.get("certificate_authority") != null && !jsonObj.get("certificate_authority").isJsonNull()) {
        TlsCertificatesAndHostnamesClientCertificatesComponentsSchemasCertificateAuthority.validateJsonElement(jsonObj.get("certificate_authority"));
      }
      if ((jsonObj.get("common_name") != null && !jsonObj.get("common_name").isJsonNull()) && !jsonObj.get("common_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `common_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("common_name").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("csr") != null && !jsonObj.get("csr").isJsonNull()) && !jsonObj.get("csr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `csr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("csr").toString()));
      }
      if ((jsonObj.get("expires_on") != null && !jsonObj.get("expires_on").isJsonNull()) && !jsonObj.get("expires_on").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expires_on` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expires_on").toString()));
      }
      if ((jsonObj.get("fingerprint_sha256") != null && !jsonObj.get("fingerprint_sha256").isJsonNull()) && !jsonObj.get("fingerprint_sha256").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fingerprint_sha256` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fingerprint_sha256").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("issued_on") != null && !jsonObj.get("issued_on").isJsonNull()) && !jsonObj.get("issued_on").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issued_on` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issued_on").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("organization") != null && !jsonObj.get("organization").isJsonNull()) && !jsonObj.get("organization").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization").toString()));
      }
      if ((jsonObj.get("organizational_unit") != null && !jsonObj.get("organizational_unit").isJsonNull()) && !jsonObj.get("organizational_unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organizational_unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organizational_unit").toString()));
      }
      if ((jsonObj.get("serial_number") != null && !jsonObj.get("serial_number").isJsonNull()) && !jsonObj.get("serial_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serial_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serial_number").toString()));
      }
      if ((jsonObj.get("signature") != null && !jsonObj.get("signature").isJsonNull()) && !jsonObj.get("signature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signature").toString()));
      }
      if ((jsonObj.get("ski") != null && !jsonObj.get("ski").isJsonNull()) && !jsonObj.get("ski").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ski` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ski").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        TlsCertificatesAndHostnamesClientCertificatesComponentsSchemasStatus.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TlsCertificatesAndHostnamesClientCertificate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TlsCertificatesAndHostnamesClientCertificate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TlsCertificatesAndHostnamesClientCertificate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TlsCertificatesAndHostnamesClientCertificate.class));

       return (TypeAdapter<T>) new TypeAdapter<TlsCertificatesAndHostnamesClientCertificate>() {
           @Override
           public void write(JsonWriter out, TlsCertificatesAndHostnamesClientCertificate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TlsCertificatesAndHostnamesClientCertificate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TlsCertificatesAndHostnamesClientCertificate given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TlsCertificatesAndHostnamesClientCertificate
  * @throws IOException if the JSON string is invalid with respect to TlsCertificatesAndHostnamesClientCertificate
  */
  public static TlsCertificatesAndHostnamesClientCertificate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TlsCertificatesAndHostnamesClientCertificate.class);
  }

 /**
  * Convert an instance of TlsCertificatesAndHostnamesClientCertificate to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

