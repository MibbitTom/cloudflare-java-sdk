/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UrlscannerGetScanHar200ResponseResultHarLogCreator;
import org.openapitools.client.model.UrlscannerGetScanHar200ResponseResultHarLogEntriesInner;
import org.openapitools.client.model.UrlscannerGetScanHar200ResponseResultHarLogPagesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * UrlscannerGetScanHar200ResponseResultHarLog
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class UrlscannerGetScanHar200ResponseResultHarLog {
  public static final String SERIALIZED_NAME_CREATOR = "creator";
  @SerializedName(SERIALIZED_NAME_CREATOR)
  private UrlscannerGetScanHar200ResponseResultHarLogCreator creator;

  public static final String SERIALIZED_NAME_ENTRIES = "entries";
  @SerializedName(SERIALIZED_NAME_ENTRIES)
  private List<UrlscannerGetScanHar200ResponseResultHarLogEntriesInner> entries = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAGES = "pages";
  @SerializedName(SERIALIZED_NAME_PAGES)
  private List<UrlscannerGetScanHar200ResponseResultHarLogPagesInner> pages = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public UrlscannerGetScanHar200ResponseResultHarLog() {
  }

  public UrlscannerGetScanHar200ResponseResultHarLog creator(UrlscannerGetScanHar200ResponseResultHarLogCreator creator) {
    this.creator = creator;
    return this;
  }

   /**
   * Get creator
   * @return creator
  **/
  @javax.annotation.Nonnull
  public UrlscannerGetScanHar200ResponseResultHarLogCreator getCreator() {
    return creator;
  }

  public void setCreator(UrlscannerGetScanHar200ResponseResultHarLogCreator creator) {
    this.creator = creator;
  }


  public UrlscannerGetScanHar200ResponseResultHarLog entries(List<UrlscannerGetScanHar200ResponseResultHarLogEntriesInner> entries) {
    this.entries = entries;
    return this;
  }

  public UrlscannerGetScanHar200ResponseResultHarLog addEntriesItem(UrlscannerGetScanHar200ResponseResultHarLogEntriesInner entriesItem) {
    if (this.entries == null) {
      this.entries = new ArrayList<>();
    }
    this.entries.add(entriesItem);
    return this;
  }

   /**
   * Get entries
   * @return entries
  **/
  @javax.annotation.Nonnull
  public List<UrlscannerGetScanHar200ResponseResultHarLogEntriesInner> getEntries() {
    return entries;
  }

  public void setEntries(List<UrlscannerGetScanHar200ResponseResultHarLogEntriesInner> entries) {
    this.entries = entries;
  }


  public UrlscannerGetScanHar200ResponseResultHarLog pages(List<UrlscannerGetScanHar200ResponseResultHarLogPagesInner> pages) {
    this.pages = pages;
    return this;
  }

  public UrlscannerGetScanHar200ResponseResultHarLog addPagesItem(UrlscannerGetScanHar200ResponseResultHarLogPagesInner pagesItem) {
    if (this.pages == null) {
      this.pages = new ArrayList<>();
    }
    this.pages.add(pagesItem);
    return this;
  }

   /**
   * Get pages
   * @return pages
  **/
  @javax.annotation.Nonnull
  public List<UrlscannerGetScanHar200ResponseResultHarLogPagesInner> getPages() {
    return pages;
  }

  public void setPages(List<UrlscannerGetScanHar200ResponseResultHarLogPagesInner> pages) {
    this.pages = pages;
  }


  public UrlscannerGetScanHar200ResponseResultHarLog version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nonnull
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UrlscannerGetScanHar200ResponseResultHarLog urlscannerGetScanHar200ResponseResultHarLog = (UrlscannerGetScanHar200ResponseResultHarLog) o;
    return Objects.equals(this.creator, urlscannerGetScanHar200ResponseResultHarLog.creator) &&
        Objects.equals(this.entries, urlscannerGetScanHar200ResponseResultHarLog.entries) &&
        Objects.equals(this.pages, urlscannerGetScanHar200ResponseResultHarLog.pages) &&
        Objects.equals(this.version, urlscannerGetScanHar200ResponseResultHarLog.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creator, entries, pages, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UrlscannerGetScanHar200ResponseResultHarLog {\n");
    sb.append("    creator: ").append(toIndentedString(creator)).append("\n");
    sb.append("    entries: ").append(toIndentedString(entries)).append("\n");
    sb.append("    pages: ").append(toIndentedString(pages)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creator");
    openapiFields.add("entries");
    openapiFields.add("pages");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("creator");
    openapiRequiredFields.add("entries");
    openapiRequiredFields.add("pages");
    openapiRequiredFields.add("version");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UrlscannerGetScanHar200ResponseResultHarLog
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UrlscannerGetScanHar200ResponseResultHarLog.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UrlscannerGetScanHar200ResponseResultHarLog is not found in the empty JSON string", UrlscannerGetScanHar200ResponseResultHarLog.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UrlscannerGetScanHar200ResponseResultHarLog.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UrlscannerGetScanHar200ResponseResultHarLog` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UrlscannerGetScanHar200ResponseResultHarLog.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `creator`
      UrlscannerGetScanHar200ResponseResultHarLogCreator.validateJsonElement(jsonObj.get("creator"));
      // ensure the json data is an array
      if (!jsonObj.get("entries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `entries` to be an array in the JSON string but got `%s`", jsonObj.get("entries").toString()));
      }

      JsonArray jsonArrayentries = jsonObj.getAsJsonArray("entries");
      // validate the required field `entries` (array)
      for (int i = 0; i < jsonArrayentries.size(); i++) {
        UrlscannerGetScanHar200ResponseResultHarLogEntriesInner.validateJsonElement(jsonArrayentries.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("pages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pages` to be an array in the JSON string but got `%s`", jsonObj.get("pages").toString()));
      }

      JsonArray jsonArraypages = jsonObj.getAsJsonArray("pages");
      // validate the required field `pages` (array)
      for (int i = 0; i < jsonArraypages.size(); i++) {
        UrlscannerGetScanHar200ResponseResultHarLogPagesInner.validateJsonElement(jsonArraypages.get(i));
      };
      if (!jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UrlscannerGetScanHar200ResponseResultHarLog.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UrlscannerGetScanHar200ResponseResultHarLog' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UrlscannerGetScanHar200ResponseResultHarLog> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UrlscannerGetScanHar200ResponseResultHarLog.class));

       return (TypeAdapter<T>) new TypeAdapter<UrlscannerGetScanHar200ResponseResultHarLog>() {
           @Override
           public void write(JsonWriter out, UrlscannerGetScanHar200ResponseResultHarLog value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UrlscannerGetScanHar200ResponseResultHarLog read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UrlscannerGetScanHar200ResponseResultHarLog given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UrlscannerGetScanHar200ResponseResultHarLog
  * @throws IOException if the JSON string is invalid with respect to UrlscannerGetScanHar200ResponseResultHarLog
  */
  public static UrlscannerGetScanHar200ResponseResultHarLog fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UrlscannerGetScanHar200ResponseResultHarLog.class);
  }

 /**
  * Convert an instance of UrlscannerGetScanHar200ResponseResultHarLog to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

