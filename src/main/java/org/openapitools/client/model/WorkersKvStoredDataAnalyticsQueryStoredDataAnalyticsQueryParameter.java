/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WorkersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class WorkersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter {
  /**
   * Gets or Sets dimensions
   */
  @JsonAdapter(DimensionsEnum.Adapter.class)
  public enum DimensionsEnum {
    NAMESPACEID("namespaceId");

    private String value;

    DimensionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DimensionsEnum fromValue(String value) {
      for (DimensionsEnum b : DimensionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DimensionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DimensionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DimensionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DimensionsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DimensionsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private List<DimensionsEnum> dimensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private Object filters = null;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit = 10000;

  /**
   * Gets or Sets metrics
   */
  @JsonAdapter(MetricsEnum.Adapter.class)
  public enum MetricsEnum {
    STOREDBYTES("storedBytes"),
    
    STOREDKEYS("storedKeys");

    private String value;

    MetricsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MetricsEnum fromValue(String value) {
      for (MetricsEnum b : MetricsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MetricsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MetricsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MetricsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MetricsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MetricsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private List<MetricsEnum> metrics = new ArrayList<>();

  public static final String SERIALIZED_NAME_SINCE = "since";
  @SerializedName(SERIALIZED_NAME_SINCE)
  private OffsetDateTime since;

  public static final String SERIALIZED_NAME_SORT = "sort";
  @SerializedName(SERIALIZED_NAME_SORT)
  private Object sort = null;

  public static final String SERIALIZED_NAME_UNTIL = "until";
  @SerializedName(SERIALIZED_NAME_UNTIL)
  private OffsetDateTime until;

  public WorkersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter() {
  }

  public WorkersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter dimensions(List<DimensionsEnum> dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  public WorkersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter addDimensionsItem(DimensionsEnum dimensionsItem) {
    if (this.dimensions == null) {
      this.dimensions = new ArrayList<>();
    }
    this.dimensions.add(dimensionsItem);
    return this;
  }

   /**
   * Get dimensions
   * @return dimensions
  **/
  @javax.annotation.Nullable
  public List<DimensionsEnum> getDimensions() {
    return dimensions;
  }

  public void setDimensions(List<DimensionsEnum> dimensions) {
    this.dimensions = dimensions;
  }


  public WorkersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter filters(Object filters) {
    this.filters = filters;
    return this;
  }

   /**
   * Get filters
   * @return filters
  **/
  @javax.annotation.Nullable
  public Object getFilters() {
    return filters;
  }

  public void setFilters(Object filters) {
    this.filters = filters;
  }


  public WorkersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter limit(Integer limit) {
    this.limit = limit;
    return this;
  }

   /**
   * Limit number of returned metrics.
   * @return limit
  **/
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public WorkersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter metrics(List<MetricsEnum> metrics) {
    this.metrics = metrics;
    return this;
  }

  public WorkersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter addMetricsItem(MetricsEnum metricsItem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<>();
    }
    this.metrics.add(metricsItem);
    return this;
  }

   /**
   * Get metrics
   * @return metrics
  **/
  @javax.annotation.Nullable
  public List<MetricsEnum> getMetrics() {
    return metrics;
  }

  public void setMetrics(List<MetricsEnum> metrics) {
    this.metrics = metrics;
  }


  public WorkersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter since(OffsetDateTime since) {
    this.since = since;
    return this;
  }

   /**
   * Start of time interval to query, defaults to 6 hours before request received.
   * @return since
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getSince() {
    return since;
  }

  public void setSince(OffsetDateTime since) {
    this.since = since;
  }


  public WorkersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter sort(Object sort) {
    this.sort = sort;
    return this;
  }

   /**
   * Get sort
   * @return sort
  **/
  @javax.annotation.Nullable
  public Object getSort() {
    return sort;
  }

  public void setSort(Object sort) {
    this.sort = sort;
  }


  public WorkersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter until(OffsetDateTime until) {
    this.until = until;
    return this;
  }

   /**
   * End of time interval to query, defaults to current time.
   * @return until
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getUntil() {
    return until;
  }

  public void setUntil(OffsetDateTime until) {
    this.until = until;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter workersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter = (WorkersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter) o;
    return Objects.equals(this.dimensions, workersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter.dimensions) &&
        Objects.equals(this.filters, workersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter.filters) &&
        Objects.equals(this.limit, workersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter.limit) &&
        Objects.equals(this.metrics, workersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter.metrics) &&
        Objects.equals(this.since, workersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter.since) &&
        Objects.equals(this.sort, workersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter.sort) &&
        Objects.equals(this.until, workersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter.until);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(dimensions, filters, limit, metrics, since, sort, until);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter {\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    since: ").append(toIndentedString(since)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    until: ").append(toIndentedString(until)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dimensions");
    openapiFields.add("filters");
    openapiFields.add("limit");
    openapiFields.add("metrics");
    openapiFields.add("since");
    openapiFields.add("sort");
    openapiFields.add("until");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to WorkersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter is not found in the empty JSON string", WorkersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonNull() && !jsonObj.get("dimensions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dimensions` to be an array in the JSON string but got `%s`", jsonObj.get("dimensions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("metrics") != null && !jsonObj.get("metrics").isJsonNull() && !jsonObj.get("metrics").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `metrics` to be an array in the JSON string but got `%s`", jsonObj.get("metrics").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter>() {
           @Override
           public void write(JsonWriter out, WorkersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WorkersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WorkersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter
  * @throws IOException if the JSON string is invalid with respect to WorkersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter
  */
  public static WorkersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter.class);
  }

 /**
  * Convert an instance of WorkersKvStoredDataAnalyticsQueryStoredDataAnalyticsQueryParameter to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

