/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DnsSettingsNameservers;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * DnsSettingsDnsSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class DnsSettingsDnsSettings {
  public static final String SERIALIZED_NAME_FOUNDATION_DNS = "foundation_dns";
  @SerializedName(SERIALIZED_NAME_FOUNDATION_DNS)
  private Boolean foundationDns;

  public static final String SERIALIZED_NAME_MULTI_PROVIDER = "multi_provider";
  @SerializedName(SERIALIZED_NAME_MULTI_PROVIDER)
  private Boolean multiProvider;

  public static final String SERIALIZED_NAME_NAMESERVERS = "nameservers";
  @SerializedName(SERIALIZED_NAME_NAMESERVERS)
  private DnsSettingsNameservers nameservers;

  public static final String SERIALIZED_NAME_SECONDARY_OVERRIDES = "secondary_overrides";
  @SerializedName(SERIALIZED_NAME_SECONDARY_OVERRIDES)
  private Boolean secondaryOverrides;

  public DnsSettingsDnsSettings() {
  }

  public DnsSettingsDnsSettings foundationDns(Boolean foundationDns) {
    this.foundationDns = foundationDns;
    return this;
  }

   /**
   * Whether to enable Foundation DNS Advanced Nameservers on the zone.
   * @return foundationDns
  **/
  @javax.annotation.Nullable
  public Boolean getFoundationDns() {
    return foundationDns;
  }

  public void setFoundationDns(Boolean foundationDns) {
    this.foundationDns = foundationDns;
  }


  public DnsSettingsDnsSettings multiProvider(Boolean multiProvider) {
    this.multiProvider = multiProvider;
    return this;
  }

   /**
   * Whether to enable multi-provider DNS, which causes Cloudflare to activate the zone even when non-Cloudflare NS records exist, and to respect NS records at the zone apex during outbound zone transfers.
   * @return multiProvider
  **/
  @javax.annotation.Nullable
  public Boolean getMultiProvider() {
    return multiProvider;
  }

  public void setMultiProvider(Boolean multiProvider) {
    this.multiProvider = multiProvider;
  }


  public DnsSettingsDnsSettings nameservers(DnsSettingsNameservers nameservers) {
    this.nameservers = nameservers;
    return this;
  }

   /**
   * Get nameservers
   * @return nameservers
  **/
  @javax.annotation.Nullable
  public DnsSettingsNameservers getNameservers() {
    return nameservers;
  }

  public void setNameservers(DnsSettingsNameservers nameservers) {
    this.nameservers = nameservers;
  }


  public DnsSettingsDnsSettings secondaryOverrides(Boolean secondaryOverrides) {
    this.secondaryOverrides = secondaryOverrides;
    return this;
  }

   /**
   * Allows a Secondary DNS zone to use (proxied) override records and CNAME flattening at the zone apex.
   * @return secondaryOverrides
  **/
  @javax.annotation.Nullable
  public Boolean getSecondaryOverrides() {
    return secondaryOverrides;
  }

  public void setSecondaryOverrides(Boolean secondaryOverrides) {
    this.secondaryOverrides = secondaryOverrides;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DnsSettingsDnsSettings dnsSettingsDnsSettings = (DnsSettingsDnsSettings) o;
    return Objects.equals(this.foundationDns, dnsSettingsDnsSettings.foundationDns) &&
        Objects.equals(this.multiProvider, dnsSettingsDnsSettings.multiProvider) &&
        Objects.equals(this.nameservers, dnsSettingsDnsSettings.nameservers) &&
        Objects.equals(this.secondaryOverrides, dnsSettingsDnsSettings.secondaryOverrides);
  }

  @Override
  public int hashCode() {
    return Objects.hash(foundationDns, multiProvider, nameservers, secondaryOverrides);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DnsSettingsDnsSettings {\n");
    sb.append("    foundationDns: ").append(toIndentedString(foundationDns)).append("\n");
    sb.append("    multiProvider: ").append(toIndentedString(multiProvider)).append("\n");
    sb.append("    nameservers: ").append(toIndentedString(nameservers)).append("\n");
    sb.append("    secondaryOverrides: ").append(toIndentedString(secondaryOverrides)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("foundation_dns");
    openapiFields.add("multi_provider");
    openapiFields.add("nameservers");
    openapiFields.add("secondary_overrides");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DnsSettingsDnsSettings
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DnsSettingsDnsSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DnsSettingsDnsSettings is not found in the empty JSON string", DnsSettingsDnsSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DnsSettingsDnsSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DnsSettingsDnsSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `nameservers`
      if (jsonObj.get("nameservers") != null && !jsonObj.get("nameservers").isJsonNull()) {
        DnsSettingsNameservers.validateJsonElement(jsonObj.get("nameservers"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DnsSettingsDnsSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DnsSettingsDnsSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DnsSettingsDnsSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DnsSettingsDnsSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<DnsSettingsDnsSettings>() {
           @Override
           public void write(JsonWriter out, DnsSettingsDnsSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DnsSettingsDnsSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DnsSettingsDnsSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DnsSettingsDnsSettings
  * @throws IOException if the JSON string is invalid with respect to DnsSettingsDnsSettings
  */
  public static DnsSettingsDnsSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DnsSettingsDnsSettings.class);
  }

 /**
  * Convert an instance of DnsSettingsDnsSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

