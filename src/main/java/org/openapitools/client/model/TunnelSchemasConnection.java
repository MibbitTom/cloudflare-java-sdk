/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TunnelSchemasConnection
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class TunnelSchemasConnection {
  public static final String SERIALIZED_NAME_CLIENT_ID = "client_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private Object clientId = null;

  public static final String SERIALIZED_NAME_CLIENT_VERSION = "client_version";
  @SerializedName(SERIALIZED_NAME_CLIENT_VERSION)
  private String clientVersion;

  public static final String SERIALIZED_NAME_COLO_NAME = "colo_name";
  @SerializedName(SERIALIZED_NAME_COLO_NAME)
  private String coloName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_PENDING_RECONNECT = "is_pending_reconnect";
  @SerializedName(SERIALIZED_NAME_IS_PENDING_RECONNECT)
  private Boolean isPendingReconnect;

  public static final String SERIALIZED_NAME_OPENED_AT = "opened_at";
  @SerializedName(SERIALIZED_NAME_OPENED_AT)
  private OffsetDateTime openedAt;

  public static final String SERIALIZED_NAME_ORIGIN_IP = "origin_ip";
  @SerializedName(SERIALIZED_NAME_ORIGIN_IP)
  private String originIp;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public TunnelSchemasConnection() {
  }

  public TunnelSchemasConnection(
     String id, 
     String uuid
  ) {
    this();
    this.id = id;
    this.uuid = uuid;
  }

  public TunnelSchemasConnection clientId(Object clientId) {
    this.clientId = clientId;
    return this;
  }

   /**
   * UUID of the cloudflared instance.
   * @return clientId
  **/
  @javax.annotation.Nullable
  public Object getClientId() {
    return clientId;
  }

  public void setClientId(Object clientId) {
    this.clientId = clientId;
  }


  public TunnelSchemasConnection clientVersion(String clientVersion) {
    this.clientVersion = clientVersion;
    return this;
  }

   /**
   * The cloudflared version used to establish this connection.
   * @return clientVersion
  **/
  @javax.annotation.Nullable
  public String getClientVersion() {
    return clientVersion;
  }

  public void setClientVersion(String clientVersion) {
    this.clientVersion = clientVersion;
  }


  public TunnelSchemasConnection coloName(String coloName) {
    this.coloName = coloName;
    return this;
  }

   /**
   * The Cloudflare data center used for this connection.
   * @return coloName
  **/
  @javax.annotation.Nullable
  public String getColoName() {
    return coloName;
  }

  public void setColoName(String coloName) {
    this.coloName = coloName;
  }


   /**
   * UUID of the Cloudflare Tunnel connection.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public TunnelSchemasConnection isPendingReconnect(Boolean isPendingReconnect) {
    this.isPendingReconnect = isPendingReconnect;
    return this;
  }

   /**
   * Cloudflare continues to track connections for several minutes after they disconnect. This is an optimization to improve latency and reliability of reconnecting.  If &#x60;true&#x60;, the connection has disconnected but is still being tracked. If &#x60;false&#x60;, the connection is actively serving traffic.
   * @return isPendingReconnect
  **/
  @javax.annotation.Nullable
  public Boolean getIsPendingReconnect() {
    return isPendingReconnect;
  }

  public void setIsPendingReconnect(Boolean isPendingReconnect) {
    this.isPendingReconnect = isPendingReconnect;
  }


  public TunnelSchemasConnection openedAt(OffsetDateTime openedAt) {
    this.openedAt = openedAt;
    return this;
  }

   /**
   * Timestamp of when the connection was established.
   * @return openedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getOpenedAt() {
    return openedAt;
  }

  public void setOpenedAt(OffsetDateTime openedAt) {
    this.openedAt = openedAt;
  }


  public TunnelSchemasConnection originIp(String originIp) {
    this.originIp = originIp;
    return this;
  }

   /**
   * The public IP address of the host running cloudflared.
   * @return originIp
  **/
  @javax.annotation.Nullable
  public String getOriginIp() {
    return originIp;
  }

  public void setOriginIp(String originIp) {
    this.originIp = originIp;
  }


   /**
   * UUID of the Cloudflare Tunnel connection.
   * @return uuid
  **/
  @javax.annotation.Nullable
  public String getUuid() {
    return uuid;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TunnelSchemasConnection tunnelSchemasConnection = (TunnelSchemasConnection) o;
    return Objects.equals(this.clientId, tunnelSchemasConnection.clientId) &&
        Objects.equals(this.clientVersion, tunnelSchemasConnection.clientVersion) &&
        Objects.equals(this.coloName, tunnelSchemasConnection.coloName) &&
        Objects.equals(this.id, tunnelSchemasConnection.id) &&
        Objects.equals(this.isPendingReconnect, tunnelSchemasConnection.isPendingReconnect) &&
        Objects.equals(this.openedAt, tunnelSchemasConnection.openedAt) &&
        Objects.equals(this.originIp, tunnelSchemasConnection.originIp) &&
        Objects.equals(this.uuid, tunnelSchemasConnection.uuid);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientId, clientVersion, coloName, id, isPendingReconnect, openedAt, originIp, uuid);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TunnelSchemasConnection {\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientVersion: ").append(toIndentedString(clientVersion)).append("\n");
    sb.append("    coloName: ").append(toIndentedString(coloName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isPendingReconnect: ").append(toIndentedString(isPendingReconnect)).append("\n");
    sb.append("    openedAt: ").append(toIndentedString(openedAt)).append("\n");
    sb.append("    originIp: ").append(toIndentedString(originIp)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("client_id");
    openapiFields.add("client_version");
    openapiFields.add("colo_name");
    openapiFields.add("id");
    openapiFields.add("is_pending_reconnect");
    openapiFields.add("opened_at");
    openapiFields.add("origin_ip");
    openapiFields.add("uuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TunnelSchemasConnection
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TunnelSchemasConnection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TunnelSchemasConnection is not found in the empty JSON string", TunnelSchemasConnection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TunnelSchemasConnection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TunnelSchemasConnection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("client_version") != null && !jsonObj.get("client_version").isJsonNull()) && !jsonObj.get("client_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_version").toString()));
      }
      if ((jsonObj.get("colo_name") != null && !jsonObj.get("colo_name").isJsonNull()) && !jsonObj.get("colo_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `colo_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("colo_name").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("origin_ip") != null && !jsonObj.get("origin_ip").isJsonNull()) && !jsonObj.get("origin_ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origin_ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origin_ip").toString()));
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TunnelSchemasConnection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TunnelSchemasConnection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TunnelSchemasConnection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TunnelSchemasConnection.class));

       return (TypeAdapter<T>) new TypeAdapter<TunnelSchemasConnection>() {
           @Override
           public void write(JsonWriter out, TunnelSchemasConnection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TunnelSchemasConnection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TunnelSchemasConnection given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TunnelSchemasConnection
  * @throws IOException if the JSON string is invalid with respect to TunnelSchemasConnection
  */
  public static TunnelSchemasConnection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TunnelSchemasConnection.class);
  }

 /**
  * Convert an instance of TunnelSchemasConnection to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

