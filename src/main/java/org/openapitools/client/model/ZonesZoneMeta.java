/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata about the zone
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class ZonesZoneMeta {
  public static final String SERIALIZED_NAME_CDN_ONLY = "cdn_only";
  @SerializedName(SERIALIZED_NAME_CDN_ONLY)
  private Boolean cdnOnly;

  public static final String SERIALIZED_NAME_CUSTOM_CERTIFICATE_QUOTA = "custom_certificate_quota";
  @SerializedName(SERIALIZED_NAME_CUSTOM_CERTIFICATE_QUOTA)
  private Integer customCertificateQuota;

  public static final String SERIALIZED_NAME_DNS_ONLY = "dns_only";
  @SerializedName(SERIALIZED_NAME_DNS_ONLY)
  private Boolean dnsOnly;

  public static final String SERIALIZED_NAME_FOUNDATION_DNS = "foundation_dns";
  @SerializedName(SERIALIZED_NAME_FOUNDATION_DNS)
  private Boolean foundationDns;

  public static final String SERIALIZED_NAME_PAGE_RULE_QUOTA = "page_rule_quota";
  @SerializedName(SERIALIZED_NAME_PAGE_RULE_QUOTA)
  private Integer pageRuleQuota;

  public static final String SERIALIZED_NAME_PHISHING_DETECTED = "phishing_detected";
  @SerializedName(SERIALIZED_NAME_PHISHING_DETECTED)
  private Boolean phishingDetected;

  public static final String SERIALIZED_NAME_STEP = "step";
  @SerializedName(SERIALIZED_NAME_STEP)
  private Integer step;

  public ZonesZoneMeta() {
  }

  public ZonesZoneMeta cdnOnly(Boolean cdnOnly) {
    this.cdnOnly = cdnOnly;
    return this;
  }

   /**
   * The zone is only configured for CDN
   * @return cdnOnly
  **/
  @javax.annotation.Nullable
  public Boolean getCdnOnly() {
    return cdnOnly;
  }

  public void setCdnOnly(Boolean cdnOnly) {
    this.cdnOnly = cdnOnly;
  }


  public ZonesZoneMeta customCertificateQuota(Integer customCertificateQuota) {
    this.customCertificateQuota = customCertificateQuota;
    return this;
  }

   /**
   * Number of Custom Certificates the zone can have
   * @return customCertificateQuota
  **/
  @javax.annotation.Nullable
  public Integer getCustomCertificateQuota() {
    return customCertificateQuota;
  }

  public void setCustomCertificateQuota(Integer customCertificateQuota) {
    this.customCertificateQuota = customCertificateQuota;
  }


  public ZonesZoneMeta dnsOnly(Boolean dnsOnly) {
    this.dnsOnly = dnsOnly;
    return this;
  }

   /**
   * The zone is only configured for DNS
   * @return dnsOnly
  **/
  @javax.annotation.Nullable
  public Boolean getDnsOnly() {
    return dnsOnly;
  }

  public void setDnsOnly(Boolean dnsOnly) {
    this.dnsOnly = dnsOnly;
  }


  public ZonesZoneMeta foundationDns(Boolean foundationDns) {
    this.foundationDns = foundationDns;
    return this;
  }

   /**
   * The zone is setup with Foundation DNS
   * @return foundationDns
  **/
  @javax.annotation.Nullable
  public Boolean getFoundationDns() {
    return foundationDns;
  }

  public void setFoundationDns(Boolean foundationDns) {
    this.foundationDns = foundationDns;
  }


  public ZonesZoneMeta pageRuleQuota(Integer pageRuleQuota) {
    this.pageRuleQuota = pageRuleQuota;
    return this;
  }

   /**
   * Number of Page Rules a zone can have
   * @return pageRuleQuota
  **/
  @javax.annotation.Nullable
  public Integer getPageRuleQuota() {
    return pageRuleQuota;
  }

  public void setPageRuleQuota(Integer pageRuleQuota) {
    this.pageRuleQuota = pageRuleQuota;
  }


  public ZonesZoneMeta phishingDetected(Boolean phishingDetected) {
    this.phishingDetected = phishingDetected;
    return this;
  }

   /**
   * The zone has been flagged for phishing
   * @return phishingDetected
  **/
  @javax.annotation.Nullable
  public Boolean getPhishingDetected() {
    return phishingDetected;
  }

  public void setPhishingDetected(Boolean phishingDetected) {
    this.phishingDetected = phishingDetected;
  }


  public ZonesZoneMeta step(Integer step) {
    this.step = step;
    return this;
  }

   /**
   * Get step
   * @return step
  **/
  @javax.annotation.Nullable
  public Integer getStep() {
    return step;
  }

  public void setStep(Integer step) {
    this.step = step;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ZonesZoneMeta zonesZoneMeta = (ZonesZoneMeta) o;
    return Objects.equals(this.cdnOnly, zonesZoneMeta.cdnOnly) &&
        Objects.equals(this.customCertificateQuota, zonesZoneMeta.customCertificateQuota) &&
        Objects.equals(this.dnsOnly, zonesZoneMeta.dnsOnly) &&
        Objects.equals(this.foundationDns, zonesZoneMeta.foundationDns) &&
        Objects.equals(this.pageRuleQuota, zonesZoneMeta.pageRuleQuota) &&
        Objects.equals(this.phishingDetected, zonesZoneMeta.phishingDetected) &&
        Objects.equals(this.step, zonesZoneMeta.step);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cdnOnly, customCertificateQuota, dnsOnly, foundationDns, pageRuleQuota, phishingDetected, step);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ZonesZoneMeta {\n");
    sb.append("    cdnOnly: ").append(toIndentedString(cdnOnly)).append("\n");
    sb.append("    customCertificateQuota: ").append(toIndentedString(customCertificateQuota)).append("\n");
    sb.append("    dnsOnly: ").append(toIndentedString(dnsOnly)).append("\n");
    sb.append("    foundationDns: ").append(toIndentedString(foundationDns)).append("\n");
    sb.append("    pageRuleQuota: ").append(toIndentedString(pageRuleQuota)).append("\n");
    sb.append("    phishingDetected: ").append(toIndentedString(phishingDetected)).append("\n");
    sb.append("    step: ").append(toIndentedString(step)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cdn_only");
    openapiFields.add("custom_certificate_quota");
    openapiFields.add("dns_only");
    openapiFields.add("foundation_dns");
    openapiFields.add("page_rule_quota");
    openapiFields.add("phishing_detected");
    openapiFields.add("step");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ZonesZoneMeta
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ZonesZoneMeta.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ZonesZoneMeta is not found in the empty JSON string", ZonesZoneMeta.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ZonesZoneMeta.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ZonesZoneMeta` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ZonesZoneMeta.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ZonesZoneMeta' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ZonesZoneMeta> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ZonesZoneMeta.class));

       return (TypeAdapter<T>) new TypeAdapter<ZonesZoneMeta>() {
           @Override
           public void write(JsonWriter out, ZonesZoneMeta value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ZonesZoneMeta read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ZonesZoneMeta given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ZonesZoneMeta
  * @throws IOException if the JSON string is invalid with respect to ZonesZoneMeta
  */
  public static ZonesZoneMeta fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ZonesZoneMeta.class);
  }

 /**
  * Convert an instance of ZonesZoneMeta to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

