/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.HyperdriveHyperdriveCaching;
import org.openapitools.client.model.HyperdriveHyperdriveOrigin;
import org.openapitools.client.model.HyperdriveHyperdriveOriginWithPassword;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * HyperdrivePatchHyperdriveConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class HyperdrivePatchHyperdriveConfig {
  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private HyperdriveHyperdriveOriginWithPassword origin;

  public static final String SERIALIZED_NAME_CACHING = "caching";
  @SerializedName(SERIALIZED_NAME_CACHING)
  private HyperdriveHyperdriveCaching caching;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public HyperdrivePatchHyperdriveConfig() {
  }

  public HyperdrivePatchHyperdriveConfig origin(HyperdriveHyperdriveOriginWithPassword origin) {
    this.origin = origin;
    return this;
  }

   /**
   * Get origin
   * @return origin
  **/
  @javax.annotation.Nullable
  public HyperdriveHyperdriveOriginWithPassword getOrigin() {
    return origin;
  }

  public void setOrigin(HyperdriveHyperdriveOriginWithPassword origin) {
    this.origin = origin;
  }


  public HyperdrivePatchHyperdriveConfig caching(HyperdriveHyperdriveCaching caching) {
    this.caching = caching;
    return this;
  }

   /**
   * Get caching
   * @return caching
  **/
  @javax.annotation.Nullable
  public HyperdriveHyperdriveCaching getCaching() {
    return caching;
  }

  public void setCaching(HyperdriveHyperdriveCaching caching) {
    this.caching = caching;
  }


  public HyperdrivePatchHyperdriveConfig name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HyperdrivePatchHyperdriveConfig hyperdrivePatchHyperdriveConfig = (HyperdrivePatchHyperdriveConfig) o;
    return Objects.equals(this.origin, hyperdrivePatchHyperdriveConfig.origin) &&
        Objects.equals(this.caching, hyperdrivePatchHyperdriveConfig.caching) &&
        Objects.equals(this.name, hyperdrivePatchHyperdriveConfig.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(origin, caching, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HyperdrivePatchHyperdriveConfig {\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    caching: ").append(toIndentedString(caching)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("caching");
    openapiFields.add("name");
    openapiFields.add("origin");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to HyperdrivePatchHyperdriveConfig
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HyperdrivePatchHyperdriveConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HyperdrivePatchHyperdriveConfig is not found in the empty JSON string", HyperdrivePatchHyperdriveConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HyperdrivePatchHyperdriveConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HyperdrivePatchHyperdriveConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `origin`
      if (jsonObj.get("origin") != null && !jsonObj.get("origin").isJsonNull()) {
        HyperdriveHyperdriveOriginWithPassword.validateJsonElement(jsonObj.get("origin"));
      }
      // validate the optional field `caching`
      if (jsonObj.get("caching") != null && !jsonObj.get("caching").isJsonNull()) {
        HyperdriveHyperdriveCaching.validateJsonElement(jsonObj.get("caching"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HyperdrivePatchHyperdriveConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HyperdrivePatchHyperdriveConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HyperdrivePatchHyperdriveConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HyperdrivePatchHyperdriveConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<HyperdrivePatchHyperdriveConfig>() {
           @Override
           public void write(JsonWriter out, HyperdrivePatchHyperdriveConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HyperdrivePatchHyperdriveConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of HyperdrivePatchHyperdriveConfig given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of HyperdrivePatchHyperdriveConfig
  * @throws IOException if the JSON string is invalid with respect to HyperdrivePatchHyperdriveConfig
  */
  public static HyperdrivePatchHyperdriveConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HyperdrivePatchHyperdriveConfig.class);
  }

 /**
  * Convert an instance of HyperdrivePatchHyperdriveConfig to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

