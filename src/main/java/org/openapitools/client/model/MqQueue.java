/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MqQueue
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class MqQueue {
  public static final String SERIALIZED_NAME_CONSUMERS = "consumers";
  @SerializedName(SERIALIZED_NAME_CONSUMERS)
  private Object consumers = null;

  public static final String SERIALIZED_NAME_CONSUMERS_TOTAL_COUNT = "consumers_total_count";
  @SerializedName(SERIALIZED_NAME_CONSUMERS_TOTAL_COUNT)
  private Object consumersTotalCount = null;

  public static final String SERIALIZED_NAME_CREATED_ON = "created_on";
  @SerializedName(SERIALIZED_NAME_CREATED_ON)
  private Object createdOn = null;

  public static final String SERIALIZED_NAME_MODIFIED_ON = "modified_on";
  @SerializedName(SERIALIZED_NAME_MODIFIED_ON)
  private Object modifiedOn = null;

  public static final String SERIALIZED_NAME_PRODUCERS = "producers";
  @SerializedName(SERIALIZED_NAME_PRODUCERS)
  private Object producers = null;

  public static final String SERIALIZED_NAME_PRODUCERS_TOTAL_COUNT = "producers_total_count";
  @SerializedName(SERIALIZED_NAME_PRODUCERS_TOTAL_COUNT)
  private Object producersTotalCount = null;

  public static final String SERIALIZED_NAME_QUEUE_ID = "queue_id";
  @SerializedName(SERIALIZED_NAME_QUEUE_ID)
  private String queueId;

  public static final String SERIALIZED_NAME_QUEUE_NAME = "queue_name";
  @SerializedName(SERIALIZED_NAME_QUEUE_NAME)
  private String queueName;

  public MqQueue() {
  }

  public MqQueue(
     Object consumers, 
     Object consumersTotalCount, 
     Object createdOn, 
     Object modifiedOn, 
     Object producers, 
     Object producersTotalCount, 
     String queueId
  ) {
    this();
    this.consumers = consumers;
    this.consumersTotalCount = consumersTotalCount;
    this.createdOn = createdOn;
    this.modifiedOn = modifiedOn;
    this.producers = producers;
    this.producersTotalCount = producersTotalCount;
    this.queueId = queueId;
  }

   /**
   * Get consumers
   * @return consumers
  **/
  @javax.annotation.Nullable
  public Object getConsumers() {
    return consumers;
  }



   /**
   * Get consumersTotalCount
   * @return consumersTotalCount
  **/
  @javax.annotation.Nullable
  public Object getConsumersTotalCount() {
    return consumersTotalCount;
  }



   /**
   * Get createdOn
   * @return createdOn
  **/
  @javax.annotation.Nullable
  public Object getCreatedOn() {
    return createdOn;
  }



   /**
   * Get modifiedOn
   * @return modifiedOn
  **/
  @javax.annotation.Nullable
  public Object getModifiedOn() {
    return modifiedOn;
  }



   /**
   * Get producers
   * @return producers
  **/
  @javax.annotation.Nullable
  public Object getProducers() {
    return producers;
  }



   /**
   * Get producersTotalCount
   * @return producersTotalCount
  **/
  @javax.annotation.Nullable
  public Object getProducersTotalCount() {
    return producersTotalCount;
  }



   /**
   * Get queueId
   * @return queueId
  **/
  @javax.annotation.Nullable
  public String getQueueId() {
    return queueId;
  }



  public MqQueue queueName(String queueName) {
    this.queueName = queueName;
    return this;
  }

   /**
   * Get queueName
   * @return queueName
  **/
  @javax.annotation.Nullable
  public String getQueueName() {
    return queueName;
  }

  public void setQueueName(String queueName) {
    this.queueName = queueName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MqQueue mqQueue = (MqQueue) o;
    return Objects.equals(this.consumers, mqQueue.consumers) &&
        Objects.equals(this.consumersTotalCount, mqQueue.consumersTotalCount) &&
        Objects.equals(this.createdOn, mqQueue.createdOn) &&
        Objects.equals(this.modifiedOn, mqQueue.modifiedOn) &&
        Objects.equals(this.producers, mqQueue.producers) &&
        Objects.equals(this.producersTotalCount, mqQueue.producersTotalCount) &&
        Objects.equals(this.queueId, mqQueue.queueId) &&
        Objects.equals(this.queueName, mqQueue.queueName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(consumers, consumersTotalCount, createdOn, modifiedOn, producers, producersTotalCount, queueId, queueName);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MqQueue {\n");
    sb.append("    consumers: ").append(toIndentedString(consumers)).append("\n");
    sb.append("    consumersTotalCount: ").append(toIndentedString(consumersTotalCount)).append("\n");
    sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
    sb.append("    modifiedOn: ").append(toIndentedString(modifiedOn)).append("\n");
    sb.append("    producers: ").append(toIndentedString(producers)).append("\n");
    sb.append("    producersTotalCount: ").append(toIndentedString(producersTotalCount)).append("\n");
    sb.append("    queueId: ").append(toIndentedString(queueId)).append("\n");
    sb.append("    queueName: ").append(toIndentedString(queueName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("consumers");
    openapiFields.add("consumers_total_count");
    openapiFields.add("created_on");
    openapiFields.add("modified_on");
    openapiFields.add("producers");
    openapiFields.add("producers_total_count");
    openapiFields.add("queue_id");
    openapiFields.add("queue_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MqQueue
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MqQueue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MqQueue is not found in the empty JSON string", MqQueue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MqQueue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MqQueue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("queue_id") != null && !jsonObj.get("queue_id").isJsonNull()) && !jsonObj.get("queue_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queue_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queue_id").toString()));
      }
      if ((jsonObj.get("queue_name") != null && !jsonObj.get("queue_name").isJsonNull()) && !jsonObj.get("queue_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queue_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queue_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MqQueue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MqQueue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MqQueue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MqQueue.class));

       return (TypeAdapter<T>) new TypeAdapter<MqQueue>() {
           @Override
           public void write(JsonWriter out, MqQueue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MqQueue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MqQueue given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MqQueue
  * @throws IOException if the JSON string is invalid with respect to MqQueue
  */
  public static MqQueue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MqQueue.class);
  }

 /**
  * Convert an instance of MqQueue to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

