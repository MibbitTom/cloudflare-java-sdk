/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * Optional filters that allow you to be alerted only on a subset of events for that alert type based on some criteria. This is only available for select alert types. See alert type documentation for more details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class AaaFilters {
  public static final String SERIALIZED_NAME_ACTIONS = "actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private List<String> actions = new ArrayList<>();

  public static final String SERIALIZED_NAME_AFFECTED_ASNS = "affected_asns";
  @SerializedName(SERIALIZED_NAME_AFFECTED_ASNS)
  private List<String> affectedAsns = new ArrayList<>();

  public static final String SERIALIZED_NAME_AFFECTED_COMPONENTS = "affected_components";
  @SerializedName(SERIALIZED_NAME_AFFECTED_COMPONENTS)
  private List<String> affectedComponents = new ArrayList<>();

  public static final String SERIALIZED_NAME_AFFECTED_LOCATIONS = "affected_locations";
  @SerializedName(SERIALIZED_NAME_AFFECTED_LOCATIONS)
  private List<String> affectedLocations = new ArrayList<>();

  public static final String SERIALIZED_NAME_AIRPORT_CODE = "airport_code";
  @SerializedName(SERIALIZED_NAME_AIRPORT_CODE)
  private List<String> airportCode = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALERT_TRIGGER_PREFERENCES = "alert_trigger_preferences";
  @SerializedName(SERIALIZED_NAME_ALERT_TRIGGER_PREFERENCES)
  private List<String> alertTriggerPreferences = new ArrayList<>();

  /**
   * Gets or Sets alertTriggerPreferencesValue
   */
  @JsonAdapter(AlertTriggerPreferencesValueEnum.Adapter.class)
  public enum AlertTriggerPreferencesValueEnum {
    _99_0("99.0"),
    
    _98_0("98.0"),
    
    _97_0("97.0");

    private String value;

    AlertTriggerPreferencesValueEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AlertTriggerPreferencesValueEnum fromValue(String value) {
      for (AlertTriggerPreferencesValueEnum b : AlertTriggerPreferencesValueEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AlertTriggerPreferencesValueEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AlertTriggerPreferencesValueEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AlertTriggerPreferencesValueEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AlertTriggerPreferencesValueEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AlertTriggerPreferencesValueEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ALERT_TRIGGER_PREFERENCES_VALUE = "alert_trigger_preferences_value";
  @SerializedName(SERIALIZED_NAME_ALERT_TRIGGER_PREFERENCES_VALUE)
  private List<AlertTriggerPreferencesValueEnum> alertTriggerPreferencesValue = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private List<String> enabled = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private List<String> environment = new ArrayList<>();

  public static final String SERIALIZED_NAME_EVENT = "event";
  @SerializedName(SERIALIZED_NAME_EVENT)
  private List<String> event = new ArrayList<>();

  public static final String SERIALIZED_NAME_EVENT_SOURCE = "event_source";
  @SerializedName(SERIALIZED_NAME_EVENT_SOURCE)
  private List<String> eventSource = new ArrayList<>();

  public static final String SERIALIZED_NAME_EVENT_TYPE = "event_type";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private List<String> eventType = new ArrayList<>();

  public static final String SERIALIZED_NAME_GROUP_BY = "group_by";
  @SerializedName(SERIALIZED_NAME_GROUP_BY)
  private List<String> groupBy = new ArrayList<>();

  public static final String SERIALIZED_NAME_HEALTH_CHECK_ID = "health_check_id";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_ID)
  private List<String> healthCheckId = new ArrayList<>();

  /**
   * Gets or Sets incidentImpact
   */
  @JsonAdapter(IncidentImpactEnum.Adapter.class)
  public enum IncidentImpactEnum {
    NONE("INCIDENT_IMPACT_NONE"),
    
    MINOR("INCIDENT_IMPACT_MINOR"),
    
    MAJOR("INCIDENT_IMPACT_MAJOR"),
    
    CRITICAL("INCIDENT_IMPACT_CRITICAL");

    private String value;

    IncidentImpactEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IncidentImpactEnum fromValue(String value) {
      for (IncidentImpactEnum b : IncidentImpactEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IncidentImpactEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IncidentImpactEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IncidentImpactEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IncidentImpactEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IncidentImpactEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INCIDENT_IMPACT = "incident_impact";
  @SerializedName(SERIALIZED_NAME_INCIDENT_IMPACT)
  private List<IncidentImpactEnum> incidentImpact = new ArrayList<>();

  public static final String SERIALIZED_NAME_INPUT_ID = "input_id";
  @SerializedName(SERIALIZED_NAME_INPUT_ID)
  private List<String> inputId = new ArrayList<>();

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private List<String> limit = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOGO_TAG = "logo_tag";
  @SerializedName(SERIALIZED_NAME_LOGO_TAG)
  private List<String> logoTag = new ArrayList<>();

  public static final String SERIALIZED_NAME_MEGABITS_PER_SECOND = "megabits_per_second";
  @SerializedName(SERIALIZED_NAME_MEGABITS_PER_SECOND)
  private List<String> megabitsPerSecond = new ArrayList<>();

  public static final String SERIALIZED_NAME_NEW_HEALTH = "new_health";
  @SerializedName(SERIALIZED_NAME_NEW_HEALTH)
  private List<String> newHealth = new ArrayList<>();

  public static final String SERIALIZED_NAME_NEW_STATUS = "new_status";
  @SerializedName(SERIALIZED_NAME_NEW_STATUS)
  private List<String> newStatus = new ArrayList<>();

  public static final String SERIALIZED_NAME_PACKETS_PER_SECOND = "packets_per_second";
  @SerializedName(SERIALIZED_NAME_PACKETS_PER_SECOND)
  private List<String> packetsPerSecond = new ArrayList<>();

  public static final String SERIALIZED_NAME_POOL_ID = "pool_id";
  @SerializedName(SERIALIZED_NAME_POOL_ID)
  private List<String> poolId = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRODUCT = "product";
  @SerializedName(SERIALIZED_NAME_PRODUCT)
  private List<String> product = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROJECT_ID = "project_id";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private List<String> projectId = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private List<String> protocol = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUERY_TAG = "query_tag";
  @SerializedName(SERIALIZED_NAME_QUERY_TAG)
  private List<String> queryTag = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUESTS_PER_SECOND = "requests_per_second";
  @SerializedName(SERIALIZED_NAME_REQUESTS_PER_SECOND)
  private List<String> requestsPerSecond = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELECTORS = "selectors";
  @SerializedName(SERIALIZED_NAME_SELECTORS)
  private List<String> selectors = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICES = "services";
  @SerializedName(SERIALIZED_NAME_SERVICES)
  private List<String> services = new ArrayList<>();

  public static final String SERIALIZED_NAME_SLO = "slo";
  @SerializedName(SERIALIZED_NAME_SLO)
  private List<String> slo = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private List<String> status = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET_HOSTNAME = "target_hostname";
  @SerializedName(SERIALIZED_NAME_TARGET_HOSTNAME)
  private List<String> targetHostname = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET_IP = "target_ip";
  @SerializedName(SERIALIZED_NAME_TARGET_IP)
  private List<String> targetIp = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET_ZONE_NAME = "target_zone_name";
  @SerializedName(SERIALIZED_NAME_TARGET_ZONE_NAME)
  private List<String> targetZoneName = new ArrayList<>();

  /**
   * Gets or Sets trafficExclusions
   */
  @JsonAdapter(TrafficExclusionsEnum.Adapter.class)
  public enum TrafficExclusionsEnum {
    SECURITY_EVENTS("security_events");

    private String value;

    TrafficExclusionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TrafficExclusionsEnum fromValue(String value) {
      for (TrafficExclusionsEnum b : TrafficExclusionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TrafficExclusionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TrafficExclusionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TrafficExclusionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TrafficExclusionsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TrafficExclusionsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRAFFIC_EXCLUSIONS = "traffic_exclusions";
  @SerializedName(SERIALIZED_NAME_TRAFFIC_EXCLUSIONS)
  private List<TrafficExclusionsEnum> trafficExclusions = new ArrayList<>();

  public static final String SERIALIZED_NAME_TUNNEL_ID = "tunnel_id";
  @SerializedName(SERIALIZED_NAME_TUNNEL_ID)
  private List<String> tunnelId = new ArrayList<>();

  public static final String SERIALIZED_NAME_TUNNEL_NAME = "tunnel_name";
  @SerializedName(SERIALIZED_NAME_TUNNEL_NAME)
  private List<String> tunnelName = new ArrayList<>();

  public static final String SERIALIZED_NAME_WHERE = "where";
  @SerializedName(SERIALIZED_NAME_WHERE)
  private List<String> where = new ArrayList<>();

  public static final String SERIALIZED_NAME_ZONES = "zones";
  @SerializedName(SERIALIZED_NAME_ZONES)
  private List<String> zones = new ArrayList<>();

  public AaaFilters() {
  }

  public AaaFilters actions(List<String> actions) {
    this.actions = actions;
    return this;
  }

  public AaaFilters addActionsItem(String actionsItem) {
    if (this.actions == null) {
      this.actions = new ArrayList<>();
    }
    this.actions.add(actionsItem);
    return this;
  }

   /**
   * Usage depends on specific alert type
   * @return actions
  **/
  @javax.annotation.Nullable
  public List<String> getActions() {
    return actions;
  }

  public void setActions(List<String> actions) {
    this.actions = actions;
  }


  public AaaFilters affectedAsns(List<String> affectedAsns) {
    this.affectedAsns = affectedAsns;
    return this;
  }

  public AaaFilters addAffectedAsnsItem(String affectedAsnsItem) {
    if (this.affectedAsns == null) {
      this.affectedAsns = new ArrayList<>();
    }
    this.affectedAsns.add(affectedAsnsItem);
    return this;
  }

   /**
   * Used for configuring radar_notification
   * @return affectedAsns
  **/
  @javax.annotation.Nullable
  public List<String> getAffectedAsns() {
    return affectedAsns;
  }

  public void setAffectedAsns(List<String> affectedAsns) {
    this.affectedAsns = affectedAsns;
  }


  public AaaFilters affectedComponents(List<String> affectedComponents) {
    this.affectedComponents = affectedComponents;
    return this;
  }

  public AaaFilters addAffectedComponentsItem(String affectedComponentsItem) {
    if (this.affectedComponents == null) {
      this.affectedComponents = new ArrayList<>();
    }
    this.affectedComponents.add(affectedComponentsItem);
    return this;
  }

   /**
   * Used for configuring incident_alert. A list of identifiers for each component to monitor.
   * @return affectedComponents
  **/
  @javax.annotation.Nullable
  public List<String> getAffectedComponents() {
    return affectedComponents;
  }

  public void setAffectedComponents(List<String> affectedComponents) {
    this.affectedComponents = affectedComponents;
  }


  public AaaFilters affectedLocations(List<String> affectedLocations) {
    this.affectedLocations = affectedLocations;
    return this;
  }

  public AaaFilters addAffectedLocationsItem(String affectedLocationsItem) {
    if (this.affectedLocations == null) {
      this.affectedLocations = new ArrayList<>();
    }
    this.affectedLocations.add(affectedLocationsItem);
    return this;
  }

   /**
   * Used for configuring radar_notification
   * @return affectedLocations
  **/
  @javax.annotation.Nullable
  public List<String> getAffectedLocations() {
    return affectedLocations;
  }

  public void setAffectedLocations(List<String> affectedLocations) {
    this.affectedLocations = affectedLocations;
  }


  public AaaFilters airportCode(List<String> airportCode) {
    this.airportCode = airportCode;
    return this;
  }

  public AaaFilters addAirportCodeItem(String airportCodeItem) {
    if (this.airportCode == null) {
      this.airportCode = new ArrayList<>();
    }
    this.airportCode.add(airportCodeItem);
    return this;
  }

   /**
   * Used for configuring maintenance_event_notification
   * @return airportCode
  **/
  @javax.annotation.Nullable
  public List<String> getAirportCode() {
    return airportCode;
  }

  public void setAirportCode(List<String> airportCode) {
    this.airportCode = airportCode;
  }


  public AaaFilters alertTriggerPreferences(List<String> alertTriggerPreferences) {
    this.alertTriggerPreferences = alertTriggerPreferences;
    return this;
  }

  public AaaFilters addAlertTriggerPreferencesItem(String alertTriggerPreferencesItem) {
    if (this.alertTriggerPreferences == null) {
      this.alertTriggerPreferences = new ArrayList<>();
    }
    this.alertTriggerPreferences.add(alertTriggerPreferencesItem);
    return this;
  }

   /**
   * Usage depends on specific alert type
   * @return alertTriggerPreferences
  **/
  @javax.annotation.Nullable
  public List<String> getAlertTriggerPreferences() {
    return alertTriggerPreferences;
  }

  public void setAlertTriggerPreferences(List<String> alertTriggerPreferences) {
    this.alertTriggerPreferences = alertTriggerPreferences;
  }


  public AaaFilters alertTriggerPreferencesValue(List<AlertTriggerPreferencesValueEnum> alertTriggerPreferencesValue) {
    this.alertTriggerPreferencesValue = alertTriggerPreferencesValue;
    return this;
  }

  public AaaFilters addAlertTriggerPreferencesValueItem(AlertTriggerPreferencesValueEnum alertTriggerPreferencesValueItem) {
    if (this.alertTriggerPreferencesValue == null) {
      this.alertTriggerPreferencesValue = new ArrayList<>();
    }
    this.alertTriggerPreferencesValue.add(alertTriggerPreferencesValueItem);
    return this;
  }

   /**
   * Used for configuring magic_tunnel_health_check_event
   * @return alertTriggerPreferencesValue
  **/
  @javax.annotation.Nullable
  public List<AlertTriggerPreferencesValueEnum> getAlertTriggerPreferencesValue() {
    return alertTriggerPreferencesValue;
  }

  public void setAlertTriggerPreferencesValue(List<AlertTriggerPreferencesValueEnum> alertTriggerPreferencesValue) {
    this.alertTriggerPreferencesValue = alertTriggerPreferencesValue;
  }


  public AaaFilters enabled(List<String> enabled) {
    this.enabled = enabled;
    return this;
  }

  public AaaFilters addEnabledItem(String enabledItem) {
    if (this.enabled == null) {
      this.enabled = new ArrayList<>();
    }
    this.enabled.add(enabledItem);
    return this;
  }

   /**
   * Used for configuring load_balancing_pool_enablement_alert
   * @return enabled
  **/
  @javax.annotation.Nullable
  public List<String> getEnabled() {
    return enabled;
  }

  public void setEnabled(List<String> enabled) {
    this.enabled = enabled;
  }


  public AaaFilters environment(List<String> environment) {
    this.environment = environment;
    return this;
  }

  public AaaFilters addEnvironmentItem(String environmentItem) {
    if (this.environment == null) {
      this.environment = new ArrayList<>();
    }
    this.environment.add(environmentItem);
    return this;
  }

   /**
   * Used for configuring pages_event_alert
   * @return environment
  **/
  @javax.annotation.Nullable
  public List<String> getEnvironment() {
    return environment;
  }

  public void setEnvironment(List<String> environment) {
    this.environment = environment;
  }


  public AaaFilters event(List<String> event) {
    this.event = event;
    return this;
  }

  public AaaFilters addEventItem(String eventItem) {
    if (this.event == null) {
      this.event = new ArrayList<>();
    }
    this.event.add(eventItem);
    return this;
  }

   /**
   * Used for configuring pages_event_alert
   * @return event
  **/
  @javax.annotation.Nullable
  public List<String> getEvent() {
    return event;
  }

  public void setEvent(List<String> event) {
    this.event = event;
  }


  public AaaFilters eventSource(List<String> eventSource) {
    this.eventSource = eventSource;
    return this;
  }

  public AaaFilters addEventSourceItem(String eventSourceItem) {
    if (this.eventSource == null) {
      this.eventSource = new ArrayList<>();
    }
    this.eventSource.add(eventSourceItem);
    return this;
  }

   /**
   * Used for configuring load_balancing_health_alert
   * @return eventSource
  **/
  @javax.annotation.Nullable
  public List<String> getEventSource() {
    return eventSource;
  }

  public void setEventSource(List<String> eventSource) {
    this.eventSource = eventSource;
  }


  public AaaFilters eventType(List<String> eventType) {
    this.eventType = eventType;
    return this;
  }

  public AaaFilters addEventTypeItem(String eventTypeItem) {
    if (this.eventType == null) {
      this.eventType = new ArrayList<>();
    }
    this.eventType.add(eventTypeItem);
    return this;
  }

   /**
   * Usage depends on specific alert type
   * @return eventType
  **/
  @javax.annotation.Nullable
  public List<String> getEventType() {
    return eventType;
  }

  public void setEventType(List<String> eventType) {
    this.eventType = eventType;
  }


  public AaaFilters groupBy(List<String> groupBy) {
    this.groupBy = groupBy;
    return this;
  }

  public AaaFilters addGroupByItem(String groupByItem) {
    if (this.groupBy == null) {
      this.groupBy = new ArrayList<>();
    }
    this.groupBy.add(groupByItem);
    return this;
  }

   /**
   * Usage depends on specific alert type
   * @return groupBy
  **/
  @javax.annotation.Nullable
  public List<String> getGroupBy() {
    return groupBy;
  }

  public void setGroupBy(List<String> groupBy) {
    this.groupBy = groupBy;
  }


  public AaaFilters healthCheckId(List<String> healthCheckId) {
    this.healthCheckId = healthCheckId;
    return this;
  }

  public AaaFilters addHealthCheckIdItem(String healthCheckIdItem) {
    if (this.healthCheckId == null) {
      this.healthCheckId = new ArrayList<>();
    }
    this.healthCheckId.add(healthCheckIdItem);
    return this;
  }

   /**
   * Used for configuring health_check_status_notification
   * @return healthCheckId
  **/
  @javax.annotation.Nullable
  public List<String> getHealthCheckId() {
    return healthCheckId;
  }

  public void setHealthCheckId(List<String> healthCheckId) {
    this.healthCheckId = healthCheckId;
  }


  public AaaFilters incidentImpact(List<IncidentImpactEnum> incidentImpact) {
    this.incidentImpact = incidentImpact;
    return this;
  }

  public AaaFilters addIncidentImpactItem(IncidentImpactEnum incidentImpactItem) {
    if (this.incidentImpact == null) {
      this.incidentImpact = new ArrayList<>();
    }
    this.incidentImpact.add(incidentImpactItem);
    return this;
  }

   /**
   * Used for configuring incident_alert
   * @return incidentImpact
  **/
  @javax.annotation.Nullable
  public List<IncidentImpactEnum> getIncidentImpact() {
    return incidentImpact;
  }

  public void setIncidentImpact(List<IncidentImpactEnum> incidentImpact) {
    this.incidentImpact = incidentImpact;
  }


  public AaaFilters inputId(List<String> inputId) {
    this.inputId = inputId;
    return this;
  }

  public AaaFilters addInputIdItem(String inputIdItem) {
    if (this.inputId == null) {
      this.inputId = new ArrayList<>();
    }
    this.inputId.add(inputIdItem);
    return this;
  }

   /**
   * Used for configuring stream_live_notifications
   * @return inputId
  **/
  @javax.annotation.Nullable
  public List<String> getInputId() {
    return inputId;
  }

  public void setInputId(List<String> inputId) {
    this.inputId = inputId;
  }


  public AaaFilters limit(List<String> limit) {
    this.limit = limit;
    return this;
  }

  public AaaFilters addLimitItem(String limitItem) {
    if (this.limit == null) {
      this.limit = new ArrayList<>();
    }
    this.limit.add(limitItem);
    return this;
  }

   /**
   * Used for configuring billing_usage_alert
   * @return limit
  **/
  @javax.annotation.Nullable
  public List<String> getLimit() {
    return limit;
  }

  public void setLimit(List<String> limit) {
    this.limit = limit;
  }


  public AaaFilters logoTag(List<String> logoTag) {
    this.logoTag = logoTag;
    return this;
  }

  public AaaFilters addLogoTagItem(String logoTagItem) {
    if (this.logoTag == null) {
      this.logoTag = new ArrayList<>();
    }
    this.logoTag.add(logoTagItem);
    return this;
  }

   /**
   * Used for configuring logo_match_alert
   * @return logoTag
  **/
  @javax.annotation.Nullable
  public List<String> getLogoTag() {
    return logoTag;
  }

  public void setLogoTag(List<String> logoTag) {
    this.logoTag = logoTag;
  }


  public AaaFilters megabitsPerSecond(List<String> megabitsPerSecond) {
    this.megabitsPerSecond = megabitsPerSecond;
    return this;
  }

  public AaaFilters addMegabitsPerSecondItem(String megabitsPerSecondItem) {
    if (this.megabitsPerSecond == null) {
      this.megabitsPerSecond = new ArrayList<>();
    }
    this.megabitsPerSecond.add(megabitsPerSecondItem);
    return this;
  }

   /**
   * Used for configuring advanced_ddos_attack_l4_alert
   * @return megabitsPerSecond
  **/
  @javax.annotation.Nullable
  public List<String> getMegabitsPerSecond() {
    return megabitsPerSecond;
  }

  public void setMegabitsPerSecond(List<String> megabitsPerSecond) {
    this.megabitsPerSecond = megabitsPerSecond;
  }


  public AaaFilters newHealth(List<String> newHealth) {
    this.newHealth = newHealth;
    return this;
  }

  public AaaFilters addNewHealthItem(String newHealthItem) {
    if (this.newHealth == null) {
      this.newHealth = new ArrayList<>();
    }
    this.newHealth.add(newHealthItem);
    return this;
  }

   /**
   * Used for configuring load_balancing_health_alert
   * @return newHealth
  **/
  @javax.annotation.Nullable
  public List<String> getNewHealth() {
    return newHealth;
  }

  public void setNewHealth(List<String> newHealth) {
    this.newHealth = newHealth;
  }


  public AaaFilters newStatus(List<String> newStatus) {
    this.newStatus = newStatus;
    return this;
  }

  public AaaFilters addNewStatusItem(String newStatusItem) {
    if (this.newStatus == null) {
      this.newStatus = new ArrayList<>();
    }
    this.newStatus.add(newStatusItem);
    return this;
  }

   /**
   * Used for configuring tunnel_health_event
   * @return newStatus
  **/
  @javax.annotation.Nullable
  public List<String> getNewStatus() {
    return newStatus;
  }

  public void setNewStatus(List<String> newStatus) {
    this.newStatus = newStatus;
  }


  public AaaFilters packetsPerSecond(List<String> packetsPerSecond) {
    this.packetsPerSecond = packetsPerSecond;
    return this;
  }

  public AaaFilters addPacketsPerSecondItem(String packetsPerSecondItem) {
    if (this.packetsPerSecond == null) {
      this.packetsPerSecond = new ArrayList<>();
    }
    this.packetsPerSecond.add(packetsPerSecondItem);
    return this;
  }

   /**
   * Used for configuring advanced_ddos_attack_l4_alert
   * @return packetsPerSecond
  **/
  @javax.annotation.Nullable
  public List<String> getPacketsPerSecond() {
    return packetsPerSecond;
  }

  public void setPacketsPerSecond(List<String> packetsPerSecond) {
    this.packetsPerSecond = packetsPerSecond;
  }


  public AaaFilters poolId(List<String> poolId) {
    this.poolId = poolId;
    return this;
  }

  public AaaFilters addPoolIdItem(String poolIdItem) {
    if (this.poolId == null) {
      this.poolId = new ArrayList<>();
    }
    this.poolId.add(poolIdItem);
    return this;
  }

   /**
   * Usage depends on specific alert type
   * @return poolId
  **/
  @javax.annotation.Nullable
  public List<String> getPoolId() {
    return poolId;
  }

  public void setPoolId(List<String> poolId) {
    this.poolId = poolId;
  }


  public AaaFilters product(List<String> product) {
    this.product = product;
    return this;
  }

  public AaaFilters addProductItem(String productItem) {
    if (this.product == null) {
      this.product = new ArrayList<>();
    }
    this.product.add(productItem);
    return this;
  }

   /**
   * Used for configuring billing_usage_alert
   * @return product
  **/
  @javax.annotation.Nullable
  public List<String> getProduct() {
    return product;
  }

  public void setProduct(List<String> product) {
    this.product = product;
  }


  public AaaFilters projectId(List<String> projectId) {
    this.projectId = projectId;
    return this;
  }

  public AaaFilters addProjectIdItem(String projectIdItem) {
    if (this.projectId == null) {
      this.projectId = new ArrayList<>();
    }
    this.projectId.add(projectIdItem);
    return this;
  }

   /**
   * Used for configuring pages_event_alert
   * @return projectId
  **/
  @javax.annotation.Nullable
  public List<String> getProjectId() {
    return projectId;
  }

  public void setProjectId(List<String> projectId) {
    this.projectId = projectId;
  }


  public AaaFilters protocol(List<String> protocol) {
    this.protocol = protocol;
    return this;
  }

  public AaaFilters addProtocolItem(String protocolItem) {
    if (this.protocol == null) {
      this.protocol = new ArrayList<>();
    }
    this.protocol.add(protocolItem);
    return this;
  }

   /**
   * Used for configuring advanced_ddos_attack_l4_alert
   * @return protocol
  **/
  @javax.annotation.Nullable
  public List<String> getProtocol() {
    return protocol;
  }

  public void setProtocol(List<String> protocol) {
    this.protocol = protocol;
  }


  public AaaFilters queryTag(List<String> queryTag) {
    this.queryTag = queryTag;
    return this;
  }

  public AaaFilters addQueryTagItem(String queryTagItem) {
    if (this.queryTag == null) {
      this.queryTag = new ArrayList<>();
    }
    this.queryTag.add(queryTagItem);
    return this;
  }

   /**
   * Usage depends on specific alert type
   * @return queryTag
  **/
  @javax.annotation.Nullable
  public List<String> getQueryTag() {
    return queryTag;
  }

  public void setQueryTag(List<String> queryTag) {
    this.queryTag = queryTag;
  }


  public AaaFilters requestsPerSecond(List<String> requestsPerSecond) {
    this.requestsPerSecond = requestsPerSecond;
    return this;
  }

  public AaaFilters addRequestsPerSecondItem(String requestsPerSecondItem) {
    if (this.requestsPerSecond == null) {
      this.requestsPerSecond = new ArrayList<>();
    }
    this.requestsPerSecond.add(requestsPerSecondItem);
    return this;
  }

   /**
   * Used for configuring advanced_ddos_attack_l7_alert
   * @return requestsPerSecond
  **/
  @javax.annotation.Nullable
  public List<String> getRequestsPerSecond() {
    return requestsPerSecond;
  }

  public void setRequestsPerSecond(List<String> requestsPerSecond) {
    this.requestsPerSecond = requestsPerSecond;
  }


  public AaaFilters selectors(List<String> selectors) {
    this.selectors = selectors;
    return this;
  }

  public AaaFilters addSelectorsItem(String selectorsItem) {
    if (this.selectors == null) {
      this.selectors = new ArrayList<>();
    }
    this.selectors.add(selectorsItem);
    return this;
  }

   /**
   * Usage depends on specific alert type
   * @return selectors
  **/
  @javax.annotation.Nullable
  public List<String> getSelectors() {
    return selectors;
  }

  public void setSelectors(List<String> selectors) {
    this.selectors = selectors;
  }


  public AaaFilters services(List<String> services) {
    this.services = services;
    return this;
  }

  public AaaFilters addServicesItem(String servicesItem) {
    if (this.services == null) {
      this.services = new ArrayList<>();
    }
    this.services.add(servicesItem);
    return this;
  }

   /**
   * Used for configuring clickhouse_alert_fw_ent_anomaly
   * @return services
  **/
  @javax.annotation.Nullable
  public List<String> getServices() {
    return services;
  }

  public void setServices(List<String> services) {
    this.services = services;
  }


  public AaaFilters slo(List<String> slo) {
    this.slo = slo;
    return this;
  }

  public AaaFilters addSloItem(String sloItem) {
    if (this.slo == null) {
      this.slo = new ArrayList<>();
    }
    this.slo.add(sloItem);
    return this;
  }

   /**
   * Usage depends on specific alert type
   * @return slo
  **/
  @javax.annotation.Nullable
  public List<String> getSlo() {
    return slo;
  }

  public void setSlo(List<String> slo) {
    this.slo = slo;
  }


  public AaaFilters status(List<String> status) {
    this.status = status;
    return this;
  }

  public AaaFilters addStatusItem(String statusItem) {
    if (this.status == null) {
      this.status = new ArrayList<>();
    }
    this.status.add(statusItem);
    return this;
  }

   /**
   * Used for configuring health_check_status_notification
   * @return status
  **/
  @javax.annotation.Nullable
  public List<String> getStatus() {
    return status;
  }

  public void setStatus(List<String> status) {
    this.status = status;
  }


  public AaaFilters targetHostname(List<String> targetHostname) {
    this.targetHostname = targetHostname;
    return this;
  }

  public AaaFilters addTargetHostnameItem(String targetHostnameItem) {
    if (this.targetHostname == null) {
      this.targetHostname = new ArrayList<>();
    }
    this.targetHostname.add(targetHostnameItem);
    return this;
  }

   /**
   * Used for configuring advanced_ddos_attack_l7_alert
   * @return targetHostname
  **/
  @javax.annotation.Nullable
  public List<String> getTargetHostname() {
    return targetHostname;
  }

  public void setTargetHostname(List<String> targetHostname) {
    this.targetHostname = targetHostname;
  }


  public AaaFilters targetIp(List<String> targetIp) {
    this.targetIp = targetIp;
    return this;
  }

  public AaaFilters addTargetIpItem(String targetIpItem) {
    if (this.targetIp == null) {
      this.targetIp = new ArrayList<>();
    }
    this.targetIp.add(targetIpItem);
    return this;
  }

   /**
   * Used for configuring advanced_ddos_attack_l4_alert
   * @return targetIp
  **/
  @javax.annotation.Nullable
  public List<String> getTargetIp() {
    return targetIp;
  }

  public void setTargetIp(List<String> targetIp) {
    this.targetIp = targetIp;
  }


  public AaaFilters targetZoneName(List<String> targetZoneName) {
    this.targetZoneName = targetZoneName;
    return this;
  }

  public AaaFilters addTargetZoneNameItem(String targetZoneNameItem) {
    if (this.targetZoneName == null) {
      this.targetZoneName = new ArrayList<>();
    }
    this.targetZoneName.add(targetZoneNameItem);
    return this;
  }

   /**
   * Used for configuring advanced_ddos_attack_l7_alert
   * @return targetZoneName
  **/
  @javax.annotation.Nullable
  public List<String> getTargetZoneName() {
    return targetZoneName;
  }

  public void setTargetZoneName(List<String> targetZoneName) {
    this.targetZoneName = targetZoneName;
  }


  public AaaFilters trafficExclusions(List<TrafficExclusionsEnum> trafficExclusions) {
    this.trafficExclusions = trafficExclusions;
    return this;
  }

  public AaaFilters addTrafficExclusionsItem(TrafficExclusionsEnum trafficExclusionsItem) {
    if (this.trafficExclusions == null) {
      this.trafficExclusions = new ArrayList<>();
    }
    this.trafficExclusions.add(trafficExclusionsItem);
    return this;
  }

   /**
   * Used for configuring traffic_anomalies_alert
   * @return trafficExclusions
  **/
  @javax.annotation.Nullable
  public List<TrafficExclusionsEnum> getTrafficExclusions() {
    return trafficExclusions;
  }

  public void setTrafficExclusions(List<TrafficExclusionsEnum> trafficExclusions) {
    this.trafficExclusions = trafficExclusions;
  }


  public AaaFilters tunnelId(List<String> tunnelId) {
    this.tunnelId = tunnelId;
    return this;
  }

  public AaaFilters addTunnelIdItem(String tunnelIdItem) {
    if (this.tunnelId == null) {
      this.tunnelId = new ArrayList<>();
    }
    this.tunnelId.add(tunnelIdItem);
    return this;
  }

   /**
   * Used for configuring tunnel_health_event
   * @return tunnelId
  **/
  @javax.annotation.Nullable
  public List<String> getTunnelId() {
    return tunnelId;
  }

  public void setTunnelId(List<String> tunnelId) {
    this.tunnelId = tunnelId;
  }


  public AaaFilters tunnelName(List<String> tunnelName) {
    this.tunnelName = tunnelName;
    return this;
  }

  public AaaFilters addTunnelNameItem(String tunnelNameItem) {
    if (this.tunnelName == null) {
      this.tunnelName = new ArrayList<>();
    }
    this.tunnelName.add(tunnelNameItem);
    return this;
  }

   /**
   * Used for configuring magic_tunnel_health_check_event
   * @return tunnelName
  **/
  @javax.annotation.Nullable
  public List<String> getTunnelName() {
    return tunnelName;
  }

  public void setTunnelName(List<String> tunnelName) {
    this.tunnelName = tunnelName;
  }


  public AaaFilters where(List<String> where) {
    this.where = where;
    return this;
  }

  public AaaFilters addWhereItem(String whereItem) {
    if (this.where == null) {
      this.where = new ArrayList<>();
    }
    this.where.add(whereItem);
    return this;
  }

   /**
   * Usage depends on specific alert type
   * @return where
  **/
  @javax.annotation.Nullable
  public List<String> getWhere() {
    return where;
  }

  public void setWhere(List<String> where) {
    this.where = where;
  }


  public AaaFilters zones(List<String> zones) {
    this.zones = zones;
    return this;
  }

  public AaaFilters addZonesItem(String zonesItem) {
    if (this.zones == null) {
      this.zones = new ArrayList<>();
    }
    this.zones.add(zonesItem);
    return this;
  }

   /**
   * Usage depends on specific alert type
   * @return zones
  **/
  @javax.annotation.Nullable
  public List<String> getZones() {
    return zones;
  }

  public void setZones(List<String> zones) {
    this.zones = zones;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AaaFilters aaaFilters = (AaaFilters) o;
    return Objects.equals(this.actions, aaaFilters.actions) &&
        Objects.equals(this.affectedAsns, aaaFilters.affectedAsns) &&
        Objects.equals(this.affectedComponents, aaaFilters.affectedComponents) &&
        Objects.equals(this.affectedLocations, aaaFilters.affectedLocations) &&
        Objects.equals(this.airportCode, aaaFilters.airportCode) &&
        Objects.equals(this.alertTriggerPreferences, aaaFilters.alertTriggerPreferences) &&
        Objects.equals(this.alertTriggerPreferencesValue, aaaFilters.alertTriggerPreferencesValue) &&
        Objects.equals(this.enabled, aaaFilters.enabled) &&
        Objects.equals(this.environment, aaaFilters.environment) &&
        Objects.equals(this.event, aaaFilters.event) &&
        Objects.equals(this.eventSource, aaaFilters.eventSource) &&
        Objects.equals(this.eventType, aaaFilters.eventType) &&
        Objects.equals(this.groupBy, aaaFilters.groupBy) &&
        Objects.equals(this.healthCheckId, aaaFilters.healthCheckId) &&
        Objects.equals(this.incidentImpact, aaaFilters.incidentImpact) &&
        Objects.equals(this.inputId, aaaFilters.inputId) &&
        Objects.equals(this.limit, aaaFilters.limit) &&
        Objects.equals(this.logoTag, aaaFilters.logoTag) &&
        Objects.equals(this.megabitsPerSecond, aaaFilters.megabitsPerSecond) &&
        Objects.equals(this.newHealth, aaaFilters.newHealth) &&
        Objects.equals(this.newStatus, aaaFilters.newStatus) &&
        Objects.equals(this.packetsPerSecond, aaaFilters.packetsPerSecond) &&
        Objects.equals(this.poolId, aaaFilters.poolId) &&
        Objects.equals(this.product, aaaFilters.product) &&
        Objects.equals(this.projectId, aaaFilters.projectId) &&
        Objects.equals(this.protocol, aaaFilters.protocol) &&
        Objects.equals(this.queryTag, aaaFilters.queryTag) &&
        Objects.equals(this.requestsPerSecond, aaaFilters.requestsPerSecond) &&
        Objects.equals(this.selectors, aaaFilters.selectors) &&
        Objects.equals(this.services, aaaFilters.services) &&
        Objects.equals(this.slo, aaaFilters.slo) &&
        Objects.equals(this.status, aaaFilters.status) &&
        Objects.equals(this.targetHostname, aaaFilters.targetHostname) &&
        Objects.equals(this.targetIp, aaaFilters.targetIp) &&
        Objects.equals(this.targetZoneName, aaaFilters.targetZoneName) &&
        Objects.equals(this.trafficExclusions, aaaFilters.trafficExclusions) &&
        Objects.equals(this.tunnelId, aaaFilters.tunnelId) &&
        Objects.equals(this.tunnelName, aaaFilters.tunnelName) &&
        Objects.equals(this.where, aaaFilters.where) &&
        Objects.equals(this.zones, aaaFilters.zones);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actions, affectedAsns, affectedComponents, affectedLocations, airportCode, alertTriggerPreferences, alertTriggerPreferencesValue, enabled, environment, event, eventSource, eventType, groupBy, healthCheckId, incidentImpact, inputId, limit, logoTag, megabitsPerSecond, newHealth, newStatus, packetsPerSecond, poolId, product, projectId, protocol, queryTag, requestsPerSecond, selectors, services, slo, status, targetHostname, targetIp, targetZoneName, trafficExclusions, tunnelId, tunnelName, where, zones);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AaaFilters {\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    affectedAsns: ").append(toIndentedString(affectedAsns)).append("\n");
    sb.append("    affectedComponents: ").append(toIndentedString(affectedComponents)).append("\n");
    sb.append("    affectedLocations: ").append(toIndentedString(affectedLocations)).append("\n");
    sb.append("    airportCode: ").append(toIndentedString(airportCode)).append("\n");
    sb.append("    alertTriggerPreferences: ").append(toIndentedString(alertTriggerPreferences)).append("\n");
    sb.append("    alertTriggerPreferencesValue: ").append(toIndentedString(alertTriggerPreferencesValue)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("    eventSource: ").append(toIndentedString(eventSource)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    groupBy: ").append(toIndentedString(groupBy)).append("\n");
    sb.append("    healthCheckId: ").append(toIndentedString(healthCheckId)).append("\n");
    sb.append("    incidentImpact: ").append(toIndentedString(incidentImpact)).append("\n");
    sb.append("    inputId: ").append(toIndentedString(inputId)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    logoTag: ").append(toIndentedString(logoTag)).append("\n");
    sb.append("    megabitsPerSecond: ").append(toIndentedString(megabitsPerSecond)).append("\n");
    sb.append("    newHealth: ").append(toIndentedString(newHealth)).append("\n");
    sb.append("    newStatus: ").append(toIndentedString(newStatus)).append("\n");
    sb.append("    packetsPerSecond: ").append(toIndentedString(packetsPerSecond)).append("\n");
    sb.append("    poolId: ").append(toIndentedString(poolId)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    queryTag: ").append(toIndentedString(queryTag)).append("\n");
    sb.append("    requestsPerSecond: ").append(toIndentedString(requestsPerSecond)).append("\n");
    sb.append("    selectors: ").append(toIndentedString(selectors)).append("\n");
    sb.append("    services: ").append(toIndentedString(services)).append("\n");
    sb.append("    slo: ").append(toIndentedString(slo)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    targetHostname: ").append(toIndentedString(targetHostname)).append("\n");
    sb.append("    targetIp: ").append(toIndentedString(targetIp)).append("\n");
    sb.append("    targetZoneName: ").append(toIndentedString(targetZoneName)).append("\n");
    sb.append("    trafficExclusions: ").append(toIndentedString(trafficExclusions)).append("\n");
    sb.append("    tunnelId: ").append(toIndentedString(tunnelId)).append("\n");
    sb.append("    tunnelName: ").append(toIndentedString(tunnelName)).append("\n");
    sb.append("    where: ").append(toIndentedString(where)).append("\n");
    sb.append("    zones: ").append(toIndentedString(zones)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actions");
    openapiFields.add("affected_asns");
    openapiFields.add("affected_components");
    openapiFields.add("affected_locations");
    openapiFields.add("airport_code");
    openapiFields.add("alert_trigger_preferences");
    openapiFields.add("alert_trigger_preferences_value");
    openapiFields.add("enabled");
    openapiFields.add("environment");
    openapiFields.add("event");
    openapiFields.add("event_source");
    openapiFields.add("event_type");
    openapiFields.add("group_by");
    openapiFields.add("health_check_id");
    openapiFields.add("incident_impact");
    openapiFields.add("input_id");
    openapiFields.add("limit");
    openapiFields.add("logo_tag");
    openapiFields.add("megabits_per_second");
    openapiFields.add("new_health");
    openapiFields.add("new_status");
    openapiFields.add("packets_per_second");
    openapiFields.add("pool_id");
    openapiFields.add("product");
    openapiFields.add("project_id");
    openapiFields.add("protocol");
    openapiFields.add("query_tag");
    openapiFields.add("requests_per_second");
    openapiFields.add("selectors");
    openapiFields.add("services");
    openapiFields.add("slo");
    openapiFields.add("status");
    openapiFields.add("target_hostname");
    openapiFields.add("target_ip");
    openapiFields.add("target_zone_name");
    openapiFields.add("traffic_exclusions");
    openapiFields.add("tunnel_id");
    openapiFields.add("tunnel_name");
    openapiFields.add("where");
    openapiFields.add("zones");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AaaFilters
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AaaFilters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AaaFilters is not found in the empty JSON string", AaaFilters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AaaFilters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AaaFilters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("actions") != null && !jsonObj.get("actions").isJsonNull() && !jsonObj.get("actions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `actions` to be an array in the JSON string but got `%s`", jsonObj.get("actions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("affected_asns") != null && !jsonObj.get("affected_asns").isJsonNull() && !jsonObj.get("affected_asns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `affected_asns` to be an array in the JSON string but got `%s`", jsonObj.get("affected_asns").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("affected_components") != null && !jsonObj.get("affected_components").isJsonNull() && !jsonObj.get("affected_components").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `affected_components` to be an array in the JSON string but got `%s`", jsonObj.get("affected_components").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("affected_locations") != null && !jsonObj.get("affected_locations").isJsonNull() && !jsonObj.get("affected_locations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `affected_locations` to be an array in the JSON string but got `%s`", jsonObj.get("affected_locations").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("airport_code") != null && !jsonObj.get("airport_code").isJsonNull() && !jsonObj.get("airport_code").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `airport_code` to be an array in the JSON string but got `%s`", jsonObj.get("airport_code").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("alert_trigger_preferences") != null && !jsonObj.get("alert_trigger_preferences").isJsonNull() && !jsonObj.get("alert_trigger_preferences").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `alert_trigger_preferences` to be an array in the JSON string but got `%s`", jsonObj.get("alert_trigger_preferences").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("alert_trigger_preferences_value") != null && !jsonObj.get("alert_trigger_preferences_value").isJsonNull() && !jsonObj.get("alert_trigger_preferences_value").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `alert_trigger_preferences_value` to be an array in the JSON string but got `%s`", jsonObj.get("alert_trigger_preferences_value").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("enabled") != null && !jsonObj.get("enabled").isJsonNull() && !jsonObj.get("enabled").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `enabled` to be an array in the JSON string but got `%s`", jsonObj.get("enabled").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("environment") != null && !jsonObj.get("environment").isJsonNull() && !jsonObj.get("environment").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `environment` to be an array in the JSON string but got `%s`", jsonObj.get("environment").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("event") != null && !jsonObj.get("event").isJsonNull() && !jsonObj.get("event").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `event` to be an array in the JSON string but got `%s`", jsonObj.get("event").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("event_source") != null && !jsonObj.get("event_source").isJsonNull() && !jsonObj.get("event_source").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_source` to be an array in the JSON string but got `%s`", jsonObj.get("event_source").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("event_type") != null && !jsonObj.get("event_type").isJsonNull() && !jsonObj.get("event_type").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_type` to be an array in the JSON string but got `%s`", jsonObj.get("event_type").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("group_by") != null && !jsonObj.get("group_by").isJsonNull() && !jsonObj.get("group_by").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `group_by` to be an array in the JSON string but got `%s`", jsonObj.get("group_by").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("health_check_id") != null && !jsonObj.get("health_check_id").isJsonNull() && !jsonObj.get("health_check_id").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `health_check_id` to be an array in the JSON string but got `%s`", jsonObj.get("health_check_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("incident_impact") != null && !jsonObj.get("incident_impact").isJsonNull() && !jsonObj.get("incident_impact").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `incident_impact` to be an array in the JSON string but got `%s`", jsonObj.get("incident_impact").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("input_id") != null && !jsonObj.get("input_id").isJsonNull() && !jsonObj.get("input_id").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `input_id` to be an array in the JSON string but got `%s`", jsonObj.get("input_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("limit") != null && !jsonObj.get("limit").isJsonNull() && !jsonObj.get("limit").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `limit` to be an array in the JSON string but got `%s`", jsonObj.get("limit").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("logo_tag") != null && !jsonObj.get("logo_tag").isJsonNull() && !jsonObj.get("logo_tag").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `logo_tag` to be an array in the JSON string but got `%s`", jsonObj.get("logo_tag").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("megabits_per_second") != null && !jsonObj.get("megabits_per_second").isJsonNull() && !jsonObj.get("megabits_per_second").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `megabits_per_second` to be an array in the JSON string but got `%s`", jsonObj.get("megabits_per_second").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("new_health") != null && !jsonObj.get("new_health").isJsonNull() && !jsonObj.get("new_health").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `new_health` to be an array in the JSON string but got `%s`", jsonObj.get("new_health").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("new_status") != null && !jsonObj.get("new_status").isJsonNull() && !jsonObj.get("new_status").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `new_status` to be an array in the JSON string but got `%s`", jsonObj.get("new_status").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("packets_per_second") != null && !jsonObj.get("packets_per_second").isJsonNull() && !jsonObj.get("packets_per_second").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `packets_per_second` to be an array in the JSON string but got `%s`", jsonObj.get("packets_per_second").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pool_id") != null && !jsonObj.get("pool_id").isJsonNull() && !jsonObj.get("pool_id").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pool_id` to be an array in the JSON string but got `%s`", jsonObj.get("pool_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("product") != null && !jsonObj.get("product").isJsonNull() && !jsonObj.get("product").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `product` to be an array in the JSON string but got `%s`", jsonObj.get("product").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("project_id") != null && !jsonObj.get("project_id").isJsonNull() && !jsonObj.get("project_id").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `project_id` to be an array in the JSON string but got `%s`", jsonObj.get("project_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull() && !jsonObj.get("protocol").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be an array in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("query_tag") != null && !jsonObj.get("query_tag").isJsonNull() && !jsonObj.get("query_tag").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `query_tag` to be an array in the JSON string but got `%s`", jsonObj.get("query_tag").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("requests_per_second") != null && !jsonObj.get("requests_per_second").isJsonNull() && !jsonObj.get("requests_per_second").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `requests_per_second` to be an array in the JSON string but got `%s`", jsonObj.get("requests_per_second").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("selectors") != null && !jsonObj.get("selectors").isJsonNull() && !jsonObj.get("selectors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `selectors` to be an array in the JSON string but got `%s`", jsonObj.get("selectors").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("services") != null && !jsonObj.get("services").isJsonNull() && !jsonObj.get("services").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `services` to be an array in the JSON string but got `%s`", jsonObj.get("services").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("slo") != null && !jsonObj.get("slo").isJsonNull() && !jsonObj.get("slo").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `slo` to be an array in the JSON string but got `%s`", jsonObj.get("slo").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull() && !jsonObj.get("status").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be an array in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("target_hostname") != null && !jsonObj.get("target_hostname").isJsonNull() && !jsonObj.get("target_hostname").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_hostname` to be an array in the JSON string but got `%s`", jsonObj.get("target_hostname").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("target_ip") != null && !jsonObj.get("target_ip").isJsonNull() && !jsonObj.get("target_ip").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_ip` to be an array in the JSON string but got `%s`", jsonObj.get("target_ip").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("target_zone_name") != null && !jsonObj.get("target_zone_name").isJsonNull() && !jsonObj.get("target_zone_name").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_zone_name` to be an array in the JSON string but got `%s`", jsonObj.get("target_zone_name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("traffic_exclusions") != null && !jsonObj.get("traffic_exclusions").isJsonNull() && !jsonObj.get("traffic_exclusions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `traffic_exclusions` to be an array in the JSON string but got `%s`", jsonObj.get("traffic_exclusions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tunnel_id") != null && !jsonObj.get("tunnel_id").isJsonNull() && !jsonObj.get("tunnel_id").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tunnel_id` to be an array in the JSON string but got `%s`", jsonObj.get("tunnel_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tunnel_name") != null && !jsonObj.get("tunnel_name").isJsonNull() && !jsonObj.get("tunnel_name").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tunnel_name` to be an array in the JSON string but got `%s`", jsonObj.get("tunnel_name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("where") != null && !jsonObj.get("where").isJsonNull() && !jsonObj.get("where").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `where` to be an array in the JSON string but got `%s`", jsonObj.get("where").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("zones") != null && !jsonObj.get("zones").isJsonNull() && !jsonObj.get("zones").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `zones` to be an array in the JSON string but got `%s`", jsonObj.get("zones").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AaaFilters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AaaFilters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AaaFilters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AaaFilters.class));

       return (TypeAdapter<T>) new TypeAdapter<AaaFilters>() {
           @Override
           public void write(JsonWriter out, AaaFilters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AaaFilters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AaaFilters given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AaaFilters
  * @throws IOException if the JSON string is invalid with respect to AaaFilters
  */
  public static AaaFilters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AaaFilters.class);
  }

 /**
  * Convert an instance of AaaFilters to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

