/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * AccessKeyConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class AccessKeyConfig {
  public static final String SERIALIZED_NAME_DAYS_UNTIL_NEXT_ROTATION = "days_until_next_rotation";
  @SerializedName(SERIALIZED_NAME_DAYS_UNTIL_NEXT_ROTATION)
  private BigDecimal daysUntilNextRotation;

  public static final String SERIALIZED_NAME_KEY_ROTATION_INTERVAL_DAYS = "key_rotation_interval_days";
  @SerializedName(SERIALIZED_NAME_KEY_ROTATION_INTERVAL_DAYS)
  private BigDecimal keyRotationIntervalDays;

  public static final String SERIALIZED_NAME_LAST_KEY_ROTATION_AT = "last_key_rotation_at";
  @SerializedName(SERIALIZED_NAME_LAST_KEY_ROTATION_AT)
  private OffsetDateTime lastKeyRotationAt;

  public AccessKeyConfig() {
  }

  public AccessKeyConfig(
     BigDecimal daysUntilNextRotation
  ) {
    this();
    this.daysUntilNextRotation = daysUntilNextRotation;
  }

   /**
   * The number of days until the next key rotation.
   * @return daysUntilNextRotation
  **/
  @javax.annotation.Nullable
  public BigDecimal getDaysUntilNextRotation() {
    return daysUntilNextRotation;
  }



  public AccessKeyConfig keyRotationIntervalDays(BigDecimal keyRotationIntervalDays) {
    this.keyRotationIntervalDays = keyRotationIntervalDays;
    return this;
  }

   /**
   * The number of days between key rotations.
   * minimum: 21
   * maximum: 365
   * @return keyRotationIntervalDays
  **/
  @javax.annotation.Nullable
  public BigDecimal getKeyRotationIntervalDays() {
    return keyRotationIntervalDays;
  }

  public void setKeyRotationIntervalDays(BigDecimal keyRotationIntervalDays) {
    this.keyRotationIntervalDays = keyRotationIntervalDays;
  }


  public AccessKeyConfig lastKeyRotationAt(OffsetDateTime lastKeyRotationAt) {
    this.lastKeyRotationAt = lastKeyRotationAt;
    return this;
  }

   /**
   * The timestamp of the previous key rotation.
   * @return lastKeyRotationAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getLastKeyRotationAt() {
    return lastKeyRotationAt;
  }

  public void setLastKeyRotationAt(OffsetDateTime lastKeyRotationAt) {
    this.lastKeyRotationAt = lastKeyRotationAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccessKeyConfig accessKeyConfig = (AccessKeyConfig) o;
    return Objects.equals(this.daysUntilNextRotation, accessKeyConfig.daysUntilNextRotation) &&
        Objects.equals(this.keyRotationIntervalDays, accessKeyConfig.keyRotationIntervalDays) &&
        Objects.equals(this.lastKeyRotationAt, accessKeyConfig.lastKeyRotationAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(daysUntilNextRotation, keyRotationIntervalDays, lastKeyRotationAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccessKeyConfig {\n");
    sb.append("    daysUntilNextRotation: ").append(toIndentedString(daysUntilNextRotation)).append("\n");
    sb.append("    keyRotationIntervalDays: ").append(toIndentedString(keyRotationIntervalDays)).append("\n");
    sb.append("    lastKeyRotationAt: ").append(toIndentedString(lastKeyRotationAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("days_until_next_rotation");
    openapiFields.add("key_rotation_interval_days");
    openapiFields.add("last_key_rotation_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AccessKeyConfig
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccessKeyConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccessKeyConfig is not found in the empty JSON string", AccessKeyConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccessKeyConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccessKeyConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccessKeyConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccessKeyConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccessKeyConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccessKeyConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<AccessKeyConfig>() {
           @Override
           public void write(JsonWriter out, AccessKeyConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccessKeyConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AccessKeyConfig given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AccessKeyConfig
  * @throws IOException if the JSON string is invalid with respect to AccessKeyConfig
  */
  public static AccessKeyConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccessKeyConfig.class);
  }

 /**
  * Convert an instance of AccessKeyConfig to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

