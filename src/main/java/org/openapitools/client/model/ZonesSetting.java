/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Zones0rtt;
import org.openapitools.client.model.ZonesAdvancedDdos;
import org.openapitools.client.model.ZonesAlwaysOnline;
import org.openapitools.client.model.ZonesAlwaysUseHttps;
import org.openapitools.client.model.ZonesAutomaticHttpsRewrites;
import org.openapitools.client.model.ZonesBrotli;
import org.openapitools.client.model.ZonesBrowserCacheTtl;
import org.openapitools.client.model.ZonesBrowserCheck;
import org.openapitools.client.model.ZonesCacheLevel;
import org.openapitools.client.model.ZonesChallengeTtl;
import org.openapitools.client.model.ZonesCiphers;
import org.openapitools.client.model.ZonesCnameFlattening;
import org.openapitools.client.model.ZonesDevelopmentMode;
import org.openapitools.client.model.ZonesEarlyHints;
import org.openapitools.client.model.ZonesEdgeCacheTtl;
import org.openapitools.client.model.ZonesEmailObfuscation;
import org.openapitools.client.model.ZonesH2Prioritization;
import org.openapitools.client.model.ZonesHotlinkProtection;
import org.openapitools.client.model.ZonesHttp2;
import org.openapitools.client.model.ZonesHttp3;
import org.openapitools.client.model.ZonesImageResizing;
import org.openapitools.client.model.ZonesIpGeolocation;
import org.openapitools.client.model.ZonesIpv6;
import org.openapitools.client.model.ZonesMaxUpload;
import org.openapitools.client.model.ZonesMinTlsVersion;
import org.openapitools.client.model.ZonesMinify;
import org.openapitools.client.model.ZonesMirage;
import org.openapitools.client.model.ZonesMobileRedirect;
import org.openapitools.client.model.ZonesNel;
import org.openapitools.client.model.ZonesOpportunisticEncryption;
import org.openapitools.client.model.ZonesOpportunisticOnion;
import org.openapitools.client.model.ZonesOrangeToOrange;
import org.openapitools.client.model.ZonesOriginErrorPagePassThru;
import org.openapitools.client.model.ZonesPolish;
import org.openapitools.client.model.ZonesPrefetchPreload;
import org.openapitools.client.model.ZonesProxyReadTimeout;
import org.openapitools.client.model.ZonesPseudoIpv4;
import org.openapitools.client.model.ZonesResponseBuffering;
import org.openapitools.client.model.ZonesRocketLoader;
import org.openapitools.client.model.ZonesSchemasAutomaticPlatformOptimization;
import org.openapitools.client.model.ZonesSecurityHeader;
import org.openapitools.client.model.ZonesSecurityLevel;
import org.openapitools.client.model.ZonesServerSideExclude;
import org.openapitools.client.model.ZonesSha1Support;
import org.openapitools.client.model.ZonesSortQueryStringForCache;
import org.openapitools.client.model.ZonesSsl;
import org.openapitools.client.model.ZonesSslRecommender;
import org.openapitools.client.model.ZonesTls12Only;
import org.openapitools.client.model.ZonesTls13;
import org.openapitools.client.model.ZonesTlsClientAuth;
import org.openapitools.client.model.ZonesTrueClientIpHeader;
import org.openapitools.client.model.ZonesWaf;
import org.openapitools.client.model.ZonesWebp;
import org.openapitools.client.model.ZonesWebsockets;
import org.openapitools.client.model.ZonesWebsocketsValue;
import org.openapitools.jackson.nullable.JsonNullable;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import invalidPackageName.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class ZonesSetting extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(ZonesSetting.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ZonesSetting.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ZonesSetting' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<Zones0rtt> adapterZones0rtt = gson.getDelegateAdapter(this, TypeToken.get(Zones0rtt.class));
            final TypeAdapter<ZonesAdvancedDdos> adapterZonesAdvancedDdos = gson.getDelegateAdapter(this, TypeToken.get(ZonesAdvancedDdos.class));
            final TypeAdapter<ZonesAlwaysOnline> adapterZonesAlwaysOnline = gson.getDelegateAdapter(this, TypeToken.get(ZonesAlwaysOnline.class));
            final TypeAdapter<ZonesAlwaysUseHttps> adapterZonesAlwaysUseHttps = gson.getDelegateAdapter(this, TypeToken.get(ZonesAlwaysUseHttps.class));
            final TypeAdapter<ZonesAutomaticHttpsRewrites> adapterZonesAutomaticHttpsRewrites = gson.getDelegateAdapter(this, TypeToken.get(ZonesAutomaticHttpsRewrites.class));
            final TypeAdapter<ZonesBrotli> adapterZonesBrotli = gson.getDelegateAdapter(this, TypeToken.get(ZonesBrotli.class));
            final TypeAdapter<ZonesBrowserCacheTtl> adapterZonesBrowserCacheTtl = gson.getDelegateAdapter(this, TypeToken.get(ZonesBrowserCacheTtl.class));
            final TypeAdapter<ZonesBrowserCheck> adapterZonesBrowserCheck = gson.getDelegateAdapter(this, TypeToken.get(ZonesBrowserCheck.class));
            final TypeAdapter<ZonesCacheLevel> adapterZonesCacheLevel = gson.getDelegateAdapter(this, TypeToken.get(ZonesCacheLevel.class));
            final TypeAdapter<ZonesChallengeTtl> adapterZonesChallengeTtl = gson.getDelegateAdapter(this, TypeToken.get(ZonesChallengeTtl.class));
            final TypeAdapter<ZonesCiphers> adapterZonesCiphers = gson.getDelegateAdapter(this, TypeToken.get(ZonesCiphers.class));
            final TypeAdapter<ZonesCnameFlattening> adapterZonesCnameFlattening = gson.getDelegateAdapter(this, TypeToken.get(ZonesCnameFlattening.class));
            final TypeAdapter<ZonesDevelopmentMode> adapterZonesDevelopmentMode = gson.getDelegateAdapter(this, TypeToken.get(ZonesDevelopmentMode.class));
            final TypeAdapter<ZonesEarlyHints> adapterZonesEarlyHints = gson.getDelegateAdapter(this, TypeToken.get(ZonesEarlyHints.class));
            final TypeAdapter<ZonesEdgeCacheTtl> adapterZonesEdgeCacheTtl = gson.getDelegateAdapter(this, TypeToken.get(ZonesEdgeCacheTtl.class));
            final TypeAdapter<ZonesEmailObfuscation> adapterZonesEmailObfuscation = gson.getDelegateAdapter(this, TypeToken.get(ZonesEmailObfuscation.class));
            final TypeAdapter<ZonesH2Prioritization> adapterZonesH2Prioritization = gson.getDelegateAdapter(this, TypeToken.get(ZonesH2Prioritization.class));
            final TypeAdapter<ZonesHotlinkProtection> adapterZonesHotlinkProtection = gson.getDelegateAdapter(this, TypeToken.get(ZonesHotlinkProtection.class));
            final TypeAdapter<ZonesHttp2> adapterZonesHttp2 = gson.getDelegateAdapter(this, TypeToken.get(ZonesHttp2.class));
            final TypeAdapter<ZonesHttp3> adapterZonesHttp3 = gson.getDelegateAdapter(this, TypeToken.get(ZonesHttp3.class));
            final TypeAdapter<ZonesImageResizing> adapterZonesImageResizing = gson.getDelegateAdapter(this, TypeToken.get(ZonesImageResizing.class));
            final TypeAdapter<ZonesIpGeolocation> adapterZonesIpGeolocation = gson.getDelegateAdapter(this, TypeToken.get(ZonesIpGeolocation.class));
            final TypeAdapter<ZonesIpv6> adapterZonesIpv6 = gson.getDelegateAdapter(this, TypeToken.get(ZonesIpv6.class));
            final TypeAdapter<ZonesMaxUpload> adapterZonesMaxUpload = gson.getDelegateAdapter(this, TypeToken.get(ZonesMaxUpload.class));
            final TypeAdapter<ZonesMinTlsVersion> adapterZonesMinTlsVersion = gson.getDelegateAdapter(this, TypeToken.get(ZonesMinTlsVersion.class));
            final TypeAdapter<ZonesMinify> adapterZonesMinify = gson.getDelegateAdapter(this, TypeToken.get(ZonesMinify.class));
            final TypeAdapter<ZonesMirage> adapterZonesMirage = gson.getDelegateAdapter(this, TypeToken.get(ZonesMirage.class));
            final TypeAdapter<ZonesMobileRedirect> adapterZonesMobileRedirect = gson.getDelegateAdapter(this, TypeToken.get(ZonesMobileRedirect.class));
            final TypeAdapter<ZonesNel> adapterZonesNel = gson.getDelegateAdapter(this, TypeToken.get(ZonesNel.class));
            final TypeAdapter<ZonesOpportunisticEncryption> adapterZonesOpportunisticEncryption = gson.getDelegateAdapter(this, TypeToken.get(ZonesOpportunisticEncryption.class));
            final TypeAdapter<ZonesOpportunisticOnion> adapterZonesOpportunisticOnion = gson.getDelegateAdapter(this, TypeToken.get(ZonesOpportunisticOnion.class));
            final TypeAdapter<ZonesOrangeToOrange> adapterZonesOrangeToOrange = gson.getDelegateAdapter(this, TypeToken.get(ZonesOrangeToOrange.class));
            final TypeAdapter<ZonesOriginErrorPagePassThru> adapterZonesOriginErrorPagePassThru = gson.getDelegateAdapter(this, TypeToken.get(ZonesOriginErrorPagePassThru.class));
            final TypeAdapter<ZonesPolish> adapterZonesPolish = gson.getDelegateAdapter(this, TypeToken.get(ZonesPolish.class));
            final TypeAdapter<ZonesPrefetchPreload> adapterZonesPrefetchPreload = gson.getDelegateAdapter(this, TypeToken.get(ZonesPrefetchPreload.class));
            final TypeAdapter<ZonesProxyReadTimeout> adapterZonesProxyReadTimeout = gson.getDelegateAdapter(this, TypeToken.get(ZonesProxyReadTimeout.class));
            final TypeAdapter<ZonesPseudoIpv4> adapterZonesPseudoIpv4 = gson.getDelegateAdapter(this, TypeToken.get(ZonesPseudoIpv4.class));
            final TypeAdapter<ZonesResponseBuffering> adapterZonesResponseBuffering = gson.getDelegateAdapter(this, TypeToken.get(ZonesResponseBuffering.class));
            final TypeAdapter<ZonesRocketLoader> adapterZonesRocketLoader = gson.getDelegateAdapter(this, TypeToken.get(ZonesRocketLoader.class));
            final TypeAdapter<ZonesSchemasAutomaticPlatformOptimization> adapterZonesSchemasAutomaticPlatformOptimization = gson.getDelegateAdapter(this, TypeToken.get(ZonesSchemasAutomaticPlatformOptimization.class));
            final TypeAdapter<ZonesSecurityHeader> adapterZonesSecurityHeader = gson.getDelegateAdapter(this, TypeToken.get(ZonesSecurityHeader.class));
            final TypeAdapter<ZonesSecurityLevel> adapterZonesSecurityLevel = gson.getDelegateAdapter(this, TypeToken.get(ZonesSecurityLevel.class));
            final TypeAdapter<ZonesServerSideExclude> adapterZonesServerSideExclude = gson.getDelegateAdapter(this, TypeToken.get(ZonesServerSideExclude.class));
            final TypeAdapter<ZonesSha1Support> adapterZonesSha1Support = gson.getDelegateAdapter(this, TypeToken.get(ZonesSha1Support.class));
            final TypeAdapter<ZonesSortQueryStringForCache> adapterZonesSortQueryStringForCache = gson.getDelegateAdapter(this, TypeToken.get(ZonesSortQueryStringForCache.class));
            final TypeAdapter<ZonesSsl> adapterZonesSsl = gson.getDelegateAdapter(this, TypeToken.get(ZonesSsl.class));
            final TypeAdapter<ZonesSslRecommender> adapterZonesSslRecommender = gson.getDelegateAdapter(this, TypeToken.get(ZonesSslRecommender.class));
            final TypeAdapter<ZonesTls12Only> adapterZonesTls12Only = gson.getDelegateAdapter(this, TypeToken.get(ZonesTls12Only.class));
            final TypeAdapter<ZonesTls13> adapterZonesTls13 = gson.getDelegateAdapter(this, TypeToken.get(ZonesTls13.class));
            final TypeAdapter<ZonesTlsClientAuth> adapterZonesTlsClientAuth = gson.getDelegateAdapter(this, TypeToken.get(ZonesTlsClientAuth.class));
            final TypeAdapter<ZonesTrueClientIpHeader> adapterZonesTrueClientIpHeader = gson.getDelegateAdapter(this, TypeToken.get(ZonesTrueClientIpHeader.class));
            final TypeAdapter<ZonesWaf> adapterZonesWaf = gson.getDelegateAdapter(this, TypeToken.get(ZonesWaf.class));
            final TypeAdapter<ZonesWebp> adapterZonesWebp = gson.getDelegateAdapter(this, TypeToken.get(ZonesWebp.class));
            final TypeAdapter<ZonesWebsockets> adapterZonesWebsockets = gson.getDelegateAdapter(this, TypeToken.get(ZonesWebsockets.class));

            return (TypeAdapter<T>) new TypeAdapter<ZonesSetting>() {
                @Override
                public void write(JsonWriter out, ZonesSetting value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `Zones0rtt`
                    if (value.getActualInstance() instanceof Zones0rtt) {
                        JsonElement element = adapterZones0rtt.toJsonTree((Zones0rtt)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesAdvancedDdos`
                    if (value.getActualInstance() instanceof ZonesAdvancedDdos) {
                        JsonElement element = adapterZonesAdvancedDdos.toJsonTree((ZonesAdvancedDdos)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesAlwaysOnline`
                    if (value.getActualInstance() instanceof ZonesAlwaysOnline) {
                        JsonElement element = adapterZonesAlwaysOnline.toJsonTree((ZonesAlwaysOnline)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesAlwaysUseHttps`
                    if (value.getActualInstance() instanceof ZonesAlwaysUseHttps) {
                        JsonElement element = adapterZonesAlwaysUseHttps.toJsonTree((ZonesAlwaysUseHttps)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesAutomaticHttpsRewrites`
                    if (value.getActualInstance() instanceof ZonesAutomaticHttpsRewrites) {
                        JsonElement element = adapterZonesAutomaticHttpsRewrites.toJsonTree((ZonesAutomaticHttpsRewrites)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesBrotli`
                    if (value.getActualInstance() instanceof ZonesBrotli) {
                        JsonElement element = adapterZonesBrotli.toJsonTree((ZonesBrotli)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesBrowserCacheTtl`
                    if (value.getActualInstance() instanceof ZonesBrowserCacheTtl) {
                        JsonElement element = adapterZonesBrowserCacheTtl.toJsonTree((ZonesBrowserCacheTtl)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesBrowserCheck`
                    if (value.getActualInstance() instanceof ZonesBrowserCheck) {
                        JsonElement element = adapterZonesBrowserCheck.toJsonTree((ZonesBrowserCheck)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesCacheLevel`
                    if (value.getActualInstance() instanceof ZonesCacheLevel) {
                        JsonElement element = adapterZonesCacheLevel.toJsonTree((ZonesCacheLevel)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesChallengeTtl`
                    if (value.getActualInstance() instanceof ZonesChallengeTtl) {
                        JsonElement element = adapterZonesChallengeTtl.toJsonTree((ZonesChallengeTtl)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesCiphers`
                    if (value.getActualInstance() instanceof ZonesCiphers) {
                        JsonElement element = adapterZonesCiphers.toJsonTree((ZonesCiphers)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesCnameFlattening`
                    if (value.getActualInstance() instanceof ZonesCnameFlattening) {
                        JsonElement element = adapterZonesCnameFlattening.toJsonTree((ZonesCnameFlattening)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesDevelopmentMode`
                    if (value.getActualInstance() instanceof ZonesDevelopmentMode) {
                        JsonElement element = adapterZonesDevelopmentMode.toJsonTree((ZonesDevelopmentMode)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesEarlyHints`
                    if (value.getActualInstance() instanceof ZonesEarlyHints) {
                        JsonElement element = adapterZonesEarlyHints.toJsonTree((ZonesEarlyHints)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesEdgeCacheTtl`
                    if (value.getActualInstance() instanceof ZonesEdgeCacheTtl) {
                        JsonElement element = adapterZonesEdgeCacheTtl.toJsonTree((ZonesEdgeCacheTtl)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesEmailObfuscation`
                    if (value.getActualInstance() instanceof ZonesEmailObfuscation) {
                        JsonElement element = adapterZonesEmailObfuscation.toJsonTree((ZonesEmailObfuscation)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesH2Prioritization`
                    if (value.getActualInstance() instanceof ZonesH2Prioritization) {
                        JsonElement element = adapterZonesH2Prioritization.toJsonTree((ZonesH2Prioritization)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesHotlinkProtection`
                    if (value.getActualInstance() instanceof ZonesHotlinkProtection) {
                        JsonElement element = adapterZonesHotlinkProtection.toJsonTree((ZonesHotlinkProtection)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesHttp2`
                    if (value.getActualInstance() instanceof ZonesHttp2) {
                        JsonElement element = adapterZonesHttp2.toJsonTree((ZonesHttp2)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesHttp3`
                    if (value.getActualInstance() instanceof ZonesHttp3) {
                        JsonElement element = adapterZonesHttp3.toJsonTree((ZonesHttp3)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesImageResizing`
                    if (value.getActualInstance() instanceof ZonesImageResizing) {
                        JsonElement element = adapterZonesImageResizing.toJsonTree((ZonesImageResizing)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesIpGeolocation`
                    if (value.getActualInstance() instanceof ZonesIpGeolocation) {
                        JsonElement element = adapterZonesIpGeolocation.toJsonTree((ZonesIpGeolocation)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesIpv6`
                    if (value.getActualInstance() instanceof ZonesIpv6) {
                        JsonElement element = adapterZonesIpv6.toJsonTree((ZonesIpv6)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesMaxUpload`
                    if (value.getActualInstance() instanceof ZonesMaxUpload) {
                        JsonElement element = adapterZonesMaxUpload.toJsonTree((ZonesMaxUpload)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesMinTlsVersion`
                    if (value.getActualInstance() instanceof ZonesMinTlsVersion) {
                        JsonElement element = adapterZonesMinTlsVersion.toJsonTree((ZonesMinTlsVersion)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesMinify`
                    if (value.getActualInstance() instanceof ZonesMinify) {
                        JsonElement element = adapterZonesMinify.toJsonTree((ZonesMinify)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesMirage`
                    if (value.getActualInstance() instanceof ZonesMirage) {
                        JsonElement element = adapterZonesMirage.toJsonTree((ZonesMirage)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesMobileRedirect`
                    if (value.getActualInstance() instanceof ZonesMobileRedirect) {
                        JsonElement element = adapterZonesMobileRedirect.toJsonTree((ZonesMobileRedirect)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesNel`
                    if (value.getActualInstance() instanceof ZonesNel) {
                        JsonElement element = adapterZonesNel.toJsonTree((ZonesNel)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesOpportunisticEncryption`
                    if (value.getActualInstance() instanceof ZonesOpportunisticEncryption) {
                        JsonElement element = adapterZonesOpportunisticEncryption.toJsonTree((ZonesOpportunisticEncryption)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesOpportunisticOnion`
                    if (value.getActualInstance() instanceof ZonesOpportunisticOnion) {
                        JsonElement element = adapterZonesOpportunisticOnion.toJsonTree((ZonesOpportunisticOnion)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesOrangeToOrange`
                    if (value.getActualInstance() instanceof ZonesOrangeToOrange) {
                        JsonElement element = adapterZonesOrangeToOrange.toJsonTree((ZonesOrangeToOrange)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesOriginErrorPagePassThru`
                    if (value.getActualInstance() instanceof ZonesOriginErrorPagePassThru) {
                        JsonElement element = adapterZonesOriginErrorPagePassThru.toJsonTree((ZonesOriginErrorPagePassThru)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesPolish`
                    if (value.getActualInstance() instanceof ZonesPolish) {
                        JsonElement element = adapterZonesPolish.toJsonTree((ZonesPolish)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesPrefetchPreload`
                    if (value.getActualInstance() instanceof ZonesPrefetchPreload) {
                        JsonElement element = adapterZonesPrefetchPreload.toJsonTree((ZonesPrefetchPreload)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesProxyReadTimeout`
                    if (value.getActualInstance() instanceof ZonesProxyReadTimeout) {
                        JsonElement element = adapterZonesProxyReadTimeout.toJsonTree((ZonesProxyReadTimeout)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesPseudoIpv4`
                    if (value.getActualInstance() instanceof ZonesPseudoIpv4) {
                        JsonElement element = adapterZonesPseudoIpv4.toJsonTree((ZonesPseudoIpv4)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesResponseBuffering`
                    if (value.getActualInstance() instanceof ZonesResponseBuffering) {
                        JsonElement element = adapterZonesResponseBuffering.toJsonTree((ZonesResponseBuffering)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesRocketLoader`
                    if (value.getActualInstance() instanceof ZonesRocketLoader) {
                        JsonElement element = adapterZonesRocketLoader.toJsonTree((ZonesRocketLoader)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesSchemasAutomaticPlatformOptimization`
                    if (value.getActualInstance() instanceof ZonesSchemasAutomaticPlatformOptimization) {
                        JsonElement element = adapterZonesSchemasAutomaticPlatformOptimization.toJsonTree((ZonesSchemasAutomaticPlatformOptimization)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesSecurityHeader`
                    if (value.getActualInstance() instanceof ZonesSecurityHeader) {
                        JsonElement element = adapterZonesSecurityHeader.toJsonTree((ZonesSecurityHeader)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesSecurityLevel`
                    if (value.getActualInstance() instanceof ZonesSecurityLevel) {
                        JsonElement element = adapterZonesSecurityLevel.toJsonTree((ZonesSecurityLevel)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesServerSideExclude`
                    if (value.getActualInstance() instanceof ZonesServerSideExclude) {
                        JsonElement element = adapterZonesServerSideExclude.toJsonTree((ZonesServerSideExclude)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesSha1Support`
                    if (value.getActualInstance() instanceof ZonesSha1Support) {
                        JsonElement element = adapterZonesSha1Support.toJsonTree((ZonesSha1Support)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesSortQueryStringForCache`
                    if (value.getActualInstance() instanceof ZonesSortQueryStringForCache) {
                        JsonElement element = adapterZonesSortQueryStringForCache.toJsonTree((ZonesSortQueryStringForCache)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesSsl`
                    if (value.getActualInstance() instanceof ZonesSsl) {
                        JsonElement element = adapterZonesSsl.toJsonTree((ZonesSsl)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesSslRecommender`
                    if (value.getActualInstance() instanceof ZonesSslRecommender) {
                        JsonElement element = adapterZonesSslRecommender.toJsonTree((ZonesSslRecommender)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesTls12Only`
                    if (value.getActualInstance() instanceof ZonesTls12Only) {
                        JsonElement element = adapterZonesTls12Only.toJsonTree((ZonesTls12Only)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesTls13`
                    if (value.getActualInstance() instanceof ZonesTls13) {
                        JsonElement element = adapterZonesTls13.toJsonTree((ZonesTls13)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesTlsClientAuth`
                    if (value.getActualInstance() instanceof ZonesTlsClientAuth) {
                        JsonElement element = adapterZonesTlsClientAuth.toJsonTree((ZonesTlsClientAuth)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesTrueClientIpHeader`
                    if (value.getActualInstance() instanceof ZonesTrueClientIpHeader) {
                        JsonElement element = adapterZonesTrueClientIpHeader.toJsonTree((ZonesTrueClientIpHeader)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesWaf`
                    if (value.getActualInstance() instanceof ZonesWaf) {
                        JsonElement element = adapterZonesWaf.toJsonTree((ZonesWaf)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesWebp`
                    if (value.getActualInstance() instanceof ZonesWebp) {
                        JsonElement element = adapterZonesWebp.toJsonTree((ZonesWebp)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ZonesWebsockets`
                    if (value.getActualInstance() instanceof ZonesWebsockets) {
                        JsonElement element = adapterZonesWebsockets.toJsonTree((ZonesWebsockets)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: Zones0rtt, ZonesAdvancedDdos, ZonesAlwaysOnline, ZonesAlwaysUseHttps, ZonesAutomaticHttpsRewrites, ZonesBrotli, ZonesBrowserCacheTtl, ZonesBrowserCheck, ZonesCacheLevel, ZonesChallengeTtl, ZonesCiphers, ZonesCnameFlattening, ZonesDevelopmentMode, ZonesEarlyHints, ZonesEdgeCacheTtl, ZonesEmailObfuscation, ZonesH2Prioritization, ZonesHotlinkProtection, ZonesHttp2, ZonesHttp3, ZonesImageResizing, ZonesIpGeolocation, ZonesIpv6, ZonesMaxUpload, ZonesMinTlsVersion, ZonesMinify, ZonesMirage, ZonesMobileRedirect, ZonesNel, ZonesOpportunisticEncryption, ZonesOpportunisticOnion, ZonesOrangeToOrange, ZonesOriginErrorPagePassThru, ZonesPolish, ZonesPrefetchPreload, ZonesProxyReadTimeout, ZonesPseudoIpv4, ZonesResponseBuffering, ZonesRocketLoader, ZonesSchemasAutomaticPlatformOptimization, ZonesSecurityHeader, ZonesSecurityLevel, ZonesServerSideExclude, ZonesSha1Support, ZonesSortQueryStringForCache, ZonesSsl, ZonesSslRecommender, ZonesTls12Only, ZonesTls13, ZonesTlsClientAuth, ZonesTrueClientIpHeader, ZonesWaf, ZonesWebp, ZonesWebsockets");
                }

                @Override
                public ZonesSetting read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize Zones0rtt
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Zones0rtt.validateJsonElement(jsonElement);
                        actualAdapter = adapterZones0rtt;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Zones0rtt'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Zones0rtt failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Zones0rtt'", e);
                    }
                    // deserialize ZonesAdvancedDdos
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesAdvancedDdos.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesAdvancedDdos;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesAdvancedDdos'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesAdvancedDdos failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesAdvancedDdos'", e);
                    }
                    // deserialize ZonesAlwaysOnline
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesAlwaysOnline.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesAlwaysOnline;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesAlwaysOnline'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesAlwaysOnline failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesAlwaysOnline'", e);
                    }
                    // deserialize ZonesAlwaysUseHttps
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesAlwaysUseHttps.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesAlwaysUseHttps;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesAlwaysUseHttps'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesAlwaysUseHttps failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesAlwaysUseHttps'", e);
                    }
                    // deserialize ZonesAutomaticHttpsRewrites
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesAutomaticHttpsRewrites.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesAutomaticHttpsRewrites;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesAutomaticHttpsRewrites'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesAutomaticHttpsRewrites failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesAutomaticHttpsRewrites'", e);
                    }
                    // deserialize ZonesBrotli
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesBrotli.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesBrotli;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesBrotli'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesBrotli failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesBrotli'", e);
                    }
                    // deserialize ZonesBrowserCacheTtl
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesBrowserCacheTtl.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesBrowserCacheTtl;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesBrowserCacheTtl'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesBrowserCacheTtl failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesBrowserCacheTtl'", e);
                    }
                    // deserialize ZonesBrowserCheck
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesBrowserCheck.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesBrowserCheck;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesBrowserCheck'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesBrowserCheck failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesBrowserCheck'", e);
                    }
                    // deserialize ZonesCacheLevel
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesCacheLevel.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesCacheLevel;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesCacheLevel'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesCacheLevel failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesCacheLevel'", e);
                    }
                    // deserialize ZonesChallengeTtl
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesChallengeTtl.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesChallengeTtl;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesChallengeTtl'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesChallengeTtl failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesChallengeTtl'", e);
                    }
                    // deserialize ZonesCiphers
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesCiphers.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesCiphers;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesCiphers'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesCiphers failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesCiphers'", e);
                    }
                    // deserialize ZonesCnameFlattening
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesCnameFlattening.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesCnameFlattening;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesCnameFlattening'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesCnameFlattening failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesCnameFlattening'", e);
                    }
                    // deserialize ZonesDevelopmentMode
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesDevelopmentMode.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesDevelopmentMode;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesDevelopmentMode'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesDevelopmentMode failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesDevelopmentMode'", e);
                    }
                    // deserialize ZonesEarlyHints
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesEarlyHints.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesEarlyHints;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesEarlyHints'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesEarlyHints failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesEarlyHints'", e);
                    }
                    // deserialize ZonesEdgeCacheTtl
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesEdgeCacheTtl.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesEdgeCacheTtl;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesEdgeCacheTtl'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesEdgeCacheTtl failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesEdgeCacheTtl'", e);
                    }
                    // deserialize ZonesEmailObfuscation
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesEmailObfuscation.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesEmailObfuscation;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesEmailObfuscation'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesEmailObfuscation failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesEmailObfuscation'", e);
                    }
                    // deserialize ZonesH2Prioritization
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesH2Prioritization.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesH2Prioritization;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesH2Prioritization'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesH2Prioritization failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesH2Prioritization'", e);
                    }
                    // deserialize ZonesHotlinkProtection
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesHotlinkProtection.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesHotlinkProtection;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesHotlinkProtection'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesHotlinkProtection failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesHotlinkProtection'", e);
                    }
                    // deserialize ZonesHttp2
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesHttp2.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesHttp2;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesHttp2'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesHttp2 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesHttp2'", e);
                    }
                    // deserialize ZonesHttp3
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesHttp3.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesHttp3;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesHttp3'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesHttp3 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesHttp3'", e);
                    }
                    // deserialize ZonesImageResizing
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesImageResizing.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesImageResizing;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesImageResizing'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesImageResizing failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesImageResizing'", e);
                    }
                    // deserialize ZonesIpGeolocation
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesIpGeolocation.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesIpGeolocation;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesIpGeolocation'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesIpGeolocation failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesIpGeolocation'", e);
                    }
                    // deserialize ZonesIpv6
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesIpv6.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesIpv6;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesIpv6'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesIpv6 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesIpv6'", e);
                    }
                    // deserialize ZonesMaxUpload
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesMaxUpload.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesMaxUpload;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesMaxUpload'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesMaxUpload failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesMaxUpload'", e);
                    }
                    // deserialize ZonesMinTlsVersion
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesMinTlsVersion.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesMinTlsVersion;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesMinTlsVersion'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesMinTlsVersion failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesMinTlsVersion'", e);
                    }
                    // deserialize ZonesMinify
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesMinify.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesMinify;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesMinify'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesMinify failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesMinify'", e);
                    }
                    // deserialize ZonesMirage
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesMirage.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesMirage;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesMirage'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesMirage failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesMirage'", e);
                    }
                    // deserialize ZonesMobileRedirect
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesMobileRedirect.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesMobileRedirect;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesMobileRedirect'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesMobileRedirect failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesMobileRedirect'", e);
                    }
                    // deserialize ZonesNel
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesNel.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesNel;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesNel'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesNel failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesNel'", e);
                    }
                    // deserialize ZonesOpportunisticEncryption
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesOpportunisticEncryption.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesOpportunisticEncryption;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesOpportunisticEncryption'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesOpportunisticEncryption failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesOpportunisticEncryption'", e);
                    }
                    // deserialize ZonesOpportunisticOnion
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesOpportunisticOnion.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesOpportunisticOnion;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesOpportunisticOnion'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesOpportunisticOnion failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesOpportunisticOnion'", e);
                    }
                    // deserialize ZonesOrangeToOrange
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesOrangeToOrange.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesOrangeToOrange;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesOrangeToOrange'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesOrangeToOrange failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesOrangeToOrange'", e);
                    }
                    // deserialize ZonesOriginErrorPagePassThru
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesOriginErrorPagePassThru.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesOriginErrorPagePassThru;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesOriginErrorPagePassThru'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesOriginErrorPagePassThru failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesOriginErrorPagePassThru'", e);
                    }
                    // deserialize ZonesPolish
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesPolish.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesPolish;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesPolish'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesPolish failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesPolish'", e);
                    }
                    // deserialize ZonesPrefetchPreload
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesPrefetchPreload.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesPrefetchPreload;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesPrefetchPreload'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesPrefetchPreload failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesPrefetchPreload'", e);
                    }
                    // deserialize ZonesProxyReadTimeout
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesProxyReadTimeout.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesProxyReadTimeout;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesProxyReadTimeout'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesProxyReadTimeout failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesProxyReadTimeout'", e);
                    }
                    // deserialize ZonesPseudoIpv4
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesPseudoIpv4.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesPseudoIpv4;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesPseudoIpv4'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesPseudoIpv4 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesPseudoIpv4'", e);
                    }
                    // deserialize ZonesResponseBuffering
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesResponseBuffering.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesResponseBuffering;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesResponseBuffering'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesResponseBuffering failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesResponseBuffering'", e);
                    }
                    // deserialize ZonesRocketLoader
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesRocketLoader.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesRocketLoader;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesRocketLoader'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesRocketLoader failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesRocketLoader'", e);
                    }
                    // deserialize ZonesSchemasAutomaticPlatformOptimization
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesSchemasAutomaticPlatformOptimization.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesSchemasAutomaticPlatformOptimization;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesSchemasAutomaticPlatformOptimization'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesSchemasAutomaticPlatformOptimization failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesSchemasAutomaticPlatformOptimization'", e);
                    }
                    // deserialize ZonesSecurityHeader
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesSecurityHeader.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesSecurityHeader;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesSecurityHeader'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesSecurityHeader failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesSecurityHeader'", e);
                    }
                    // deserialize ZonesSecurityLevel
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesSecurityLevel.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesSecurityLevel;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesSecurityLevel'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesSecurityLevel failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesSecurityLevel'", e);
                    }
                    // deserialize ZonesServerSideExclude
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesServerSideExclude.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesServerSideExclude;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesServerSideExclude'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesServerSideExclude failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesServerSideExclude'", e);
                    }
                    // deserialize ZonesSha1Support
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesSha1Support.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesSha1Support;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesSha1Support'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesSha1Support failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesSha1Support'", e);
                    }
                    // deserialize ZonesSortQueryStringForCache
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesSortQueryStringForCache.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesSortQueryStringForCache;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesSortQueryStringForCache'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesSortQueryStringForCache failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesSortQueryStringForCache'", e);
                    }
                    // deserialize ZonesSsl
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesSsl.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesSsl;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesSsl'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesSsl failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesSsl'", e);
                    }
                    // deserialize ZonesSslRecommender
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesSslRecommender.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesSslRecommender;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesSslRecommender'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesSslRecommender failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesSslRecommender'", e);
                    }
                    // deserialize ZonesTls12Only
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesTls12Only.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesTls12Only;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesTls12Only'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesTls12Only failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesTls12Only'", e);
                    }
                    // deserialize ZonesTls13
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesTls13.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesTls13;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesTls13'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesTls13 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesTls13'", e);
                    }
                    // deserialize ZonesTlsClientAuth
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesTlsClientAuth.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesTlsClientAuth;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesTlsClientAuth'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesTlsClientAuth failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesTlsClientAuth'", e);
                    }
                    // deserialize ZonesTrueClientIpHeader
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesTrueClientIpHeader.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesTrueClientIpHeader;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesTrueClientIpHeader'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesTrueClientIpHeader failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesTrueClientIpHeader'", e);
                    }
                    // deserialize ZonesWaf
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesWaf.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesWaf;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesWaf'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesWaf failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesWaf'", e);
                    }
                    // deserialize ZonesWebp
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesWebp.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesWebp;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesWebp'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesWebp failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesWebp'", e);
                    }
                    // deserialize ZonesWebsockets
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ZonesWebsockets.validateJsonElement(jsonElement);
                        actualAdapter = adapterZonesWebsockets;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ZonesWebsockets'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ZonesWebsockets failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ZonesWebsockets'", e);
                    }

                    if (match == 1) {
                        ZonesSetting ret = new ZonesSetting();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for ZonesSetting: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public ZonesSetting() {
        super("oneOf", Boolean.FALSE);
    }

    public ZonesSetting(Zones0rtt o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesAdvancedDdos o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesAlwaysOnline o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesAlwaysUseHttps o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesAutomaticHttpsRewrites o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesBrotli o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesBrowserCacheTtl o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesBrowserCheck o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesCacheLevel o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesChallengeTtl o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesCiphers o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesCnameFlattening o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesDevelopmentMode o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesEarlyHints o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesEdgeCacheTtl o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesEmailObfuscation o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesH2Prioritization o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesHotlinkProtection o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesHttp2 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesHttp3 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesImageResizing o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesIpGeolocation o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesIpv6 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesMaxUpload o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesMinTlsVersion o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesMinify o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesMirage o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesMobileRedirect o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesNel o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesOpportunisticEncryption o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesOpportunisticOnion o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesOrangeToOrange o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesOriginErrorPagePassThru o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesPolish o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesPrefetchPreload o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesProxyReadTimeout o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesPseudoIpv4 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesResponseBuffering o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesRocketLoader o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesSchemasAutomaticPlatformOptimization o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesSecurityHeader o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesSecurityLevel o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesServerSideExclude o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesSha1Support o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesSortQueryStringForCache o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesSsl o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesSslRecommender o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesTls12Only o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesTls13 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesTlsClientAuth o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesTrueClientIpHeader o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesWaf o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesWebp o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ZonesSetting(ZonesWebsockets o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("Zones0rtt", Zones0rtt.class);
        schemas.put("ZonesAdvancedDdos", ZonesAdvancedDdos.class);
        schemas.put("ZonesAlwaysOnline", ZonesAlwaysOnline.class);
        schemas.put("ZonesAlwaysUseHttps", ZonesAlwaysUseHttps.class);
        schemas.put("ZonesAutomaticHttpsRewrites", ZonesAutomaticHttpsRewrites.class);
        schemas.put("ZonesBrotli", ZonesBrotli.class);
        schemas.put("ZonesBrowserCacheTtl", ZonesBrowserCacheTtl.class);
        schemas.put("ZonesBrowserCheck", ZonesBrowserCheck.class);
        schemas.put("ZonesCacheLevel", ZonesCacheLevel.class);
        schemas.put("ZonesChallengeTtl", ZonesChallengeTtl.class);
        schemas.put("ZonesCiphers", ZonesCiphers.class);
        schemas.put("ZonesCnameFlattening", ZonesCnameFlattening.class);
        schemas.put("ZonesDevelopmentMode", ZonesDevelopmentMode.class);
        schemas.put("ZonesEarlyHints", ZonesEarlyHints.class);
        schemas.put("ZonesEdgeCacheTtl", ZonesEdgeCacheTtl.class);
        schemas.put("ZonesEmailObfuscation", ZonesEmailObfuscation.class);
        schemas.put("ZonesH2Prioritization", ZonesH2Prioritization.class);
        schemas.put("ZonesHotlinkProtection", ZonesHotlinkProtection.class);
        schemas.put("ZonesHttp2", ZonesHttp2.class);
        schemas.put("ZonesHttp3", ZonesHttp3.class);
        schemas.put("ZonesImageResizing", ZonesImageResizing.class);
        schemas.put("ZonesIpGeolocation", ZonesIpGeolocation.class);
        schemas.put("ZonesIpv6", ZonesIpv6.class);
        schemas.put("ZonesMaxUpload", ZonesMaxUpload.class);
        schemas.put("ZonesMinTlsVersion", ZonesMinTlsVersion.class);
        schemas.put("ZonesMinify", ZonesMinify.class);
        schemas.put("ZonesMirage", ZonesMirage.class);
        schemas.put("ZonesMobileRedirect", ZonesMobileRedirect.class);
        schemas.put("ZonesNel", ZonesNel.class);
        schemas.put("ZonesOpportunisticEncryption", ZonesOpportunisticEncryption.class);
        schemas.put("ZonesOpportunisticOnion", ZonesOpportunisticOnion.class);
        schemas.put("ZonesOrangeToOrange", ZonesOrangeToOrange.class);
        schemas.put("ZonesOriginErrorPagePassThru", ZonesOriginErrorPagePassThru.class);
        schemas.put("ZonesPolish", ZonesPolish.class);
        schemas.put("ZonesPrefetchPreload", ZonesPrefetchPreload.class);
        schemas.put("ZonesProxyReadTimeout", ZonesProxyReadTimeout.class);
        schemas.put("ZonesPseudoIpv4", ZonesPseudoIpv4.class);
        schemas.put("ZonesResponseBuffering", ZonesResponseBuffering.class);
        schemas.put("ZonesRocketLoader", ZonesRocketLoader.class);
        schemas.put("ZonesSchemasAutomaticPlatformOptimization", ZonesSchemasAutomaticPlatformOptimization.class);
        schemas.put("ZonesSecurityHeader", ZonesSecurityHeader.class);
        schemas.put("ZonesSecurityLevel", ZonesSecurityLevel.class);
        schemas.put("ZonesServerSideExclude", ZonesServerSideExclude.class);
        schemas.put("ZonesSha1Support", ZonesSha1Support.class);
        schemas.put("ZonesSortQueryStringForCache", ZonesSortQueryStringForCache.class);
        schemas.put("ZonesSsl", ZonesSsl.class);
        schemas.put("ZonesSslRecommender", ZonesSslRecommender.class);
        schemas.put("ZonesTls12Only", ZonesTls12Only.class);
        schemas.put("ZonesTls13", ZonesTls13.class);
        schemas.put("ZonesTlsClientAuth", ZonesTlsClientAuth.class);
        schemas.put("ZonesTrueClientIpHeader", ZonesTrueClientIpHeader.class);
        schemas.put("ZonesWaf", ZonesWaf.class);
        schemas.put("ZonesWebp", ZonesWebp.class);
        schemas.put("ZonesWebsockets", ZonesWebsockets.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return ZonesSetting.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * Zones0rtt, ZonesAdvancedDdos, ZonesAlwaysOnline, ZonesAlwaysUseHttps, ZonesAutomaticHttpsRewrites, ZonesBrotli, ZonesBrowserCacheTtl, ZonesBrowserCheck, ZonesCacheLevel, ZonesChallengeTtl, ZonesCiphers, ZonesCnameFlattening, ZonesDevelopmentMode, ZonesEarlyHints, ZonesEdgeCacheTtl, ZonesEmailObfuscation, ZonesH2Prioritization, ZonesHotlinkProtection, ZonesHttp2, ZonesHttp3, ZonesImageResizing, ZonesIpGeolocation, ZonesIpv6, ZonesMaxUpload, ZonesMinTlsVersion, ZonesMinify, ZonesMirage, ZonesMobileRedirect, ZonesNel, ZonesOpportunisticEncryption, ZonesOpportunisticOnion, ZonesOrangeToOrange, ZonesOriginErrorPagePassThru, ZonesPolish, ZonesPrefetchPreload, ZonesProxyReadTimeout, ZonesPseudoIpv4, ZonesResponseBuffering, ZonesRocketLoader, ZonesSchemasAutomaticPlatformOptimization, ZonesSecurityHeader, ZonesSecurityLevel, ZonesServerSideExclude, ZonesSha1Support, ZonesSortQueryStringForCache, ZonesSsl, ZonesSslRecommender, ZonesTls12Only, ZonesTls13, ZonesTlsClientAuth, ZonesTrueClientIpHeader, ZonesWaf, ZonesWebp, ZonesWebsockets
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof Zones0rtt) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesAdvancedDdos) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesAlwaysOnline) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesAlwaysUseHttps) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesAutomaticHttpsRewrites) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesBrotli) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesBrowserCacheTtl) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesBrowserCheck) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesCacheLevel) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesChallengeTtl) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesCiphers) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesCnameFlattening) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesDevelopmentMode) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesEarlyHints) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesEdgeCacheTtl) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesEmailObfuscation) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesH2Prioritization) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesHotlinkProtection) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesHttp2) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesHttp3) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesImageResizing) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesIpGeolocation) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesIpv6) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesMaxUpload) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesMinTlsVersion) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesMinify) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesMirage) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesMobileRedirect) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesNel) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesOpportunisticEncryption) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesOpportunisticOnion) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesOrangeToOrange) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesOriginErrorPagePassThru) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesPolish) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesPrefetchPreload) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesProxyReadTimeout) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesPseudoIpv4) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesResponseBuffering) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesRocketLoader) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesSchemasAutomaticPlatformOptimization) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesSecurityHeader) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesSecurityLevel) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesServerSideExclude) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesSha1Support) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesSortQueryStringForCache) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesSsl) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesSslRecommender) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesTls12Only) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesTls13) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesTlsClientAuth) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesTrueClientIpHeader) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesWaf) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesWebp) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ZonesWebsockets) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be Zones0rtt, ZonesAdvancedDdos, ZonesAlwaysOnline, ZonesAlwaysUseHttps, ZonesAutomaticHttpsRewrites, ZonesBrotli, ZonesBrowserCacheTtl, ZonesBrowserCheck, ZonesCacheLevel, ZonesChallengeTtl, ZonesCiphers, ZonesCnameFlattening, ZonesDevelopmentMode, ZonesEarlyHints, ZonesEdgeCacheTtl, ZonesEmailObfuscation, ZonesH2Prioritization, ZonesHotlinkProtection, ZonesHttp2, ZonesHttp3, ZonesImageResizing, ZonesIpGeolocation, ZonesIpv6, ZonesMaxUpload, ZonesMinTlsVersion, ZonesMinify, ZonesMirage, ZonesMobileRedirect, ZonesNel, ZonesOpportunisticEncryption, ZonesOpportunisticOnion, ZonesOrangeToOrange, ZonesOriginErrorPagePassThru, ZonesPolish, ZonesPrefetchPreload, ZonesProxyReadTimeout, ZonesPseudoIpv4, ZonesResponseBuffering, ZonesRocketLoader, ZonesSchemasAutomaticPlatformOptimization, ZonesSecurityHeader, ZonesSecurityLevel, ZonesServerSideExclude, ZonesSha1Support, ZonesSortQueryStringForCache, ZonesSsl, ZonesSslRecommender, ZonesTls12Only, ZonesTls13, ZonesTlsClientAuth, ZonesTrueClientIpHeader, ZonesWaf, ZonesWebp, ZonesWebsockets");
    }

    /**
     * Get the actual instance, which can be the following:
     * Zones0rtt, ZonesAdvancedDdos, ZonesAlwaysOnline, ZonesAlwaysUseHttps, ZonesAutomaticHttpsRewrites, ZonesBrotli, ZonesBrowserCacheTtl, ZonesBrowserCheck, ZonesCacheLevel, ZonesChallengeTtl, ZonesCiphers, ZonesCnameFlattening, ZonesDevelopmentMode, ZonesEarlyHints, ZonesEdgeCacheTtl, ZonesEmailObfuscation, ZonesH2Prioritization, ZonesHotlinkProtection, ZonesHttp2, ZonesHttp3, ZonesImageResizing, ZonesIpGeolocation, ZonesIpv6, ZonesMaxUpload, ZonesMinTlsVersion, ZonesMinify, ZonesMirage, ZonesMobileRedirect, ZonesNel, ZonesOpportunisticEncryption, ZonesOpportunisticOnion, ZonesOrangeToOrange, ZonesOriginErrorPagePassThru, ZonesPolish, ZonesPrefetchPreload, ZonesProxyReadTimeout, ZonesPseudoIpv4, ZonesResponseBuffering, ZonesRocketLoader, ZonesSchemasAutomaticPlatformOptimization, ZonesSecurityHeader, ZonesSecurityLevel, ZonesServerSideExclude, ZonesSha1Support, ZonesSortQueryStringForCache, ZonesSsl, ZonesSslRecommender, ZonesTls12Only, ZonesTls13, ZonesTlsClientAuth, ZonesTrueClientIpHeader, ZonesWaf, ZonesWebp, ZonesWebsockets
     *
     * @return The actual instance (Zones0rtt, ZonesAdvancedDdos, ZonesAlwaysOnline, ZonesAlwaysUseHttps, ZonesAutomaticHttpsRewrites, ZonesBrotli, ZonesBrowserCacheTtl, ZonesBrowserCheck, ZonesCacheLevel, ZonesChallengeTtl, ZonesCiphers, ZonesCnameFlattening, ZonesDevelopmentMode, ZonesEarlyHints, ZonesEdgeCacheTtl, ZonesEmailObfuscation, ZonesH2Prioritization, ZonesHotlinkProtection, ZonesHttp2, ZonesHttp3, ZonesImageResizing, ZonesIpGeolocation, ZonesIpv6, ZonesMaxUpload, ZonesMinTlsVersion, ZonesMinify, ZonesMirage, ZonesMobileRedirect, ZonesNel, ZonesOpportunisticEncryption, ZonesOpportunisticOnion, ZonesOrangeToOrange, ZonesOriginErrorPagePassThru, ZonesPolish, ZonesPrefetchPreload, ZonesProxyReadTimeout, ZonesPseudoIpv4, ZonesResponseBuffering, ZonesRocketLoader, ZonesSchemasAutomaticPlatformOptimization, ZonesSecurityHeader, ZonesSecurityLevel, ZonesServerSideExclude, ZonesSha1Support, ZonesSortQueryStringForCache, ZonesSsl, ZonesSslRecommender, ZonesTls12Only, ZonesTls13, ZonesTlsClientAuth, ZonesTrueClientIpHeader, ZonesWaf, ZonesWebp, ZonesWebsockets)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `Zones0rtt`. If the actual instance is not `Zones0rtt`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Zones0rtt`
     * @throws ClassCastException if the instance is not `Zones0rtt`
     */
    public Zones0rtt getZones0rtt() throws ClassCastException {
        return (Zones0rtt)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesAdvancedDdos`. If the actual instance is not `ZonesAdvancedDdos`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesAdvancedDdos`
     * @throws ClassCastException if the instance is not `ZonesAdvancedDdos`
     */
    public ZonesAdvancedDdos getZonesAdvancedDdos() throws ClassCastException {
        return (ZonesAdvancedDdos)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesAlwaysOnline`. If the actual instance is not `ZonesAlwaysOnline`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesAlwaysOnline`
     * @throws ClassCastException if the instance is not `ZonesAlwaysOnline`
     */
    public ZonesAlwaysOnline getZonesAlwaysOnline() throws ClassCastException {
        return (ZonesAlwaysOnline)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesAlwaysUseHttps`. If the actual instance is not `ZonesAlwaysUseHttps`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesAlwaysUseHttps`
     * @throws ClassCastException if the instance is not `ZonesAlwaysUseHttps`
     */
    public ZonesAlwaysUseHttps getZonesAlwaysUseHttps() throws ClassCastException {
        return (ZonesAlwaysUseHttps)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesAutomaticHttpsRewrites`. If the actual instance is not `ZonesAutomaticHttpsRewrites`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesAutomaticHttpsRewrites`
     * @throws ClassCastException if the instance is not `ZonesAutomaticHttpsRewrites`
     */
    public ZonesAutomaticHttpsRewrites getZonesAutomaticHttpsRewrites() throws ClassCastException {
        return (ZonesAutomaticHttpsRewrites)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesBrotli`. If the actual instance is not `ZonesBrotli`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesBrotli`
     * @throws ClassCastException if the instance is not `ZonesBrotli`
     */
    public ZonesBrotli getZonesBrotli() throws ClassCastException {
        return (ZonesBrotli)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesBrowserCacheTtl`. If the actual instance is not `ZonesBrowserCacheTtl`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesBrowserCacheTtl`
     * @throws ClassCastException if the instance is not `ZonesBrowserCacheTtl`
     */
    public ZonesBrowserCacheTtl getZonesBrowserCacheTtl() throws ClassCastException {
        return (ZonesBrowserCacheTtl)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesBrowserCheck`. If the actual instance is not `ZonesBrowserCheck`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesBrowserCheck`
     * @throws ClassCastException if the instance is not `ZonesBrowserCheck`
     */
    public ZonesBrowserCheck getZonesBrowserCheck() throws ClassCastException {
        return (ZonesBrowserCheck)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesCacheLevel`. If the actual instance is not `ZonesCacheLevel`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesCacheLevel`
     * @throws ClassCastException if the instance is not `ZonesCacheLevel`
     */
    public ZonesCacheLevel getZonesCacheLevel() throws ClassCastException {
        return (ZonesCacheLevel)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesChallengeTtl`. If the actual instance is not `ZonesChallengeTtl`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesChallengeTtl`
     * @throws ClassCastException if the instance is not `ZonesChallengeTtl`
     */
    public ZonesChallengeTtl getZonesChallengeTtl() throws ClassCastException {
        return (ZonesChallengeTtl)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesCiphers`. If the actual instance is not `ZonesCiphers`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesCiphers`
     * @throws ClassCastException if the instance is not `ZonesCiphers`
     */
    public ZonesCiphers getZonesCiphers() throws ClassCastException {
        return (ZonesCiphers)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesCnameFlattening`. If the actual instance is not `ZonesCnameFlattening`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesCnameFlattening`
     * @throws ClassCastException if the instance is not `ZonesCnameFlattening`
     */
    public ZonesCnameFlattening getZonesCnameFlattening() throws ClassCastException {
        return (ZonesCnameFlattening)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesDevelopmentMode`. If the actual instance is not `ZonesDevelopmentMode`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesDevelopmentMode`
     * @throws ClassCastException if the instance is not `ZonesDevelopmentMode`
     */
    public ZonesDevelopmentMode getZonesDevelopmentMode() throws ClassCastException {
        return (ZonesDevelopmentMode)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesEarlyHints`. If the actual instance is not `ZonesEarlyHints`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesEarlyHints`
     * @throws ClassCastException if the instance is not `ZonesEarlyHints`
     */
    public ZonesEarlyHints getZonesEarlyHints() throws ClassCastException {
        return (ZonesEarlyHints)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesEdgeCacheTtl`. If the actual instance is not `ZonesEdgeCacheTtl`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesEdgeCacheTtl`
     * @throws ClassCastException if the instance is not `ZonesEdgeCacheTtl`
     */
    public ZonesEdgeCacheTtl getZonesEdgeCacheTtl() throws ClassCastException {
        return (ZonesEdgeCacheTtl)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesEmailObfuscation`. If the actual instance is not `ZonesEmailObfuscation`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesEmailObfuscation`
     * @throws ClassCastException if the instance is not `ZonesEmailObfuscation`
     */
    public ZonesEmailObfuscation getZonesEmailObfuscation() throws ClassCastException {
        return (ZonesEmailObfuscation)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesH2Prioritization`. If the actual instance is not `ZonesH2Prioritization`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesH2Prioritization`
     * @throws ClassCastException if the instance is not `ZonesH2Prioritization`
     */
    public ZonesH2Prioritization getZonesH2Prioritization() throws ClassCastException {
        return (ZonesH2Prioritization)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesHotlinkProtection`. If the actual instance is not `ZonesHotlinkProtection`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesHotlinkProtection`
     * @throws ClassCastException if the instance is not `ZonesHotlinkProtection`
     */
    public ZonesHotlinkProtection getZonesHotlinkProtection() throws ClassCastException {
        return (ZonesHotlinkProtection)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesHttp2`. If the actual instance is not `ZonesHttp2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesHttp2`
     * @throws ClassCastException if the instance is not `ZonesHttp2`
     */
    public ZonesHttp2 getZonesHttp2() throws ClassCastException {
        return (ZonesHttp2)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesHttp3`. If the actual instance is not `ZonesHttp3`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesHttp3`
     * @throws ClassCastException if the instance is not `ZonesHttp3`
     */
    public ZonesHttp3 getZonesHttp3() throws ClassCastException {
        return (ZonesHttp3)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesImageResizing`. If the actual instance is not `ZonesImageResizing`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesImageResizing`
     * @throws ClassCastException if the instance is not `ZonesImageResizing`
     */
    public ZonesImageResizing getZonesImageResizing() throws ClassCastException {
        return (ZonesImageResizing)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesIpGeolocation`. If the actual instance is not `ZonesIpGeolocation`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesIpGeolocation`
     * @throws ClassCastException if the instance is not `ZonesIpGeolocation`
     */
    public ZonesIpGeolocation getZonesIpGeolocation() throws ClassCastException {
        return (ZonesIpGeolocation)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesIpv6`. If the actual instance is not `ZonesIpv6`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesIpv6`
     * @throws ClassCastException if the instance is not `ZonesIpv6`
     */
    public ZonesIpv6 getZonesIpv6() throws ClassCastException {
        return (ZonesIpv6)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesMaxUpload`. If the actual instance is not `ZonesMaxUpload`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesMaxUpload`
     * @throws ClassCastException if the instance is not `ZonesMaxUpload`
     */
    public ZonesMaxUpload getZonesMaxUpload() throws ClassCastException {
        return (ZonesMaxUpload)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesMinTlsVersion`. If the actual instance is not `ZonesMinTlsVersion`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesMinTlsVersion`
     * @throws ClassCastException if the instance is not `ZonesMinTlsVersion`
     */
    public ZonesMinTlsVersion getZonesMinTlsVersion() throws ClassCastException {
        return (ZonesMinTlsVersion)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesMinify`. If the actual instance is not `ZonesMinify`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesMinify`
     * @throws ClassCastException if the instance is not `ZonesMinify`
     */
    public ZonesMinify getZonesMinify() throws ClassCastException {
        return (ZonesMinify)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesMirage`. If the actual instance is not `ZonesMirage`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesMirage`
     * @throws ClassCastException if the instance is not `ZonesMirage`
     */
    public ZonesMirage getZonesMirage() throws ClassCastException {
        return (ZonesMirage)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesMobileRedirect`. If the actual instance is not `ZonesMobileRedirect`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesMobileRedirect`
     * @throws ClassCastException if the instance is not `ZonesMobileRedirect`
     */
    public ZonesMobileRedirect getZonesMobileRedirect() throws ClassCastException {
        return (ZonesMobileRedirect)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesNel`. If the actual instance is not `ZonesNel`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesNel`
     * @throws ClassCastException if the instance is not `ZonesNel`
     */
    public ZonesNel getZonesNel() throws ClassCastException {
        return (ZonesNel)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesOpportunisticEncryption`. If the actual instance is not `ZonesOpportunisticEncryption`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesOpportunisticEncryption`
     * @throws ClassCastException if the instance is not `ZonesOpportunisticEncryption`
     */
    public ZonesOpportunisticEncryption getZonesOpportunisticEncryption() throws ClassCastException {
        return (ZonesOpportunisticEncryption)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesOpportunisticOnion`. If the actual instance is not `ZonesOpportunisticOnion`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesOpportunisticOnion`
     * @throws ClassCastException if the instance is not `ZonesOpportunisticOnion`
     */
    public ZonesOpportunisticOnion getZonesOpportunisticOnion() throws ClassCastException {
        return (ZonesOpportunisticOnion)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesOrangeToOrange`. If the actual instance is not `ZonesOrangeToOrange`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesOrangeToOrange`
     * @throws ClassCastException if the instance is not `ZonesOrangeToOrange`
     */
    public ZonesOrangeToOrange getZonesOrangeToOrange() throws ClassCastException {
        return (ZonesOrangeToOrange)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesOriginErrorPagePassThru`. If the actual instance is not `ZonesOriginErrorPagePassThru`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesOriginErrorPagePassThru`
     * @throws ClassCastException if the instance is not `ZonesOriginErrorPagePassThru`
     */
    public ZonesOriginErrorPagePassThru getZonesOriginErrorPagePassThru() throws ClassCastException {
        return (ZonesOriginErrorPagePassThru)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesPolish`. If the actual instance is not `ZonesPolish`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesPolish`
     * @throws ClassCastException if the instance is not `ZonesPolish`
     */
    public ZonesPolish getZonesPolish() throws ClassCastException {
        return (ZonesPolish)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesPrefetchPreload`. If the actual instance is not `ZonesPrefetchPreload`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesPrefetchPreload`
     * @throws ClassCastException if the instance is not `ZonesPrefetchPreload`
     */
    public ZonesPrefetchPreload getZonesPrefetchPreload() throws ClassCastException {
        return (ZonesPrefetchPreload)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesProxyReadTimeout`. If the actual instance is not `ZonesProxyReadTimeout`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesProxyReadTimeout`
     * @throws ClassCastException if the instance is not `ZonesProxyReadTimeout`
     */
    public ZonesProxyReadTimeout getZonesProxyReadTimeout() throws ClassCastException {
        return (ZonesProxyReadTimeout)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesPseudoIpv4`. If the actual instance is not `ZonesPseudoIpv4`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesPseudoIpv4`
     * @throws ClassCastException if the instance is not `ZonesPseudoIpv4`
     */
    public ZonesPseudoIpv4 getZonesPseudoIpv4() throws ClassCastException {
        return (ZonesPseudoIpv4)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesResponseBuffering`. If the actual instance is not `ZonesResponseBuffering`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesResponseBuffering`
     * @throws ClassCastException if the instance is not `ZonesResponseBuffering`
     */
    public ZonesResponseBuffering getZonesResponseBuffering() throws ClassCastException {
        return (ZonesResponseBuffering)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesRocketLoader`. If the actual instance is not `ZonesRocketLoader`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesRocketLoader`
     * @throws ClassCastException if the instance is not `ZonesRocketLoader`
     */
    public ZonesRocketLoader getZonesRocketLoader() throws ClassCastException {
        return (ZonesRocketLoader)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesSchemasAutomaticPlatformOptimization`. If the actual instance is not `ZonesSchemasAutomaticPlatformOptimization`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesSchemasAutomaticPlatformOptimization`
     * @throws ClassCastException if the instance is not `ZonesSchemasAutomaticPlatformOptimization`
     */
    public ZonesSchemasAutomaticPlatformOptimization getZonesSchemasAutomaticPlatformOptimization() throws ClassCastException {
        return (ZonesSchemasAutomaticPlatformOptimization)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesSecurityHeader`. If the actual instance is not `ZonesSecurityHeader`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesSecurityHeader`
     * @throws ClassCastException if the instance is not `ZonesSecurityHeader`
     */
    public ZonesSecurityHeader getZonesSecurityHeader() throws ClassCastException {
        return (ZonesSecurityHeader)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesSecurityLevel`. If the actual instance is not `ZonesSecurityLevel`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesSecurityLevel`
     * @throws ClassCastException if the instance is not `ZonesSecurityLevel`
     */
    public ZonesSecurityLevel getZonesSecurityLevel() throws ClassCastException {
        return (ZonesSecurityLevel)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesServerSideExclude`. If the actual instance is not `ZonesServerSideExclude`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesServerSideExclude`
     * @throws ClassCastException if the instance is not `ZonesServerSideExclude`
     */
    public ZonesServerSideExclude getZonesServerSideExclude() throws ClassCastException {
        return (ZonesServerSideExclude)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesSha1Support`. If the actual instance is not `ZonesSha1Support`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesSha1Support`
     * @throws ClassCastException if the instance is not `ZonesSha1Support`
     */
    public ZonesSha1Support getZonesSha1Support() throws ClassCastException {
        return (ZonesSha1Support)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesSortQueryStringForCache`. If the actual instance is not `ZonesSortQueryStringForCache`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesSortQueryStringForCache`
     * @throws ClassCastException if the instance is not `ZonesSortQueryStringForCache`
     */
    public ZonesSortQueryStringForCache getZonesSortQueryStringForCache() throws ClassCastException {
        return (ZonesSortQueryStringForCache)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesSsl`. If the actual instance is not `ZonesSsl`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesSsl`
     * @throws ClassCastException if the instance is not `ZonesSsl`
     */
    public ZonesSsl getZonesSsl() throws ClassCastException {
        return (ZonesSsl)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesSslRecommender`. If the actual instance is not `ZonesSslRecommender`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesSslRecommender`
     * @throws ClassCastException if the instance is not `ZonesSslRecommender`
     */
    public ZonesSslRecommender getZonesSslRecommender() throws ClassCastException {
        return (ZonesSslRecommender)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesTls12Only`. If the actual instance is not `ZonesTls12Only`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesTls12Only`
     * @throws ClassCastException if the instance is not `ZonesTls12Only`
     */
    public ZonesTls12Only getZonesTls12Only() throws ClassCastException {
        return (ZonesTls12Only)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesTls13`. If the actual instance is not `ZonesTls13`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesTls13`
     * @throws ClassCastException if the instance is not `ZonesTls13`
     */
    public ZonesTls13 getZonesTls13() throws ClassCastException {
        return (ZonesTls13)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesTlsClientAuth`. If the actual instance is not `ZonesTlsClientAuth`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesTlsClientAuth`
     * @throws ClassCastException if the instance is not `ZonesTlsClientAuth`
     */
    public ZonesTlsClientAuth getZonesTlsClientAuth() throws ClassCastException {
        return (ZonesTlsClientAuth)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesTrueClientIpHeader`. If the actual instance is not `ZonesTrueClientIpHeader`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesTrueClientIpHeader`
     * @throws ClassCastException if the instance is not `ZonesTrueClientIpHeader`
     */
    public ZonesTrueClientIpHeader getZonesTrueClientIpHeader() throws ClassCastException {
        return (ZonesTrueClientIpHeader)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesWaf`. If the actual instance is not `ZonesWaf`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesWaf`
     * @throws ClassCastException if the instance is not `ZonesWaf`
     */
    public ZonesWaf getZonesWaf() throws ClassCastException {
        return (ZonesWaf)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesWebp`. If the actual instance is not `ZonesWebp`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesWebp`
     * @throws ClassCastException if the instance is not `ZonesWebp`
     */
    public ZonesWebp getZonesWebp() throws ClassCastException {
        return (ZonesWebp)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ZonesWebsockets`. If the actual instance is not `ZonesWebsockets`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ZonesWebsockets`
     * @throws ClassCastException if the instance is not `ZonesWebsockets`
     */
    public ZonesWebsockets getZonesWebsockets() throws ClassCastException {
        return (ZonesWebsockets)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to ZonesSetting
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with Zones0rtt
        try {
            Zones0rtt.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Zones0rtt failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesAdvancedDdos
        try {
            ZonesAdvancedDdos.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesAdvancedDdos failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesAlwaysOnline
        try {
            ZonesAlwaysOnline.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesAlwaysOnline failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesAlwaysUseHttps
        try {
            ZonesAlwaysUseHttps.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesAlwaysUseHttps failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesAutomaticHttpsRewrites
        try {
            ZonesAutomaticHttpsRewrites.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesAutomaticHttpsRewrites failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesBrotli
        try {
            ZonesBrotli.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesBrotli failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesBrowserCacheTtl
        try {
            ZonesBrowserCacheTtl.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesBrowserCacheTtl failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesBrowserCheck
        try {
            ZonesBrowserCheck.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesBrowserCheck failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesCacheLevel
        try {
            ZonesCacheLevel.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesCacheLevel failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesChallengeTtl
        try {
            ZonesChallengeTtl.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesChallengeTtl failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesCiphers
        try {
            ZonesCiphers.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesCiphers failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesCnameFlattening
        try {
            ZonesCnameFlattening.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesCnameFlattening failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesDevelopmentMode
        try {
            ZonesDevelopmentMode.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesDevelopmentMode failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesEarlyHints
        try {
            ZonesEarlyHints.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesEarlyHints failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesEdgeCacheTtl
        try {
            ZonesEdgeCacheTtl.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesEdgeCacheTtl failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesEmailObfuscation
        try {
            ZonesEmailObfuscation.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesEmailObfuscation failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesH2Prioritization
        try {
            ZonesH2Prioritization.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesH2Prioritization failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesHotlinkProtection
        try {
            ZonesHotlinkProtection.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesHotlinkProtection failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesHttp2
        try {
            ZonesHttp2.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesHttp2 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesHttp3
        try {
            ZonesHttp3.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesHttp3 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesImageResizing
        try {
            ZonesImageResizing.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesImageResizing failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesIpGeolocation
        try {
            ZonesIpGeolocation.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesIpGeolocation failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesIpv6
        try {
            ZonesIpv6.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesIpv6 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesMaxUpload
        try {
            ZonesMaxUpload.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesMaxUpload failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesMinTlsVersion
        try {
            ZonesMinTlsVersion.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesMinTlsVersion failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesMinify
        try {
            ZonesMinify.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesMinify failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesMirage
        try {
            ZonesMirage.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesMirage failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesMobileRedirect
        try {
            ZonesMobileRedirect.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesMobileRedirect failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesNel
        try {
            ZonesNel.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesNel failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesOpportunisticEncryption
        try {
            ZonesOpportunisticEncryption.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesOpportunisticEncryption failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesOpportunisticOnion
        try {
            ZonesOpportunisticOnion.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesOpportunisticOnion failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesOrangeToOrange
        try {
            ZonesOrangeToOrange.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesOrangeToOrange failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesOriginErrorPagePassThru
        try {
            ZonesOriginErrorPagePassThru.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesOriginErrorPagePassThru failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesPolish
        try {
            ZonesPolish.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesPolish failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesPrefetchPreload
        try {
            ZonesPrefetchPreload.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesPrefetchPreload failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesProxyReadTimeout
        try {
            ZonesProxyReadTimeout.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesProxyReadTimeout failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesPseudoIpv4
        try {
            ZonesPseudoIpv4.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesPseudoIpv4 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesResponseBuffering
        try {
            ZonesResponseBuffering.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesResponseBuffering failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesRocketLoader
        try {
            ZonesRocketLoader.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesRocketLoader failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesSchemasAutomaticPlatformOptimization
        try {
            ZonesSchemasAutomaticPlatformOptimization.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesSchemasAutomaticPlatformOptimization failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesSecurityHeader
        try {
            ZonesSecurityHeader.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesSecurityHeader failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesSecurityLevel
        try {
            ZonesSecurityLevel.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesSecurityLevel failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesServerSideExclude
        try {
            ZonesServerSideExclude.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesServerSideExclude failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesSha1Support
        try {
            ZonesSha1Support.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesSha1Support failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesSortQueryStringForCache
        try {
            ZonesSortQueryStringForCache.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesSortQueryStringForCache failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesSsl
        try {
            ZonesSsl.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesSsl failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesSslRecommender
        try {
            ZonesSslRecommender.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesSslRecommender failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesTls12Only
        try {
            ZonesTls12Only.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesTls12Only failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesTls13
        try {
            ZonesTls13.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesTls13 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesTlsClientAuth
        try {
            ZonesTlsClientAuth.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesTlsClientAuth failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesTrueClientIpHeader
        try {
            ZonesTrueClientIpHeader.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesTrueClientIpHeader failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesWaf
        try {
            ZonesWaf.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesWaf failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesWebp
        try {
            ZonesWebp.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesWebp failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ZonesWebsockets
        try {
            ZonesWebsockets.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ZonesWebsockets failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for ZonesSetting with oneOf schemas: Zones0rtt, ZonesAdvancedDdos, ZonesAlwaysOnline, ZonesAlwaysUseHttps, ZonesAutomaticHttpsRewrites, ZonesBrotli, ZonesBrowserCacheTtl, ZonesBrowserCheck, ZonesCacheLevel, ZonesChallengeTtl, ZonesCiphers, ZonesCnameFlattening, ZonesDevelopmentMode, ZonesEarlyHints, ZonesEdgeCacheTtl, ZonesEmailObfuscation, ZonesH2Prioritization, ZonesHotlinkProtection, ZonesHttp2, ZonesHttp3, ZonesImageResizing, ZonesIpGeolocation, ZonesIpv6, ZonesMaxUpload, ZonesMinTlsVersion, ZonesMinify, ZonesMirage, ZonesMobileRedirect, ZonesNel, ZonesOpportunisticEncryption, ZonesOpportunisticOnion, ZonesOrangeToOrange, ZonesOriginErrorPagePassThru, ZonesPolish, ZonesPrefetchPreload, ZonesProxyReadTimeout, ZonesPseudoIpv4, ZonesResponseBuffering, ZonesRocketLoader, ZonesSchemasAutomaticPlatformOptimization, ZonesSecurityHeader, ZonesSecurityLevel, ZonesServerSideExclude, ZonesSha1Support, ZonesSortQueryStringForCache, ZonesSsl, ZonesSslRecommender, ZonesTls12Only, ZonesTls13, ZonesTlsClientAuth, ZonesTrueClientIpHeader, ZonesWaf, ZonesWebp, ZonesWebsockets. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of ZonesSetting given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ZonesSetting
     * @throws IOException if the JSON string is invalid with respect to ZonesSetting
     */
    public static ZonesSetting fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ZonesSetting.class);
    }

    /**
     * Convert an instance of ZonesSetting to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

