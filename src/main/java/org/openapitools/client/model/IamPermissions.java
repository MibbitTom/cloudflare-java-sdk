/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.IamGrants;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * IamPermissions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class IamPermissions {
  public static final String SERIALIZED_NAME_ANALYTICS = "analytics";
  @SerializedName(SERIALIZED_NAME_ANALYTICS)
  private IamGrants analytics;

  public static final String SERIALIZED_NAME_BILLING = "billing";
  @SerializedName(SERIALIZED_NAME_BILLING)
  private IamGrants billing;

  public static final String SERIALIZED_NAME_CACHE_PURGE = "cache_purge";
  @SerializedName(SERIALIZED_NAME_CACHE_PURGE)
  private IamGrants cachePurge;

  public static final String SERIALIZED_NAME_DNS = "dns";
  @SerializedName(SERIALIZED_NAME_DNS)
  private IamGrants dns;

  public static final String SERIALIZED_NAME_DNS_RECORDS = "dns_records";
  @SerializedName(SERIALIZED_NAME_DNS_RECORDS)
  private IamGrants dnsRecords;

  public static final String SERIALIZED_NAME_LB = "lb";
  @SerializedName(SERIALIZED_NAME_LB)
  private IamGrants lb;

  public static final String SERIALIZED_NAME_LOGS = "logs";
  @SerializedName(SERIALIZED_NAME_LOGS)
  private IamGrants logs;

  public static final String SERIALIZED_NAME_ORGANIZATION = "organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  private IamGrants organization;

  public static final String SERIALIZED_NAME_SSL = "ssl";
  @SerializedName(SERIALIZED_NAME_SSL)
  private IamGrants ssl;

  public static final String SERIALIZED_NAME_WAF = "waf";
  @SerializedName(SERIALIZED_NAME_WAF)
  private IamGrants waf;

  public static final String SERIALIZED_NAME_ZONE_SETTINGS = "zone_settings";
  @SerializedName(SERIALIZED_NAME_ZONE_SETTINGS)
  private IamGrants zoneSettings;

  public static final String SERIALIZED_NAME_ZONES = "zones";
  @SerializedName(SERIALIZED_NAME_ZONES)
  private IamGrants zones;

  public IamPermissions() {
  }

  public IamPermissions analytics(IamGrants analytics) {
    this.analytics = analytics;
    return this;
  }

   /**
   * Get analytics
   * @return analytics
  **/
  @javax.annotation.Nullable
  public IamGrants getAnalytics() {
    return analytics;
  }

  public void setAnalytics(IamGrants analytics) {
    this.analytics = analytics;
  }


  public IamPermissions billing(IamGrants billing) {
    this.billing = billing;
    return this;
  }

   /**
   * Get billing
   * @return billing
  **/
  @javax.annotation.Nullable
  public IamGrants getBilling() {
    return billing;
  }

  public void setBilling(IamGrants billing) {
    this.billing = billing;
  }


  public IamPermissions cachePurge(IamGrants cachePurge) {
    this.cachePurge = cachePurge;
    return this;
  }

   /**
   * Get cachePurge
   * @return cachePurge
  **/
  @javax.annotation.Nullable
  public IamGrants getCachePurge() {
    return cachePurge;
  }

  public void setCachePurge(IamGrants cachePurge) {
    this.cachePurge = cachePurge;
  }


  public IamPermissions dns(IamGrants dns) {
    this.dns = dns;
    return this;
  }

   /**
   * Get dns
   * @return dns
  **/
  @javax.annotation.Nullable
  public IamGrants getDns() {
    return dns;
  }

  public void setDns(IamGrants dns) {
    this.dns = dns;
  }


  public IamPermissions dnsRecords(IamGrants dnsRecords) {
    this.dnsRecords = dnsRecords;
    return this;
  }

   /**
   * Get dnsRecords
   * @return dnsRecords
  **/
  @javax.annotation.Nullable
  public IamGrants getDnsRecords() {
    return dnsRecords;
  }

  public void setDnsRecords(IamGrants dnsRecords) {
    this.dnsRecords = dnsRecords;
  }


  public IamPermissions lb(IamGrants lb) {
    this.lb = lb;
    return this;
  }

   /**
   * Get lb
   * @return lb
  **/
  @javax.annotation.Nullable
  public IamGrants getLb() {
    return lb;
  }

  public void setLb(IamGrants lb) {
    this.lb = lb;
  }


  public IamPermissions logs(IamGrants logs) {
    this.logs = logs;
    return this;
  }

   /**
   * Get logs
   * @return logs
  **/
  @javax.annotation.Nullable
  public IamGrants getLogs() {
    return logs;
  }

  public void setLogs(IamGrants logs) {
    this.logs = logs;
  }


  public IamPermissions organization(IamGrants organization) {
    this.organization = organization;
    return this;
  }

   /**
   * Get organization
   * @return organization
  **/
  @javax.annotation.Nullable
  public IamGrants getOrganization() {
    return organization;
  }

  public void setOrganization(IamGrants organization) {
    this.organization = organization;
  }


  public IamPermissions ssl(IamGrants ssl) {
    this.ssl = ssl;
    return this;
  }

   /**
   * Get ssl
   * @return ssl
  **/
  @javax.annotation.Nullable
  public IamGrants getSsl() {
    return ssl;
  }

  public void setSsl(IamGrants ssl) {
    this.ssl = ssl;
  }


  public IamPermissions waf(IamGrants waf) {
    this.waf = waf;
    return this;
  }

   /**
   * Get waf
   * @return waf
  **/
  @javax.annotation.Nullable
  public IamGrants getWaf() {
    return waf;
  }

  public void setWaf(IamGrants waf) {
    this.waf = waf;
  }


  public IamPermissions zoneSettings(IamGrants zoneSettings) {
    this.zoneSettings = zoneSettings;
    return this;
  }

   /**
   * Get zoneSettings
   * @return zoneSettings
  **/
  @javax.annotation.Nullable
  public IamGrants getZoneSettings() {
    return zoneSettings;
  }

  public void setZoneSettings(IamGrants zoneSettings) {
    this.zoneSettings = zoneSettings;
  }


  public IamPermissions zones(IamGrants zones) {
    this.zones = zones;
    return this;
  }

   /**
   * Get zones
   * @return zones
  **/
  @javax.annotation.Nullable
  public IamGrants getZones() {
    return zones;
  }

  public void setZones(IamGrants zones) {
    this.zones = zones;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IamPermissions iamPermissions = (IamPermissions) o;
    return Objects.equals(this.analytics, iamPermissions.analytics) &&
        Objects.equals(this.billing, iamPermissions.billing) &&
        Objects.equals(this.cachePurge, iamPermissions.cachePurge) &&
        Objects.equals(this.dns, iamPermissions.dns) &&
        Objects.equals(this.dnsRecords, iamPermissions.dnsRecords) &&
        Objects.equals(this.lb, iamPermissions.lb) &&
        Objects.equals(this.logs, iamPermissions.logs) &&
        Objects.equals(this.organization, iamPermissions.organization) &&
        Objects.equals(this.ssl, iamPermissions.ssl) &&
        Objects.equals(this.waf, iamPermissions.waf) &&
        Objects.equals(this.zoneSettings, iamPermissions.zoneSettings) &&
        Objects.equals(this.zones, iamPermissions.zones);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analytics, billing, cachePurge, dns, dnsRecords, lb, logs, organization, ssl, waf, zoneSettings, zones);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IamPermissions {\n");
    sb.append("    analytics: ").append(toIndentedString(analytics)).append("\n");
    sb.append("    billing: ").append(toIndentedString(billing)).append("\n");
    sb.append("    cachePurge: ").append(toIndentedString(cachePurge)).append("\n");
    sb.append("    dns: ").append(toIndentedString(dns)).append("\n");
    sb.append("    dnsRecords: ").append(toIndentedString(dnsRecords)).append("\n");
    sb.append("    lb: ").append(toIndentedString(lb)).append("\n");
    sb.append("    logs: ").append(toIndentedString(logs)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    ssl: ").append(toIndentedString(ssl)).append("\n");
    sb.append("    waf: ").append(toIndentedString(waf)).append("\n");
    sb.append("    zoneSettings: ").append(toIndentedString(zoneSettings)).append("\n");
    sb.append("    zones: ").append(toIndentedString(zones)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("analytics");
    openapiFields.add("billing");
    openapiFields.add("cache_purge");
    openapiFields.add("dns");
    openapiFields.add("dns_records");
    openapiFields.add("lb");
    openapiFields.add("logs");
    openapiFields.add("organization");
    openapiFields.add("ssl");
    openapiFields.add("waf");
    openapiFields.add("zone_settings");
    openapiFields.add("zones");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to IamPermissions
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IamPermissions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IamPermissions is not found in the empty JSON string", IamPermissions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IamPermissions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IamPermissions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `analytics`
      if (jsonObj.get("analytics") != null && !jsonObj.get("analytics").isJsonNull()) {
        IamGrants.validateJsonElement(jsonObj.get("analytics"));
      }
      // validate the optional field `billing`
      if (jsonObj.get("billing") != null && !jsonObj.get("billing").isJsonNull()) {
        IamGrants.validateJsonElement(jsonObj.get("billing"));
      }
      // validate the optional field `cache_purge`
      if (jsonObj.get("cache_purge") != null && !jsonObj.get("cache_purge").isJsonNull()) {
        IamGrants.validateJsonElement(jsonObj.get("cache_purge"));
      }
      // validate the optional field `dns`
      if (jsonObj.get("dns") != null && !jsonObj.get("dns").isJsonNull()) {
        IamGrants.validateJsonElement(jsonObj.get("dns"));
      }
      // validate the optional field `dns_records`
      if (jsonObj.get("dns_records") != null && !jsonObj.get("dns_records").isJsonNull()) {
        IamGrants.validateJsonElement(jsonObj.get("dns_records"));
      }
      // validate the optional field `lb`
      if (jsonObj.get("lb") != null && !jsonObj.get("lb").isJsonNull()) {
        IamGrants.validateJsonElement(jsonObj.get("lb"));
      }
      // validate the optional field `logs`
      if (jsonObj.get("logs") != null && !jsonObj.get("logs").isJsonNull()) {
        IamGrants.validateJsonElement(jsonObj.get("logs"));
      }
      // validate the optional field `organization`
      if (jsonObj.get("organization") != null && !jsonObj.get("organization").isJsonNull()) {
        IamGrants.validateJsonElement(jsonObj.get("organization"));
      }
      // validate the optional field `ssl`
      if (jsonObj.get("ssl") != null && !jsonObj.get("ssl").isJsonNull()) {
        IamGrants.validateJsonElement(jsonObj.get("ssl"));
      }
      // validate the optional field `waf`
      if (jsonObj.get("waf") != null && !jsonObj.get("waf").isJsonNull()) {
        IamGrants.validateJsonElement(jsonObj.get("waf"));
      }
      // validate the optional field `zone_settings`
      if (jsonObj.get("zone_settings") != null && !jsonObj.get("zone_settings").isJsonNull()) {
        IamGrants.validateJsonElement(jsonObj.get("zone_settings"));
      }
      // validate the optional field `zones`
      if (jsonObj.get("zones") != null && !jsonObj.get("zones").isJsonNull()) {
        IamGrants.validateJsonElement(jsonObj.get("zones"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IamPermissions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IamPermissions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IamPermissions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IamPermissions.class));

       return (TypeAdapter<T>) new TypeAdapter<IamPermissions>() {
           @Override
           public void write(JsonWriter out, IamPermissions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IamPermissions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IamPermissions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IamPermissions
  * @throws IOException if the JSON string is invalid with respect to IamPermissions
  */
  public static IamPermissions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IamPermissions.class);
  }

 /**
  * Convert an instance of IamPermissions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

