/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TlsCertificatesAndHostnamesRequestType;
import org.openapitools.client.model.TlsCertificatesAndHostnamesRequestedValidity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OriginCaCreateCertificateRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class OriginCaCreateCertificateRequest {
  public static final String SERIALIZED_NAME_CSR = "csr";
  @SerializedName(SERIALIZED_NAME_CSR)
  private String csr;

  public static final String SERIALIZED_NAME_HOSTNAMES = "hostnames";
  @SerializedName(SERIALIZED_NAME_HOSTNAMES)
  private List<Object> hostnames = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUEST_TYPE = "request_type";
  @SerializedName(SERIALIZED_NAME_REQUEST_TYPE)
  private TlsCertificatesAndHostnamesRequestType requestType;

  public static final String SERIALIZED_NAME_REQUESTED_VALIDITY = "requested_validity";
  @SerializedName(SERIALIZED_NAME_REQUESTED_VALIDITY)
  private TlsCertificatesAndHostnamesRequestedValidity requestedValidity = TlsCertificatesAndHostnamesRequestedValidity.NUMBER_5475;

  public OriginCaCreateCertificateRequest() {
  }

  public OriginCaCreateCertificateRequest csr(String csr) {
    this.csr = csr;
    return this;
  }

   /**
   * The Certificate Signing Request (CSR). Must be newline-encoded.
   * @return csr
  **/
  @javax.annotation.Nullable
  public String getCsr() {
    return csr;
  }

  public void setCsr(String csr) {
    this.csr = csr;
  }


  public OriginCaCreateCertificateRequest hostnames(List<Object> hostnames) {
    this.hostnames = hostnames;
    return this;
  }

  public OriginCaCreateCertificateRequest addHostnamesItem(Object hostnamesItem) {
    if (this.hostnames == null) {
      this.hostnames = new ArrayList<>();
    }
    this.hostnames.add(hostnamesItem);
    return this;
  }

   /**
   * Array of hostnames or wildcard names (e.g., *.example.com) bound to the certificate.
   * @return hostnames
  **/
  @javax.annotation.Nullable
  public List<Object> getHostnames() {
    return hostnames;
  }

  public void setHostnames(List<Object> hostnames) {
    this.hostnames = hostnames;
  }


  public OriginCaCreateCertificateRequest requestType(TlsCertificatesAndHostnamesRequestType requestType) {
    this.requestType = requestType;
    return this;
  }

   /**
   * Get requestType
   * @return requestType
  **/
  @javax.annotation.Nullable
  public TlsCertificatesAndHostnamesRequestType getRequestType() {
    return requestType;
  }

  public void setRequestType(TlsCertificatesAndHostnamesRequestType requestType) {
    this.requestType = requestType;
  }


  public OriginCaCreateCertificateRequest requestedValidity(TlsCertificatesAndHostnamesRequestedValidity requestedValidity) {
    this.requestedValidity = requestedValidity;
    return this;
  }

   /**
   * Get requestedValidity
   * @return requestedValidity
  **/
  @javax.annotation.Nullable
  public TlsCertificatesAndHostnamesRequestedValidity getRequestedValidity() {
    return requestedValidity;
  }

  public void setRequestedValidity(TlsCertificatesAndHostnamesRequestedValidity requestedValidity) {
    this.requestedValidity = requestedValidity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OriginCaCreateCertificateRequest originCaCreateCertificateRequest = (OriginCaCreateCertificateRequest) o;
    return Objects.equals(this.csr, originCaCreateCertificateRequest.csr) &&
        Objects.equals(this.hostnames, originCaCreateCertificateRequest.hostnames) &&
        Objects.equals(this.requestType, originCaCreateCertificateRequest.requestType) &&
        Objects.equals(this.requestedValidity, originCaCreateCertificateRequest.requestedValidity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(csr, hostnames, requestType, requestedValidity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OriginCaCreateCertificateRequest {\n");
    sb.append("    csr: ").append(toIndentedString(csr)).append("\n");
    sb.append("    hostnames: ").append(toIndentedString(hostnames)).append("\n");
    sb.append("    requestType: ").append(toIndentedString(requestType)).append("\n");
    sb.append("    requestedValidity: ").append(toIndentedString(requestedValidity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("csr");
    openapiFields.add("hostnames");
    openapiFields.add("request_type");
    openapiFields.add("requested_validity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to OriginCaCreateCertificateRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OriginCaCreateCertificateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OriginCaCreateCertificateRequest is not found in the empty JSON string", OriginCaCreateCertificateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OriginCaCreateCertificateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OriginCaCreateCertificateRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("csr") != null && !jsonObj.get("csr").isJsonNull()) && !jsonObj.get("csr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `csr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("csr").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("hostnames") != null && !jsonObj.get("hostnames").isJsonNull() && !jsonObj.get("hostnames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostnames` to be an array in the JSON string but got `%s`", jsonObj.get("hostnames").toString()));
      }
      // validate the optional field `request_type`
      if (jsonObj.get("request_type") != null && !jsonObj.get("request_type").isJsonNull()) {
        TlsCertificatesAndHostnamesRequestType.validateJsonElement(jsonObj.get("request_type"));
      }
      // validate the optional field `requested_validity`
      if (jsonObj.get("requested_validity") != null && !jsonObj.get("requested_validity").isJsonNull()) {
        TlsCertificatesAndHostnamesRequestedValidity.validateJsonElement(jsonObj.get("requested_validity"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OriginCaCreateCertificateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OriginCaCreateCertificateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OriginCaCreateCertificateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OriginCaCreateCertificateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<OriginCaCreateCertificateRequest>() {
           @Override
           public void write(JsonWriter out, OriginCaCreateCertificateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OriginCaCreateCertificateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OriginCaCreateCertificateRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OriginCaCreateCertificateRequest
  * @throws IOException if the JSON string is invalid with respect to OriginCaCreateCertificateRequest
  */
  public static OriginCaCreateCertificateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OriginCaCreateCertificateRequest.class);
  }

 /**
  * Convert an instance of OriginCaCreateCertificateRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

