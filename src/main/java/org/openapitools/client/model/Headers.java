/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * The header names and values to include in building the cache key.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class Headers {
  public static final String SERIALIZED_NAME_CHECK_PRESENCE = "check_presence";
  @SerializedName(SERIALIZED_NAME_CHECK_PRESENCE)
  private List<String> checkPresence = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXCLUDE_ORIGIN = "exclude_origin";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_ORIGIN)
  private Boolean excludeOrigin;

  public static final String SERIALIZED_NAME_INCLUDE = "include";
  @SerializedName(SERIALIZED_NAME_INCLUDE)
  private List<String> include = new ArrayList<>();

  public Headers() {
  }

  public Headers checkPresence(List<String> checkPresence) {
    this.checkPresence = checkPresence;
    return this;
  }

  public Headers addCheckPresenceItem(String checkPresenceItem) {
    if (this.checkPresence == null) {
      this.checkPresence = new ArrayList<>();
    }
    this.checkPresence.add(checkPresenceItem);
    return this;
  }

   /**
   * Checks for the presence of these header names. The presence of these headers is used in building the cache key.
   * @return checkPresence
  **/
  @javax.annotation.Nullable
  public List<String> getCheckPresence() {
    return checkPresence;
  }

  public void setCheckPresence(List<String> checkPresence) {
    this.checkPresence = checkPresence;
  }


  public Headers excludeOrigin(Boolean excludeOrigin) {
    this.excludeOrigin = excludeOrigin;
    return this;
  }

   /**
   * Whether or not to include the origin header. A value of true will exclude the origin header in the cache key.
   * @return excludeOrigin
  **/
  @javax.annotation.Nullable
  public Boolean getExcludeOrigin() {
    return excludeOrigin;
  }

  public void setExcludeOrigin(Boolean excludeOrigin) {
    this.excludeOrigin = excludeOrigin;
  }


  public Headers include(List<String> include) {
    this.include = include;
    return this;
  }

  public Headers addIncludeItem(String includeItem) {
    if (this.include == null) {
      this.include = new ArrayList<>();
    }
    this.include.add(includeItem);
    return this;
  }

   /**
   * Include these headers&#39; names and their values.
   * @return include
  **/
  @javax.annotation.Nullable
  public List<String> getInclude() {
    return include;
  }

  public void setInclude(List<String> include) {
    this.include = include;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Headers headers = (Headers) o;
    return Objects.equals(this.checkPresence, headers.checkPresence) &&
        Objects.equals(this.excludeOrigin, headers.excludeOrigin) &&
        Objects.equals(this.include, headers.include);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checkPresence, excludeOrigin, include);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Headers {\n");
    sb.append("    checkPresence: ").append(toIndentedString(checkPresence)).append("\n");
    sb.append("    excludeOrigin: ").append(toIndentedString(excludeOrigin)).append("\n");
    sb.append("    include: ").append(toIndentedString(include)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("check_presence");
    openapiFields.add("exclude_origin");
    openapiFields.add("include");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Headers
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Headers.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Headers is not found in the empty JSON string", Headers.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Headers.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Headers` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("check_presence") != null && !jsonObj.get("check_presence").isJsonNull() && !jsonObj.get("check_presence").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `check_presence` to be an array in the JSON string but got `%s`", jsonObj.get("check_presence").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("include") != null && !jsonObj.get("include").isJsonNull() && !jsonObj.get("include").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `include` to be an array in the JSON string but got `%s`", jsonObj.get("include").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Headers.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Headers' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Headers> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Headers.class));

       return (TypeAdapter<T>) new TypeAdapter<Headers>() {
           @Override
           public void write(JsonWriter out, Headers value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Headers read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Headers given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Headers
  * @throws IOException if the JSON string is invalid with respect to Headers
  */
  public static Headers fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Headers.class);
  }

 /**
  * Convert an instance of Headers to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

