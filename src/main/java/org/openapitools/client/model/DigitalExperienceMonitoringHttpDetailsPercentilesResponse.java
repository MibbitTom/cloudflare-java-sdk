/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DigitalExperienceMonitoringPercentiles;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * DigitalExperienceMonitoringHttpDetailsPercentilesResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class DigitalExperienceMonitoringHttpDetailsPercentilesResponse {
  public static final String SERIALIZED_NAME_DNS_RESPONSE_TIME_MS = "dnsResponseTimeMs";
  @SerializedName(SERIALIZED_NAME_DNS_RESPONSE_TIME_MS)
  private DigitalExperienceMonitoringPercentiles dnsResponseTimeMs;

  public static final String SERIALIZED_NAME_RESOURCE_FETCH_TIME_MS = "resourceFetchTimeMs";
  @SerializedName(SERIALIZED_NAME_RESOURCE_FETCH_TIME_MS)
  private DigitalExperienceMonitoringPercentiles resourceFetchTimeMs;

  public static final String SERIALIZED_NAME_SERVER_RESPONSE_TIME_MS = "serverResponseTimeMs";
  @SerializedName(SERIALIZED_NAME_SERVER_RESPONSE_TIME_MS)
  private DigitalExperienceMonitoringPercentiles serverResponseTimeMs;

  public DigitalExperienceMonitoringHttpDetailsPercentilesResponse() {
  }

  public DigitalExperienceMonitoringHttpDetailsPercentilesResponse dnsResponseTimeMs(DigitalExperienceMonitoringPercentiles dnsResponseTimeMs) {
    this.dnsResponseTimeMs = dnsResponseTimeMs;
    return this;
  }

   /**
   * Get dnsResponseTimeMs
   * @return dnsResponseTimeMs
  **/
  @javax.annotation.Nullable
  public DigitalExperienceMonitoringPercentiles getDnsResponseTimeMs() {
    return dnsResponseTimeMs;
  }

  public void setDnsResponseTimeMs(DigitalExperienceMonitoringPercentiles dnsResponseTimeMs) {
    this.dnsResponseTimeMs = dnsResponseTimeMs;
  }


  public DigitalExperienceMonitoringHttpDetailsPercentilesResponse resourceFetchTimeMs(DigitalExperienceMonitoringPercentiles resourceFetchTimeMs) {
    this.resourceFetchTimeMs = resourceFetchTimeMs;
    return this;
  }

   /**
   * Get resourceFetchTimeMs
   * @return resourceFetchTimeMs
  **/
  @javax.annotation.Nullable
  public DigitalExperienceMonitoringPercentiles getResourceFetchTimeMs() {
    return resourceFetchTimeMs;
  }

  public void setResourceFetchTimeMs(DigitalExperienceMonitoringPercentiles resourceFetchTimeMs) {
    this.resourceFetchTimeMs = resourceFetchTimeMs;
  }


  public DigitalExperienceMonitoringHttpDetailsPercentilesResponse serverResponseTimeMs(DigitalExperienceMonitoringPercentiles serverResponseTimeMs) {
    this.serverResponseTimeMs = serverResponseTimeMs;
    return this;
  }

   /**
   * Get serverResponseTimeMs
   * @return serverResponseTimeMs
  **/
  @javax.annotation.Nullable
  public DigitalExperienceMonitoringPercentiles getServerResponseTimeMs() {
    return serverResponseTimeMs;
  }

  public void setServerResponseTimeMs(DigitalExperienceMonitoringPercentiles serverResponseTimeMs) {
    this.serverResponseTimeMs = serverResponseTimeMs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DigitalExperienceMonitoringHttpDetailsPercentilesResponse digitalExperienceMonitoringHttpDetailsPercentilesResponse = (DigitalExperienceMonitoringHttpDetailsPercentilesResponse) o;
    return Objects.equals(this.dnsResponseTimeMs, digitalExperienceMonitoringHttpDetailsPercentilesResponse.dnsResponseTimeMs) &&
        Objects.equals(this.resourceFetchTimeMs, digitalExperienceMonitoringHttpDetailsPercentilesResponse.resourceFetchTimeMs) &&
        Objects.equals(this.serverResponseTimeMs, digitalExperienceMonitoringHttpDetailsPercentilesResponse.serverResponseTimeMs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dnsResponseTimeMs, resourceFetchTimeMs, serverResponseTimeMs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DigitalExperienceMonitoringHttpDetailsPercentilesResponse {\n");
    sb.append("    dnsResponseTimeMs: ").append(toIndentedString(dnsResponseTimeMs)).append("\n");
    sb.append("    resourceFetchTimeMs: ").append(toIndentedString(resourceFetchTimeMs)).append("\n");
    sb.append("    serverResponseTimeMs: ").append(toIndentedString(serverResponseTimeMs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dnsResponseTimeMs");
    openapiFields.add("resourceFetchTimeMs");
    openapiFields.add("serverResponseTimeMs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DigitalExperienceMonitoringHttpDetailsPercentilesResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DigitalExperienceMonitoringHttpDetailsPercentilesResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DigitalExperienceMonitoringHttpDetailsPercentilesResponse is not found in the empty JSON string", DigitalExperienceMonitoringHttpDetailsPercentilesResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DigitalExperienceMonitoringHttpDetailsPercentilesResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DigitalExperienceMonitoringHttpDetailsPercentilesResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dnsResponseTimeMs`
      if (jsonObj.get("dnsResponseTimeMs") != null && !jsonObj.get("dnsResponseTimeMs").isJsonNull()) {
        DigitalExperienceMonitoringPercentiles.validateJsonElement(jsonObj.get("dnsResponseTimeMs"));
      }
      // validate the optional field `resourceFetchTimeMs`
      if (jsonObj.get("resourceFetchTimeMs") != null && !jsonObj.get("resourceFetchTimeMs").isJsonNull()) {
        DigitalExperienceMonitoringPercentiles.validateJsonElement(jsonObj.get("resourceFetchTimeMs"));
      }
      // validate the optional field `serverResponseTimeMs`
      if (jsonObj.get("serverResponseTimeMs") != null && !jsonObj.get("serverResponseTimeMs").isJsonNull()) {
        DigitalExperienceMonitoringPercentiles.validateJsonElement(jsonObj.get("serverResponseTimeMs"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DigitalExperienceMonitoringHttpDetailsPercentilesResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DigitalExperienceMonitoringHttpDetailsPercentilesResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DigitalExperienceMonitoringHttpDetailsPercentilesResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DigitalExperienceMonitoringHttpDetailsPercentilesResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DigitalExperienceMonitoringHttpDetailsPercentilesResponse>() {
           @Override
           public void write(JsonWriter out, DigitalExperienceMonitoringHttpDetailsPercentilesResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DigitalExperienceMonitoringHttpDetailsPercentilesResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DigitalExperienceMonitoringHttpDetailsPercentilesResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DigitalExperienceMonitoringHttpDetailsPercentilesResponse
  * @throws IOException if the JSON string is invalid with respect to DigitalExperienceMonitoringHttpDetailsPercentilesResponse
  */
  public static DigitalExperienceMonitoringHttpDetailsPercentilesResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DigitalExperienceMonitoringHttpDetailsPercentilesResponse.class);
  }

 /**
  * Convert an instance of DigitalExperienceMonitoringHttpDetailsPercentilesResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

