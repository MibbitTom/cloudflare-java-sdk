/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OverridesAction2;
import org.openapitools.client.model.OverridesEnabled2;
import org.openapitools.client.model.OverridesId;
import org.openapitools.client.model.OverridesSensitivityLevel1;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * A rule-level override
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class RuleOverride {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private OverridesAction2 action;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private OverridesEnabled2 enabled;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private OverridesId id;

  public static final String SERIALIZED_NAME_SCORE_THRESHOLD = "score_threshold";
  @SerializedName(SERIALIZED_NAME_SCORE_THRESHOLD)
  private Integer scoreThreshold;

  public static final String SERIALIZED_NAME_SENSITIVITY_LEVEL = "sensitivity_level";
  @SerializedName(SERIALIZED_NAME_SENSITIVITY_LEVEL)
  private OverridesSensitivityLevel1 sensitivityLevel;

  public RuleOverride() {
  }

  public RuleOverride action(OverridesAction2 action) {
    this.action = action;
    return this;
  }

   /**
   * Get action
   * @return action
  **/
  @javax.annotation.Nullable
  public OverridesAction2 getAction() {
    return action;
  }

  public void setAction(OverridesAction2 action) {
    this.action = action;
  }


  public RuleOverride enabled(OverridesEnabled2 enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Get enabled
   * @return enabled
  **/
  @javax.annotation.Nullable
  public OverridesEnabled2 getEnabled() {
    return enabled;
  }

  public void setEnabled(OverridesEnabled2 enabled) {
    this.enabled = enabled;
  }


  public RuleOverride id(OverridesId id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public OverridesId getId() {
    return id;
  }

  public void setId(OverridesId id) {
    this.id = id;
  }


  public RuleOverride scoreThreshold(Integer scoreThreshold) {
    this.scoreThreshold = scoreThreshold;
    return this;
  }

   /**
   * The score threshold to use for the rule.
   * @return scoreThreshold
  **/
  @javax.annotation.Nullable
  public Integer getScoreThreshold() {
    return scoreThreshold;
  }

  public void setScoreThreshold(Integer scoreThreshold) {
    this.scoreThreshold = scoreThreshold;
  }


  public RuleOverride sensitivityLevel(OverridesSensitivityLevel1 sensitivityLevel) {
    this.sensitivityLevel = sensitivityLevel;
    return this;
  }

   /**
   * Get sensitivityLevel
   * @return sensitivityLevel
  **/
  @javax.annotation.Nullable
  public OverridesSensitivityLevel1 getSensitivityLevel() {
    return sensitivityLevel;
  }

  public void setSensitivityLevel(OverridesSensitivityLevel1 sensitivityLevel) {
    this.sensitivityLevel = sensitivityLevel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RuleOverride ruleOverride = (RuleOverride) o;
    return Objects.equals(this.action, ruleOverride.action) &&
        Objects.equals(this.enabled, ruleOverride.enabled) &&
        Objects.equals(this.id, ruleOverride.id) &&
        Objects.equals(this.scoreThreshold, ruleOverride.scoreThreshold) &&
        Objects.equals(this.sensitivityLevel, ruleOverride.sensitivityLevel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, enabled, id, scoreThreshold, sensitivityLevel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RuleOverride {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    scoreThreshold: ").append(toIndentedString(scoreThreshold)).append("\n");
    sb.append("    sensitivityLevel: ").append(toIndentedString(sensitivityLevel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("enabled");
    openapiFields.add("id");
    openapiFields.add("score_threshold");
    openapiFields.add("sensitivity_level");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RuleOverride
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RuleOverride.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RuleOverride is not found in the empty JSON string", RuleOverride.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RuleOverride.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RuleOverride` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RuleOverride.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `action`
      if (jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) {
        OverridesAction2.validateJsonElement(jsonObj.get("action"));
      }
      // validate the optional field `enabled`
      if (jsonObj.get("enabled") != null && !jsonObj.get("enabled").isJsonNull()) {
        OverridesEnabled2.validateJsonElement(jsonObj.get("enabled"));
      }
      // validate the required field `id`
      OverridesId.validateJsonElement(jsonObj.get("id"));
      // validate the optional field `sensitivity_level`
      if (jsonObj.get("sensitivity_level") != null && !jsonObj.get("sensitivity_level").isJsonNull()) {
        OverridesSensitivityLevel1.validateJsonElement(jsonObj.get("sensitivity_level"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RuleOverride.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RuleOverride' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RuleOverride> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RuleOverride.class));

       return (TypeAdapter<T>) new TypeAdapter<RuleOverride>() {
           @Override
           public void write(JsonWriter out, RuleOverride value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RuleOverride read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RuleOverride given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RuleOverride
  * @throws IOException if the JSON string is invalid with respect to RuleOverride
  */
  public static RuleOverride fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RuleOverride.class);
  }

 /**
  * Convert an instance of RuleOverride to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

