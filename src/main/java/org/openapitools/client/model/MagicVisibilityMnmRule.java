/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MagicVisibilityMnmRule
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class MagicVisibilityMnmRule {
  public static final String SERIALIZED_NAME_AUTOMATIC_ADVERTISEMENT = "automatic_advertisement";
  @SerializedName(SERIALIZED_NAME_AUTOMATIC_ADVERTISEMENT)
  private Boolean automaticAdvertisement;

  public static final String SERIALIZED_NAME_BANDWIDTH_THRESHOLD = "bandwidth_threshold";
  @SerializedName(SERIALIZED_NAME_BANDWIDTH_THRESHOLD)
  private BigDecimal bandwidthThreshold;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration = "1m";

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PACKET_THRESHOLD = "packet_threshold";
  @SerializedName(SERIALIZED_NAME_PACKET_THRESHOLD)
  private BigDecimal packetThreshold;

  public static final String SERIALIZED_NAME_PREFIXES = "prefixes";
  @SerializedName(SERIALIZED_NAME_PREFIXES)
  private List<String> prefixes = new ArrayList<>();

  public MagicVisibilityMnmRule() {
  }

  public MagicVisibilityMnmRule automaticAdvertisement(Boolean automaticAdvertisement) {
    this.automaticAdvertisement = automaticAdvertisement;
    return this;
  }

   /**
   * Toggle on if you would like Cloudflare to automatically advertise the IP Prefixes within the rule via Magic Transit when the rule is triggered. Only available for users of Magic Transit.
   * @return automaticAdvertisement
  **/
  @javax.annotation.Nullable
  public Boolean getAutomaticAdvertisement() {
    return automaticAdvertisement;
  }

  public void setAutomaticAdvertisement(Boolean automaticAdvertisement) {
    this.automaticAdvertisement = automaticAdvertisement;
  }


  public MagicVisibilityMnmRule bandwidthThreshold(BigDecimal bandwidthThreshold) {
    this.bandwidthThreshold = bandwidthThreshold;
    return this;
  }

   /**
   * The number of bits per second for the rule. When this value is exceeded for the set duration, an alert notification is sent. Minimum of 1 and no maximum.
   * minimum: 1
   * @return bandwidthThreshold
  **/
  @javax.annotation.Nullable
  public BigDecimal getBandwidthThreshold() {
    return bandwidthThreshold;
  }

  public void setBandwidthThreshold(BigDecimal bandwidthThreshold) {
    this.bandwidthThreshold = bandwidthThreshold;
  }


  public MagicVisibilityMnmRule duration(String duration) {
    this.duration = duration;
    return this;
  }

   /**
   * The amount of time that the rule threshold must be exceeded to send an alert notification. The final value must be equivalent to one of the following 8 values [\&quot;1m\&quot;,\&quot;5m\&quot;,\&quot;10m\&quot;,\&quot;15m\&quot;,\&quot;20m\&quot;,\&quot;30m\&quot;,\&quot;45m\&quot;,\&quot;60m\&quot;]. The format is AhBmCsDmsEusFns where A, B, C, D, E and F durations are optional; however at least one unit must be provided.
   * @return duration
  **/
  @javax.annotation.Nonnull
  public String getDuration() {
    return duration;
  }

  public void setDuration(String duration) {
    this.duration = duration;
  }


  public MagicVisibilityMnmRule id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The id of the rule. Must be unique.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public MagicVisibilityMnmRule name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the rule. Must be unique. Supports characters A-Z, a-z, 0-9, underscore (_), dash (-), period (.), and tilde (~). You canâ€™t have a space in the rule name. Max 256 characters.
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public MagicVisibilityMnmRule packetThreshold(BigDecimal packetThreshold) {
    this.packetThreshold = packetThreshold;
    return this;
  }

   /**
   * The number of packets per second for the rule. When this value is exceeded for the set duration, an alert notification is sent. Minimum of 1 and no maximum.
   * minimum: 1
   * @return packetThreshold
  **/
  @javax.annotation.Nullable
  public BigDecimal getPacketThreshold() {
    return packetThreshold;
  }

  public void setPacketThreshold(BigDecimal packetThreshold) {
    this.packetThreshold = packetThreshold;
  }


  public MagicVisibilityMnmRule prefixes(List<String> prefixes) {
    this.prefixes = prefixes;
    return this;
  }

  public MagicVisibilityMnmRule addPrefixesItem(String prefixesItem) {
    if (this.prefixes == null) {
      this.prefixes = new ArrayList<>();
    }
    this.prefixes.add(prefixesItem);
    return this;
  }

   /**
   * Get prefixes
   * @return prefixes
  **/
  @javax.annotation.Nonnull
  public List<String> getPrefixes() {
    return prefixes;
  }

  public void setPrefixes(List<String> prefixes) {
    this.prefixes = prefixes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MagicVisibilityMnmRule magicVisibilityMnmRule = (MagicVisibilityMnmRule) o;
    return Objects.equals(this.automaticAdvertisement, magicVisibilityMnmRule.automaticAdvertisement) &&
        Objects.equals(this.bandwidthThreshold, magicVisibilityMnmRule.bandwidthThreshold) &&
        Objects.equals(this.duration, magicVisibilityMnmRule.duration) &&
        Objects.equals(this.id, magicVisibilityMnmRule.id) &&
        Objects.equals(this.name, magicVisibilityMnmRule.name) &&
        Objects.equals(this.packetThreshold, magicVisibilityMnmRule.packetThreshold) &&
        Objects.equals(this.prefixes, magicVisibilityMnmRule.prefixes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(automaticAdvertisement, bandwidthThreshold, duration, id, name, packetThreshold, prefixes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MagicVisibilityMnmRule {\n");
    sb.append("    automaticAdvertisement: ").append(toIndentedString(automaticAdvertisement)).append("\n");
    sb.append("    bandwidthThreshold: ").append(toIndentedString(bandwidthThreshold)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    packetThreshold: ").append(toIndentedString(packetThreshold)).append("\n");
    sb.append("    prefixes: ").append(toIndentedString(prefixes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("automatic_advertisement");
    openapiFields.add("bandwidth_threshold");
    openapiFields.add("duration");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("packet_threshold");
    openapiFields.add("prefixes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("automatic_advertisement");
    openapiRequiredFields.add("duration");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("prefixes");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MagicVisibilityMnmRule
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MagicVisibilityMnmRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MagicVisibilityMnmRule is not found in the empty JSON string", MagicVisibilityMnmRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MagicVisibilityMnmRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MagicVisibilityMnmRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MagicVisibilityMnmRule.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("prefixes") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("prefixes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefixes` to be an array in the JSON string but got `%s`", jsonObj.get("prefixes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MagicVisibilityMnmRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MagicVisibilityMnmRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MagicVisibilityMnmRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MagicVisibilityMnmRule.class));

       return (TypeAdapter<T>) new TypeAdapter<MagicVisibilityMnmRule>() {
           @Override
           public void write(JsonWriter out, MagicVisibilityMnmRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MagicVisibilityMnmRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MagicVisibilityMnmRule given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MagicVisibilityMnmRule
  * @throws IOException if the JSON string is invalid with respect to MagicVisibilityMnmRule
  */
  public static MagicVisibilityMnmRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MagicVisibilityMnmRule.class);
  }

 /**
  * Convert an instance of MagicVisibilityMnmRule to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

