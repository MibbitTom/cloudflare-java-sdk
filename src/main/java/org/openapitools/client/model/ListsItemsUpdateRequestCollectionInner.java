/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ListsItemHostname;
import org.openapitools.client.model.ListsItemRedirect;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * ListsItemsUpdateRequestCollectionInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class ListsItemsUpdateRequestCollectionInner {
  public static final String SERIALIZED_NAME_ASN = "asn";
  @SerializedName(SERIALIZED_NAME_ASN)
  private Integer asn;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private ListsItemHostname hostname;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_REDIRECT = "redirect";
  @SerializedName(SERIALIZED_NAME_REDIRECT)
  private ListsItemRedirect redirect;

  public ListsItemsUpdateRequestCollectionInner() {
  }

  public ListsItemsUpdateRequestCollectionInner asn(Integer asn) {
    this.asn = asn;
    return this;
  }

   /**
   * A non-negative 32 bit integer
   * @return asn
  **/
  @javax.annotation.Nullable
  public Integer getAsn() {
    return asn;
  }

  public void setAsn(Integer asn) {
    this.asn = asn;
  }


  public ListsItemsUpdateRequestCollectionInner comment(String comment) {
    this.comment = comment;
    return this;
  }

   /**
   * An informative summary of the list item.
   * @return comment
  **/
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public ListsItemsUpdateRequestCollectionInner hostname(ListsItemHostname hostname) {
    this.hostname = hostname;
    return this;
  }

   /**
   * Get hostname
   * @return hostname
  **/
  @javax.annotation.Nullable
  public ListsItemHostname getHostname() {
    return hostname;
  }

  public void setHostname(ListsItemHostname hostname) {
    this.hostname = hostname;
  }


  public ListsItemsUpdateRequestCollectionInner ip(String ip) {
    this.ip = ip;
    return this;
  }

   /**
   * An IPv4 address, an IPv4 CIDR, or an IPv6 CIDR. IPv6 CIDRs are limited to a maximum of /64.
   * @return ip
  **/
  @javax.annotation.Nullable
  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }


  public ListsItemsUpdateRequestCollectionInner redirect(ListsItemRedirect redirect) {
    this.redirect = redirect;
    return this;
  }

   /**
   * Get redirect
   * @return redirect
  **/
  @javax.annotation.Nullable
  public ListsItemRedirect getRedirect() {
    return redirect;
  }

  public void setRedirect(ListsItemRedirect redirect) {
    this.redirect = redirect;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListsItemsUpdateRequestCollectionInner listsItemsUpdateRequestCollectionInner = (ListsItemsUpdateRequestCollectionInner) o;
    return Objects.equals(this.asn, listsItemsUpdateRequestCollectionInner.asn) &&
        Objects.equals(this.comment, listsItemsUpdateRequestCollectionInner.comment) &&
        Objects.equals(this.hostname, listsItemsUpdateRequestCollectionInner.hostname) &&
        Objects.equals(this.ip, listsItemsUpdateRequestCollectionInner.ip) &&
        Objects.equals(this.redirect, listsItemsUpdateRequestCollectionInner.redirect);
  }

  @Override
  public int hashCode() {
    return Objects.hash(asn, comment, hostname, ip, redirect);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListsItemsUpdateRequestCollectionInner {\n");
    sb.append("    asn: ").append(toIndentedString(asn)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    redirect: ").append(toIndentedString(redirect)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("asn");
    openapiFields.add("comment");
    openapiFields.add("hostname");
    openapiFields.add("ip");
    openapiFields.add("redirect");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ListsItemsUpdateRequestCollectionInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListsItemsUpdateRequestCollectionInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListsItemsUpdateRequestCollectionInner is not found in the empty JSON string", ListsItemsUpdateRequestCollectionInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListsItemsUpdateRequestCollectionInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListsItemsUpdateRequestCollectionInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      // validate the optional field `hostname`
      if (jsonObj.get("hostname") != null && !jsonObj.get("hostname").isJsonNull()) {
        ListsItemHostname.validateJsonElement(jsonObj.get("hostname"));
      }
      if ((jsonObj.get("ip") != null && !jsonObj.get("ip").isJsonNull()) && !jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      // validate the optional field `redirect`
      if (jsonObj.get("redirect") != null && !jsonObj.get("redirect").isJsonNull()) {
        ListsItemRedirect.validateJsonElement(jsonObj.get("redirect"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListsItemsUpdateRequestCollectionInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListsItemsUpdateRequestCollectionInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListsItemsUpdateRequestCollectionInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListsItemsUpdateRequestCollectionInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ListsItemsUpdateRequestCollectionInner>() {
           @Override
           public void write(JsonWriter out, ListsItemsUpdateRequestCollectionInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListsItemsUpdateRequestCollectionInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ListsItemsUpdateRequestCollectionInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ListsItemsUpdateRequestCollectionInner
  * @throws IOException if the JSON string is invalid with respect to ListsItemsUpdateRequestCollectionInner
  */
  public static ListsItemsUpdateRequestCollectionInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListsItemsUpdateRequestCollectionInner.class);
  }

 /**
  * Convert an instance of ListsItemsUpdateRequestCollectionInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

