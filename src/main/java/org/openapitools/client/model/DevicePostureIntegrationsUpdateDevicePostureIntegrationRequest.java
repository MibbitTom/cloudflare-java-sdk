/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TeamsDevicesConfigRequest;
import org.openapitools.client.model.TeamsDevicesSchemasType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * DevicePostureIntegrationsUpdateDevicePostureIntegrationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class DevicePostureIntegrationsUpdateDevicePostureIntegrationRequest {
  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private TeamsDevicesConfigRequest config;

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  private String interval;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TeamsDevicesSchemasType type;

  public DevicePostureIntegrationsUpdateDevicePostureIntegrationRequest() {
  }

  public DevicePostureIntegrationsUpdateDevicePostureIntegrationRequest config(TeamsDevicesConfigRequest config) {
    this.config = config;
    return this;
  }

   /**
   * Get config
   * @return config
  **/
  @javax.annotation.Nullable
  public TeamsDevicesConfigRequest getConfig() {
    return config;
  }

  public void setConfig(TeamsDevicesConfigRequest config) {
    this.config = config;
  }


  public DevicePostureIntegrationsUpdateDevicePostureIntegrationRequest interval(String interval) {
    this.interval = interval;
    return this;
  }

   /**
   * The interval between each posture check with the third-party API. Use &#x60;m&#x60; for minutes (e.g. &#x60;5m&#x60;) and &#x60;h&#x60; for hours (e.g. &#x60;12h&#x60;).
   * @return interval
  **/
  @javax.annotation.Nullable
  public String getInterval() {
    return interval;
  }

  public void setInterval(String interval) {
    this.interval = interval;
  }


  public DevicePostureIntegrationsUpdateDevicePostureIntegrationRequest name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the device posture integration.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DevicePostureIntegrationsUpdateDevicePostureIntegrationRequest type(TeamsDevicesSchemasType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  public TeamsDevicesSchemasType getType() {
    return type;
  }

  public void setType(TeamsDevicesSchemasType type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DevicePostureIntegrationsUpdateDevicePostureIntegrationRequest devicePostureIntegrationsUpdateDevicePostureIntegrationRequest = (DevicePostureIntegrationsUpdateDevicePostureIntegrationRequest) o;
    return Objects.equals(this.config, devicePostureIntegrationsUpdateDevicePostureIntegrationRequest.config) &&
        Objects.equals(this.interval, devicePostureIntegrationsUpdateDevicePostureIntegrationRequest.interval) &&
        Objects.equals(this.name, devicePostureIntegrationsUpdateDevicePostureIntegrationRequest.name) &&
        Objects.equals(this.type, devicePostureIntegrationsUpdateDevicePostureIntegrationRequest.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(config, interval, name, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DevicePostureIntegrationsUpdateDevicePostureIntegrationRequest {\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("config");
    openapiFields.add("interval");
    openapiFields.add("name");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DevicePostureIntegrationsUpdateDevicePostureIntegrationRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DevicePostureIntegrationsUpdateDevicePostureIntegrationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DevicePostureIntegrationsUpdateDevicePostureIntegrationRequest is not found in the empty JSON string", DevicePostureIntegrationsUpdateDevicePostureIntegrationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DevicePostureIntegrationsUpdateDevicePostureIntegrationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DevicePostureIntegrationsUpdateDevicePostureIntegrationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `config`
      if (jsonObj.get("config") != null && !jsonObj.get("config").isJsonNull()) {
        TeamsDevicesConfigRequest.validateJsonElement(jsonObj.get("config"));
      }
      if ((jsonObj.get("interval") != null && !jsonObj.get("interval").isJsonNull()) && !jsonObj.get("interval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interval").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TeamsDevicesSchemasType.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DevicePostureIntegrationsUpdateDevicePostureIntegrationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DevicePostureIntegrationsUpdateDevicePostureIntegrationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DevicePostureIntegrationsUpdateDevicePostureIntegrationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DevicePostureIntegrationsUpdateDevicePostureIntegrationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<DevicePostureIntegrationsUpdateDevicePostureIntegrationRequest>() {
           @Override
           public void write(JsonWriter out, DevicePostureIntegrationsUpdateDevicePostureIntegrationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DevicePostureIntegrationsUpdateDevicePostureIntegrationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DevicePostureIntegrationsUpdateDevicePostureIntegrationRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DevicePostureIntegrationsUpdateDevicePostureIntegrationRequest
  * @throws IOException if the JSON string is invalid with respect to DevicePostureIntegrationsUpdateDevicePostureIntegrationRequest
  */
  public static DevicePostureIntegrationsUpdateDevicePostureIntegrationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DevicePostureIntegrationsUpdateDevicePostureIntegrationRequest.class);
  }

 /**
  * Convert an instance of DevicePostureIntegrationsUpdateDevicePostureIntegrationRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

