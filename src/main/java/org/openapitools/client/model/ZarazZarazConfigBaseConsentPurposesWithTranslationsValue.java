/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * ZarazZarazConfigBaseConsentPurposesWithTranslationsValue
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class ZarazZarazConfigBaseConsentPurposesWithTranslationsValue {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private Map<String, String> description = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private Map<String, String> name = new HashMap<>();

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private Integer order;

  public ZarazZarazConfigBaseConsentPurposesWithTranslationsValue() {
  }

  public ZarazZarazConfigBaseConsentPurposesWithTranslationsValue description(Map<String, String> description) {
    this.description = description;
    return this;
  }

  public ZarazZarazConfigBaseConsentPurposesWithTranslationsValue putDescriptionItem(String key, String descriptionItem) {
    if (this.description == null) {
      this.description = new HashMap<>();
    }
    this.description.put(key, descriptionItem);
    return this;
  }

   /**
   * Object where keys are language codes
   * @return description
  **/
  @javax.annotation.Nonnull
  public Map<String, String> getDescription() {
    return description;
  }

  public void setDescription(Map<String, String> description) {
    this.description = description;
  }


  public ZarazZarazConfigBaseConsentPurposesWithTranslationsValue name(Map<String, String> name) {
    this.name = name;
    return this;
  }

  public ZarazZarazConfigBaseConsentPurposesWithTranslationsValue putNameItem(String key, String nameItem) {
    if (this.name == null) {
      this.name = new HashMap<>();
    }
    this.name.put(key, nameItem);
    return this;
  }

   /**
   * Object where keys are language codes
   * @return name
  **/
  @javax.annotation.Nonnull
  public Map<String, String> getName() {
    return name;
  }

  public void setName(Map<String, String> name) {
    this.name = name;
  }


  public ZarazZarazConfigBaseConsentPurposesWithTranslationsValue order(Integer order) {
    this.order = order;
    return this;
  }

   /**
   * Get order
   * @return order
  **/
  @javax.annotation.Nonnull
  public Integer getOrder() {
    return order;
  }

  public void setOrder(Integer order) {
    this.order = order;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ZarazZarazConfigBaseConsentPurposesWithTranslationsValue zarazZarazConfigBaseConsentPurposesWithTranslationsValue = (ZarazZarazConfigBaseConsentPurposesWithTranslationsValue) o;
    return Objects.equals(this.description, zarazZarazConfigBaseConsentPurposesWithTranslationsValue.description) &&
        Objects.equals(this.name, zarazZarazConfigBaseConsentPurposesWithTranslationsValue.name) &&
        Objects.equals(this.order, zarazZarazConfigBaseConsentPurposesWithTranslationsValue.order);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, name, order);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ZarazZarazConfigBaseConsentPurposesWithTranslationsValue {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("name");
    openapiFields.add("order");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("order");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ZarazZarazConfigBaseConsentPurposesWithTranslationsValue
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ZarazZarazConfigBaseConsentPurposesWithTranslationsValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ZarazZarazConfigBaseConsentPurposesWithTranslationsValue is not found in the empty JSON string", ZarazZarazConfigBaseConsentPurposesWithTranslationsValue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ZarazZarazConfigBaseConsentPurposesWithTranslationsValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ZarazZarazConfigBaseConsentPurposesWithTranslationsValue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ZarazZarazConfigBaseConsentPurposesWithTranslationsValue.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ZarazZarazConfigBaseConsentPurposesWithTranslationsValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ZarazZarazConfigBaseConsentPurposesWithTranslationsValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ZarazZarazConfigBaseConsentPurposesWithTranslationsValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ZarazZarazConfigBaseConsentPurposesWithTranslationsValue.class));

       return (TypeAdapter<T>) new TypeAdapter<ZarazZarazConfigBaseConsentPurposesWithTranslationsValue>() {
           @Override
           public void write(JsonWriter out, ZarazZarazConfigBaseConsentPurposesWithTranslationsValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ZarazZarazConfigBaseConsentPurposesWithTranslationsValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ZarazZarazConfigBaseConsentPurposesWithTranslationsValue given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ZarazZarazConfigBaseConsentPurposesWithTranslationsValue
  * @throws IOException if the JSON string is invalid with respect to ZarazZarazConfigBaseConsentPurposesWithTranslationsValue
  */
  public static ZarazZarazConfigBaseConsentPurposesWithTranslationsValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ZarazZarazConfigBaseConsentPurposesWithTranslationsValue.class);
  }

 /**
  * Convert an instance of ZarazZarazConfigBaseConsentPurposesWithTranslationsValue to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

