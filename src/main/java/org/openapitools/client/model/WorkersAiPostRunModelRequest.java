/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ImageClassification;
import org.openapitools.client.model.ImageToText;
import org.openapitools.client.model.ObjectDetection;
import org.openapitools.client.model.SentenceSimilarity;
import org.openapitools.client.model.SpeechRecognition;
import org.openapitools.client.model.Summarization;
import org.openapitools.client.model.TextClassification;
import org.openapitools.client.model.TextEmbeddings;
import org.openapitools.client.model.TextToImage;
import org.openapitools.client.model.Translation;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class WorkersAiPostRunModelRequest extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(WorkersAiPostRunModelRequest.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!WorkersAiPostRunModelRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'WorkersAiPostRunModelRequest' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<TextClassification> adapterTextClassification = gson.getDelegateAdapter(this, TypeToken.get(TextClassification.class));
            final TypeAdapter<TextToImage> adapterTextToImage = gson.getDelegateAdapter(this, TypeToken.get(TextToImage.class));
            final TypeAdapter<SentenceSimilarity> adapterSentenceSimilarity = gson.getDelegateAdapter(this, TypeToken.get(SentenceSimilarity.class));
            final TypeAdapter<TextEmbeddings> adapterTextEmbeddings = gson.getDelegateAdapter(this, TypeToken.get(TextEmbeddings.class));
            final TypeAdapter<SpeechRecognition> adapterSpeechRecognition = gson.getDelegateAdapter(this, TypeToken.get(SpeechRecognition.class));
            final TypeAdapter<ImageClassification> adapterImageClassification = gson.getDelegateAdapter(this, TypeToken.get(ImageClassification.class));
            final TypeAdapter<ObjectDetection> adapterObjectDetection = gson.getDelegateAdapter(this, TypeToken.get(ObjectDetection.class));
            final TypeAdapter<OneOf> adapterOneOf = gson.getDelegateAdapter(this, TypeToken.get(OneOf.class));
            final TypeAdapter<Translation> adapterTranslation = gson.getDelegateAdapter(this, TypeToken.get(Translation.class));
            final TypeAdapter<Summarization> adapterSummarization = gson.getDelegateAdapter(this, TypeToken.get(Summarization.class));
            final TypeAdapter<ImageToText> adapterImageToText = gson.getDelegateAdapter(this, TypeToken.get(ImageToText.class));

            return (TypeAdapter<T>) new TypeAdapter<WorkersAiPostRunModelRequest>() {
                @Override
                public void write(JsonWriter out, WorkersAiPostRunModelRequest value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `TextClassification`
                    if (value.getActualInstance() instanceof TextClassification) {
                        JsonElement element = adapterTextClassification.toJsonTree((TextClassification)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TextToImage`
                    if (value.getActualInstance() instanceof TextToImage) {
                        JsonElement element = adapterTextToImage.toJsonTree((TextToImage)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SentenceSimilarity`
                    if (value.getActualInstance() instanceof SentenceSimilarity) {
                        JsonElement element = adapterSentenceSimilarity.toJsonTree((SentenceSimilarity)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TextEmbeddings`
                    if (value.getActualInstance() instanceof TextEmbeddings) {
                        JsonElement element = adapterTextEmbeddings.toJsonTree((TextEmbeddings)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SpeechRecognition`
                    if (value.getActualInstance() instanceof SpeechRecognition) {
                        JsonElement element = adapterSpeechRecognition.toJsonTree((SpeechRecognition)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ImageClassification`
                    if (value.getActualInstance() instanceof ImageClassification) {
                        JsonElement element = adapterImageClassification.toJsonTree((ImageClassification)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ObjectDetection`
                    if (value.getActualInstance() instanceof ObjectDetection) {
                        JsonElement element = adapterObjectDetection.toJsonTree((ObjectDetection)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `OneOf`
                    if (value.getActualInstance() instanceof OneOf) {
                        JsonElement element = adapterOneOf.toJsonTree((OneOf)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Translation`
                    if (value.getActualInstance() instanceof Translation) {
                        JsonElement element = adapterTranslation.toJsonTree((Translation)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Summarization`
                    if (value.getActualInstance() instanceof Summarization) {
                        JsonElement element = adapterSummarization.toJsonTree((Summarization)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ImageToText`
                    if (value.getActualInstance() instanceof ImageToText) {
                        JsonElement element = adapterImageToText.toJsonTree((ImageToText)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: ImageClassification, ImageToText, ObjectDetection, OneOf, SentenceSimilarity, SpeechRecognition, Summarization, TextClassification, TextEmbeddings, TextToImage, Translation");
                }

                @Override
                public WorkersAiPostRunModelRequest read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize TextClassification
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TextClassification.validateJsonElement(jsonElement);
                        actualAdapter = adapterTextClassification;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TextClassification'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TextClassification failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TextClassification'", e);
                    }
                    // deserialize TextToImage
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TextToImage.validateJsonElement(jsonElement);
                        actualAdapter = adapterTextToImage;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TextToImage'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TextToImage failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TextToImage'", e);
                    }
                    // deserialize SentenceSimilarity
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SentenceSimilarity.validateJsonElement(jsonElement);
                        actualAdapter = adapterSentenceSimilarity;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SentenceSimilarity'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SentenceSimilarity failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SentenceSimilarity'", e);
                    }
                    // deserialize TextEmbeddings
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TextEmbeddings.validateJsonElement(jsonElement);
                        actualAdapter = adapterTextEmbeddings;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TextEmbeddings'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TextEmbeddings failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TextEmbeddings'", e);
                    }
                    // deserialize SpeechRecognition
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SpeechRecognition.validateJsonElement(jsonElement);
                        actualAdapter = adapterSpeechRecognition;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SpeechRecognition'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SpeechRecognition failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SpeechRecognition'", e);
                    }
                    // deserialize ImageClassification
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ImageClassification.validateJsonElement(jsonElement);
                        actualAdapter = adapterImageClassification;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ImageClassification'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ImageClassification failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ImageClassification'", e);
                    }
                    // deserialize ObjectDetection
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ObjectDetection.validateJsonElement(jsonElement);
                        actualAdapter = adapterObjectDetection;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ObjectDetection'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ObjectDetection failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ObjectDetection'", e);
                    }
                    // deserialize OneOf
                    try {
                        // validate the JSON object to see if any exception is thrown
                        OneOf.validateJsonElement(jsonElement);
                        actualAdapter = adapterOneOf;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'OneOf'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for OneOf failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'OneOf'", e);
                    }
                    // deserialize Translation
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Translation.validateJsonElement(jsonElement);
                        actualAdapter = adapterTranslation;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Translation'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Translation failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Translation'", e);
                    }
                    // deserialize Summarization
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Summarization.validateJsonElement(jsonElement);
                        actualAdapter = adapterSummarization;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Summarization'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Summarization failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Summarization'", e);
                    }
                    // deserialize ImageToText
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ImageToText.validateJsonElement(jsonElement);
                        actualAdapter = adapterImageToText;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ImageToText'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ImageToText failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ImageToText'", e);
                    }

                    if (match == 1) {
                        WorkersAiPostRunModelRequest ret = new WorkersAiPostRunModelRequest();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for WorkersAiPostRunModelRequest: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public WorkersAiPostRunModelRequest() {
        super("oneOf", Boolean.FALSE);
    }

    public WorkersAiPostRunModelRequest(ImageClassification o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WorkersAiPostRunModelRequest(ImageToText o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WorkersAiPostRunModelRequest(ObjectDetection o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WorkersAiPostRunModelRequest(OneOf o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WorkersAiPostRunModelRequest(SentenceSimilarity o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WorkersAiPostRunModelRequest(SpeechRecognition o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WorkersAiPostRunModelRequest(Summarization o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WorkersAiPostRunModelRequest(TextClassification o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WorkersAiPostRunModelRequest(TextEmbeddings o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WorkersAiPostRunModelRequest(TextToImage o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WorkersAiPostRunModelRequest(Translation o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("TextClassification", TextClassification.class);
        schemas.put("TextToImage", TextToImage.class);
        schemas.put("SentenceSimilarity", SentenceSimilarity.class);
        schemas.put("TextEmbeddings", TextEmbeddings.class);
        schemas.put("SpeechRecognition", SpeechRecognition.class);
        schemas.put("ImageClassification", ImageClassification.class);
        schemas.put("ObjectDetection", ObjectDetection.class);
        schemas.put("OneOf", OneOf.class);
        schemas.put("Translation", Translation.class);
        schemas.put("Summarization", Summarization.class);
        schemas.put("ImageToText", ImageToText.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return WorkersAiPostRunModelRequest.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * ImageClassification, ImageToText, ObjectDetection, OneOf, SentenceSimilarity, SpeechRecognition, Summarization, TextClassification, TextEmbeddings, TextToImage, Translation
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof TextClassification) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TextToImage) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SentenceSimilarity) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TextEmbeddings) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SpeechRecognition) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ImageClassification) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ObjectDetection) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof OneOf) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Translation) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Summarization) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ImageToText) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ImageClassification, ImageToText, ObjectDetection, OneOf, SentenceSimilarity, SpeechRecognition, Summarization, TextClassification, TextEmbeddings, TextToImage, Translation");
    }

    /**
     * Get the actual instance, which can be the following:
     * ImageClassification, ImageToText, ObjectDetection, OneOf, SentenceSimilarity, SpeechRecognition, Summarization, TextClassification, TextEmbeddings, TextToImage, Translation
     *
     * @return The actual instance (ImageClassification, ImageToText, ObjectDetection, OneOf, SentenceSimilarity, SpeechRecognition, Summarization, TextClassification, TextEmbeddings, TextToImage, Translation)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `TextClassification`. If the actual instance is not `TextClassification`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TextClassification`
     * @throws ClassCastException if the instance is not `TextClassification`
     */
    public TextClassification getTextClassification() throws ClassCastException {
        return (TextClassification)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TextToImage`. If the actual instance is not `TextToImage`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TextToImage`
     * @throws ClassCastException if the instance is not `TextToImage`
     */
    public TextToImage getTextToImage() throws ClassCastException {
        return (TextToImage)super.getActualInstance();
    }
    /**
     * Get the actual instance of `SentenceSimilarity`. If the actual instance is not `SentenceSimilarity`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SentenceSimilarity`
     * @throws ClassCastException if the instance is not `SentenceSimilarity`
     */
    public SentenceSimilarity getSentenceSimilarity() throws ClassCastException {
        return (SentenceSimilarity)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TextEmbeddings`. If the actual instance is not `TextEmbeddings`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TextEmbeddings`
     * @throws ClassCastException if the instance is not `TextEmbeddings`
     */
    public TextEmbeddings getTextEmbeddings() throws ClassCastException {
        return (TextEmbeddings)super.getActualInstance();
    }
    /**
     * Get the actual instance of `SpeechRecognition`. If the actual instance is not `SpeechRecognition`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SpeechRecognition`
     * @throws ClassCastException if the instance is not `SpeechRecognition`
     */
    public SpeechRecognition getSpeechRecognition() throws ClassCastException {
        return (SpeechRecognition)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ImageClassification`. If the actual instance is not `ImageClassification`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ImageClassification`
     * @throws ClassCastException if the instance is not `ImageClassification`
     */
    public ImageClassification getImageClassification() throws ClassCastException {
        return (ImageClassification)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ObjectDetection`. If the actual instance is not `ObjectDetection`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ObjectDetection`
     * @throws ClassCastException if the instance is not `ObjectDetection`
     */
    public ObjectDetection getObjectDetection() throws ClassCastException {
        return (ObjectDetection)super.getActualInstance();
    }
    /**
     * Get the actual instance of `OneOf`. If the actual instance is not `OneOf`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `OneOf`
     * @throws ClassCastException if the instance is not `OneOf`
     */
    public OneOf getOneOf() throws ClassCastException {
        return (OneOf)super.getActualInstance();
    }
    /**
     * Get the actual instance of `Translation`. If the actual instance is not `Translation`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Translation`
     * @throws ClassCastException if the instance is not `Translation`
     */
    public Translation getTranslation() throws ClassCastException {
        return (Translation)super.getActualInstance();
    }
    /**
     * Get the actual instance of `Summarization`. If the actual instance is not `Summarization`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Summarization`
     * @throws ClassCastException if the instance is not `Summarization`
     */
    public Summarization getSummarization() throws ClassCastException {
        return (Summarization)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ImageToText`. If the actual instance is not `ImageToText`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ImageToText`
     * @throws ClassCastException if the instance is not `ImageToText`
     */
    public ImageToText getImageToText() throws ClassCastException {
        return (ImageToText)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to WorkersAiPostRunModelRequest
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with TextClassification
        try {
            TextClassification.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TextClassification failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TextToImage
        try {
            TextToImage.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TextToImage failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SentenceSimilarity
        try {
            SentenceSimilarity.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SentenceSimilarity failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TextEmbeddings
        try {
            TextEmbeddings.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TextEmbeddings failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SpeechRecognition
        try {
            SpeechRecognition.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SpeechRecognition failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ImageClassification
        try {
            ImageClassification.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ImageClassification failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ObjectDetection
        try {
            ObjectDetection.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ObjectDetection failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with OneOf
        try {
            OneOf.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for OneOf failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Translation
        try {
            Translation.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Translation failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Summarization
        try {
            Summarization.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Summarization failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ImageToText
        try {
            ImageToText.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ImageToText failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for WorkersAiPostRunModelRequest with oneOf schemas: ImageClassification, ImageToText, ObjectDetection, OneOf, SentenceSimilarity, SpeechRecognition, Summarization, TextClassification, TextEmbeddings, TextToImage, Translation. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of WorkersAiPostRunModelRequest given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of WorkersAiPostRunModelRequest
     * @throws IOException if the JSON string is invalid with respect to WorkersAiPostRunModelRequest
     */
    public static WorkersAiPostRunModelRequest fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, WorkersAiPostRunModelRequest.class);
    }

    /**
     * Convert an instance of WorkersAiPostRunModelRequest to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

