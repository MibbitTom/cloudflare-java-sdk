/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * RadarGetAsnsRel200ResponseResultRelsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class RadarGetAsnsRel200ResponseResultRelsInner {
  public static final String SERIALIZED_NAME_ASN1 = "asn1";
  @SerializedName(SERIALIZED_NAME_ASN1)
  private Integer asn1;

  public static final String SERIALIZED_NAME_ASN1_COUNTRY = "asn1_country";
  @SerializedName(SERIALIZED_NAME_ASN1_COUNTRY)
  private String asn1Country;

  public static final String SERIALIZED_NAME_ASN1_NAME = "asn1_name";
  @SerializedName(SERIALIZED_NAME_ASN1_NAME)
  private String asn1Name;

  public static final String SERIALIZED_NAME_ASN2 = "asn2";
  @SerializedName(SERIALIZED_NAME_ASN2)
  private Integer asn2;

  public static final String SERIALIZED_NAME_ASN2_COUNTRY = "asn2_country";
  @SerializedName(SERIALIZED_NAME_ASN2_COUNTRY)
  private String asn2Country;

  public static final String SERIALIZED_NAME_ASN2_NAME = "asn2_name";
  @SerializedName(SERIALIZED_NAME_ASN2_NAME)
  private String asn2Name;

  public static final String SERIALIZED_NAME_REL = "rel";
  @SerializedName(SERIALIZED_NAME_REL)
  private String rel;

  public RadarGetAsnsRel200ResponseResultRelsInner() {
  }

  public RadarGetAsnsRel200ResponseResultRelsInner asn1(Integer asn1) {
    this.asn1 = asn1;
    return this;
  }

   /**
   * Get asn1
   * @return asn1
  **/
  @javax.annotation.Nonnull
  public Integer getAsn1() {
    return asn1;
  }

  public void setAsn1(Integer asn1) {
    this.asn1 = asn1;
  }


  public RadarGetAsnsRel200ResponseResultRelsInner asn1Country(String asn1Country) {
    this.asn1Country = asn1Country;
    return this;
  }

   /**
   * Get asn1Country
   * @return asn1Country
  **/
  @javax.annotation.Nonnull
  public String getAsn1Country() {
    return asn1Country;
  }

  public void setAsn1Country(String asn1Country) {
    this.asn1Country = asn1Country;
  }


  public RadarGetAsnsRel200ResponseResultRelsInner asn1Name(String asn1Name) {
    this.asn1Name = asn1Name;
    return this;
  }

   /**
   * Get asn1Name
   * @return asn1Name
  **/
  @javax.annotation.Nonnull
  public String getAsn1Name() {
    return asn1Name;
  }

  public void setAsn1Name(String asn1Name) {
    this.asn1Name = asn1Name;
  }


  public RadarGetAsnsRel200ResponseResultRelsInner asn2(Integer asn2) {
    this.asn2 = asn2;
    return this;
  }

   /**
   * Get asn2
   * @return asn2
  **/
  @javax.annotation.Nonnull
  public Integer getAsn2() {
    return asn2;
  }

  public void setAsn2(Integer asn2) {
    this.asn2 = asn2;
  }


  public RadarGetAsnsRel200ResponseResultRelsInner asn2Country(String asn2Country) {
    this.asn2Country = asn2Country;
    return this;
  }

   /**
   * Get asn2Country
   * @return asn2Country
  **/
  @javax.annotation.Nonnull
  public String getAsn2Country() {
    return asn2Country;
  }

  public void setAsn2Country(String asn2Country) {
    this.asn2Country = asn2Country;
  }


  public RadarGetAsnsRel200ResponseResultRelsInner asn2Name(String asn2Name) {
    this.asn2Name = asn2Name;
    return this;
  }

   /**
   * Get asn2Name
   * @return asn2Name
  **/
  @javax.annotation.Nonnull
  public String getAsn2Name() {
    return asn2Name;
  }

  public void setAsn2Name(String asn2Name) {
    this.asn2Name = asn2Name;
  }


  public RadarGetAsnsRel200ResponseResultRelsInner rel(String rel) {
    this.rel = rel;
    return this;
  }

   /**
   * Get rel
   * @return rel
  **/
  @javax.annotation.Nonnull
  public String getRel() {
    return rel;
  }

  public void setRel(String rel) {
    this.rel = rel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RadarGetAsnsRel200ResponseResultRelsInner radarGetAsnsRel200ResponseResultRelsInner = (RadarGetAsnsRel200ResponseResultRelsInner) o;
    return Objects.equals(this.asn1, radarGetAsnsRel200ResponseResultRelsInner.asn1) &&
        Objects.equals(this.asn1Country, radarGetAsnsRel200ResponseResultRelsInner.asn1Country) &&
        Objects.equals(this.asn1Name, radarGetAsnsRel200ResponseResultRelsInner.asn1Name) &&
        Objects.equals(this.asn2, radarGetAsnsRel200ResponseResultRelsInner.asn2) &&
        Objects.equals(this.asn2Country, radarGetAsnsRel200ResponseResultRelsInner.asn2Country) &&
        Objects.equals(this.asn2Name, radarGetAsnsRel200ResponseResultRelsInner.asn2Name) &&
        Objects.equals(this.rel, radarGetAsnsRel200ResponseResultRelsInner.rel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(asn1, asn1Country, asn1Name, asn2, asn2Country, asn2Name, rel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RadarGetAsnsRel200ResponseResultRelsInner {\n");
    sb.append("    asn1: ").append(toIndentedString(asn1)).append("\n");
    sb.append("    asn1Country: ").append(toIndentedString(asn1Country)).append("\n");
    sb.append("    asn1Name: ").append(toIndentedString(asn1Name)).append("\n");
    sb.append("    asn2: ").append(toIndentedString(asn2)).append("\n");
    sb.append("    asn2Country: ").append(toIndentedString(asn2Country)).append("\n");
    sb.append("    asn2Name: ").append(toIndentedString(asn2Name)).append("\n");
    sb.append("    rel: ").append(toIndentedString(rel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("asn1");
    openapiFields.add("asn1_country");
    openapiFields.add("asn1_name");
    openapiFields.add("asn2");
    openapiFields.add("asn2_country");
    openapiFields.add("asn2_name");
    openapiFields.add("rel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("asn1");
    openapiRequiredFields.add("asn1_country");
    openapiRequiredFields.add("asn1_name");
    openapiRequiredFields.add("asn2");
    openapiRequiredFields.add("asn2_country");
    openapiRequiredFields.add("asn2_name");
    openapiRequiredFields.add("rel");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RadarGetAsnsRel200ResponseResultRelsInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RadarGetAsnsRel200ResponseResultRelsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RadarGetAsnsRel200ResponseResultRelsInner is not found in the empty JSON string", RadarGetAsnsRel200ResponseResultRelsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RadarGetAsnsRel200ResponseResultRelsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RadarGetAsnsRel200ResponseResultRelsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RadarGetAsnsRel200ResponseResultRelsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("asn1_country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asn1_country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asn1_country").toString()));
      }
      if (!jsonObj.get("asn1_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asn1_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asn1_name").toString()));
      }
      if (!jsonObj.get("asn2_country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asn2_country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asn2_country").toString()));
      }
      if (!jsonObj.get("asn2_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asn2_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asn2_name").toString()));
      }
      if (!jsonObj.get("rel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rel").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RadarGetAsnsRel200ResponseResultRelsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RadarGetAsnsRel200ResponseResultRelsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RadarGetAsnsRel200ResponseResultRelsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RadarGetAsnsRel200ResponseResultRelsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<RadarGetAsnsRel200ResponseResultRelsInner>() {
           @Override
           public void write(JsonWriter out, RadarGetAsnsRel200ResponseResultRelsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RadarGetAsnsRel200ResponseResultRelsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RadarGetAsnsRel200ResponseResultRelsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RadarGetAsnsRel200ResponseResultRelsInner
  * @throws IOException if the JSON string is invalid with respect to RadarGetAsnsRel200ResponseResultRelsInner
  */
  public static RadarGetAsnsRel200ResponseResultRelsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RadarGetAsnsRel200ResponseResultRelsInner.class);
  }

 /**
  * Convert an instance of RadarGetAsnsRel200ResponseResultRelsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

