/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ImageToText1;
import org.openapitools.client.model.SpeechRecognition1;
import org.openapitools.client.model.Summarization1;
import org.openapitools.client.model.TextEmbeddings1;
import org.openapitools.client.model.TextGeneration;
import org.openapitools.client.model.Translation1;
import org.openapitools.client.model.WorkersAiPostRunCfFacebookDetrResnet50200ResponseResultInner;
import org.openapitools.client.model.WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200ResponseResultInner;
import org.openapitools.client.model.WorkersAiPostRunCfOpenaiWhisper200ResponseResultWordsInner;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class WorkersAiPostRunModel200ResponseResult extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(WorkersAiPostRunModel200ResponseResult.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!WorkersAiPostRunModel200ResponseResult.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'WorkersAiPostRunModel200ResponseResult' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);

            final Type typeInstance = new TypeToken<List<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200ResponseResultInner>>(){}.getType();
            final TypeAdapter<List<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200ResponseResultInner>> adapterListWorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200ResponseResultInner = (TypeAdapter<List<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200ResponseResultInner>>) gson.getDelegateAdapter(this, TypeToken.get(typeInstance));
            final TypeAdapter<File> adapterFile = gson.getDelegateAdapter(this, TypeToken.get(File.class));

            final Type typeInstance = new TypeToken<List<BigDecimal>>(){}.getType();
            final TypeAdapter<List<BigDecimal>> adapterListBigDecimal = (TypeAdapter<List<BigDecimal>>) gson.getDelegateAdapter(this, TypeToken.get(typeInstance));
            final TypeAdapter<TextEmbeddings1> adapterTextEmbeddings1 = gson.getDelegateAdapter(this, TypeToken.get(TextEmbeddings1.class));
            final TypeAdapter<SpeechRecognition1> adapterSpeechRecognition1 = gson.getDelegateAdapter(this, TypeToken.get(SpeechRecognition1.class));

            final Type typeInstance = new TypeToken<List<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200ResponseResultInner>>(){}.getType();
            final TypeAdapter<List<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200ResponseResultInner>> adapterListWorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200ResponseResultInner = (TypeAdapter<List<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200ResponseResultInner>>) gson.getDelegateAdapter(this, TypeToken.get(typeInstance));

            final Type typeInstance = new TypeToken<List<WorkersAiPostRunCfFacebookDetrResnet50200ResponseResultInner>>(){}.getType();
            final TypeAdapter<List<WorkersAiPostRunCfFacebookDetrResnet50200ResponseResultInner>> adapterListWorkersAiPostRunCfFacebookDetrResnet50200ResponseResultInner = (TypeAdapter<List<WorkersAiPostRunCfFacebookDetrResnet50200ResponseResultInner>>) gson.getDelegateAdapter(this, TypeToken.get(typeInstance));
            final TypeAdapter<TextGeneration> adapterTextGeneration = gson.getDelegateAdapter(this, TypeToken.get(TextGeneration.class));
            final TypeAdapter<Translation1> adapterTranslation1 = gson.getDelegateAdapter(this, TypeToken.get(Translation1.class));
            final TypeAdapter<Summarization1> adapterSummarization1 = gson.getDelegateAdapter(this, TypeToken.get(Summarization1.class));
            final TypeAdapter<ImageToText1> adapterImageToText1 = gson.getDelegateAdapter(this, TypeToken.get(ImageToText1.class));

            return (TypeAdapter<T>) new TypeAdapter<WorkersAiPostRunModel200ResponseResult>() {
                @Override
                public void write(JsonWriter out, WorkersAiPostRunModel200ResponseResult value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `List<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200ResponseResultInner>`
                    if (value.getActualInstance() instanceof List<?>) {
                        List<?> list = (List<?>) value.getActualInstance();
                        if (list.get(0) instanceof WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200ResponseResultInner) {
                            JsonArray array = adapterListWorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200ResponseResultInner.toJsonTree((List<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200ResponseResultInner>)value.getActualInstance()).getAsJsonArray();
                            elementAdapter.write(out, array);
                            return;
                        }
                    }
                    // check if the actual instance is of the type `File`
                    if (value.getActualInstance() instanceof File) {
                        JsonElement element = adapterFile.toJsonTree((File)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TextEmbeddings1`
                    if (value.getActualInstance() instanceof TextEmbeddings1) {
                        JsonElement element = adapterTextEmbeddings1.toJsonTree((TextEmbeddings1)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SpeechRecognition1`
                    if (value.getActualInstance() instanceof SpeechRecognition1) {
                        JsonElement element = adapterSpeechRecognition1.toJsonTree((SpeechRecognition1)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TextGeneration`
                    if (value.getActualInstance() instanceof TextGeneration) {
                        JsonElement element = adapterTextGeneration.toJsonTree((TextGeneration)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Translation1`
                    if (value.getActualInstance() instanceof Translation1) {
                        JsonElement element = adapterTranslation1.toJsonTree((Translation1)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Summarization1`
                    if (value.getActualInstance() instanceof Summarization1) {
                        JsonElement element = adapterSummarization1.toJsonTree((Summarization1)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ImageToText1`
                    if (value.getActualInstance() instanceof ImageToText1) {
                        JsonElement element = adapterImageToText1.toJsonTree((ImageToText1)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: File, ImageToText1, List<BigDecimal>, List<WorkersAiPostRunCfFacebookDetrResnet50200ResponseResultInner>, List<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200ResponseResultInner>, SpeechRecognition1, Summarization1, TextEmbeddings1, TextGeneration, Translation1");
                }

                @Override
                public WorkersAiPostRunModel200ResponseResult read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize List<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200ResponseResultInner>
                    try {
                        // validate the JSON object to see if any exception is thrown
                        if (!jsonElement.isJsonArray()) {
                            throw new IllegalArgumentException(String.format("Expected json element to be a array type in the JSON string but got `%s`", jsonElement.toString()));
                        }

                        JsonArray array = jsonElement.getAsJsonArray();
                        // validate array items
                        for(JsonElement element : array) {
                            WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200ResponseResultInner.validateJsonElement(element);
                        }
                        actualAdapter = adapterListWorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200ResponseResultInner;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'List<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200ResponseResultInner>'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for List<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200ResponseResultInner> failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'List<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200ResponseResultInner>'", e);
                    }
                    // deserialize File
                    try {
                        // validate the JSON object to see if any exception is thrown
                        File.validateJsonElement(jsonElement);
                        actualAdapter = adapterFile;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'File'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for File failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'File'", e);
                    }
                    // deserialize TextEmbeddings1
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TextEmbeddings1.validateJsonElement(jsonElement);
                        actualAdapter = adapterTextEmbeddings1;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TextEmbeddings1'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TextEmbeddings1 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TextEmbeddings1'", e);
                    }
                    // deserialize SpeechRecognition1
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SpeechRecognition1.validateJsonElement(jsonElement);
                        actualAdapter = adapterSpeechRecognition1;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SpeechRecognition1'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SpeechRecognition1 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SpeechRecognition1'", e);
                    }
                    // deserialize TextGeneration
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TextGeneration.validateJsonElement(jsonElement);
                        actualAdapter = adapterTextGeneration;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TextGeneration'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TextGeneration failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TextGeneration'", e);
                    }
                    // deserialize Translation1
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Translation1.validateJsonElement(jsonElement);
                        actualAdapter = adapterTranslation1;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Translation1'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Translation1 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Translation1'", e);
                    }
                    // deserialize Summarization1
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Summarization1.validateJsonElement(jsonElement);
                        actualAdapter = adapterSummarization1;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Summarization1'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Summarization1 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Summarization1'", e);
                    }
                    // deserialize ImageToText1
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ImageToText1.validateJsonElement(jsonElement);
                        actualAdapter = adapterImageToText1;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ImageToText1'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ImageToText1 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ImageToText1'", e);
                    }

                    if (match == 1) {
                        WorkersAiPostRunModel200ResponseResult ret = new WorkersAiPostRunModel200ResponseResult();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for WorkersAiPostRunModel200ResponseResult: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public WorkersAiPostRunModel200ResponseResult() {
        super("oneOf", Boolean.FALSE);
    }

    public WorkersAiPostRunModel200ResponseResult(File o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WorkersAiPostRunModel200ResponseResult(ImageToText1 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WorkersAiPostRunModel200ResponseResult(List<BigDecimal> o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WorkersAiPostRunModel200ResponseResult(List<WorkersAiPostRunCfFacebookDetrResnet50200ResponseResultInner> o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WorkersAiPostRunModel200ResponseResult(List<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200ResponseResultInner> o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WorkersAiPostRunModel200ResponseResult(SpeechRecognition1 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WorkersAiPostRunModel200ResponseResult(Summarization1 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WorkersAiPostRunModel200ResponseResult(TextEmbeddings1 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WorkersAiPostRunModel200ResponseResult(TextGeneration o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public WorkersAiPostRunModel200ResponseResult(Translation1 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("List<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200ResponseResultInner>", List.class);
        schemas.put("File", File.class);
        schemas.put("TextEmbeddings1", TextEmbeddings1.class);
        schemas.put("SpeechRecognition1", SpeechRecognition1.class);
        schemas.put("TextGeneration", TextGeneration.class);
        schemas.put("Translation1", Translation1.class);
        schemas.put("Summarization1", Summarization1.class);
        schemas.put("ImageToText1", ImageToText1.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return WorkersAiPostRunModel200ResponseResult.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * File, ImageToText1, List<BigDecimal>, List<WorkersAiPostRunCfFacebookDetrResnet50200ResponseResultInner>, List<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200ResponseResultInner>, SpeechRecognition1, Summarization1, TextEmbeddings1, TextGeneration, Translation1
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof List<?>) {
            List<?> list = (List<?>) instance;
            if (list.get(0) instanceof WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200ResponseResultInner) {
                super.setActualInstance(instance);
                return;
            }
        }

        if (instance instanceof File) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TextEmbeddings1) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SpeechRecognition1) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TextGeneration) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Translation1) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Summarization1) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ImageToText1) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be File, ImageToText1, List<BigDecimal>, List<WorkersAiPostRunCfFacebookDetrResnet50200ResponseResultInner>, List<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200ResponseResultInner>, SpeechRecognition1, Summarization1, TextEmbeddings1, TextGeneration, Translation1");
    }

    /**
     * Get the actual instance, which can be the following:
     * File, ImageToText1, List<BigDecimal>, List<WorkersAiPostRunCfFacebookDetrResnet50200ResponseResultInner>, List<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200ResponseResultInner>, SpeechRecognition1, Summarization1, TextEmbeddings1, TextGeneration, Translation1
     *
     * @return The actual instance (File, ImageToText1, List<BigDecimal>, List<WorkersAiPostRunCfFacebookDetrResnet50200ResponseResultInner>, List<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200ResponseResultInner>, SpeechRecognition1, Summarization1, TextEmbeddings1, TextGeneration, Translation1)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `List<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200ResponseResultInner>`. If the actual instance is not `List<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200ResponseResultInner>`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `List<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200ResponseResultInner>`
     * @throws ClassCastException if the instance is not `List<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200ResponseResultInner>`
     */
    public List<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200ResponseResultInner> getListWorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200ResponseResultInner() throws ClassCastException {
        return (List<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200ResponseResultInner>)super.getActualInstance();
    }
    /**
     * Get the actual instance of `File`. If the actual instance is not `File`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `File`
     * @throws ClassCastException if the instance is not `File`
     */
    public File getFile() throws ClassCastException {
        return (File)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TextEmbeddings1`. If the actual instance is not `TextEmbeddings1`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TextEmbeddings1`
     * @throws ClassCastException if the instance is not `TextEmbeddings1`
     */
    public TextEmbeddings1 getTextEmbeddings1() throws ClassCastException {
        return (TextEmbeddings1)super.getActualInstance();
    }
    /**
     * Get the actual instance of `SpeechRecognition1`. If the actual instance is not `SpeechRecognition1`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SpeechRecognition1`
     * @throws ClassCastException if the instance is not `SpeechRecognition1`
     */
    public SpeechRecognition1 getSpeechRecognition1() throws ClassCastException {
        return (SpeechRecognition1)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TextGeneration`. If the actual instance is not `TextGeneration`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TextGeneration`
     * @throws ClassCastException if the instance is not `TextGeneration`
     */
    public TextGeneration getTextGeneration() throws ClassCastException {
        return (TextGeneration)super.getActualInstance();
    }
    /**
     * Get the actual instance of `Translation1`. If the actual instance is not `Translation1`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Translation1`
     * @throws ClassCastException if the instance is not `Translation1`
     */
    public Translation1 getTranslation1() throws ClassCastException {
        return (Translation1)super.getActualInstance();
    }
    /**
     * Get the actual instance of `Summarization1`. If the actual instance is not `Summarization1`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Summarization1`
     * @throws ClassCastException if the instance is not `Summarization1`
     */
    public Summarization1 getSummarization1() throws ClassCastException {
        return (Summarization1)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ImageToText1`. If the actual instance is not `ImageToText1`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ImageToText1`
     * @throws ClassCastException if the instance is not `ImageToText1`
     */
    public ImageToText1 getImageToText1() throws ClassCastException {
        return (ImageToText1)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to WorkersAiPostRunModel200ResponseResult
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with List<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200ResponseResultInner>
        try {
            if (!jsonElement.isJsonArray()) {
                throw new IllegalArgumentException(String.format("Expected json element to be a array type in the JSON string but got `%s`", jsonElement.toString()));
            }
            JsonArray array = jsonElement.getAsJsonArray();
            // validate array items
            for(JsonElement element : array) {
                WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200ResponseResultInner.validateJsonElement(element);
            }
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for List<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200ResponseResultInner> failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with File
        try {
            File.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for File failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TextEmbeddings1
        try {
            TextEmbeddings1.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TextEmbeddings1 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SpeechRecognition1
        try {
            SpeechRecognition1.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SpeechRecognition1 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TextGeneration
        try {
            TextGeneration.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TextGeneration failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Translation1
        try {
            Translation1.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Translation1 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Summarization1
        try {
            Summarization1.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Summarization1 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ImageToText1
        try {
            ImageToText1.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ImageToText1 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for WorkersAiPostRunModel200ResponseResult with oneOf schemas: File, ImageToText1, List<BigDecimal>, List<WorkersAiPostRunCfFacebookDetrResnet50200ResponseResultInner>, List<WorkersAiPostRunCfHuggingfaceDistilbertSst2Int8200ResponseResultInner>, SpeechRecognition1, Summarization1, TextEmbeddings1, TextGeneration, Translation1. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of WorkersAiPostRunModel200ResponseResult given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of WorkersAiPostRunModel200ResponseResult
     * @throws IOException if the JSON string is invalid with respect to WorkersAiPostRunModel200ResponseResult
     */
    public static WorkersAiPostRunModel200ResponseResult fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, WorkersAiPostRunModel200ResponseResult.class);
    }

    /**
     * Convert an instance of WorkersAiPostRunModel200ResponseResult to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

