/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LoadBalancingType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * LoadBalancingMonitorEditable
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class LoadBalancingMonitorEditable {
  public static final String SERIALIZED_NAME_ALLOW_INSECURE = "allow_insecure";
  @SerializedName(SERIALIZED_NAME_ALLOW_INSECURE)
  private Boolean allowInsecure = false;

  public static final String SERIALIZED_NAME_CONSECUTIVE_DOWN = "consecutive_down";
  @SerializedName(SERIALIZED_NAME_CONSECUTIVE_DOWN)
  private Integer consecutiveDown = 0;

  public static final String SERIALIZED_NAME_CONSECUTIVE_UP = "consecutive_up";
  @SerializedName(SERIALIZED_NAME_CONSECUTIVE_UP)
  private Integer consecutiveUp = 0;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXPECTED_BODY = "expected_body";
  @SerializedName(SERIALIZED_NAME_EXPECTED_BODY)
  private String expectedBody;

  public static final String SERIALIZED_NAME_EXPECTED_CODES = "expected_codes";
  @SerializedName(SERIALIZED_NAME_EXPECTED_CODES)
  private String expectedCodes = "200";

  public static final String SERIALIZED_NAME_FOLLOW_REDIRECTS = "follow_redirects";
  @SerializedName(SERIALIZED_NAME_FOLLOW_REDIRECTS)
  private Boolean followRedirects = false;

  public static final String SERIALIZED_NAME_HEADER = "header";
  @SerializedName(SERIALIZED_NAME_HEADER)
  private Object header;

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  private Integer interval = 60;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private String method = "GET";

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path = "/";

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port = 0;

  public static final String SERIALIZED_NAME_PROBE_ZONE = "probe_zone";
  @SerializedName(SERIALIZED_NAME_PROBE_ZONE)
  private String probeZone;

  public static final String SERIALIZED_NAME_RETRIES = "retries";
  @SerializedName(SERIALIZED_NAME_RETRIES)
  private Integer retries = 2;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private Integer timeout = 5;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private LoadBalancingType type = LoadBalancingType.HTTP;

  public LoadBalancingMonitorEditable() {
  }

  public LoadBalancingMonitorEditable allowInsecure(Boolean allowInsecure) {
    this.allowInsecure = allowInsecure;
    return this;
  }

   /**
   * Do not validate the certificate when monitor use HTTPS. This parameter is currently only valid for HTTP and HTTPS monitors.
   * @return allowInsecure
  **/
  @javax.annotation.Nullable
  public Boolean getAllowInsecure() {
    return allowInsecure;
  }

  public void setAllowInsecure(Boolean allowInsecure) {
    this.allowInsecure = allowInsecure;
  }


  public LoadBalancingMonitorEditable consecutiveDown(Integer consecutiveDown) {
    this.consecutiveDown = consecutiveDown;
    return this;
  }

   /**
   * To be marked unhealthy the monitored origin must fail this healthcheck N consecutive times.
   * @return consecutiveDown
  **/
  @javax.annotation.Nullable
  public Integer getConsecutiveDown() {
    return consecutiveDown;
  }

  public void setConsecutiveDown(Integer consecutiveDown) {
    this.consecutiveDown = consecutiveDown;
  }


  public LoadBalancingMonitorEditable consecutiveUp(Integer consecutiveUp) {
    this.consecutiveUp = consecutiveUp;
    return this;
  }

   /**
   * To be marked healthy the monitored origin must pass this healthcheck N consecutive times.
   * @return consecutiveUp
  **/
  @javax.annotation.Nullable
  public Integer getConsecutiveUp() {
    return consecutiveUp;
  }

  public void setConsecutiveUp(Integer consecutiveUp) {
    this.consecutiveUp = consecutiveUp;
  }


  public LoadBalancingMonitorEditable description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Object description.
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public LoadBalancingMonitorEditable expectedBody(String expectedBody) {
    this.expectedBody = expectedBody;
    return this;
  }

   /**
   * A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy. This parameter is only valid for HTTP and HTTPS monitors.
   * @return expectedBody
  **/
  @javax.annotation.Nullable
  public String getExpectedBody() {
    return expectedBody;
  }

  public void setExpectedBody(String expectedBody) {
    this.expectedBody = expectedBody;
  }


  public LoadBalancingMonitorEditable expectedCodes(String expectedCodes) {
    this.expectedCodes = expectedCodes;
    return this;
  }

   /**
   * The expected HTTP response code or code range of the health check. This parameter is only valid for HTTP and HTTPS monitors.
   * @return expectedCodes
  **/
  @javax.annotation.Nullable
  public String getExpectedCodes() {
    return expectedCodes;
  }

  public void setExpectedCodes(String expectedCodes) {
    this.expectedCodes = expectedCodes;
  }


  public LoadBalancingMonitorEditable followRedirects(Boolean followRedirects) {
    this.followRedirects = followRedirects;
    return this;
  }

   /**
   * Follow redirects if returned by the origin. This parameter is only valid for HTTP and HTTPS monitors.
   * @return followRedirects
  **/
  @javax.annotation.Nullable
  public Boolean getFollowRedirects() {
    return followRedirects;
  }

  public void setFollowRedirects(Boolean followRedirects) {
    this.followRedirects = followRedirects;
  }


  public LoadBalancingMonitorEditable header(Object header) {
    this.header = header;
    return this;
  }

   /**
   * The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden. This parameter is only valid for HTTP and HTTPS monitors.
   * @return header
  **/
  @javax.annotation.Nullable
  public Object getHeader() {
    return header;
  }

  public void setHeader(Object header) {
    this.header = header;
  }


  public LoadBalancingMonitorEditable interval(Integer interval) {
    this.interval = interval;
    return this;
  }

   /**
   * The interval between each health check. Shorter intervals may improve failover time, but will increase load on the origins as we check from multiple locations.
   * @return interval
  **/
  @javax.annotation.Nullable
  public Integer getInterval() {
    return interval;
  }

  public void setInterval(Integer interval) {
    this.interval = interval;
  }


  public LoadBalancingMonitorEditable method(String method) {
    this.method = method;
    return this;
  }

   /**
   * The method to use for the health check. This defaults to &#39;GET&#39; for HTTP/HTTPS based checks and &#39;connection_established&#39; for TCP based health checks.
   * @return method
  **/
  @javax.annotation.Nullable
  public String getMethod() {
    return method;
  }

  public void setMethod(String method) {
    this.method = method;
  }


  public LoadBalancingMonitorEditable path(String path) {
    this.path = path;
    return this;
  }

   /**
   * The endpoint path you want to conduct a health check against. This parameter is only valid for HTTP and HTTPS monitors.
   * @return path
  **/
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public LoadBalancingMonitorEditable port(Integer port) {
    this.port = port;
    return this;
  }

   /**
   * The port number to connect to for the health check. Required for TCP, UDP, and SMTP checks. HTTP and HTTPS checks should only define the port when using a non-standard port (HTTP: default 80, HTTPS: default 443).
   * @return port
  **/
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public LoadBalancingMonitorEditable probeZone(String probeZone) {
    this.probeZone = probeZone;
    return this;
  }

   /**
   * Assign this monitor to emulate the specified zone while probing. This parameter is only valid for HTTP and HTTPS monitors.
   * @return probeZone
  **/
  @javax.annotation.Nullable
  public String getProbeZone() {
    return probeZone;
  }

  public void setProbeZone(String probeZone) {
    this.probeZone = probeZone;
  }


  public LoadBalancingMonitorEditable retries(Integer retries) {
    this.retries = retries;
    return this;
  }

   /**
   * The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.
   * @return retries
  **/
  @javax.annotation.Nullable
  public Integer getRetries() {
    return retries;
  }

  public void setRetries(Integer retries) {
    this.retries = retries;
  }


  public LoadBalancingMonitorEditable timeout(Integer timeout) {
    this.timeout = timeout;
    return this;
  }

   /**
   * The timeout (in seconds) before marking the health check as failed.
   * @return timeout
  **/
  @javax.annotation.Nullable
  public Integer getTimeout() {
    return timeout;
  }

  public void setTimeout(Integer timeout) {
    this.timeout = timeout;
  }


  public LoadBalancingMonitorEditable type(LoadBalancingType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  public LoadBalancingType getType() {
    return type;
  }

  public void setType(LoadBalancingType type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoadBalancingMonitorEditable loadBalancingMonitorEditable = (LoadBalancingMonitorEditable) o;
    return Objects.equals(this.allowInsecure, loadBalancingMonitorEditable.allowInsecure) &&
        Objects.equals(this.consecutiveDown, loadBalancingMonitorEditable.consecutiveDown) &&
        Objects.equals(this.consecutiveUp, loadBalancingMonitorEditable.consecutiveUp) &&
        Objects.equals(this.description, loadBalancingMonitorEditable.description) &&
        Objects.equals(this.expectedBody, loadBalancingMonitorEditable.expectedBody) &&
        Objects.equals(this.expectedCodes, loadBalancingMonitorEditable.expectedCodes) &&
        Objects.equals(this.followRedirects, loadBalancingMonitorEditable.followRedirects) &&
        Objects.equals(this.header, loadBalancingMonitorEditable.header) &&
        Objects.equals(this.interval, loadBalancingMonitorEditable.interval) &&
        Objects.equals(this.method, loadBalancingMonitorEditable.method) &&
        Objects.equals(this.path, loadBalancingMonitorEditable.path) &&
        Objects.equals(this.port, loadBalancingMonitorEditable.port) &&
        Objects.equals(this.probeZone, loadBalancingMonitorEditable.probeZone) &&
        Objects.equals(this.retries, loadBalancingMonitorEditable.retries) &&
        Objects.equals(this.timeout, loadBalancingMonitorEditable.timeout) &&
        Objects.equals(this.type, loadBalancingMonitorEditable.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowInsecure, consecutiveDown, consecutiveUp, description, expectedBody, expectedCodes, followRedirects, header, interval, method, path, port, probeZone, retries, timeout, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoadBalancingMonitorEditable {\n");
    sb.append("    allowInsecure: ").append(toIndentedString(allowInsecure)).append("\n");
    sb.append("    consecutiveDown: ").append(toIndentedString(consecutiveDown)).append("\n");
    sb.append("    consecutiveUp: ").append(toIndentedString(consecutiveUp)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    expectedBody: ").append(toIndentedString(expectedBody)).append("\n");
    sb.append("    expectedCodes: ").append(toIndentedString(expectedCodes)).append("\n");
    sb.append("    followRedirects: ").append(toIndentedString(followRedirects)).append("\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    probeZone: ").append(toIndentedString(probeZone)).append("\n");
    sb.append("    retries: ").append(toIndentedString(retries)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allow_insecure");
    openapiFields.add("consecutive_down");
    openapiFields.add("consecutive_up");
    openapiFields.add("description");
    openapiFields.add("expected_body");
    openapiFields.add("expected_codes");
    openapiFields.add("follow_redirects");
    openapiFields.add("header");
    openapiFields.add("interval");
    openapiFields.add("method");
    openapiFields.add("path");
    openapiFields.add("port");
    openapiFields.add("probe_zone");
    openapiFields.add("retries");
    openapiFields.add("timeout");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to LoadBalancingMonitorEditable
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LoadBalancingMonitorEditable.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoadBalancingMonitorEditable is not found in the empty JSON string", LoadBalancingMonitorEditable.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LoadBalancingMonitorEditable.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LoadBalancingMonitorEditable` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("expected_body") != null && !jsonObj.get("expected_body").isJsonNull()) && !jsonObj.get("expected_body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expected_body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expected_body").toString()));
      }
      if ((jsonObj.get("expected_codes") != null && !jsonObj.get("expected_codes").isJsonNull()) && !jsonObj.get("expected_codes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expected_codes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expected_codes").toString()));
      }
      if ((jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) && !jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("probe_zone") != null && !jsonObj.get("probe_zone").isJsonNull()) && !jsonObj.get("probe_zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `probe_zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("probe_zone").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        LoadBalancingType.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoadBalancingMonitorEditable.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoadBalancingMonitorEditable' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoadBalancingMonitorEditable> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoadBalancingMonitorEditable.class));

       return (TypeAdapter<T>) new TypeAdapter<LoadBalancingMonitorEditable>() {
           @Override
           public void write(JsonWriter out, LoadBalancingMonitorEditable value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LoadBalancingMonitorEditable read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LoadBalancingMonitorEditable given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LoadBalancingMonitorEditable
  * @throws IOException if the JSON string is invalid with respect to LoadBalancingMonitorEditable
  */
  public static LoadBalancingMonitorEditable fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoadBalancingMonitorEditable.class);
  }

 /**
  * Convert an instance of LoadBalancingMonitorEditable to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

