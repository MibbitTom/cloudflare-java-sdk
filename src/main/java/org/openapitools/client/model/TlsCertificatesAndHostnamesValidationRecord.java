/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Certificate&#39;s required validation record.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class TlsCertificatesAndHostnamesValidationRecord {
  public static final String SERIALIZED_NAME_EMAILS = "emails";
  @SerializedName(SERIALIZED_NAME_EMAILS)
  private List<Object> emails = new ArrayList<>();

  public static final String SERIALIZED_NAME_HTTP_BODY = "http_body";
  @SerializedName(SERIALIZED_NAME_HTTP_BODY)
  private String httpBody;

  public static final String SERIALIZED_NAME_HTTP_URL = "http_url";
  @SerializedName(SERIALIZED_NAME_HTTP_URL)
  private String httpUrl;

  public static final String SERIALIZED_NAME_TXT_NAME = "txt_name";
  @SerializedName(SERIALIZED_NAME_TXT_NAME)
  private String txtName;

  public static final String SERIALIZED_NAME_TXT_VALUE = "txt_value";
  @SerializedName(SERIALIZED_NAME_TXT_VALUE)
  private String txtValue;

  public TlsCertificatesAndHostnamesValidationRecord() {
  }

  public TlsCertificatesAndHostnamesValidationRecord emails(List<Object> emails) {
    this.emails = emails;
    return this;
  }

  public TlsCertificatesAndHostnamesValidationRecord addEmailsItem(Object emailsItem) {
    if (this.emails == null) {
      this.emails = new ArrayList<>();
    }
    this.emails.add(emailsItem);
    return this;
  }

   /**
   * The set of email addresses that the certificate authority (CA) will use to complete domain validation.
   * @return emails
  **/
  @javax.annotation.Nullable
  public List<Object> getEmails() {
    return emails;
  }

  public void setEmails(List<Object> emails) {
    this.emails = emails;
  }


  public TlsCertificatesAndHostnamesValidationRecord httpBody(String httpBody) {
    this.httpBody = httpBody;
    return this;
  }

   /**
   * The content that the certificate authority (CA) will expect to find at the http_url during the domain validation.
   * @return httpBody
  **/
  @javax.annotation.Nullable
  public String getHttpBody() {
    return httpBody;
  }

  public void setHttpBody(String httpBody) {
    this.httpBody = httpBody;
  }


  public TlsCertificatesAndHostnamesValidationRecord httpUrl(String httpUrl) {
    this.httpUrl = httpUrl;
    return this;
  }

   /**
   * The url that will be checked during domain validation.
   * @return httpUrl
  **/
  @javax.annotation.Nullable
  public String getHttpUrl() {
    return httpUrl;
  }

  public void setHttpUrl(String httpUrl) {
    this.httpUrl = httpUrl;
  }


  public TlsCertificatesAndHostnamesValidationRecord txtName(String txtName) {
    this.txtName = txtName;
    return this;
  }

   /**
   * The hostname that the certificate authority (CA) will check for a TXT record during domain validation .
   * @return txtName
  **/
  @javax.annotation.Nullable
  public String getTxtName() {
    return txtName;
  }

  public void setTxtName(String txtName) {
    this.txtName = txtName;
  }


  public TlsCertificatesAndHostnamesValidationRecord txtValue(String txtValue) {
    this.txtValue = txtValue;
    return this;
  }

   /**
   * The TXT record that the certificate authority (CA) will check during domain validation.
   * @return txtValue
  **/
  @javax.annotation.Nullable
  public String getTxtValue() {
    return txtValue;
  }

  public void setTxtValue(String txtValue) {
    this.txtValue = txtValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TlsCertificatesAndHostnamesValidationRecord tlsCertificatesAndHostnamesValidationRecord = (TlsCertificatesAndHostnamesValidationRecord) o;
    return Objects.equals(this.emails, tlsCertificatesAndHostnamesValidationRecord.emails) &&
        Objects.equals(this.httpBody, tlsCertificatesAndHostnamesValidationRecord.httpBody) &&
        Objects.equals(this.httpUrl, tlsCertificatesAndHostnamesValidationRecord.httpUrl) &&
        Objects.equals(this.txtName, tlsCertificatesAndHostnamesValidationRecord.txtName) &&
        Objects.equals(this.txtValue, tlsCertificatesAndHostnamesValidationRecord.txtValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(emails, httpBody, httpUrl, txtName, txtValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TlsCertificatesAndHostnamesValidationRecord {\n");
    sb.append("    emails: ").append(toIndentedString(emails)).append("\n");
    sb.append("    httpBody: ").append(toIndentedString(httpBody)).append("\n");
    sb.append("    httpUrl: ").append(toIndentedString(httpUrl)).append("\n");
    sb.append("    txtName: ").append(toIndentedString(txtName)).append("\n");
    sb.append("    txtValue: ").append(toIndentedString(txtValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("emails");
    openapiFields.add("http_body");
    openapiFields.add("http_url");
    openapiFields.add("txt_name");
    openapiFields.add("txt_value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TlsCertificatesAndHostnamesValidationRecord
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TlsCertificatesAndHostnamesValidationRecord.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TlsCertificatesAndHostnamesValidationRecord is not found in the empty JSON string", TlsCertificatesAndHostnamesValidationRecord.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TlsCertificatesAndHostnamesValidationRecord.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TlsCertificatesAndHostnamesValidationRecord` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("emails") != null && !jsonObj.get("emails").isJsonNull() && !jsonObj.get("emails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emails` to be an array in the JSON string but got `%s`", jsonObj.get("emails").toString()));
      }
      if ((jsonObj.get("http_body") != null && !jsonObj.get("http_body").isJsonNull()) && !jsonObj.get("http_body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `http_body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("http_body").toString()));
      }
      if ((jsonObj.get("http_url") != null && !jsonObj.get("http_url").isJsonNull()) && !jsonObj.get("http_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `http_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("http_url").toString()));
      }
      if ((jsonObj.get("txt_name") != null && !jsonObj.get("txt_name").isJsonNull()) && !jsonObj.get("txt_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `txt_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("txt_name").toString()));
      }
      if ((jsonObj.get("txt_value") != null && !jsonObj.get("txt_value").isJsonNull()) && !jsonObj.get("txt_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `txt_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("txt_value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TlsCertificatesAndHostnamesValidationRecord.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TlsCertificatesAndHostnamesValidationRecord' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TlsCertificatesAndHostnamesValidationRecord> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TlsCertificatesAndHostnamesValidationRecord.class));

       return (TypeAdapter<T>) new TypeAdapter<TlsCertificatesAndHostnamesValidationRecord>() {
           @Override
           public void write(JsonWriter out, TlsCertificatesAndHostnamesValidationRecord value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TlsCertificatesAndHostnamesValidationRecord read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TlsCertificatesAndHostnamesValidationRecord given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TlsCertificatesAndHostnamesValidationRecord
  * @throws IOException if the JSON string is invalid with respect to TlsCertificatesAndHostnamesValidationRecord
  */
  public static TlsCertificatesAndHostnamesValidationRecord fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TlsCertificatesAndHostnamesValidationRecord.class);
  }

 /**
  * Convert an instance of TlsCertificatesAndHostnamesValidationRecord to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

