/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TlsCertificatesAndHostnamesCertificateAuthority;
import org.openapitools.client.model.TlsCertificatesAndHostnamesSslOneOfValidationErrorsInner;
import org.openapitools.client.model.TlsCertificatesAndHostnamesSslsettings;
import org.openapitools.client.model.TlsCertificatesAndHostnamesValidationRecord;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * TlsCertificatesAndHostnamesSslOneOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class TlsCertificatesAndHostnamesSslOneOf {
  /**
   * A ubiquitous bundle has the highest probability of being verified everywhere, even by clients using outdated or unusual trust stores. An optimal bundle uses the shortest chain and newest intermediates. And the force bundle verifies the chain, but does not otherwise modify it.
   */
  @JsonAdapter(BundleMethodEnum.Adapter.class)
  public enum BundleMethodEnum {
    UBIQUITOUS("ubiquitous"),
    
    OPTIMAL("optimal"),
    
    FORCE("force");

    private String value;

    BundleMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BundleMethodEnum fromValue(String value) {
      for (BundleMethodEnum b : BundleMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BundleMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BundleMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BundleMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BundleMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BundleMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BUNDLE_METHOD = "bundle_method";
  @SerializedName(SERIALIZED_NAME_BUNDLE_METHOD)
  private BundleMethodEnum bundleMethod = BundleMethodEnum.UBIQUITOUS;

  public static final String SERIALIZED_NAME_CERTIFICATE_AUTHORITY = "certificate_authority";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_AUTHORITY)
  private TlsCertificatesAndHostnamesCertificateAuthority certificateAuthority;

  public static final String SERIALIZED_NAME_CUSTOM_CERTIFICATE = "custom_certificate";
  @SerializedName(SERIALIZED_NAME_CUSTOM_CERTIFICATE)
  private String customCertificate;

  public static final String SERIALIZED_NAME_CUSTOM_CSR_ID = "custom_csr_id";
  @SerializedName(SERIALIZED_NAME_CUSTOM_CSR_ID)
  private String customCsrId;

  public static final String SERIALIZED_NAME_CUSTOM_KEY = "custom_key";
  @SerializedName(SERIALIZED_NAME_CUSTOM_KEY)
  private String customKey;

  public static final String SERIALIZED_NAME_EXPIRES_ON = "expires_on";
  @SerializedName(SERIALIZED_NAME_EXPIRES_ON)
  private OffsetDateTime expiresOn;

  public static final String SERIALIZED_NAME_HOSTS = "hosts";
  @SerializedName(SERIALIZED_NAME_HOSTS)
  private List<Object> hosts = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ISSUER = "issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private String issuer;

  /**
   * Domain control validation (DCV) method used for this hostname.
   */
  @JsonAdapter(MethodEnum.Adapter.class)
  public enum MethodEnum {
    HTTP("http"),
    
    TXT("txt"),
    
    EMAIL("email");

    private String value;

    MethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MethodEnum fromValue(String value) {
      for (MethodEnum b : MethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private MethodEnum method;

  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "serial_number";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  private String serialNumber;

  public static final String SERIALIZED_NAME_SETTINGS = "settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private TlsCertificatesAndHostnamesSslsettings settings;

  public static final String SERIALIZED_NAME_SIGNATURE = "signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private String signature;

  /**
   * Status of the hostname&#39;s SSL certificates.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    INITIALIZING("initializing"),
    
    PENDING_VALIDATION("pending_validation"),
    
    DELETED("deleted"),
    
    PENDING_ISSUANCE("pending_issuance"),
    
    PENDING_DEPLOYMENT("pending_deployment"),
    
    PENDING_DELETION("pending_deletion"),
    
    PENDING_EXPIRATION("pending_expiration"),
    
    EXPIRED("expired"),
    
    ACTIVE("active"),
    
    INITIALIZING_TIMED_OUT("initializing_timed_out"),
    
    VALIDATION_TIMED_OUT("validation_timed_out"),
    
    ISSUANCE_TIMED_OUT("issuance_timed_out"),
    
    DEPLOYMENT_TIMED_OUT("deployment_timed_out"),
    
    DELETION_TIMED_OUT("deletion_timed_out"),
    
    PENDING_CLEANUP("pending_cleanup"),
    
    STAGING_DEPLOYMENT("staging_deployment"),
    
    STAGING_ACTIVE("staging_active"),
    
    DEACTIVATING("deactivating"),
    
    INACTIVE("inactive"),
    
    BACKUP_ISSUED("backup_issued"),
    
    HOLDING_DEPLOYMENT("holding_deployment");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * Level of validation to be used for this hostname. Domain validation (dv) must be used.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    DV("dv");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UPLOADED_ON = "uploaded_on";
  @SerializedName(SERIALIZED_NAME_UPLOADED_ON)
  private OffsetDateTime uploadedOn;

  public static final String SERIALIZED_NAME_VALIDATION_ERRORS = "validation_errors";
  @SerializedName(SERIALIZED_NAME_VALIDATION_ERRORS)
  private List<TlsCertificatesAndHostnamesSslOneOfValidationErrorsInner> validationErrors = new ArrayList<>();

  public static final String SERIALIZED_NAME_VALIDATION_RECORDS = "validation_records";
  @SerializedName(SERIALIZED_NAME_VALIDATION_RECORDS)
  private List<TlsCertificatesAndHostnamesValidationRecord> validationRecords = new ArrayList<>();

  public static final String SERIALIZED_NAME_WILDCARD = "wildcard";
  @SerializedName(SERIALIZED_NAME_WILDCARD)
  private Boolean wildcard;

  public TlsCertificatesAndHostnamesSslOneOf() {
  }

  public TlsCertificatesAndHostnamesSslOneOf(
     StatusEnum status, 
     TypeEnum type
  ) {
    this();
    this.status = status;
    this.type = type;
  }

  public TlsCertificatesAndHostnamesSslOneOf bundleMethod(BundleMethodEnum bundleMethod) {
    this.bundleMethod = bundleMethod;
    return this;
  }

   /**
   * A ubiquitous bundle has the highest probability of being verified everywhere, even by clients using outdated or unusual trust stores. An optimal bundle uses the shortest chain and newest intermediates. And the force bundle verifies the chain, but does not otherwise modify it.
   * @return bundleMethod
  **/
  @javax.annotation.Nullable
  public BundleMethodEnum getBundleMethod() {
    return bundleMethod;
  }

  public void setBundleMethod(BundleMethodEnum bundleMethod) {
    this.bundleMethod = bundleMethod;
  }


  public TlsCertificatesAndHostnamesSslOneOf certificateAuthority(TlsCertificatesAndHostnamesCertificateAuthority certificateAuthority) {
    this.certificateAuthority = certificateAuthority;
    return this;
  }

   /**
   * Get certificateAuthority
   * @return certificateAuthority
  **/
  @javax.annotation.Nullable
  public TlsCertificatesAndHostnamesCertificateAuthority getCertificateAuthority() {
    return certificateAuthority;
  }

  public void setCertificateAuthority(TlsCertificatesAndHostnamesCertificateAuthority certificateAuthority) {
    this.certificateAuthority = certificateAuthority;
  }


  public TlsCertificatesAndHostnamesSslOneOf customCertificate(String customCertificate) {
    this.customCertificate = customCertificate;
    return this;
  }

   /**
   * If a custom uploaded certificate is used.
   * @return customCertificate
  **/
  @javax.annotation.Nullable
  public String getCustomCertificate() {
    return customCertificate;
  }

  public void setCustomCertificate(String customCertificate) {
    this.customCertificate = customCertificate;
  }


  public TlsCertificatesAndHostnamesSslOneOf customCsrId(String customCsrId) {
    this.customCsrId = customCsrId;
    return this;
  }

   /**
   * The identifier for the Custom CSR that was used.
   * @return customCsrId
  **/
  @javax.annotation.Nullable
  public String getCustomCsrId() {
    return customCsrId;
  }

  public void setCustomCsrId(String customCsrId) {
    this.customCsrId = customCsrId;
  }


  public TlsCertificatesAndHostnamesSslOneOf customKey(String customKey) {
    this.customKey = customKey;
    return this;
  }

   /**
   * The key for a custom uploaded certificate.
   * @return customKey
  **/
  @javax.annotation.Nullable
  public String getCustomKey() {
    return customKey;
  }

  public void setCustomKey(String customKey) {
    this.customKey = customKey;
  }


  public TlsCertificatesAndHostnamesSslOneOf expiresOn(OffsetDateTime expiresOn) {
    this.expiresOn = expiresOn;
    return this;
  }

   /**
   * The time the custom certificate expires on.
   * @return expiresOn
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getExpiresOn() {
    return expiresOn;
  }

  public void setExpiresOn(OffsetDateTime expiresOn) {
    this.expiresOn = expiresOn;
  }


  public TlsCertificatesAndHostnamesSslOneOf hosts(List<Object> hosts) {
    this.hosts = hosts;
    return this;
  }

  public TlsCertificatesAndHostnamesSslOneOf addHostsItem(Object hostsItem) {
    if (this.hosts == null) {
      this.hosts = new ArrayList<>();
    }
    this.hosts.add(hostsItem);
    return this;
  }

   /**
   * A list of Hostnames on a custom uploaded certificate.
   * @return hosts
  **/
  @javax.annotation.Nullable
  public List<Object> getHosts() {
    return hosts;
  }

  public void setHosts(List<Object> hosts) {
    this.hosts = hosts;
  }


  public TlsCertificatesAndHostnamesSslOneOf id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Custom hostname SSL identifier tag.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TlsCertificatesAndHostnamesSslOneOf issuer(String issuer) {
    this.issuer = issuer;
    return this;
  }

   /**
   * The issuer on a custom uploaded certificate.
   * @return issuer
  **/
  @javax.annotation.Nullable
  public String getIssuer() {
    return issuer;
  }

  public void setIssuer(String issuer) {
    this.issuer = issuer;
  }


  public TlsCertificatesAndHostnamesSslOneOf method(MethodEnum method) {
    this.method = method;
    return this;
  }

   /**
   * Domain control validation (DCV) method used for this hostname.
   * @return method
  **/
  @javax.annotation.Nullable
  public MethodEnum getMethod() {
    return method;
  }

  public void setMethod(MethodEnum method) {
    this.method = method;
  }


  public TlsCertificatesAndHostnamesSslOneOf serialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

   /**
   * The serial number on a custom uploaded certificate.
   * @return serialNumber
  **/
  @javax.annotation.Nullable
  public String getSerialNumber() {
    return serialNumber;
  }

  public void setSerialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
  }


  public TlsCertificatesAndHostnamesSslOneOf settings(TlsCertificatesAndHostnamesSslsettings settings) {
    this.settings = settings;
    return this;
  }

   /**
   * Get settings
   * @return settings
  **/
  @javax.annotation.Nullable
  public TlsCertificatesAndHostnamesSslsettings getSettings() {
    return settings;
  }

  public void setSettings(TlsCertificatesAndHostnamesSslsettings settings) {
    this.settings = settings;
  }


  public TlsCertificatesAndHostnamesSslOneOf signature(String signature) {
    this.signature = signature;
    return this;
  }

   /**
   * The signature on a custom uploaded certificate.
   * @return signature
  **/
  @javax.annotation.Nullable
  public String getSignature() {
    return signature;
  }

  public void setSignature(String signature) {
    this.signature = signature;
  }


   /**
   * Status of the hostname&#39;s SSL certificates.
   * @return status
  **/
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }



   /**
   * Level of validation to be used for this hostname. Domain validation (dv) must be used.
   * @return type
  **/
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }



  public TlsCertificatesAndHostnamesSslOneOf uploadedOn(OffsetDateTime uploadedOn) {
    this.uploadedOn = uploadedOn;
    return this;
  }

   /**
   * The time the custom certificate was uploaded.
   * @return uploadedOn
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getUploadedOn() {
    return uploadedOn;
  }

  public void setUploadedOn(OffsetDateTime uploadedOn) {
    this.uploadedOn = uploadedOn;
  }


  public TlsCertificatesAndHostnamesSslOneOf validationErrors(List<TlsCertificatesAndHostnamesSslOneOfValidationErrorsInner> validationErrors) {
    this.validationErrors = validationErrors;
    return this;
  }

  public TlsCertificatesAndHostnamesSslOneOf addValidationErrorsItem(TlsCertificatesAndHostnamesSslOneOfValidationErrorsInner validationErrorsItem) {
    if (this.validationErrors == null) {
      this.validationErrors = new ArrayList<>();
    }
    this.validationErrors.add(validationErrorsItem);
    return this;
  }

   /**
   * Domain validation errors that have been received by the certificate authority (CA).
   * @return validationErrors
  **/
  @javax.annotation.Nullable
  public List<TlsCertificatesAndHostnamesSslOneOfValidationErrorsInner> getValidationErrors() {
    return validationErrors;
  }

  public void setValidationErrors(List<TlsCertificatesAndHostnamesSslOneOfValidationErrorsInner> validationErrors) {
    this.validationErrors = validationErrors;
  }


  public TlsCertificatesAndHostnamesSslOneOf validationRecords(List<TlsCertificatesAndHostnamesValidationRecord> validationRecords) {
    this.validationRecords = validationRecords;
    return this;
  }

  public TlsCertificatesAndHostnamesSslOneOf addValidationRecordsItem(TlsCertificatesAndHostnamesValidationRecord validationRecordsItem) {
    if (this.validationRecords == null) {
      this.validationRecords = new ArrayList<>();
    }
    this.validationRecords.add(validationRecordsItem);
    return this;
  }

   /**
   * Get validationRecords
   * @return validationRecords
  **/
  @javax.annotation.Nullable
  public List<TlsCertificatesAndHostnamesValidationRecord> getValidationRecords() {
    return validationRecords;
  }

  public void setValidationRecords(List<TlsCertificatesAndHostnamesValidationRecord> validationRecords) {
    this.validationRecords = validationRecords;
  }


  public TlsCertificatesAndHostnamesSslOneOf wildcard(Boolean wildcard) {
    this.wildcard = wildcard;
    return this;
  }

   /**
   * Indicates whether the certificate covers a wildcard.
   * @return wildcard
  **/
  @javax.annotation.Nullable
  public Boolean getWildcard() {
    return wildcard;
  }

  public void setWildcard(Boolean wildcard) {
    this.wildcard = wildcard;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TlsCertificatesAndHostnamesSslOneOf tlsCertificatesAndHostnamesSslOneOf = (TlsCertificatesAndHostnamesSslOneOf) o;
    return Objects.equals(this.bundleMethod, tlsCertificatesAndHostnamesSslOneOf.bundleMethod) &&
        Objects.equals(this.certificateAuthority, tlsCertificatesAndHostnamesSslOneOf.certificateAuthority) &&
        Objects.equals(this.customCertificate, tlsCertificatesAndHostnamesSslOneOf.customCertificate) &&
        Objects.equals(this.customCsrId, tlsCertificatesAndHostnamesSslOneOf.customCsrId) &&
        Objects.equals(this.customKey, tlsCertificatesAndHostnamesSslOneOf.customKey) &&
        Objects.equals(this.expiresOn, tlsCertificatesAndHostnamesSslOneOf.expiresOn) &&
        Objects.equals(this.hosts, tlsCertificatesAndHostnamesSslOneOf.hosts) &&
        Objects.equals(this.id, tlsCertificatesAndHostnamesSslOneOf.id) &&
        Objects.equals(this.issuer, tlsCertificatesAndHostnamesSslOneOf.issuer) &&
        Objects.equals(this.method, tlsCertificatesAndHostnamesSslOneOf.method) &&
        Objects.equals(this.serialNumber, tlsCertificatesAndHostnamesSslOneOf.serialNumber) &&
        Objects.equals(this.settings, tlsCertificatesAndHostnamesSslOneOf.settings) &&
        Objects.equals(this.signature, tlsCertificatesAndHostnamesSslOneOf.signature) &&
        Objects.equals(this.status, tlsCertificatesAndHostnamesSslOneOf.status) &&
        Objects.equals(this.type, tlsCertificatesAndHostnamesSslOneOf.type) &&
        Objects.equals(this.uploadedOn, tlsCertificatesAndHostnamesSslOneOf.uploadedOn) &&
        Objects.equals(this.validationErrors, tlsCertificatesAndHostnamesSslOneOf.validationErrors) &&
        Objects.equals(this.validationRecords, tlsCertificatesAndHostnamesSslOneOf.validationRecords) &&
        Objects.equals(this.wildcard, tlsCertificatesAndHostnamesSslOneOf.wildcard);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bundleMethod, certificateAuthority, customCertificate, customCsrId, customKey, expiresOn, hosts, id, issuer, method, serialNumber, settings, signature, status, type, uploadedOn, validationErrors, validationRecords, wildcard);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TlsCertificatesAndHostnamesSslOneOf {\n");
    sb.append("    bundleMethod: ").append(toIndentedString(bundleMethod)).append("\n");
    sb.append("    certificateAuthority: ").append(toIndentedString(certificateAuthority)).append("\n");
    sb.append("    customCertificate: ").append(toIndentedString(customCertificate)).append("\n");
    sb.append("    customCsrId: ").append(toIndentedString(customCsrId)).append("\n");
    sb.append("    customKey: ").append(toIndentedString(customKey)).append("\n");
    sb.append("    expiresOn: ").append(toIndentedString(expiresOn)).append("\n");
    sb.append("    hosts: ").append(toIndentedString(hosts)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uploadedOn: ").append(toIndentedString(uploadedOn)).append("\n");
    sb.append("    validationErrors: ").append(toIndentedString(validationErrors)).append("\n");
    sb.append("    validationRecords: ").append(toIndentedString(validationRecords)).append("\n");
    sb.append("    wildcard: ").append(toIndentedString(wildcard)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bundle_method");
    openapiFields.add("certificate_authority");
    openapiFields.add("custom_certificate");
    openapiFields.add("custom_csr_id");
    openapiFields.add("custom_key");
    openapiFields.add("expires_on");
    openapiFields.add("hosts");
    openapiFields.add("id");
    openapiFields.add("issuer");
    openapiFields.add("method");
    openapiFields.add("serial_number");
    openapiFields.add("settings");
    openapiFields.add("signature");
    openapiFields.add("status");
    openapiFields.add("type");
    openapiFields.add("uploaded_on");
    openapiFields.add("validation_errors");
    openapiFields.add("validation_records");
    openapiFields.add("wildcard");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TlsCertificatesAndHostnamesSslOneOf
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TlsCertificatesAndHostnamesSslOneOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TlsCertificatesAndHostnamesSslOneOf is not found in the empty JSON string", TlsCertificatesAndHostnamesSslOneOf.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TlsCertificatesAndHostnamesSslOneOf.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TlsCertificatesAndHostnamesSslOneOf` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bundle_method") != null && !jsonObj.get("bundle_method").isJsonNull()) && !jsonObj.get("bundle_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bundle_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bundle_method").toString()));
      }
      // validate the optional field `bundle_method`
      if (jsonObj.get("bundle_method") != null && !jsonObj.get("bundle_method").isJsonNull()) {
        BundleMethodEnum.validateJsonElement(jsonObj.get("bundle_method"));
      }
      // validate the optional field `certificate_authority`
      if (jsonObj.get("certificate_authority") != null && !jsonObj.get("certificate_authority").isJsonNull()) {
        TlsCertificatesAndHostnamesCertificateAuthority.validateJsonElement(jsonObj.get("certificate_authority"));
      }
      if ((jsonObj.get("custom_certificate") != null && !jsonObj.get("custom_certificate").isJsonNull()) && !jsonObj.get("custom_certificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_certificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_certificate").toString()));
      }
      if ((jsonObj.get("custom_csr_id") != null && !jsonObj.get("custom_csr_id").isJsonNull()) && !jsonObj.get("custom_csr_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_csr_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_csr_id").toString()));
      }
      if ((jsonObj.get("custom_key") != null && !jsonObj.get("custom_key").isJsonNull()) && !jsonObj.get("custom_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_key").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("hosts") != null && !jsonObj.get("hosts").isJsonNull() && !jsonObj.get("hosts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hosts` to be an array in the JSON string but got `%s`", jsonObj.get("hosts").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("issuer") != null && !jsonObj.get("issuer").isJsonNull()) && !jsonObj.get("issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer").toString()));
      }
      if ((jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) && !jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      // validate the optional field `method`
      if (jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) {
        MethodEnum.validateJsonElement(jsonObj.get("method"));
      }
      if ((jsonObj.get("serial_number") != null && !jsonObj.get("serial_number").isJsonNull()) && !jsonObj.get("serial_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serial_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serial_number").toString()));
      }
      // validate the optional field `settings`
      if (jsonObj.get("settings") != null && !jsonObj.get("settings").isJsonNull()) {
        TlsCertificatesAndHostnamesSslsettings.validateJsonElement(jsonObj.get("settings"));
      }
      if ((jsonObj.get("signature") != null && !jsonObj.get("signature").isJsonNull()) && !jsonObj.get("signature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signature").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if (jsonObj.get("validation_errors") != null && !jsonObj.get("validation_errors").isJsonNull()) {
        JsonArray jsonArrayvalidationErrors = jsonObj.getAsJsonArray("validation_errors");
        if (jsonArrayvalidationErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("validation_errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `validation_errors` to be an array in the JSON string but got `%s`", jsonObj.get("validation_errors").toString()));
          }

          // validate the optional field `validation_errors` (array)
          for (int i = 0; i < jsonArrayvalidationErrors.size(); i++) {
            TlsCertificatesAndHostnamesSslOneOfValidationErrorsInner.validateJsonElement(jsonArrayvalidationErrors.get(i));
          };
        }
      }
      if (jsonObj.get("validation_records") != null && !jsonObj.get("validation_records").isJsonNull()) {
        JsonArray jsonArrayvalidationRecords = jsonObj.getAsJsonArray("validation_records");
        if (jsonArrayvalidationRecords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("validation_records").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `validation_records` to be an array in the JSON string but got `%s`", jsonObj.get("validation_records").toString()));
          }

          // validate the optional field `validation_records` (array)
          for (int i = 0; i < jsonArrayvalidationRecords.size(); i++) {
            TlsCertificatesAndHostnamesValidationRecord.validateJsonElement(jsonArrayvalidationRecords.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TlsCertificatesAndHostnamesSslOneOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TlsCertificatesAndHostnamesSslOneOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TlsCertificatesAndHostnamesSslOneOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TlsCertificatesAndHostnamesSslOneOf.class));

       return (TypeAdapter<T>) new TypeAdapter<TlsCertificatesAndHostnamesSslOneOf>() {
           @Override
           public void write(JsonWriter out, TlsCertificatesAndHostnamesSslOneOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TlsCertificatesAndHostnamesSslOneOf read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TlsCertificatesAndHostnamesSslOneOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TlsCertificatesAndHostnamesSslOneOf
  * @throws IOException if the JSON string is invalid with respect to TlsCertificatesAndHostnamesSslOneOf
  */
  public static TlsCertificatesAndHostnamesSslOneOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TlsCertificatesAndHostnamesSslOneOf.class);
  }

 /**
  * Convert an instance of TlsCertificatesAndHostnamesSslOneOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

