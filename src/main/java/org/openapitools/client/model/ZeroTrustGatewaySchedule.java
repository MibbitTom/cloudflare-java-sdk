/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * The schedule for activating DNS policies. This does not apply to HTTP or network policies.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class ZeroTrustGatewaySchedule {
  public static final String SERIALIZED_NAME_FRI = "fri";
  @SerializedName(SERIALIZED_NAME_FRI)
  private String fri;

  public static final String SERIALIZED_NAME_MON = "mon";
  @SerializedName(SERIALIZED_NAME_MON)
  private String mon;

  public static final String SERIALIZED_NAME_SAT = "sat";
  @SerializedName(SERIALIZED_NAME_SAT)
  private String sat;

  public static final String SERIALIZED_NAME_SUN = "sun";
  @SerializedName(SERIALIZED_NAME_SUN)
  private String sun;

  public static final String SERIALIZED_NAME_THU = "thu";
  @SerializedName(SERIALIZED_NAME_THU)
  private String thu;

  public static final String SERIALIZED_NAME_TIME_ZONE = "time_zone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public static final String SERIALIZED_NAME_TUE = "tue";
  @SerializedName(SERIALIZED_NAME_TUE)
  private String tue;

  public static final String SERIALIZED_NAME_WED = "wed";
  @SerializedName(SERIALIZED_NAME_WED)
  private String wed;

  public ZeroTrustGatewaySchedule() {
  }

  public ZeroTrustGatewaySchedule fri(String fri) {
    this.fri = fri;
    return this;
  }

   /**
   * The time intervals when the rule will be active on Fridays, in increasing order from 00:00-24:00.  If this parameter is omitted, the rule will be deactivated on Fridays.
   * @return fri
  **/
  @javax.annotation.Nullable
  public String getFri() {
    return fri;
  }

  public void setFri(String fri) {
    this.fri = fri;
  }


  public ZeroTrustGatewaySchedule mon(String mon) {
    this.mon = mon;
    return this;
  }

   /**
   * The time intervals when the rule will be active on Mondays, in increasing order from 00:00-24:00. If this parameter is omitted, the rule will be deactivated on Mondays.
   * @return mon
  **/
  @javax.annotation.Nullable
  public String getMon() {
    return mon;
  }

  public void setMon(String mon) {
    this.mon = mon;
  }


  public ZeroTrustGatewaySchedule sat(String sat) {
    this.sat = sat;
    return this;
  }

   /**
   * The time intervals when the rule will be active on Saturdays, in increasing order from 00:00-24:00.  If this parameter is omitted, the rule will be deactivated on Saturdays.
   * @return sat
  **/
  @javax.annotation.Nullable
  public String getSat() {
    return sat;
  }

  public void setSat(String sat) {
    this.sat = sat;
  }


  public ZeroTrustGatewaySchedule sun(String sun) {
    this.sun = sun;
    return this;
  }

   /**
   * The time intervals when the rule will be active on Sundays, in increasing order from 00:00-24:00. If this parameter is omitted, the rule will be deactivated on Sundays.
   * @return sun
  **/
  @javax.annotation.Nullable
  public String getSun() {
    return sun;
  }

  public void setSun(String sun) {
    this.sun = sun;
  }


  public ZeroTrustGatewaySchedule thu(String thu) {
    this.thu = thu;
    return this;
  }

   /**
   * The time intervals when the rule will be active on Thursdays, in increasing order from 00:00-24:00. If this parameter is omitted, the rule will be deactivated on Thursdays.
   * @return thu
  **/
  @javax.annotation.Nullable
  public String getThu() {
    return thu;
  }

  public void setThu(String thu) {
    this.thu = thu;
  }


  public ZeroTrustGatewaySchedule timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

   /**
   * The time zone the rule will be evaluated against. If a [valid time zone city name](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List) is provided, Gateway will always use the current time at that time zone. If this parameter is omitted, then Gateway will use the time zone inferred from the user&#39;s source IP to evaluate the rule. If Gateway cannot determine the time zone from the IP, we will fall back to the time zone of the user&#39;s connected data center.
   * @return timeZone
  **/
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }


  public ZeroTrustGatewaySchedule tue(String tue) {
    this.tue = tue;
    return this;
  }

   /**
   * The time intervals when the rule will be active on Tuesdays, in increasing order from 00:00-24:00. If this parameter is omitted, the rule will be deactivated on Tuesdays.
   * @return tue
  **/
  @javax.annotation.Nullable
  public String getTue() {
    return tue;
  }

  public void setTue(String tue) {
    this.tue = tue;
  }


  public ZeroTrustGatewaySchedule wed(String wed) {
    this.wed = wed;
    return this;
  }

   /**
   * The time intervals when the rule will be active on Wednesdays, in increasing order from 00:00-24:00. If this parameter is omitted, the rule will be deactivated on Wednesdays.
   * @return wed
  **/
  @javax.annotation.Nullable
  public String getWed() {
    return wed;
  }

  public void setWed(String wed) {
    this.wed = wed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ZeroTrustGatewaySchedule zeroTrustGatewaySchedule = (ZeroTrustGatewaySchedule) o;
    return Objects.equals(this.fri, zeroTrustGatewaySchedule.fri) &&
        Objects.equals(this.mon, zeroTrustGatewaySchedule.mon) &&
        Objects.equals(this.sat, zeroTrustGatewaySchedule.sat) &&
        Objects.equals(this.sun, zeroTrustGatewaySchedule.sun) &&
        Objects.equals(this.thu, zeroTrustGatewaySchedule.thu) &&
        Objects.equals(this.timeZone, zeroTrustGatewaySchedule.timeZone) &&
        Objects.equals(this.tue, zeroTrustGatewaySchedule.tue) &&
        Objects.equals(this.wed, zeroTrustGatewaySchedule.wed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fri, mon, sat, sun, thu, timeZone, tue, wed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ZeroTrustGatewaySchedule {\n");
    sb.append("    fri: ").append(toIndentedString(fri)).append("\n");
    sb.append("    mon: ").append(toIndentedString(mon)).append("\n");
    sb.append("    sat: ").append(toIndentedString(sat)).append("\n");
    sb.append("    sun: ").append(toIndentedString(sun)).append("\n");
    sb.append("    thu: ").append(toIndentedString(thu)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    tue: ").append(toIndentedString(tue)).append("\n");
    sb.append("    wed: ").append(toIndentedString(wed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fri");
    openapiFields.add("mon");
    openapiFields.add("sat");
    openapiFields.add("sun");
    openapiFields.add("thu");
    openapiFields.add("time_zone");
    openapiFields.add("tue");
    openapiFields.add("wed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ZeroTrustGatewaySchedule
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ZeroTrustGatewaySchedule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ZeroTrustGatewaySchedule is not found in the empty JSON string", ZeroTrustGatewaySchedule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ZeroTrustGatewaySchedule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ZeroTrustGatewaySchedule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("fri") != null && !jsonObj.get("fri").isJsonNull()) && !jsonObj.get("fri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fri").toString()));
      }
      if ((jsonObj.get("mon") != null && !jsonObj.get("mon").isJsonNull()) && !jsonObj.get("mon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mon").toString()));
      }
      if ((jsonObj.get("sat") != null && !jsonObj.get("sat").isJsonNull()) && !jsonObj.get("sat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sat").toString()));
      }
      if ((jsonObj.get("sun") != null && !jsonObj.get("sun").isJsonNull()) && !jsonObj.get("sun").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sun` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sun").toString()));
      }
      if ((jsonObj.get("thu") != null && !jsonObj.get("thu").isJsonNull()) && !jsonObj.get("thu").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thu` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thu").toString()));
      }
      if ((jsonObj.get("time_zone") != null && !jsonObj.get("time_zone").isJsonNull()) && !jsonObj.get("time_zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_zone").toString()));
      }
      if ((jsonObj.get("tue") != null && !jsonObj.get("tue").isJsonNull()) && !jsonObj.get("tue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tue").toString()));
      }
      if ((jsonObj.get("wed") != null && !jsonObj.get("wed").isJsonNull()) && !jsonObj.get("wed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wed").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ZeroTrustGatewaySchedule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ZeroTrustGatewaySchedule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ZeroTrustGatewaySchedule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ZeroTrustGatewaySchedule.class));

       return (TypeAdapter<T>) new TypeAdapter<ZeroTrustGatewaySchedule>() {
           @Override
           public void write(JsonWriter out, ZeroTrustGatewaySchedule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ZeroTrustGatewaySchedule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ZeroTrustGatewaySchedule given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ZeroTrustGatewaySchedule
  * @throws IOException if the JSON string is invalid with respect to ZeroTrustGatewaySchedule
  */
  public static ZeroTrustGatewaySchedule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ZeroTrustGatewaySchedule.class);
  }

 /**
  * Convert an instance of ZeroTrustGatewaySchedule to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

