/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TlsCertificatesAndHostnamesComponentsSchemasStatus;
import org.openapitools.client.model.TlsCertificatesAndHostnamesCustomMetadata;
import org.openapitools.client.model.TlsCertificatesAndHostnamesOwnershipVerification;
import org.openapitools.client.model.TlsCertificatesAndHostnamesOwnershipVerificationHttp;
import org.openapitools.client.model.TlsCertificatesAndHostnamesSsl;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TlsCertificatesAndHostnamesCustomHostname
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class TlsCertificatesAndHostnamesCustomHostname {
  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_SSL = "ssl";
  @SerializedName(SERIALIZED_NAME_SSL)
  private TlsCertificatesAndHostnamesSsl ssl;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CUSTOM_METADATA = "custom_metadata";
  @SerializedName(SERIALIZED_NAME_CUSTOM_METADATA)
  private TlsCertificatesAndHostnamesCustomMetadata customMetadata;

  public static final String SERIALIZED_NAME_CUSTOM_ORIGIN_SERVER = "custom_origin_server";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ORIGIN_SERVER)
  private String customOriginServer;

  public static final String SERIALIZED_NAME_CUSTOM_ORIGIN_SNI = "custom_origin_sni";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ORIGIN_SNI)
  private String customOriginSni;

  public static final String SERIALIZED_NAME_OWNERSHIP_VERIFICATION = "ownership_verification";
  @SerializedName(SERIALIZED_NAME_OWNERSHIP_VERIFICATION)
  private TlsCertificatesAndHostnamesOwnershipVerification ownershipVerification;

  public static final String SERIALIZED_NAME_OWNERSHIP_VERIFICATION_HTTP = "ownership_verification_http";
  @SerializedName(SERIALIZED_NAME_OWNERSHIP_VERIFICATION_HTTP)
  private TlsCertificatesAndHostnamesOwnershipVerificationHttp ownershipVerificationHttp;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private TlsCertificatesAndHostnamesComponentsSchemasStatus status;

  public static final String SERIALIZED_NAME_VERIFICATION_ERRORS = "verification_errors";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_ERRORS)
  private List<Object> verificationErrors = new ArrayList<>();

  public TlsCertificatesAndHostnamesCustomHostname() {
  }

  public TlsCertificatesAndHostnamesCustomHostname(
     String hostname, 
     String id
  ) {
    this();
    this.hostname = hostname;
    this.id = id;
  }

   /**
   * The custom hostname that will point to your hostname via CNAME.
   * @return hostname
  **/
  @javax.annotation.Nonnull
  public String getHostname() {
    return hostname;
  }



   /**
   * Identifier
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }



  public TlsCertificatesAndHostnamesCustomHostname ssl(TlsCertificatesAndHostnamesSsl ssl) {
    this.ssl = ssl;
    return this;
  }

   /**
   * Get ssl
   * @return ssl
  **/
  @javax.annotation.Nonnull
  public TlsCertificatesAndHostnamesSsl getSsl() {
    return ssl;
  }

  public void setSsl(TlsCertificatesAndHostnamesSsl ssl) {
    this.ssl = ssl;
  }


  public TlsCertificatesAndHostnamesCustomHostname createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * This is the time the hostname was created.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public TlsCertificatesAndHostnamesCustomHostname customMetadata(TlsCertificatesAndHostnamesCustomMetadata customMetadata) {
    this.customMetadata = customMetadata;
    return this;
  }

   /**
   * Get customMetadata
   * @return customMetadata
  **/
  @javax.annotation.Nullable
  public TlsCertificatesAndHostnamesCustomMetadata getCustomMetadata() {
    return customMetadata;
  }

  public void setCustomMetadata(TlsCertificatesAndHostnamesCustomMetadata customMetadata) {
    this.customMetadata = customMetadata;
  }


  public TlsCertificatesAndHostnamesCustomHostname customOriginServer(String customOriginServer) {
    this.customOriginServer = customOriginServer;
    return this;
  }

   /**
   * a valid hostname thatâ€™s been added to your DNS zone as an A, AAAA, or CNAME record.
   * @return customOriginServer
  **/
  @javax.annotation.Nullable
  public String getCustomOriginServer() {
    return customOriginServer;
  }

  public void setCustomOriginServer(String customOriginServer) {
    this.customOriginServer = customOriginServer;
  }


  public TlsCertificatesAndHostnamesCustomHostname customOriginSni(String customOriginSni) {
    this.customOriginSni = customOriginSni;
    return this;
  }

   /**
   * A hostname that will be sent to your custom origin server as SNI for TLS handshake. This can be a valid subdomain of the zone or custom origin server name or the string &#39;:request_host_header:&#39; which will cause the host header in the request to be used as SNI. Not configurable with default/fallback origin server.
   * @return customOriginSni
  **/
  @javax.annotation.Nullable
  public String getCustomOriginSni() {
    return customOriginSni;
  }

  public void setCustomOriginSni(String customOriginSni) {
    this.customOriginSni = customOriginSni;
  }


  public TlsCertificatesAndHostnamesCustomHostname ownershipVerification(TlsCertificatesAndHostnamesOwnershipVerification ownershipVerification) {
    this.ownershipVerification = ownershipVerification;
    return this;
  }

   /**
   * Get ownershipVerification
   * @return ownershipVerification
  **/
  @javax.annotation.Nullable
  public TlsCertificatesAndHostnamesOwnershipVerification getOwnershipVerification() {
    return ownershipVerification;
  }

  public void setOwnershipVerification(TlsCertificatesAndHostnamesOwnershipVerification ownershipVerification) {
    this.ownershipVerification = ownershipVerification;
  }


  public TlsCertificatesAndHostnamesCustomHostname ownershipVerificationHttp(TlsCertificatesAndHostnamesOwnershipVerificationHttp ownershipVerificationHttp) {
    this.ownershipVerificationHttp = ownershipVerificationHttp;
    return this;
  }

   /**
   * Get ownershipVerificationHttp
   * @return ownershipVerificationHttp
  **/
  @javax.annotation.Nullable
  public TlsCertificatesAndHostnamesOwnershipVerificationHttp getOwnershipVerificationHttp() {
    return ownershipVerificationHttp;
  }

  public void setOwnershipVerificationHttp(TlsCertificatesAndHostnamesOwnershipVerificationHttp ownershipVerificationHttp) {
    this.ownershipVerificationHttp = ownershipVerificationHttp;
  }


  public TlsCertificatesAndHostnamesCustomHostname status(TlsCertificatesAndHostnamesComponentsSchemasStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  public TlsCertificatesAndHostnamesComponentsSchemasStatus getStatus() {
    return status;
  }

  public void setStatus(TlsCertificatesAndHostnamesComponentsSchemasStatus status) {
    this.status = status;
  }


  public TlsCertificatesAndHostnamesCustomHostname verificationErrors(List<Object> verificationErrors) {
    this.verificationErrors = verificationErrors;
    return this;
  }

  public TlsCertificatesAndHostnamesCustomHostname addVerificationErrorsItem(Object verificationErrorsItem) {
    if (this.verificationErrors == null) {
      this.verificationErrors = new ArrayList<>();
    }
    this.verificationErrors.add(verificationErrorsItem);
    return this;
  }

   /**
   * These are errors that were encountered while trying to activate a hostname.
   * @return verificationErrors
  **/
  @javax.annotation.Nullable
  public List<Object> getVerificationErrors() {
    return verificationErrors;
  }

  public void setVerificationErrors(List<Object> verificationErrors) {
    this.verificationErrors = verificationErrors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TlsCertificatesAndHostnamesCustomHostname tlsCertificatesAndHostnamesCustomHostname = (TlsCertificatesAndHostnamesCustomHostname) o;
    return Objects.equals(this.hostname, tlsCertificatesAndHostnamesCustomHostname.hostname) &&
        Objects.equals(this.id, tlsCertificatesAndHostnamesCustomHostname.id) &&
        Objects.equals(this.ssl, tlsCertificatesAndHostnamesCustomHostname.ssl) &&
        Objects.equals(this.createdAt, tlsCertificatesAndHostnamesCustomHostname.createdAt) &&
        Objects.equals(this.customMetadata, tlsCertificatesAndHostnamesCustomHostname.customMetadata) &&
        Objects.equals(this.customOriginServer, tlsCertificatesAndHostnamesCustomHostname.customOriginServer) &&
        Objects.equals(this.customOriginSni, tlsCertificatesAndHostnamesCustomHostname.customOriginSni) &&
        Objects.equals(this.ownershipVerification, tlsCertificatesAndHostnamesCustomHostname.ownershipVerification) &&
        Objects.equals(this.ownershipVerificationHttp, tlsCertificatesAndHostnamesCustomHostname.ownershipVerificationHttp) &&
        Objects.equals(this.status, tlsCertificatesAndHostnamesCustomHostname.status) &&
        Objects.equals(this.verificationErrors, tlsCertificatesAndHostnamesCustomHostname.verificationErrors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hostname, id, ssl, createdAt, customMetadata, customOriginServer, customOriginSni, ownershipVerification, ownershipVerificationHttp, status, verificationErrors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TlsCertificatesAndHostnamesCustomHostname {\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ssl: ").append(toIndentedString(ssl)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    customMetadata: ").append(toIndentedString(customMetadata)).append("\n");
    sb.append("    customOriginServer: ").append(toIndentedString(customOriginServer)).append("\n");
    sb.append("    customOriginSni: ").append(toIndentedString(customOriginSni)).append("\n");
    sb.append("    ownershipVerification: ").append(toIndentedString(ownershipVerification)).append("\n");
    sb.append("    ownershipVerificationHttp: ").append(toIndentedString(ownershipVerificationHttp)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    verificationErrors: ").append(toIndentedString(verificationErrors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created_at");
    openapiFields.add("custom_metadata");
    openapiFields.add("custom_origin_server");
    openapiFields.add("custom_origin_sni");
    openapiFields.add("hostname");
    openapiFields.add("id");
    openapiFields.add("ownership_verification");
    openapiFields.add("ownership_verification_http");
    openapiFields.add("ssl");
    openapiFields.add("status");
    openapiFields.add("verification_errors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("hostname");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("ssl");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TlsCertificatesAndHostnamesCustomHostname
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TlsCertificatesAndHostnamesCustomHostname.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TlsCertificatesAndHostnamesCustomHostname is not found in the empty JSON string", TlsCertificatesAndHostnamesCustomHostname.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TlsCertificatesAndHostnamesCustomHostname.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TlsCertificatesAndHostnamesCustomHostname` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TlsCertificatesAndHostnamesCustomHostname.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the required field `ssl`
      TlsCertificatesAndHostnamesSsl.validateJsonElement(jsonObj.get("ssl"));
      // validate the optional field `custom_metadata`
      if (jsonObj.get("custom_metadata") != null && !jsonObj.get("custom_metadata").isJsonNull()) {
        TlsCertificatesAndHostnamesCustomMetadata.validateJsonElement(jsonObj.get("custom_metadata"));
      }
      if ((jsonObj.get("custom_origin_server") != null && !jsonObj.get("custom_origin_server").isJsonNull()) && !jsonObj.get("custom_origin_server").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_origin_server` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_origin_server").toString()));
      }
      if ((jsonObj.get("custom_origin_sni") != null && !jsonObj.get("custom_origin_sni").isJsonNull()) && !jsonObj.get("custom_origin_sni").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_origin_sni` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_origin_sni").toString()));
      }
      // validate the optional field `ownership_verification`
      if (jsonObj.get("ownership_verification") != null && !jsonObj.get("ownership_verification").isJsonNull()) {
        TlsCertificatesAndHostnamesOwnershipVerification.validateJsonElement(jsonObj.get("ownership_verification"));
      }
      // validate the optional field `ownership_verification_http`
      if (jsonObj.get("ownership_verification_http") != null && !jsonObj.get("ownership_verification_http").isJsonNull()) {
        TlsCertificatesAndHostnamesOwnershipVerificationHttp.validateJsonElement(jsonObj.get("ownership_verification_http"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        TlsCertificatesAndHostnamesComponentsSchemasStatus.validateJsonElement(jsonObj.get("status"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("verification_errors") != null && !jsonObj.get("verification_errors").isJsonNull() && !jsonObj.get("verification_errors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `verification_errors` to be an array in the JSON string but got `%s`", jsonObj.get("verification_errors").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TlsCertificatesAndHostnamesCustomHostname.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TlsCertificatesAndHostnamesCustomHostname' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TlsCertificatesAndHostnamesCustomHostname> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TlsCertificatesAndHostnamesCustomHostname.class));

       return (TypeAdapter<T>) new TypeAdapter<TlsCertificatesAndHostnamesCustomHostname>() {
           @Override
           public void write(JsonWriter out, TlsCertificatesAndHostnamesCustomHostname value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TlsCertificatesAndHostnamesCustomHostname read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TlsCertificatesAndHostnamesCustomHostname given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TlsCertificatesAndHostnamesCustomHostname
  * @throws IOException if the JSON string is invalid with respect to TlsCertificatesAndHostnamesCustomHostname
  */
  public static TlsCertificatesAndHostnamesCustomHostname fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TlsCertificatesAndHostnamesCustomHostname.class);
  }

 /**
  * Convert an instance of TlsCertificatesAndHostnamesCustomHostname to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

