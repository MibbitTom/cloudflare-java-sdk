/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Steering Policy for this load balancer. - &#x60;\&quot;off\&quot;&#x60;: Use &#x60;default_pools&#x60;. - &#x60;\&quot;geo\&quot;&#x60;: Use &#x60;region_pools&#x60;/&#x60;country_pools&#x60;/&#x60;pop_pools&#x60;. For non-proxied requests, the country for &#x60;country_pools&#x60; is determined by &#x60;location_strategy&#x60;. - &#x60;\&quot;random\&quot;&#x60;: Select a pool randomly. - &#x60;\&quot;dynamic_latency\&quot;&#x60;: Use round trip time to select the closest pool in default_pools (requires pool health checks). - &#x60;\&quot;proximity\&quot;&#x60;: Use the pools&#39; latitude and longitude to select the closest pool using the Cloudflare PoP location for proxied requests or the location determined by &#x60;location_strategy&#x60; for non-proxied requests. - &#x60;\&quot;least_outstanding_requests\&quot;&#x60;: Select a pool by taking into consideration &#x60;random_steering&#x60; weights, as well as each pool&#39;s number of outstanding requests. Pools with more pending requests are weighted proportionately less relative to others. - &#x60;\&quot;least_connections\&quot;&#x60;: Select a pool by taking into consideration &#x60;random_steering&#x60; weights, as well as each pool&#39;s number of open connections. Pools with more open connections are weighted proportionately less relative to others. Supported for HTTP/1 and HTTP/2 connections. - &#x60;\&quot;\&quot;&#x60;: Will map to &#x60;\&quot;geo\&quot;&#x60; if you use &#x60;region_pools&#x60;/&#x60;country_pools&#x60;/&#x60;pop_pools&#x60; otherwise &#x60;\&quot;off\&quot;&#x60;.
 */
@JsonAdapter(LoadBalancingSteeringPolicy.Adapter.class)
public enum LoadBalancingSteeringPolicy {
  
  OFF("off"),
  
  GEO("geo"),
  
  RANDOM("random"),
  
  DYNAMIC_LATENCY("dynamic_latency"),
  
  PROXIMITY("proximity"),
  
  LEAST_OUTSTANDING_REQUESTS("least_outstanding_requests"),
  
  LEAST_CONNECTIONS("least_connections"),
  
  u("\"\"");

  private String value;

  LoadBalancingSteeringPolicy(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static LoadBalancingSteeringPolicy fromValue(String value) {
    for (LoadBalancingSteeringPolicy b : LoadBalancingSteeringPolicy.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<LoadBalancingSteeringPolicy> {
    @Override
    public void write(final JsonWriter jsonWriter, final LoadBalancingSteeringPolicy enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public LoadBalancingSteeringPolicy read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return LoadBalancingSteeringPolicy.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    LoadBalancingSteeringPolicy.fromValue(value);
  }
}

