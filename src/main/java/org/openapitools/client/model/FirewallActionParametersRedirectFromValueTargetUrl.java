/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FirewallActionParametersRedirectFromValueTargetUrlOneOf;
import org.openapitools.client.model.FirewallActionParametersRedirectFromValueTargetUrlOneOf1;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class FirewallActionParametersRedirectFromValueTargetUrl extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(FirewallActionParametersRedirectFromValueTargetUrl.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!FirewallActionParametersRedirectFromValueTargetUrl.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'FirewallActionParametersRedirectFromValueTargetUrl' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<FirewallActionParametersRedirectFromValueTargetUrlOneOf> adapterFirewallActionParametersRedirectFromValueTargetUrlOneOf = gson.getDelegateAdapter(this, TypeToken.get(FirewallActionParametersRedirectFromValueTargetUrlOneOf.class));
            final TypeAdapter<FirewallActionParametersRedirectFromValueTargetUrlOneOf1> adapterFirewallActionParametersRedirectFromValueTargetUrlOneOf1 = gson.getDelegateAdapter(this, TypeToken.get(FirewallActionParametersRedirectFromValueTargetUrlOneOf1.class));

            return (TypeAdapter<T>) new TypeAdapter<FirewallActionParametersRedirectFromValueTargetUrl>() {
                @Override
                public void write(JsonWriter out, FirewallActionParametersRedirectFromValueTargetUrl value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `FirewallActionParametersRedirectFromValueTargetUrlOneOf`
                    if (value.getActualInstance() instanceof FirewallActionParametersRedirectFromValueTargetUrlOneOf) {
                        JsonElement element = adapterFirewallActionParametersRedirectFromValueTargetUrlOneOf.toJsonTree((FirewallActionParametersRedirectFromValueTargetUrlOneOf)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `FirewallActionParametersRedirectFromValueTargetUrlOneOf1`
                    if (value.getActualInstance() instanceof FirewallActionParametersRedirectFromValueTargetUrlOneOf1) {
                        JsonElement element = adapterFirewallActionParametersRedirectFromValueTargetUrlOneOf1.toJsonTree((FirewallActionParametersRedirectFromValueTargetUrlOneOf1)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: FirewallActionParametersRedirectFromValueTargetUrlOneOf, FirewallActionParametersRedirectFromValueTargetUrlOneOf1");
                }

                @Override
                public FirewallActionParametersRedirectFromValueTargetUrl read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize FirewallActionParametersRedirectFromValueTargetUrlOneOf
                    try {
                        // validate the JSON object to see if any exception is thrown
                        FirewallActionParametersRedirectFromValueTargetUrlOneOf.validateJsonElement(jsonElement);
                        actualAdapter = adapterFirewallActionParametersRedirectFromValueTargetUrlOneOf;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'FirewallActionParametersRedirectFromValueTargetUrlOneOf'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for FirewallActionParametersRedirectFromValueTargetUrlOneOf failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'FirewallActionParametersRedirectFromValueTargetUrlOneOf'", e);
                    }
                    // deserialize FirewallActionParametersRedirectFromValueTargetUrlOneOf1
                    try {
                        // validate the JSON object to see if any exception is thrown
                        FirewallActionParametersRedirectFromValueTargetUrlOneOf1.validateJsonElement(jsonElement);
                        actualAdapter = adapterFirewallActionParametersRedirectFromValueTargetUrlOneOf1;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'FirewallActionParametersRedirectFromValueTargetUrlOneOf1'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for FirewallActionParametersRedirectFromValueTargetUrlOneOf1 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'FirewallActionParametersRedirectFromValueTargetUrlOneOf1'", e);
                    }

                    if (match == 1) {
                        FirewallActionParametersRedirectFromValueTargetUrl ret = new FirewallActionParametersRedirectFromValueTargetUrl();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for FirewallActionParametersRedirectFromValueTargetUrl: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public FirewallActionParametersRedirectFromValueTargetUrl() {
        super("oneOf", Boolean.FALSE);
    }

    public FirewallActionParametersRedirectFromValueTargetUrl(FirewallActionParametersRedirectFromValueTargetUrlOneOf o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public FirewallActionParametersRedirectFromValueTargetUrl(FirewallActionParametersRedirectFromValueTargetUrlOneOf1 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("FirewallActionParametersRedirectFromValueTargetUrlOneOf", FirewallActionParametersRedirectFromValueTargetUrlOneOf.class);
        schemas.put("FirewallActionParametersRedirectFromValueTargetUrlOneOf1", FirewallActionParametersRedirectFromValueTargetUrlOneOf1.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return FirewallActionParametersRedirectFromValueTargetUrl.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * FirewallActionParametersRedirectFromValueTargetUrlOneOf, FirewallActionParametersRedirectFromValueTargetUrlOneOf1
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof FirewallActionParametersRedirectFromValueTargetUrlOneOf) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof FirewallActionParametersRedirectFromValueTargetUrlOneOf1) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be FirewallActionParametersRedirectFromValueTargetUrlOneOf, FirewallActionParametersRedirectFromValueTargetUrlOneOf1");
    }

    /**
     * Get the actual instance, which can be the following:
     * FirewallActionParametersRedirectFromValueTargetUrlOneOf, FirewallActionParametersRedirectFromValueTargetUrlOneOf1
     *
     * @return The actual instance (FirewallActionParametersRedirectFromValueTargetUrlOneOf, FirewallActionParametersRedirectFromValueTargetUrlOneOf1)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `FirewallActionParametersRedirectFromValueTargetUrlOneOf`. If the actual instance is not `FirewallActionParametersRedirectFromValueTargetUrlOneOf`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `FirewallActionParametersRedirectFromValueTargetUrlOneOf`
     * @throws ClassCastException if the instance is not `FirewallActionParametersRedirectFromValueTargetUrlOneOf`
     */
    public FirewallActionParametersRedirectFromValueTargetUrlOneOf getFirewallActionParametersRedirectFromValueTargetUrlOneOf() throws ClassCastException {
        return (FirewallActionParametersRedirectFromValueTargetUrlOneOf)super.getActualInstance();
    }
    /**
     * Get the actual instance of `FirewallActionParametersRedirectFromValueTargetUrlOneOf1`. If the actual instance is not `FirewallActionParametersRedirectFromValueTargetUrlOneOf1`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `FirewallActionParametersRedirectFromValueTargetUrlOneOf1`
     * @throws ClassCastException if the instance is not `FirewallActionParametersRedirectFromValueTargetUrlOneOf1`
     */
    public FirewallActionParametersRedirectFromValueTargetUrlOneOf1 getFirewallActionParametersRedirectFromValueTargetUrlOneOf1() throws ClassCastException {
        return (FirewallActionParametersRedirectFromValueTargetUrlOneOf1)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to FirewallActionParametersRedirectFromValueTargetUrl
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with FirewallActionParametersRedirectFromValueTargetUrlOneOf
        try {
            FirewallActionParametersRedirectFromValueTargetUrlOneOf.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for FirewallActionParametersRedirectFromValueTargetUrlOneOf failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with FirewallActionParametersRedirectFromValueTargetUrlOneOf1
        try {
            FirewallActionParametersRedirectFromValueTargetUrlOneOf1.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for FirewallActionParametersRedirectFromValueTargetUrlOneOf1 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for FirewallActionParametersRedirectFromValueTargetUrl with oneOf schemas: FirewallActionParametersRedirectFromValueTargetUrlOneOf, FirewallActionParametersRedirectFromValueTargetUrlOneOf1. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of FirewallActionParametersRedirectFromValueTargetUrl given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of FirewallActionParametersRedirectFromValueTargetUrl
     * @throws IOException if the JSON string is invalid with respect to FirewallActionParametersRedirectFromValueTargetUrl
     */
    public static FirewallActionParametersRedirectFromValueTargetUrl fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, FirewallActionParametersRedirectFromValueTargetUrl.class);
    }

    /**
     * Convert an instance of FirewallActionParametersRedirectFromValueTargetUrl to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

