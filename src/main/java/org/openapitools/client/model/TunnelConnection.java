/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * TunnelConnection
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class TunnelConnection {
  public static final String SERIALIZED_NAME_COLO_NAME = "colo_name";
  @SerializedName(SERIALIZED_NAME_COLO_NAME)
  private String coloName;

  public static final String SERIALIZED_NAME_IS_PENDING_RECONNECT = "is_pending_reconnect";
  @SerializedName(SERIALIZED_NAME_IS_PENDING_RECONNECT)
  private Boolean isPendingReconnect;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public TunnelConnection() {
  }

  public TunnelConnection(
     String uuid
  ) {
    this();
    this.uuid = uuid;
  }

  public TunnelConnection coloName(String coloName) {
    this.coloName = coloName;
    return this;
  }

   /**
   * The Cloudflare data center used for this connection.
   * @return coloName
  **/
  @javax.annotation.Nullable
  public String getColoName() {
    return coloName;
  }

  public void setColoName(String coloName) {
    this.coloName = coloName;
  }


  public TunnelConnection isPendingReconnect(Boolean isPendingReconnect) {
    this.isPendingReconnect = isPendingReconnect;
    return this;
  }

   /**
   * Cloudflare continues to track connections for several minutes after they disconnect. This is an optimization to improve latency and reliability of reconnecting.  If &#x60;true&#x60;, the connection has disconnected but is still being tracked. If &#x60;false&#x60;, the connection is actively serving traffic.
   * @return isPendingReconnect
  **/
  @javax.annotation.Nullable
  public Boolean getIsPendingReconnect() {
    return isPendingReconnect;
  }

  public void setIsPendingReconnect(Boolean isPendingReconnect) {
    this.isPendingReconnect = isPendingReconnect;
  }


   /**
   * UUID of the Cloudflare Tunnel connection.
   * @return uuid
  **/
  @javax.annotation.Nullable
  public String getUuid() {
    return uuid;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TunnelConnection tunnelConnection = (TunnelConnection) o;
    return Objects.equals(this.coloName, tunnelConnection.coloName) &&
        Objects.equals(this.isPendingReconnect, tunnelConnection.isPendingReconnect) &&
        Objects.equals(this.uuid, tunnelConnection.uuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(coloName, isPendingReconnect, uuid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TunnelConnection {\n");
    sb.append("    coloName: ").append(toIndentedString(coloName)).append("\n");
    sb.append("    isPendingReconnect: ").append(toIndentedString(isPendingReconnect)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("colo_name");
    openapiFields.add("is_pending_reconnect");
    openapiFields.add("uuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TunnelConnection
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TunnelConnection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TunnelConnection is not found in the empty JSON string", TunnelConnection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TunnelConnection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TunnelConnection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("colo_name") != null && !jsonObj.get("colo_name").isJsonNull()) && !jsonObj.get("colo_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `colo_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("colo_name").toString()));
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TunnelConnection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TunnelConnection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TunnelConnection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TunnelConnection.class));

       return (TypeAdapter<T>) new TypeAdapter<TunnelConnection>() {
           @Override
           public void write(JsonWriter out, TunnelConnection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TunnelConnection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TunnelConnection given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TunnelConnection
  * @throws IOException if the JSON string is invalid with respect to TunnelConnection
  */
  public static TunnelConnection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TunnelConnection.class);
  }

 /**
  * Convert an instance of TunnelConnection to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

