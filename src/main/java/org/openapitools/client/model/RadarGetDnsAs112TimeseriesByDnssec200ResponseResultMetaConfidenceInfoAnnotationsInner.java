/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RadarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class RadarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner {
  public static final String SERIALIZED_NAME_DATA_SOURCE = "dataSource";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE)
  private String dataSource;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private String eventType;

  public static final String SERIALIZED_NAME_IS_INSTANTANEOUS = "isInstantaneous";
  @SerializedName(SERIALIZED_NAME_IS_INSTANTANEOUS)
  private Object isInstantaneous;

  public static final String SERIALIZED_NAME_LINKED_URL = "linkedUrl";
  @SerializedName(SERIALIZED_NAME_LINKED_URL)
  private String linkedUrl;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public RadarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner() {
  }

  public RadarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner dataSource(String dataSource) {
    this.dataSource = dataSource;
    return this;
  }

   /**
   * Get dataSource
   * @return dataSource
  **/
  @javax.annotation.Nonnull
  public String getDataSource() {
    return dataSource;
  }

  public void setDataSource(String dataSource) {
    this.dataSource = dataSource;
  }


  public RadarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public RadarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

   /**
   * Get endTime
   * @return endTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public RadarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner eventType(String eventType) {
    this.eventType = eventType;
    return this;
  }

   /**
   * Get eventType
   * @return eventType
  **/
  @javax.annotation.Nonnull
  public String getEventType() {
    return eventType;
  }

  public void setEventType(String eventType) {
    this.eventType = eventType;
  }


  public RadarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner isInstantaneous(Object isInstantaneous) {
    this.isInstantaneous = isInstantaneous;
    return this;
  }

   /**
   * Get isInstantaneous
   * @return isInstantaneous
  **/
  @javax.annotation.Nonnull
  public Object getIsInstantaneous() {
    return isInstantaneous;
  }

  public void setIsInstantaneous(Object isInstantaneous) {
    this.isInstantaneous = isInstantaneous;
  }


  public RadarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner linkedUrl(String linkedUrl) {
    this.linkedUrl = linkedUrl;
    return this;
  }

   /**
   * Get linkedUrl
   * @return linkedUrl
  **/
  @javax.annotation.Nullable
  public String getLinkedUrl() {
    return linkedUrl;
  }

  public void setLinkedUrl(String linkedUrl) {
    this.linkedUrl = linkedUrl;
  }


  public RadarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

   /**
   * Get startTime
   * @return startTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RadarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner radarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner = (RadarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner) o;
    return Objects.equals(this.dataSource, radarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner.dataSource) &&
        Objects.equals(this.description, radarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner.description) &&
        Objects.equals(this.endTime, radarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner.endTime) &&
        Objects.equals(this.eventType, radarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner.eventType) &&
        Objects.equals(this.isInstantaneous, radarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner.isInstantaneous) &&
        Objects.equals(this.linkedUrl, radarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner.linkedUrl) &&
        Objects.equals(this.startTime, radarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner.startTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataSource, description, endTime, eventType, isInstantaneous, linkedUrl, startTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RadarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner {\n");
    sb.append("    dataSource: ").append(toIndentedString(dataSource)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    isInstantaneous: ").append(toIndentedString(isInstantaneous)).append("\n");
    sb.append("    linkedUrl: ").append(toIndentedString(linkedUrl)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataSource");
    openapiFields.add("description");
    openapiFields.add("endTime");
    openapiFields.add("eventType");
    openapiFields.add("isInstantaneous");
    openapiFields.add("linkedUrl");
    openapiFields.add("startTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dataSource");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("eventType");
    openapiRequiredFields.add("isInstantaneous");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RadarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RadarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RadarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner is not found in the empty JSON string", RadarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RadarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RadarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RadarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("dataSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSource").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("eventType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventType").toString()));
      }
      if ((jsonObj.get("linkedUrl") != null && !jsonObj.get("linkedUrl").isJsonNull()) && !jsonObj.get("linkedUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkedUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkedUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RadarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RadarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RadarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RadarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<RadarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner>() {
           @Override
           public void write(JsonWriter out, RadarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RadarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RadarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RadarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner
  * @throws IOException if the JSON string is invalid with respect to RadarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner
  */
  public static RadarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RadarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner.class);
  }

 /**
  * Convert an instance of RadarGetDnsAs112TimeseriesByDnssec200ResponseResultMetaConfidenceInfoAnnotationsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

