/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RadarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class RadarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0 {
  public static final String SERIALIZED_NAME_LATER_IN_FLOW = "later_in_flow";
  @SerializedName(SERIALIZED_NAME_LATER_IN_FLOW)
  private List<String> laterInFlow = new ArrayList<>();

  public static final String SERIALIZED_NAME_NO_MATCH = "no_match";
  @SerializedName(SERIALIZED_NAME_NO_MATCH)
  private List<String> noMatch = new ArrayList<>();

  public static final String SERIALIZED_NAME_POST_ACK = "post_ack";
  @SerializedName(SERIALIZED_NAME_POST_ACK)
  private List<String> postAck = new ArrayList<>();

  public static final String SERIALIZED_NAME_POST_PSH = "post_psh";
  @SerializedName(SERIALIZED_NAME_POST_PSH)
  private List<String> postPsh = new ArrayList<>();

  public static final String SERIALIZED_NAME_POST_SYN = "post_syn";
  @SerializedName(SERIALIZED_NAME_POST_SYN)
  private List<String> postSyn = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIMESTAMPS = "timestamps";
  @SerializedName(SERIALIZED_NAME_TIMESTAMPS)
  private List<OffsetDateTime> timestamps = new ArrayList<>();

  public RadarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0() {
  }

  public RadarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0 laterInFlow(List<String> laterInFlow) {
    this.laterInFlow = laterInFlow;
    return this;
  }

  public RadarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0 addLaterInFlowItem(String laterInFlowItem) {
    if (this.laterInFlow == null) {
      this.laterInFlow = new ArrayList<>();
    }
    this.laterInFlow.add(laterInFlowItem);
    return this;
  }

   /**
   * Connections matching signatures for tampering later in the connection, after the transfer of multiple data packets.
   * @return laterInFlow
  **/
  @javax.annotation.Nonnull
  public List<String> getLaterInFlow() {
    return laterInFlow;
  }

  public void setLaterInFlow(List<String> laterInFlow) {
    this.laterInFlow = laterInFlow;
  }


  public RadarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0 noMatch(List<String> noMatch) {
    this.noMatch = noMatch;
    return this;
  }

  public RadarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0 addNoMatchItem(String noMatchItem) {
    if (this.noMatch == null) {
      this.noMatch = new ArrayList<>();
    }
    this.noMatch.add(noMatchItem);
    return this;
  }

   /**
   * Connections that do not match any tampering signatures.
   * @return noMatch
  **/
  @javax.annotation.Nonnull
  public List<String> getNoMatch() {
    return noMatch;
  }

  public void setNoMatch(List<String> noMatch) {
    this.noMatch = noMatch;
  }


  public RadarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0 postAck(List<String> postAck) {
    this.postAck = postAck;
    return this;
  }

  public RadarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0 addPostAckItem(String postAckItem) {
    if (this.postAck == null) {
      this.postAck = new ArrayList<>();
    }
    this.postAck.add(postAckItem);
    return this;
  }

   /**
   * Connections matching signatures for tampering after the receipt of a SYN packet and ACK packet, meaning the TCP connection was successfully established but the server did not receive any subsequent packets.
   * @return postAck
  **/
  @javax.annotation.Nonnull
  public List<String> getPostAck() {
    return postAck;
  }

  public void setPostAck(List<String> postAck) {
    this.postAck = postAck;
  }


  public RadarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0 postPsh(List<String> postPsh) {
    this.postPsh = postPsh;
    return this;
  }

  public RadarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0 addPostPshItem(String postPshItem) {
    if (this.postPsh == null) {
      this.postPsh = new ArrayList<>();
    }
    this.postPsh.add(postPshItem);
    return this;
  }

   /**
   * Connections matching signatures for tampering after the receipt of a packet with PSH flag set, following connection establishment.
   * @return postPsh
  **/
  @javax.annotation.Nonnull
  public List<String> getPostPsh() {
    return postPsh;
  }

  public void setPostPsh(List<String> postPsh) {
    this.postPsh = postPsh;
  }


  public RadarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0 postSyn(List<String> postSyn) {
    this.postSyn = postSyn;
    return this;
  }

  public RadarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0 addPostSynItem(String postSynItem) {
    if (this.postSyn == null) {
      this.postSyn = new ArrayList<>();
    }
    this.postSyn.add(postSynItem);
    return this;
  }

   /**
   * Connections matching signatures for tampering after the receipt of only a single SYN packet, and before the handshake completes.
   * @return postSyn
  **/
  @javax.annotation.Nonnull
  public List<String> getPostSyn() {
    return postSyn;
  }

  public void setPostSyn(List<String> postSyn) {
    this.postSyn = postSyn;
  }


  public RadarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0 timestamps(List<OffsetDateTime> timestamps) {
    this.timestamps = timestamps;
    return this;
  }

  public RadarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0 addTimestampsItem(OffsetDateTime timestampsItem) {
    if (this.timestamps == null) {
      this.timestamps = new ArrayList<>();
    }
    this.timestamps.add(timestampsItem);
    return this;
  }

   /**
   * Get timestamps
   * @return timestamps
  **/
  @javax.annotation.Nonnull
  public List<OffsetDateTime> getTimestamps() {
    return timestamps;
  }

  public void setTimestamps(List<OffsetDateTime> timestamps) {
    this.timestamps = timestamps;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RadarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0 radarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0 = (RadarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0) o;
    return Objects.equals(this.laterInFlow, radarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0.laterInFlow) &&
        Objects.equals(this.noMatch, radarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0.noMatch) &&
        Objects.equals(this.postAck, radarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0.postAck) &&
        Objects.equals(this.postPsh, radarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0.postPsh) &&
        Objects.equals(this.postSyn, radarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0.postSyn) &&
        Objects.equals(this.timestamps, radarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0.timestamps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(laterInFlow, noMatch, postAck, postPsh, postSyn, timestamps);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RadarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0 {\n");
    sb.append("    laterInFlow: ").append(toIndentedString(laterInFlow)).append("\n");
    sb.append("    noMatch: ").append(toIndentedString(noMatch)).append("\n");
    sb.append("    postAck: ").append(toIndentedString(postAck)).append("\n");
    sb.append("    postPsh: ").append(toIndentedString(postPsh)).append("\n");
    sb.append("    postSyn: ").append(toIndentedString(postSyn)).append("\n");
    sb.append("    timestamps: ").append(toIndentedString(timestamps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("later_in_flow");
    openapiFields.add("no_match");
    openapiFields.add("post_ack");
    openapiFields.add("post_psh");
    openapiFields.add("post_syn");
    openapiFields.add("timestamps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("later_in_flow");
    openapiRequiredFields.add("no_match");
    openapiRequiredFields.add("post_ack");
    openapiRequiredFields.add("post_psh");
    openapiRequiredFields.add("post_syn");
    openapiRequiredFields.add("timestamps");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RadarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RadarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RadarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0 is not found in the empty JSON string", RadarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RadarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RadarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RadarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("later_in_flow") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("later_in_flow").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `later_in_flow` to be an array in the JSON string but got `%s`", jsonObj.get("later_in_flow").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("no_match") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("no_match").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `no_match` to be an array in the JSON string but got `%s`", jsonObj.get("no_match").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("post_ack") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("post_ack").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `post_ack` to be an array in the JSON string but got `%s`", jsonObj.get("post_ack").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("post_psh") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("post_psh").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `post_psh` to be an array in the JSON string but got `%s`", jsonObj.get("post_psh").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("post_syn") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("post_syn").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `post_syn` to be an array in the JSON string but got `%s`", jsonObj.get("post_syn").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("timestamps") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("timestamps").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestamps` to be an array in the JSON string but got `%s`", jsonObj.get("timestamps").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RadarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RadarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RadarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RadarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0.class));

       return (TypeAdapter<T>) new TypeAdapter<RadarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0>() {
           @Override
           public void write(JsonWriter out, RadarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RadarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RadarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RadarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0
  * @throws IOException if the JSON string is invalid with respect to RadarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0
  */
  public static RadarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RadarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0.class);
  }

 /**
  * Convert an instance of RadarGetConnectionTamperingTimeseriesGroup200ResponseResultSerie0 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

