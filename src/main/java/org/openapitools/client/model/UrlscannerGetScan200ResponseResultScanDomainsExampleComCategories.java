/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UrlscannerGetScan200ResponseResultScanDomainsExampleComCategoriesContentInner;
import org.openapitools.client.model.UrlscannerGetScan200ResponseResultScanDomainsExampleComCategoriesInherited;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * UrlscannerGetScan200ResponseResultScanDomainsExampleComCategories
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class UrlscannerGetScan200ResponseResultScanDomainsExampleComCategories {
  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private List<UrlscannerGetScan200ResponseResultScanDomainsExampleComCategoriesContentInner> content = new ArrayList<>();

  public static final String SERIALIZED_NAME_INHERITED = "inherited";
  @SerializedName(SERIALIZED_NAME_INHERITED)
  private UrlscannerGetScan200ResponseResultScanDomainsExampleComCategoriesInherited inherited;

  public static final String SERIALIZED_NAME_RISKS = "risks";
  @SerializedName(SERIALIZED_NAME_RISKS)
  private List<UrlscannerGetScan200ResponseResultScanDomainsExampleComCategoriesContentInner> risks = new ArrayList<>();

  public UrlscannerGetScan200ResponseResultScanDomainsExampleComCategories() {
  }

  public UrlscannerGetScan200ResponseResultScanDomainsExampleComCategories content(List<UrlscannerGetScan200ResponseResultScanDomainsExampleComCategoriesContentInner> content) {
    this.content = content;
    return this;
  }

  public UrlscannerGetScan200ResponseResultScanDomainsExampleComCategories addContentItem(UrlscannerGetScan200ResponseResultScanDomainsExampleComCategoriesContentInner contentItem) {
    if (this.content == null) {
      this.content = new ArrayList<>();
    }
    this.content.add(contentItem);
    return this;
  }

   /**
   * Get content
   * @return content
  **/
  @javax.annotation.Nullable
  public List<UrlscannerGetScan200ResponseResultScanDomainsExampleComCategoriesContentInner> getContent() {
    return content;
  }

  public void setContent(List<UrlscannerGetScan200ResponseResultScanDomainsExampleComCategoriesContentInner> content) {
    this.content = content;
  }


  public UrlscannerGetScan200ResponseResultScanDomainsExampleComCategories inherited(UrlscannerGetScan200ResponseResultScanDomainsExampleComCategoriesInherited inherited) {
    this.inherited = inherited;
    return this;
  }

   /**
   * Get inherited
   * @return inherited
  **/
  @javax.annotation.Nonnull
  public UrlscannerGetScan200ResponseResultScanDomainsExampleComCategoriesInherited getInherited() {
    return inherited;
  }

  public void setInherited(UrlscannerGetScan200ResponseResultScanDomainsExampleComCategoriesInherited inherited) {
    this.inherited = inherited;
  }


  public UrlscannerGetScan200ResponseResultScanDomainsExampleComCategories risks(List<UrlscannerGetScan200ResponseResultScanDomainsExampleComCategoriesContentInner> risks) {
    this.risks = risks;
    return this;
  }

  public UrlscannerGetScan200ResponseResultScanDomainsExampleComCategories addRisksItem(UrlscannerGetScan200ResponseResultScanDomainsExampleComCategoriesContentInner risksItem) {
    if (this.risks == null) {
      this.risks = new ArrayList<>();
    }
    this.risks.add(risksItem);
    return this;
  }

   /**
   * Get risks
   * @return risks
  **/
  @javax.annotation.Nullable
  public List<UrlscannerGetScan200ResponseResultScanDomainsExampleComCategoriesContentInner> getRisks() {
    return risks;
  }

  public void setRisks(List<UrlscannerGetScan200ResponseResultScanDomainsExampleComCategoriesContentInner> risks) {
    this.risks = risks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UrlscannerGetScan200ResponseResultScanDomainsExampleComCategories urlscannerGetScan200ResponseResultScanDomainsExampleComCategories = (UrlscannerGetScan200ResponseResultScanDomainsExampleComCategories) o;
    return Objects.equals(this.content, urlscannerGetScan200ResponseResultScanDomainsExampleComCategories.content) &&
        Objects.equals(this.inherited, urlscannerGetScan200ResponseResultScanDomainsExampleComCategories.inherited) &&
        Objects.equals(this.risks, urlscannerGetScan200ResponseResultScanDomainsExampleComCategories.risks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(content, inherited, risks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UrlscannerGetScan200ResponseResultScanDomainsExampleComCategories {\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    inherited: ").append(toIndentedString(inherited)).append("\n");
    sb.append("    risks: ").append(toIndentedString(risks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("content");
    openapiFields.add("inherited");
    openapiFields.add("risks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("inherited");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UrlscannerGetScan200ResponseResultScanDomainsExampleComCategories
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UrlscannerGetScan200ResponseResultScanDomainsExampleComCategories.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UrlscannerGetScan200ResponseResultScanDomainsExampleComCategories is not found in the empty JSON string", UrlscannerGetScan200ResponseResultScanDomainsExampleComCategories.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UrlscannerGetScan200ResponseResultScanDomainsExampleComCategories.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UrlscannerGetScan200ResponseResultScanDomainsExampleComCategories` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UrlscannerGetScan200ResponseResultScanDomainsExampleComCategories.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) {
        JsonArray jsonArraycontent = jsonObj.getAsJsonArray("content");
        if (jsonArraycontent != null) {
          // ensure the json data is an array
          if (!jsonObj.get("content").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `content` to be an array in the JSON string but got `%s`", jsonObj.get("content").toString()));
          }

          // validate the optional field `content` (array)
          for (int i = 0; i < jsonArraycontent.size(); i++) {
            UrlscannerGetScan200ResponseResultScanDomainsExampleComCategoriesContentInner.validateJsonElement(jsonArraycontent.get(i));
          };
        }
      }
      // validate the required field `inherited`
      UrlscannerGetScan200ResponseResultScanDomainsExampleComCategoriesInherited.validateJsonElement(jsonObj.get("inherited"));
      if (jsonObj.get("risks") != null && !jsonObj.get("risks").isJsonNull()) {
        JsonArray jsonArrayrisks = jsonObj.getAsJsonArray("risks");
        if (jsonArrayrisks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("risks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `risks` to be an array in the JSON string but got `%s`", jsonObj.get("risks").toString()));
          }

          // validate the optional field `risks` (array)
          for (int i = 0; i < jsonArrayrisks.size(); i++) {
            UrlscannerGetScan200ResponseResultScanDomainsExampleComCategoriesContentInner.validateJsonElement(jsonArrayrisks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UrlscannerGetScan200ResponseResultScanDomainsExampleComCategories.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UrlscannerGetScan200ResponseResultScanDomainsExampleComCategories' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UrlscannerGetScan200ResponseResultScanDomainsExampleComCategories> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UrlscannerGetScan200ResponseResultScanDomainsExampleComCategories.class));

       return (TypeAdapter<T>) new TypeAdapter<UrlscannerGetScan200ResponseResultScanDomainsExampleComCategories>() {
           @Override
           public void write(JsonWriter out, UrlscannerGetScan200ResponseResultScanDomainsExampleComCategories value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UrlscannerGetScan200ResponseResultScanDomainsExampleComCategories read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UrlscannerGetScan200ResponseResultScanDomainsExampleComCategories given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UrlscannerGetScan200ResponseResultScanDomainsExampleComCategories
  * @throws IOException if the JSON string is invalid with respect to UrlscannerGetScan200ResponseResultScanDomainsExampleComCategories
  */
  public static UrlscannerGetScan200ResponseResultScanDomainsExampleComCategories fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UrlscannerGetScan200ResponseResultScanDomainsExampleComCategories.class);
  }

 /**
  * Convert an instance of UrlscannerGetScan200ResponseResultScanDomainsExampleComCategories to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

