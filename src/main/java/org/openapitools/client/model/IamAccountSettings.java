/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Account settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class IamAccountSettings {
  /**
   * Specifies the default nameservers to be used for new zones added to this account.  - &#x60;cloudflare.standard&#x60; for Cloudflare-branded nameservers - &#x60;custom.account&#x60; for account custom nameservers - &#x60;custom.tenant&#x60; for tenant custom nameservers  See [Custom Nameservers](https://developers.cloudflare.com/dns/additional-options/custom-nameservers/) for more information.
   */
  @JsonAdapter(DefaultNameserversEnum.Adapter.class)
  public enum DefaultNameserversEnum {
    CLOUDFLARE_STANDARD("cloudflare.standard"),
    
    CUSTOM_ACCOUNT("custom.account"),
    
    CUSTOM_TENANT("custom.tenant");

    private String value;

    DefaultNameserversEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DefaultNameserversEnum fromValue(String value) {
      for (DefaultNameserversEnum b : DefaultNameserversEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DefaultNameserversEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DefaultNameserversEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DefaultNameserversEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DefaultNameserversEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DefaultNameserversEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEFAULT_NAMESERVERS = "default_nameservers";
  @SerializedName(SERIALIZED_NAME_DEFAULT_NAMESERVERS)
  private DefaultNameserversEnum defaultNameservers = DefaultNameserversEnum.CLOUDFLARE_STANDARD;

  public static final String SERIALIZED_NAME_ENFORCE_TWOFACTOR = "enforce_twofactor";
  @SerializedName(SERIALIZED_NAME_ENFORCE_TWOFACTOR)
  private Boolean enforceTwofactor = false;

  public static final String SERIALIZED_NAME_USE_ACCOUNT_CUSTOM_NS_BY_DEFAULT = "use_account_custom_ns_by_default";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_USE_ACCOUNT_CUSTOM_NS_BY_DEFAULT)
  private Boolean useAccountCustomNsByDefault = false;

  public IamAccountSettings() {
  }

  public IamAccountSettings defaultNameservers(DefaultNameserversEnum defaultNameservers) {
    this.defaultNameservers = defaultNameservers;
    return this;
  }

   /**
   * Specifies the default nameservers to be used for new zones added to this account.  - &#x60;cloudflare.standard&#x60; for Cloudflare-branded nameservers - &#x60;custom.account&#x60; for account custom nameservers - &#x60;custom.tenant&#x60; for tenant custom nameservers  See [Custom Nameservers](https://developers.cloudflare.com/dns/additional-options/custom-nameservers/) for more information.
   * @return defaultNameservers
  **/
  @javax.annotation.Nullable
  public DefaultNameserversEnum getDefaultNameservers() {
    return defaultNameservers;
  }

  public void setDefaultNameservers(DefaultNameserversEnum defaultNameservers) {
    this.defaultNameservers = defaultNameservers;
  }


  public IamAccountSettings enforceTwofactor(Boolean enforceTwofactor) {
    this.enforceTwofactor = enforceTwofactor;
    return this;
  }

   /**
   * Indicates whether membership in this account requires that Two-Factor Authentication is enabled
   * @return enforceTwofactor
  **/
  @javax.annotation.Nullable
  public Boolean getEnforceTwofactor() {
    return enforceTwofactor;
  }

  public void setEnforceTwofactor(Boolean enforceTwofactor) {
    this.enforceTwofactor = enforceTwofactor;
  }


  @Deprecated
  public IamAccountSettings useAccountCustomNsByDefault(Boolean useAccountCustomNsByDefault) {
    this.useAccountCustomNsByDefault = useAccountCustomNsByDefault;
    return this;
  }

   /**
   * Indicates whether new zones should use the account-level custom nameservers by default.  Deprecated in favor of &#x60;default_nameservers&#x60;.
   * @return useAccountCustomNsByDefault
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getUseAccountCustomNsByDefault() {
    return useAccountCustomNsByDefault;
  }

  @Deprecated
  public void setUseAccountCustomNsByDefault(Boolean useAccountCustomNsByDefault) {
    this.useAccountCustomNsByDefault = useAccountCustomNsByDefault;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IamAccountSettings iamAccountSettings = (IamAccountSettings) o;
    return Objects.equals(this.defaultNameservers, iamAccountSettings.defaultNameservers) &&
        Objects.equals(this.enforceTwofactor, iamAccountSettings.enforceTwofactor) &&
        Objects.equals(this.useAccountCustomNsByDefault, iamAccountSettings.useAccountCustomNsByDefault);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultNameservers, enforceTwofactor, useAccountCustomNsByDefault);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IamAccountSettings {\n");
    sb.append("    defaultNameservers: ").append(toIndentedString(defaultNameservers)).append("\n");
    sb.append("    enforceTwofactor: ").append(toIndentedString(enforceTwofactor)).append("\n");
    sb.append("    useAccountCustomNsByDefault: ").append(toIndentedString(useAccountCustomNsByDefault)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("default_nameservers");
    openapiFields.add("enforce_twofactor");
    openapiFields.add("use_account_custom_ns_by_default");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to IamAccountSettings
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IamAccountSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IamAccountSettings is not found in the empty JSON string", IamAccountSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IamAccountSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IamAccountSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("default_nameservers") != null && !jsonObj.get("default_nameservers").isJsonNull()) && !jsonObj.get("default_nameservers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_nameservers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_nameservers").toString()));
      }
      // validate the optional field `default_nameservers`
      if (jsonObj.get("default_nameservers") != null && !jsonObj.get("default_nameservers").isJsonNull()) {
        DefaultNameserversEnum.validateJsonElement(jsonObj.get("default_nameservers"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IamAccountSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IamAccountSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IamAccountSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IamAccountSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<IamAccountSettings>() {
           @Override
           public void write(JsonWriter out, IamAccountSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IamAccountSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IamAccountSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IamAccountSettings
  * @throws IOException if the JSON string is invalid with respect to IamAccountSettings
  */
  public static IamAccountSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IamAccountSettings.class);
  }

 /**
  * Convert an instance of IamAccountSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

