/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.TunnelTunnelType;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TunnelTeamnet
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class TunnelTeamnet {
  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private Object createdAt = null;

  public static final String SERIALIZED_NAME_DELETED_AT = "deleted_at";
  @SerializedName(SERIALIZED_NAME_DELETED_AT)
  private OffsetDateTime deletedAt;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network;

  public static final String SERIALIZED_NAME_TUN_TYPE = "tun_type";
  @SerializedName(SERIALIZED_NAME_TUN_TYPE)
  private TunnelTunnelType tunType;

  public static final String SERIALIZED_NAME_TUNNEL_ID = "tunnel_id";
  @SerializedName(SERIALIZED_NAME_TUNNEL_ID)
  private Object tunnelId = null;

  public static final String SERIALIZED_NAME_TUNNEL_NAME = "tunnel_name";
  @SerializedName(SERIALIZED_NAME_TUNNEL_NAME)
  private Object tunnelName = null;

  public static final String SERIALIZED_NAME_VIRTUAL_NETWORK_ID = "virtual_network_id";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_NETWORK_ID)
  private Object virtualNetworkId = null;

  public static final String SERIALIZED_NAME_VIRTUAL_NETWORK_NAME = "virtual_network_name";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_NETWORK_NAME)
  private String virtualNetworkName;

  public TunnelTeamnet() {
  }

  public TunnelTeamnet(
     OffsetDateTime deletedAt, 
     String id
  ) {
    this();
    this.deletedAt = deletedAt;
    this.id = id;
  }

  public TunnelTeamnet comment(String comment) {
    this.comment = comment;
    return this;
  }

   /**
   * Optional remark describing the route.
   * @return comment
  **/
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public TunnelTeamnet createdAt(Object createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Timestamp of when the route was created.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  public Object getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(Object createdAt) {
    this.createdAt = createdAt;
  }


   /**
   * Timestamp of when the route was deleted. If &#x60;null&#x60;, the route has not been deleted.
   * @return deletedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDeletedAt() {
    return deletedAt;
  }



   /**
   * UUID of the route.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public TunnelTeamnet network(String network) {
    this.network = network;
    return this;
  }

   /**
   * The private IPv4 or IPv6 range connected by the route, in CIDR notation.
   * @return network
  **/
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }

  public void setNetwork(String network) {
    this.network = network;
  }


  public TunnelTeamnet tunType(TunnelTunnelType tunType) {
    this.tunType = tunType;
    return this;
  }

   /**
   * Get tunType
   * @return tunType
  **/
  @javax.annotation.Nullable
  public TunnelTunnelType getTunType() {
    return tunType;
  }

  public void setTunType(TunnelTunnelType tunType) {
    this.tunType = tunType;
  }


  public TunnelTeamnet tunnelId(Object tunnelId) {
    this.tunnelId = tunnelId;
    return this;
  }

   /**
   * UUID of the Cloudflare Tunnel serving the route.
   * @return tunnelId
  **/
  @javax.annotation.Nullable
  public Object getTunnelId() {
    return tunnelId;
  }

  public void setTunnelId(Object tunnelId) {
    this.tunnelId = tunnelId;
  }


  public TunnelTeamnet tunnelName(Object tunnelName) {
    this.tunnelName = tunnelName;
    return this;
  }

   /**
   * The user-friendly name of the Cloudflare Tunnel serving the route.
   * @return tunnelName
  **/
  @javax.annotation.Nullable
  public Object getTunnelName() {
    return tunnelName;
  }

  public void setTunnelName(Object tunnelName) {
    this.tunnelName = tunnelName;
  }


  public TunnelTeamnet virtualNetworkId(Object virtualNetworkId) {
    this.virtualNetworkId = virtualNetworkId;
    return this;
  }

   /**
   * UUID of the Tunnel Virtual Network this route belongs to. If no virtual networks are configured, the route is assigned to the default virtual network of the account.
   * @return virtualNetworkId
  **/
  @javax.annotation.Nullable
  public Object getVirtualNetworkId() {
    return virtualNetworkId;
  }

  public void setVirtualNetworkId(Object virtualNetworkId) {
    this.virtualNetworkId = virtualNetworkId;
  }


  public TunnelTeamnet virtualNetworkName(String virtualNetworkName) {
    this.virtualNetworkName = virtualNetworkName;
    return this;
  }

   /**
   * A user-friendly name for the virtual network.
   * @return virtualNetworkName
  **/
  @javax.annotation.Nullable
  public String getVirtualNetworkName() {
    return virtualNetworkName;
  }

  public void setVirtualNetworkName(String virtualNetworkName) {
    this.virtualNetworkName = virtualNetworkName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TunnelTeamnet tunnelTeamnet = (TunnelTeamnet) o;
    return Objects.equals(this.comment, tunnelTeamnet.comment) &&
        Objects.equals(this.createdAt, tunnelTeamnet.createdAt) &&
        Objects.equals(this.deletedAt, tunnelTeamnet.deletedAt) &&
        Objects.equals(this.id, tunnelTeamnet.id) &&
        Objects.equals(this.network, tunnelTeamnet.network) &&
        Objects.equals(this.tunType, tunnelTeamnet.tunType) &&
        Objects.equals(this.tunnelId, tunnelTeamnet.tunnelId) &&
        Objects.equals(this.tunnelName, tunnelTeamnet.tunnelName) &&
        Objects.equals(this.virtualNetworkId, tunnelTeamnet.virtualNetworkId) &&
        Objects.equals(this.virtualNetworkName, tunnelTeamnet.virtualNetworkName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(comment, createdAt, deletedAt, id, network, tunType, tunnelId, tunnelName, virtualNetworkId, virtualNetworkName);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TunnelTeamnet {\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    tunType: ").append(toIndentedString(tunType)).append("\n");
    sb.append("    tunnelId: ").append(toIndentedString(tunnelId)).append("\n");
    sb.append("    tunnelName: ").append(toIndentedString(tunnelName)).append("\n");
    sb.append("    virtualNetworkId: ").append(toIndentedString(virtualNetworkId)).append("\n");
    sb.append("    virtualNetworkName: ").append(toIndentedString(virtualNetworkName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comment");
    openapiFields.add("created_at");
    openapiFields.add("deleted_at");
    openapiFields.add("id");
    openapiFields.add("network");
    openapiFields.add("tun_type");
    openapiFields.add("tunnel_id");
    openapiFields.add("tunnel_name");
    openapiFields.add("virtual_network_id");
    openapiFields.add("virtual_network_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TunnelTeamnet
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TunnelTeamnet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TunnelTeamnet is not found in the empty JSON string", TunnelTeamnet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TunnelTeamnet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TunnelTeamnet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      // validate the optional field `tun_type`
      if (jsonObj.get("tun_type") != null && !jsonObj.get("tun_type").isJsonNull()) {
        TunnelTunnelType.validateJsonElement(jsonObj.get("tun_type"));
      }
      if ((jsonObj.get("virtual_network_name") != null && !jsonObj.get("virtual_network_name").isJsonNull()) && !jsonObj.get("virtual_network_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `virtual_network_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("virtual_network_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TunnelTeamnet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TunnelTeamnet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TunnelTeamnet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TunnelTeamnet.class));

       return (TypeAdapter<T>) new TypeAdapter<TunnelTeamnet>() {
           @Override
           public void write(JsonWriter out, TunnelTeamnet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TunnelTeamnet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TunnelTeamnet given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TunnelTeamnet
  * @throws IOException if the JSON string is invalid with respect to TunnelTeamnet
  */
  public static TunnelTeamnet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TunnelTeamnet.class);
  }

 /**
  * Convert an instance of TunnelTeamnet to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

