/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * AccessSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class AccessSettings {
  public static final String SERIALIZED_NAME_CHINA_NETWORK = "china_network";
  @SerializedName(SERIALIZED_NAME_CHINA_NETWORK)
  private Boolean chinaNetwork;

  public static final String SERIALIZED_NAME_CLIENT_CERTIFICATE_FORWARDING = "client_certificate_forwarding";
  @SerializedName(SERIALIZED_NAME_CLIENT_CERTIFICATE_FORWARDING)
  private Boolean clientCertificateForwarding;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public AccessSettings() {
  }

  public AccessSettings chinaNetwork(Boolean chinaNetwork) {
    this.chinaNetwork = chinaNetwork;
    return this;
  }

   /**
   * Request client certificates for this hostname in China. Can only be set to true if this zone is china network enabled.
   * @return chinaNetwork
  **/
  @javax.annotation.Nonnull
  public Boolean getChinaNetwork() {
    return chinaNetwork;
  }

  public void setChinaNetwork(Boolean chinaNetwork) {
    this.chinaNetwork = chinaNetwork;
  }


  public AccessSettings clientCertificateForwarding(Boolean clientCertificateForwarding) {
    this.clientCertificateForwarding = clientCertificateForwarding;
    return this;
  }

   /**
   * Client Certificate Forwarding is a feature that takes the client cert provided by the eyeball to the edge, and forwards it to the origin as a HTTP header to allow logging on the origin.
   * @return clientCertificateForwarding
  **/
  @javax.annotation.Nonnull
  public Boolean getClientCertificateForwarding() {
    return clientCertificateForwarding;
  }

  public void setClientCertificateForwarding(Boolean clientCertificateForwarding) {
    this.clientCertificateForwarding = clientCertificateForwarding;
  }


  public AccessSettings hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

   /**
   * The hostname that these settings apply to.
   * @return hostname
  **/
  @javax.annotation.Nonnull
  public String getHostname() {
    return hostname;
  }

  public void setHostname(String hostname) {
    this.hostname = hostname;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccessSettings accessSettings = (AccessSettings) o;
    return Objects.equals(this.chinaNetwork, accessSettings.chinaNetwork) &&
        Objects.equals(this.clientCertificateForwarding, accessSettings.clientCertificateForwarding) &&
        Objects.equals(this.hostname, accessSettings.hostname);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chinaNetwork, clientCertificateForwarding, hostname);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccessSettings {\n");
    sb.append("    chinaNetwork: ").append(toIndentedString(chinaNetwork)).append("\n");
    sb.append("    clientCertificateForwarding: ").append(toIndentedString(clientCertificateForwarding)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("china_network");
    openapiFields.add("client_certificate_forwarding");
    openapiFields.add("hostname");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("china_network");
    openapiRequiredFields.add("client_certificate_forwarding");
    openapiRequiredFields.add("hostname");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AccessSettings
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccessSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccessSettings is not found in the empty JSON string", AccessSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccessSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccessSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AccessSettings.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccessSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccessSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccessSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccessSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<AccessSettings>() {
           @Override
           public void write(JsonWriter out, AccessSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccessSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AccessSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AccessSettings
  * @throws IOException if the JSON string is invalid with respect to AccessSettings
  */
  public static AccessSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccessSettings.class);
  }

 /**
  * Convert an instance of AccessSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

