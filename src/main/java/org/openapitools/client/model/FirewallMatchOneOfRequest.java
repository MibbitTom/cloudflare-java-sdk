/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * FirewallMatchOneOfRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class FirewallMatchOneOfRequest {
  /**
   * An HTTP method or &#x60;_ALL_&#x60; to indicate all methods.
   */
  @JsonAdapter(MethodsEnum.Adapter.class)
  public enum MethodsEnum {
    GET("GET"),
    
    POST("POST"),
    
    PUT("PUT"),
    
    DELETE("DELETE"),
    
    PATCH("PATCH"),
    
    HEAD("HEAD"),
    
    _ALL_("_ALL_");

    private String value;

    MethodsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MethodsEnum fromValue(String value) {
      for (MethodsEnum b : MethodsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MethodsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MethodsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MethodsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MethodsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MethodsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_METHODS = "methods";
  @SerializedName(SERIALIZED_NAME_METHODS)
  private List<MethodsEnum> methods = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCHEMES = "schemes";
  @SerializedName(SERIALIZED_NAME_SCHEMES)
  private List<String> schemes = new ArrayList<>();

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public FirewallMatchOneOfRequest() {
  }

  public FirewallMatchOneOfRequest methods(List<MethodsEnum> methods) {
    this.methods = methods;
    return this;
  }

  public FirewallMatchOneOfRequest addMethodsItem(MethodsEnum methodsItem) {
    if (this.methods == null) {
      this.methods = new ArrayList<>();
    }
    this.methods.add(methodsItem);
    return this;
  }

   /**
   * The HTTP methods to match. You can specify a subset (for example, &#x60;[&#39;POST&#39;,&#39;PUT&#39;]&#x60;) or all methods (&#x60;[&#39;_ALL_&#39;]&#x60;). This field is optional when creating a rate limit.
   * @return methods
  **/
  @javax.annotation.Nullable
  public List<MethodsEnum> getMethods() {
    return methods;
  }

  public void setMethods(List<MethodsEnum> methods) {
    this.methods = methods;
  }


  public FirewallMatchOneOfRequest schemes(List<String> schemes) {
    this.schemes = schemes;
    return this;
  }

  public FirewallMatchOneOfRequest addSchemesItem(String schemesItem) {
    if (this.schemes == null) {
      this.schemes = new ArrayList<>();
    }
    this.schemes.add(schemesItem);
    return this;
  }

   /**
   * The HTTP schemes to match. You can specify one scheme (&#x60;[&#39;HTTPS&#39;]&#x60;), both schemes (&#x60;[&#39;HTTP&#39;,&#39;HTTPS&#39;]&#x60;), or all schemes (&#x60;[&#39;_ALL_&#39;]&#x60;). This field is optional.
   * @return schemes
  **/
  @javax.annotation.Nullable
  public List<String> getSchemes() {
    return schemes;
  }

  public void setSchemes(List<String> schemes) {
    this.schemes = schemes;
  }


  public FirewallMatchOneOfRequest url(String url) {
    this.url = url;
    return this;
  }

   /**
   * The URL pattern to match, composed of a host and a path such as &#x60;example.org/path*&#x60;. Normalization is applied before the pattern is matched. &#x60;*&#x60; wildcards are expanded to match applicable traffic. Query strings are not matched. Set the value to &#x60;*&#x60; to match all traffic to your zone.
   * @return url
  **/
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FirewallMatchOneOfRequest firewallMatchOneOfRequest = (FirewallMatchOneOfRequest) o;
    return Objects.equals(this.methods, firewallMatchOneOfRequest.methods) &&
        Objects.equals(this.schemes, firewallMatchOneOfRequest.schemes) &&
        Objects.equals(this.url, firewallMatchOneOfRequest.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(methods, schemes, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FirewallMatchOneOfRequest {\n");
    sb.append("    methods: ").append(toIndentedString(methods)).append("\n");
    sb.append("    schemes: ").append(toIndentedString(schemes)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("methods");
    openapiFields.add("schemes");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FirewallMatchOneOfRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FirewallMatchOneOfRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FirewallMatchOneOfRequest is not found in the empty JSON string", FirewallMatchOneOfRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FirewallMatchOneOfRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FirewallMatchOneOfRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("methods") != null && !jsonObj.get("methods").isJsonNull() && !jsonObj.get("methods").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `methods` to be an array in the JSON string but got `%s`", jsonObj.get("methods").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("schemes") != null && !jsonObj.get("schemes").isJsonNull() && !jsonObj.get("schemes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemes` to be an array in the JSON string but got `%s`", jsonObj.get("schemes").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FirewallMatchOneOfRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FirewallMatchOneOfRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FirewallMatchOneOfRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FirewallMatchOneOfRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<FirewallMatchOneOfRequest>() {
           @Override
           public void write(JsonWriter out, FirewallMatchOneOfRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FirewallMatchOneOfRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FirewallMatchOneOfRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FirewallMatchOneOfRequest
  * @throws IOException if the JSON string is invalid with respect to FirewallMatchOneOfRequest
  */
  public static FirewallMatchOneOfRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FirewallMatchOneOfRequest.class);
  }

 /**
  * Convert an instance of FirewallMatchOneOfRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

