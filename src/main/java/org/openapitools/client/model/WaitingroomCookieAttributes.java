/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * Configures cookie attributes for the waiting room cookie. This encrypted cookie stores a user&#39;s status in the waiting room, such as queue position.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class WaitingroomCookieAttributes {
  /**
   * Configures the SameSite attribute on the waiting room cookie. Value &#x60;auto&#x60; will be translated to &#x60;lax&#x60; or &#x60;none&#x60; depending if **Always Use HTTPS** is enabled. Note that when using value &#x60;none&#x60;, the secure attribute cannot be set to &#x60;never&#x60;.
   */
  @JsonAdapter(SamesiteEnum.Adapter.class)
  public enum SamesiteEnum {
    AUTO("auto"),
    
    LAX("lax"),
    
    NONE("none"),
    
    STRICT("strict");

    private String value;

    SamesiteEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SamesiteEnum fromValue(String value) {
      for (SamesiteEnum b : SamesiteEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SamesiteEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SamesiteEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SamesiteEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SamesiteEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SamesiteEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SAMESITE = "samesite";
  @SerializedName(SERIALIZED_NAME_SAMESITE)
  private SamesiteEnum samesite = SamesiteEnum.AUTO;

  /**
   * Configures the Secure attribute on the waiting room cookie. Value &#x60;always&#x60; indicates that the Secure attribute will be set in the Set-Cookie header, &#x60;never&#x60; indicates that the Secure attribute will not be set, and &#x60;auto&#x60; will set the Secure attribute depending if **Always Use HTTPS** is enabled.
   */
  @JsonAdapter(SecureEnum.Adapter.class)
  public enum SecureEnum {
    AUTO("auto"),
    
    ALWAYS("always"),
    
    NEVER("never");

    private String value;

    SecureEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SecureEnum fromValue(String value) {
      for (SecureEnum b : SecureEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SecureEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SecureEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SecureEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SecureEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SecureEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SECURE = "secure";
  @SerializedName(SERIALIZED_NAME_SECURE)
  private SecureEnum secure = SecureEnum.AUTO;

  public WaitingroomCookieAttributes() {
  }

  public WaitingroomCookieAttributes samesite(SamesiteEnum samesite) {
    this.samesite = samesite;
    return this;
  }

   /**
   * Configures the SameSite attribute on the waiting room cookie. Value &#x60;auto&#x60; will be translated to &#x60;lax&#x60; or &#x60;none&#x60; depending if **Always Use HTTPS** is enabled. Note that when using value &#x60;none&#x60;, the secure attribute cannot be set to &#x60;never&#x60;.
   * @return samesite
  **/
  @javax.annotation.Nullable
  public SamesiteEnum getSamesite() {
    return samesite;
  }

  public void setSamesite(SamesiteEnum samesite) {
    this.samesite = samesite;
  }


  public WaitingroomCookieAttributes secure(SecureEnum secure) {
    this.secure = secure;
    return this;
  }

   /**
   * Configures the Secure attribute on the waiting room cookie. Value &#x60;always&#x60; indicates that the Secure attribute will be set in the Set-Cookie header, &#x60;never&#x60; indicates that the Secure attribute will not be set, and &#x60;auto&#x60; will set the Secure attribute depending if **Always Use HTTPS** is enabled.
   * @return secure
  **/
  @javax.annotation.Nullable
  public SecureEnum getSecure() {
    return secure;
  }

  public void setSecure(SecureEnum secure) {
    this.secure = secure;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WaitingroomCookieAttributes waitingroomCookieAttributes = (WaitingroomCookieAttributes) o;
    return Objects.equals(this.samesite, waitingroomCookieAttributes.samesite) &&
        Objects.equals(this.secure, waitingroomCookieAttributes.secure);
  }

  @Override
  public int hashCode() {
    return Objects.hash(samesite, secure);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WaitingroomCookieAttributes {\n");
    sb.append("    samesite: ").append(toIndentedString(samesite)).append("\n");
    sb.append("    secure: ").append(toIndentedString(secure)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("samesite");
    openapiFields.add("secure");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to WaitingroomCookieAttributes
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WaitingroomCookieAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WaitingroomCookieAttributes is not found in the empty JSON string", WaitingroomCookieAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WaitingroomCookieAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WaitingroomCookieAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("samesite") != null && !jsonObj.get("samesite").isJsonNull()) && !jsonObj.get("samesite").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `samesite` to be a primitive type in the JSON string but got `%s`", jsonObj.get("samesite").toString()));
      }
      // validate the optional field `samesite`
      if (jsonObj.get("samesite") != null && !jsonObj.get("samesite").isJsonNull()) {
        SamesiteEnum.validateJsonElement(jsonObj.get("samesite"));
      }
      if ((jsonObj.get("secure") != null && !jsonObj.get("secure").isJsonNull()) && !jsonObj.get("secure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure").toString()));
      }
      // validate the optional field `secure`
      if (jsonObj.get("secure") != null && !jsonObj.get("secure").isJsonNull()) {
        SecureEnum.validateJsonElement(jsonObj.get("secure"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WaitingroomCookieAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WaitingroomCookieAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WaitingroomCookieAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WaitingroomCookieAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<WaitingroomCookieAttributes>() {
           @Override
           public void write(JsonWriter out, WaitingroomCookieAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WaitingroomCookieAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WaitingroomCookieAttributes given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WaitingroomCookieAttributes
  * @throws IOException if the JSON string is invalid with respect to WaitingroomCookieAttributes
  */
  public static WaitingroomCookieAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WaitingroomCookieAttributes.class);
  }

 /**
  * Convert an instance of WaitingroomCookieAttributes to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

