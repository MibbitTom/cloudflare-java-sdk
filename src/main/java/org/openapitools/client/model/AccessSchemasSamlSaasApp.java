/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.AccessSamlSaasAppCustomAttributes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccessSchemasSamlSaasApp
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class AccessSchemasSamlSaasApp {
  /**
   * Optional identifier indicating the authentication protocol used for the saas app. Required for OIDC. Default if unset is \&quot;saml\&quot;
   */
  @JsonAdapter(AuthTypeEnum.Adapter.class)
  public enum AuthTypeEnum {
    SAML("saml"),
    
    OIDC("oidc");

    private String value;

    AuthTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthTypeEnum fromValue(String value) {
      for (AuthTypeEnum b : AuthTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTH_TYPE = "auth_type";
  @SerializedName(SERIALIZED_NAME_AUTH_TYPE)
  private AuthTypeEnum authType;

  public static final String SERIALIZED_NAME_CONSUMER_SERVICE_URL = "consumer_service_url";
  @SerializedName(SERIALIZED_NAME_CONSUMER_SERVICE_URL)
  private String consumerServiceUrl;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CUSTOM_ATTRIBUTES = "custom_attributes";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ATTRIBUTES)
  private AccessSamlSaasAppCustomAttributes customAttributes;

  public static final String SERIALIZED_NAME_IDP_ENTITY_ID = "idp_entity_id";
  @SerializedName(SERIALIZED_NAME_IDP_ENTITY_ID)
  private String idpEntityId;

  /**
   * The format of the name identifier sent to the SaaS application.
   */
  @JsonAdapter(NameIdFormatEnum.Adapter.class)
  public enum NameIdFormatEnum {
    ID("id"),
    
    EMAIL("email");

    private String value;

    NameIdFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NameIdFormatEnum fromValue(String value) {
      for (NameIdFormatEnum b : NameIdFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NameIdFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NameIdFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NameIdFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NameIdFormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NameIdFormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NAME_ID_FORMAT = "name_id_format";
  @SerializedName(SERIALIZED_NAME_NAME_ID_FORMAT)
  private NameIdFormatEnum nameIdFormat;

  public static final String SERIALIZED_NAME_NAME_ID_TRANSFORM_JSONATA = "name_id_transform_jsonata";
  @SerializedName(SERIALIZED_NAME_NAME_ID_TRANSFORM_JSONATA)
  private String nameIdTransformJsonata;

  public static final String SERIALIZED_NAME_PUBLIC_KEY = "public_key";
  @SerializedName(SERIALIZED_NAME_PUBLIC_KEY)
  private String publicKey;

  public static final String SERIALIZED_NAME_SP_ENTITY_ID = "sp_entity_id";
  @SerializedName(SERIALIZED_NAME_SP_ENTITY_ID)
  private String spEntityId;

  public static final String SERIALIZED_NAME_SSO_ENDPOINT = "sso_endpoint";
  @SerializedName(SERIALIZED_NAME_SSO_ENDPOINT)
  private String ssoEndpoint;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public AccessSchemasSamlSaasApp() {
  }

  public AccessSchemasSamlSaasApp(
     OffsetDateTime createdAt, 
     OffsetDateTime updatedAt
  ) {
    this();
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
  }

  public AccessSchemasSamlSaasApp authType(AuthTypeEnum authType) {
    this.authType = authType;
    return this;
  }

   /**
   * Optional identifier indicating the authentication protocol used for the saas app. Required for OIDC. Default if unset is \&quot;saml\&quot;
   * @return authType
  **/
  @javax.annotation.Nullable
  public AuthTypeEnum getAuthType() {
    return authType;
  }

  public void setAuthType(AuthTypeEnum authType) {
    this.authType = authType;
  }


  public AccessSchemasSamlSaasApp consumerServiceUrl(String consumerServiceUrl) {
    this.consumerServiceUrl = consumerServiceUrl;
    return this;
  }

   /**
   * The service provider&#39;s endpoint that is responsible for receiving and parsing a SAML assertion.
   * @return consumerServiceUrl
  **/
  @javax.annotation.Nullable
  public String getConsumerServiceUrl() {
    return consumerServiceUrl;
  }

  public void setConsumerServiceUrl(String consumerServiceUrl) {
    this.consumerServiceUrl = consumerServiceUrl;
  }


   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  public AccessSchemasSamlSaasApp customAttributes(AccessSamlSaasAppCustomAttributes customAttributes) {
    this.customAttributes = customAttributes;
    return this;
  }

   /**
   * Get customAttributes
   * @return customAttributes
  **/
  @javax.annotation.Nullable
  public AccessSamlSaasAppCustomAttributes getCustomAttributes() {
    return customAttributes;
  }

  public void setCustomAttributes(AccessSamlSaasAppCustomAttributes customAttributes) {
    this.customAttributes = customAttributes;
  }


  public AccessSchemasSamlSaasApp idpEntityId(String idpEntityId) {
    this.idpEntityId = idpEntityId;
    return this;
  }

   /**
   * The unique identifier for your SaaS application.
   * @return idpEntityId
  **/
  @javax.annotation.Nullable
  public String getIdpEntityId() {
    return idpEntityId;
  }

  public void setIdpEntityId(String idpEntityId) {
    this.idpEntityId = idpEntityId;
  }


  public AccessSchemasSamlSaasApp nameIdFormat(NameIdFormatEnum nameIdFormat) {
    this.nameIdFormat = nameIdFormat;
    return this;
  }

   /**
   * The format of the name identifier sent to the SaaS application.
   * @return nameIdFormat
  **/
  @javax.annotation.Nullable
  public NameIdFormatEnum getNameIdFormat() {
    return nameIdFormat;
  }

  public void setNameIdFormat(NameIdFormatEnum nameIdFormat) {
    this.nameIdFormat = nameIdFormat;
  }


  public AccessSchemasSamlSaasApp nameIdTransformJsonata(String nameIdTransformJsonata) {
    this.nameIdTransformJsonata = nameIdTransformJsonata;
    return this;
  }

   /**
   * A [JSONata](https://jsonata.org/) expression that transforms an application&#39;s user identities into a NameID value for its SAML assertion. This expression should evaluate to a singular string. The output of this expression can override the &#x60;name_id_format&#x60; setting. 
   * @return nameIdTransformJsonata
  **/
  @javax.annotation.Nullable
  public String getNameIdTransformJsonata() {
    return nameIdTransformJsonata;
  }

  public void setNameIdTransformJsonata(String nameIdTransformJsonata) {
    this.nameIdTransformJsonata = nameIdTransformJsonata;
  }


  public AccessSchemasSamlSaasApp publicKey(String publicKey) {
    this.publicKey = publicKey;
    return this;
  }

   /**
   * The Access public certificate that will be used to verify your identity.
   * @return publicKey
  **/
  @javax.annotation.Nullable
  public String getPublicKey() {
    return publicKey;
  }

  public void setPublicKey(String publicKey) {
    this.publicKey = publicKey;
  }


  public AccessSchemasSamlSaasApp spEntityId(String spEntityId) {
    this.spEntityId = spEntityId;
    return this;
  }

   /**
   * A globally unique name for an identity or service provider.
   * @return spEntityId
  **/
  @javax.annotation.Nullable
  public String getSpEntityId() {
    return spEntityId;
  }

  public void setSpEntityId(String spEntityId) {
    this.spEntityId = spEntityId;
  }


  public AccessSchemasSamlSaasApp ssoEndpoint(String ssoEndpoint) {
    this.ssoEndpoint = ssoEndpoint;
    return this;
  }

   /**
   * The endpoint where your SaaS application will send login requests.
   * @return ssoEndpoint
  **/
  @javax.annotation.Nullable
  public String getSsoEndpoint() {
    return ssoEndpoint;
  }

  public void setSsoEndpoint(String ssoEndpoint) {
    this.ssoEndpoint = ssoEndpoint;
  }


   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccessSchemasSamlSaasApp accessSchemasSamlSaasApp = (AccessSchemasSamlSaasApp) o;
    return Objects.equals(this.authType, accessSchemasSamlSaasApp.authType) &&
        Objects.equals(this.consumerServiceUrl, accessSchemasSamlSaasApp.consumerServiceUrl) &&
        Objects.equals(this.createdAt, accessSchemasSamlSaasApp.createdAt) &&
        Objects.equals(this.customAttributes, accessSchemasSamlSaasApp.customAttributes) &&
        Objects.equals(this.idpEntityId, accessSchemasSamlSaasApp.idpEntityId) &&
        Objects.equals(this.nameIdFormat, accessSchemasSamlSaasApp.nameIdFormat) &&
        Objects.equals(this.nameIdTransformJsonata, accessSchemasSamlSaasApp.nameIdTransformJsonata) &&
        Objects.equals(this.publicKey, accessSchemasSamlSaasApp.publicKey) &&
        Objects.equals(this.spEntityId, accessSchemasSamlSaasApp.spEntityId) &&
        Objects.equals(this.ssoEndpoint, accessSchemasSamlSaasApp.ssoEndpoint) &&
        Objects.equals(this.updatedAt, accessSchemasSamlSaasApp.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authType, consumerServiceUrl, createdAt, customAttributes, idpEntityId, nameIdFormat, nameIdTransformJsonata, publicKey, spEntityId, ssoEndpoint, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccessSchemasSamlSaasApp {\n");
    sb.append("    authType: ").append(toIndentedString(authType)).append("\n");
    sb.append("    consumerServiceUrl: ").append(toIndentedString(consumerServiceUrl)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    customAttributes: ").append(toIndentedString(customAttributes)).append("\n");
    sb.append("    idpEntityId: ").append(toIndentedString(idpEntityId)).append("\n");
    sb.append("    nameIdFormat: ").append(toIndentedString(nameIdFormat)).append("\n");
    sb.append("    nameIdTransformJsonata: ").append(toIndentedString(nameIdTransformJsonata)).append("\n");
    sb.append("    publicKey: ").append(toIndentedString(publicKey)).append("\n");
    sb.append("    spEntityId: ").append(toIndentedString(spEntityId)).append("\n");
    sb.append("    ssoEndpoint: ").append(toIndentedString(ssoEndpoint)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auth_type");
    openapiFields.add("consumer_service_url");
    openapiFields.add("created_at");
    openapiFields.add("custom_attributes");
    openapiFields.add("idp_entity_id");
    openapiFields.add("name_id_format");
    openapiFields.add("name_id_transform_jsonata");
    openapiFields.add("public_key");
    openapiFields.add("sp_entity_id");
    openapiFields.add("sso_endpoint");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AccessSchemasSamlSaasApp
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccessSchemasSamlSaasApp.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccessSchemasSamlSaasApp is not found in the empty JSON string", AccessSchemasSamlSaasApp.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccessSchemasSamlSaasApp.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccessSchemasSamlSaasApp` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("auth_type") != null && !jsonObj.get("auth_type").isJsonNull()) && !jsonObj.get("auth_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth_type").toString()));
      }
      // validate the optional field `auth_type`
      if (jsonObj.get("auth_type") != null && !jsonObj.get("auth_type").isJsonNull()) {
        AuthTypeEnum.validateJsonElement(jsonObj.get("auth_type"));
      }
      if ((jsonObj.get("consumer_service_url") != null && !jsonObj.get("consumer_service_url").isJsonNull()) && !jsonObj.get("consumer_service_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consumer_service_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consumer_service_url").toString()));
      }
      // validate the optional field `custom_attributes`
      if (jsonObj.get("custom_attributes") != null && !jsonObj.get("custom_attributes").isJsonNull()) {
        AccessSamlSaasAppCustomAttributes.validateJsonElement(jsonObj.get("custom_attributes"));
      }
      if ((jsonObj.get("idp_entity_id") != null && !jsonObj.get("idp_entity_id").isJsonNull()) && !jsonObj.get("idp_entity_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idp_entity_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idp_entity_id").toString()));
      }
      if ((jsonObj.get("name_id_format") != null && !jsonObj.get("name_id_format").isJsonNull()) && !jsonObj.get("name_id_format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name_id_format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name_id_format").toString()));
      }
      // validate the optional field `name_id_format`
      if (jsonObj.get("name_id_format") != null && !jsonObj.get("name_id_format").isJsonNull()) {
        NameIdFormatEnum.validateJsonElement(jsonObj.get("name_id_format"));
      }
      if ((jsonObj.get("name_id_transform_jsonata") != null && !jsonObj.get("name_id_transform_jsonata").isJsonNull()) && !jsonObj.get("name_id_transform_jsonata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name_id_transform_jsonata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name_id_transform_jsonata").toString()));
      }
      if ((jsonObj.get("public_key") != null && !jsonObj.get("public_key").isJsonNull()) && !jsonObj.get("public_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `public_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("public_key").toString()));
      }
      if ((jsonObj.get("sp_entity_id") != null && !jsonObj.get("sp_entity_id").isJsonNull()) && !jsonObj.get("sp_entity_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sp_entity_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sp_entity_id").toString()));
      }
      if ((jsonObj.get("sso_endpoint") != null && !jsonObj.get("sso_endpoint").isJsonNull()) && !jsonObj.get("sso_endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sso_endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sso_endpoint").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccessSchemasSamlSaasApp.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccessSchemasSamlSaasApp' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccessSchemasSamlSaasApp> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccessSchemasSamlSaasApp.class));

       return (TypeAdapter<T>) new TypeAdapter<AccessSchemasSamlSaasApp>() {
           @Override
           public void write(JsonWriter out, AccessSchemasSamlSaasApp value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccessSchemasSamlSaasApp read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AccessSchemasSamlSaasApp given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AccessSchemasSamlSaasApp
  * @throws IOException if the JSON string is invalid with respect to AccessSchemasSamlSaasApp
  */
  public static AccessSchemasSamlSaasApp fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccessSchemasSamlSaasApp.class);
  }

 /**
  * Convert an instance of AccessSchemasSamlSaasApp to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

