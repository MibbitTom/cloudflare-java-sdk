/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * Controls location-based steering for non-proxied requests. See &#x60;steering_policy&#x60; to learn how steering is affected.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class LoadBalancingLocationStrategy {
  /**
   * Determines the authoritative location when ECS is not preferred, does not exist in the request, or its GeoIP lookup is unsuccessful. - &#x60;\&quot;pop\&quot;&#x60;: Use the Cloudflare PoP location. - &#x60;\&quot;resolver_ip\&quot;&#x60;: Use the DNS resolver GeoIP location. If the GeoIP lookup is unsuccessful, use the Cloudflare PoP location.
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    POP("pop"),
    
    RESOLVER_IP("resolver_ip");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModeEnum fromValue(String value) {
      for (ModeEnum b : ModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private ModeEnum mode = ModeEnum.POP;

  /**
   * Whether the EDNS Client Subnet (ECS) GeoIP should be preferred as the authoritative location. - &#x60;\&quot;always\&quot;&#x60;: Always prefer ECS. - &#x60;\&quot;never\&quot;&#x60;: Never prefer ECS. - &#x60;\&quot;proximity\&quot;&#x60;: Prefer ECS only when &#x60;steering_policy&#x3D;\&quot;proximity\&quot;&#x60;. - &#x60;\&quot;geo\&quot;&#x60;: Prefer ECS only when &#x60;steering_policy&#x3D;\&quot;geo\&quot;&#x60;.
   */
  @JsonAdapter(PreferEcsEnum.Adapter.class)
  public enum PreferEcsEnum {
    ALWAYS("always"),
    
    NEVER("never"),
    
    PROXIMITY("proximity"),
    
    GEO("geo");

    private String value;

    PreferEcsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PreferEcsEnum fromValue(String value) {
      for (PreferEcsEnum b : PreferEcsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PreferEcsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PreferEcsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PreferEcsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PreferEcsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PreferEcsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PREFER_ECS = "prefer_ecs";
  @SerializedName(SERIALIZED_NAME_PREFER_ECS)
  private PreferEcsEnum preferEcs = PreferEcsEnum.PROXIMITY;

  public LoadBalancingLocationStrategy() {
  }

  public LoadBalancingLocationStrategy mode(ModeEnum mode) {
    this.mode = mode;
    return this;
  }

   /**
   * Determines the authoritative location when ECS is not preferred, does not exist in the request, or its GeoIP lookup is unsuccessful. - &#x60;\&quot;pop\&quot;&#x60;: Use the Cloudflare PoP location. - &#x60;\&quot;resolver_ip\&quot;&#x60;: Use the DNS resolver GeoIP location. If the GeoIP lookup is unsuccessful, use the Cloudflare PoP location.
   * @return mode
  **/
  @javax.annotation.Nullable
  public ModeEnum getMode() {
    return mode;
  }

  public void setMode(ModeEnum mode) {
    this.mode = mode;
  }


  public LoadBalancingLocationStrategy preferEcs(PreferEcsEnum preferEcs) {
    this.preferEcs = preferEcs;
    return this;
  }

   /**
   * Whether the EDNS Client Subnet (ECS) GeoIP should be preferred as the authoritative location. - &#x60;\&quot;always\&quot;&#x60;: Always prefer ECS. - &#x60;\&quot;never\&quot;&#x60;: Never prefer ECS. - &#x60;\&quot;proximity\&quot;&#x60;: Prefer ECS only when &#x60;steering_policy&#x3D;\&quot;proximity\&quot;&#x60;. - &#x60;\&quot;geo\&quot;&#x60;: Prefer ECS only when &#x60;steering_policy&#x3D;\&quot;geo\&quot;&#x60;.
   * @return preferEcs
  **/
  @javax.annotation.Nullable
  public PreferEcsEnum getPreferEcs() {
    return preferEcs;
  }

  public void setPreferEcs(PreferEcsEnum preferEcs) {
    this.preferEcs = preferEcs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoadBalancingLocationStrategy loadBalancingLocationStrategy = (LoadBalancingLocationStrategy) o;
    return Objects.equals(this.mode, loadBalancingLocationStrategy.mode) &&
        Objects.equals(this.preferEcs, loadBalancingLocationStrategy.preferEcs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mode, preferEcs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoadBalancingLocationStrategy {\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    preferEcs: ").append(toIndentedString(preferEcs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mode");
    openapiFields.add("prefer_ecs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to LoadBalancingLocationStrategy
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LoadBalancingLocationStrategy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoadBalancingLocationStrategy is not found in the empty JSON string", LoadBalancingLocationStrategy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LoadBalancingLocationStrategy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LoadBalancingLocationStrategy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) && !jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      // validate the optional field `mode`
      if (jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) {
        ModeEnum.validateJsonElement(jsonObj.get("mode"));
      }
      if ((jsonObj.get("prefer_ecs") != null && !jsonObj.get("prefer_ecs").isJsonNull()) && !jsonObj.get("prefer_ecs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefer_ecs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefer_ecs").toString()));
      }
      // validate the optional field `prefer_ecs`
      if (jsonObj.get("prefer_ecs") != null && !jsonObj.get("prefer_ecs").isJsonNull()) {
        PreferEcsEnum.validateJsonElement(jsonObj.get("prefer_ecs"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoadBalancingLocationStrategy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoadBalancingLocationStrategy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoadBalancingLocationStrategy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoadBalancingLocationStrategy.class));

       return (TypeAdapter<T>) new TypeAdapter<LoadBalancingLocationStrategy>() {
           @Override
           public void write(JsonWriter out, LoadBalancingLocationStrategy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LoadBalancingLocationStrategy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LoadBalancingLocationStrategy given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LoadBalancingLocationStrategy
  * @throws IOException if the JSON string is invalid with respect to LoadBalancingLocationStrategy
  */
  public static LoadBalancingLocationStrategy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoadBalancingLocationStrategy.class);
  }

 /**
  * Convert an instance of LoadBalancingLocationStrategy to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

