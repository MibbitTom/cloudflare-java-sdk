/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.StreamInput;
import org.openapitools.client.model.StreamMediaStatus;
import org.openapitools.client.model.StreamPlayback;
import org.openapitools.client.model.StreamWatermarks;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StreamVideos
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class StreamVideos {
  public static final String SERIALIZED_NAME_ALLOWED_ORIGINS = "allowedOrigins";
  @SerializedName(SERIALIZED_NAME_ALLOWED_ORIGINS)
  private List<String> allowedOrigins = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_CREATOR = "creator";
  @SerializedName(SERIALIZED_NAME_CREATOR)
  private String creator;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private BigDecimal duration;

  public static final String SERIALIZED_NAME_INPUT = "input";
  @SerializedName(SERIALIZED_NAME_INPUT)
  private StreamInput input;

  public static final String SERIALIZED_NAME_LIVE_INPUT = "liveInput";
  @SerializedName(SERIALIZED_NAME_LIVE_INPUT)
  private String liveInput;

  public static final String SERIALIZED_NAME_MAX_DURATION_SECONDS = "maxDurationSeconds";
  @SerializedName(SERIALIZED_NAME_MAX_DURATION_SECONDS)
  private Integer maxDurationSeconds;

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private Object meta;

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private OffsetDateTime modified;

  public static final String SERIALIZED_NAME_PLAYBACK = "playback";
  @SerializedName(SERIALIZED_NAME_PLAYBACK)
  private StreamPlayback playback;

  public static final String SERIALIZED_NAME_PREVIEW = "preview";
  @SerializedName(SERIALIZED_NAME_PREVIEW)
  private URI preview;

  public static final String SERIALIZED_NAME_READY_TO_STREAM = "readyToStream";
  @SerializedName(SERIALIZED_NAME_READY_TO_STREAM)
  private Boolean readyToStream;

  public static final String SERIALIZED_NAME_READY_TO_STREAM_AT = "readyToStreamAt";
  @SerializedName(SERIALIZED_NAME_READY_TO_STREAM_AT)
  private OffsetDateTime readyToStreamAt;

  public static final String SERIALIZED_NAME_REQUIRE_SIGNED_U_R_LS = "requireSignedURLs";
  @SerializedName(SERIALIZED_NAME_REQUIRE_SIGNED_U_R_LS)
  private Boolean requireSignedURLs = false;

  public static final String SERIALIZED_NAME_SCHEDULED_DELETION = "scheduledDeletion";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_DELETION)
  private OffsetDateTime scheduledDeletion;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private BigDecimal size;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StreamMediaStatus status;

  public static final String SERIALIZED_NAME_THUMBNAIL = "thumbnail";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL)
  private URI thumbnail;

  public static final String SERIALIZED_NAME_THUMBNAIL_TIMESTAMP_PCT = "thumbnailTimestampPct";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_TIMESTAMP_PCT)
  private BigDecimal thumbnailTimestampPct = new BigDecimal("0");

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_UPLOAD_EXPIRY = "uploadExpiry";
  @SerializedName(SERIALIZED_NAME_UPLOAD_EXPIRY)
  private OffsetDateTime uploadExpiry;

  public static final String SERIALIZED_NAME_UPLOADED = "uploaded";
  @SerializedName(SERIALIZED_NAME_UPLOADED)
  private OffsetDateTime uploaded;

  public static final String SERIALIZED_NAME_WATERMARK = "watermark";
  @SerializedName(SERIALIZED_NAME_WATERMARK)
  private StreamWatermarks watermark;

  public StreamVideos() {
  }

  public StreamVideos allowedOrigins(List<String> allowedOrigins) {
    this.allowedOrigins = allowedOrigins;
    return this;
  }

  public StreamVideos addAllowedOriginsItem(String allowedOriginsItem) {
    if (this.allowedOrigins == null) {
      this.allowedOrigins = new ArrayList<>();
    }
    this.allowedOrigins.add(allowedOriginsItem);
    return this;
  }

   /**
   * Lists the origins allowed to display the video. Enter allowed origin domains in an array and use &#x60;*&#x60; for wildcard subdomains. Empty arrays allow the video to be viewed on any origin.
   * @return allowedOrigins
  **/
  @javax.annotation.Nullable
  public List<String> getAllowedOrigins() {
    return allowedOrigins;
  }

  public void setAllowedOrigins(List<String> allowedOrigins) {
    this.allowedOrigins = allowedOrigins;
  }


  public StreamVideos created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

   /**
   * The date and time the media item was created.
   * @return created
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public StreamVideos creator(String creator) {
    this.creator = creator;
    return this;
  }

   /**
   * A user-defined identifier for the media creator.
   * @return creator
  **/
  @javax.annotation.Nullable
  public String getCreator() {
    return creator;
  }

  public void setCreator(String creator) {
    this.creator = creator;
  }


  public StreamVideos duration(BigDecimal duration) {
    this.duration = duration;
    return this;
  }

   /**
   * The duration of the video in seconds. A value of &#x60;-1&#x60; means the duration is unknown. The duration becomes available after the upload and before the video is ready.
   * @return duration
  **/
  @javax.annotation.Nullable
  public BigDecimal getDuration() {
    return duration;
  }

  public void setDuration(BigDecimal duration) {
    this.duration = duration;
  }


  public StreamVideos input(StreamInput input) {
    this.input = input;
    return this;
  }

   /**
   * Get input
   * @return input
  **/
  @javax.annotation.Nullable
  public StreamInput getInput() {
    return input;
  }

  public void setInput(StreamInput input) {
    this.input = input;
  }


  public StreamVideos liveInput(String liveInput) {
    this.liveInput = liveInput;
    return this;
  }

   /**
   * The live input ID used to upload a video with Stream Live.
   * @return liveInput
  **/
  @javax.annotation.Nullable
  public String getLiveInput() {
    return liveInput;
  }

  public void setLiveInput(String liveInput) {
    this.liveInput = liveInput;
  }


  public StreamVideos maxDurationSeconds(Integer maxDurationSeconds) {
    this.maxDurationSeconds = maxDurationSeconds;
    return this;
  }

   /**
   * The maximum duration in seconds for a video upload. Can be set for a video that is not yet uploaded to limit its duration. Uploads that exceed the specified duration will fail during processing. A value of &#x60;-1&#x60; means the value is unknown.
   * minimum: 1
   * maximum: 21600
   * @return maxDurationSeconds
  **/
  @javax.annotation.Nullable
  public Integer getMaxDurationSeconds() {
    return maxDurationSeconds;
  }

  public void setMaxDurationSeconds(Integer maxDurationSeconds) {
    this.maxDurationSeconds = maxDurationSeconds;
  }


  public StreamVideos meta(Object meta) {
    this.meta = meta;
    return this;
  }

   /**
   * A user modifiable key-value store used to reference other systems of record for managing videos.
   * @return meta
  **/
  @javax.annotation.Nullable
  public Object getMeta() {
    return meta;
  }

  public void setMeta(Object meta) {
    this.meta = meta;
  }


  public StreamVideos modified(OffsetDateTime modified) {
    this.modified = modified;
    return this;
  }

   /**
   * The date and time the media item was last modified.
   * @return modified
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getModified() {
    return modified;
  }

  public void setModified(OffsetDateTime modified) {
    this.modified = modified;
  }


  public StreamVideos playback(StreamPlayback playback) {
    this.playback = playback;
    return this;
  }

   /**
   * Get playback
   * @return playback
  **/
  @javax.annotation.Nullable
  public StreamPlayback getPlayback() {
    return playback;
  }

  public void setPlayback(StreamPlayback playback) {
    this.playback = playback;
  }


  public StreamVideos preview(URI preview) {
    this.preview = preview;
    return this;
  }

   /**
   * The video&#39;s preview page URI. This field is omitted until encoding is complete.
   * @return preview
  **/
  @javax.annotation.Nullable
  public URI getPreview() {
    return preview;
  }

  public void setPreview(URI preview) {
    this.preview = preview;
  }


  public StreamVideos readyToStream(Boolean readyToStream) {
    this.readyToStream = readyToStream;
    return this;
  }

   /**
   * Indicates whether the video is playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
   * @return readyToStream
  **/
  @javax.annotation.Nullable
  public Boolean getReadyToStream() {
    return readyToStream;
  }

  public void setReadyToStream(Boolean readyToStream) {
    this.readyToStream = readyToStream;
  }


  public StreamVideos readyToStreamAt(OffsetDateTime readyToStreamAt) {
    this.readyToStreamAt = readyToStreamAt;
    return this;
  }

   /**
   * Indicates the time at which the video became playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
   * @return readyToStreamAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getReadyToStreamAt() {
    return readyToStreamAt;
  }

  public void setReadyToStreamAt(OffsetDateTime readyToStreamAt) {
    this.readyToStreamAt = readyToStreamAt;
  }


  public StreamVideos requireSignedURLs(Boolean requireSignedURLs) {
    this.requireSignedURLs = requireSignedURLs;
    return this;
  }

   /**
   * Indicates whether the video can be a accessed using the UID. When set to &#x60;true&#x60;, a signed token must be generated with a signing key to view the video.
   * @return requireSignedURLs
  **/
  @javax.annotation.Nullable
  public Boolean getRequireSignedURLs() {
    return requireSignedURLs;
  }

  public void setRequireSignedURLs(Boolean requireSignedURLs) {
    this.requireSignedURLs = requireSignedURLs;
  }


  public StreamVideos scheduledDeletion(OffsetDateTime scheduledDeletion) {
    this.scheduledDeletion = scheduledDeletion;
    return this;
  }

   /**
   * Indicates the date and time at which the video will be deleted. Omit the field to indicate no change, or include with a &#x60;null&#x60; value to remove an existing scheduled deletion. If specified, must be at least 30 days from upload time.
   * @return scheduledDeletion
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getScheduledDeletion() {
    return scheduledDeletion;
  }

  public void setScheduledDeletion(OffsetDateTime scheduledDeletion) {
    this.scheduledDeletion = scheduledDeletion;
  }


  public StreamVideos size(BigDecimal size) {
    this.size = size;
    return this;
  }

   /**
   * The size of the media item in bytes.
   * @return size
  **/
  @javax.annotation.Nullable
  public BigDecimal getSize() {
    return size;
  }

  public void setSize(BigDecimal size) {
    this.size = size;
  }


  public StreamVideos status(StreamMediaStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  public StreamMediaStatus getStatus() {
    return status;
  }

  public void setStatus(StreamMediaStatus status) {
    this.status = status;
  }


  public StreamVideos thumbnail(URI thumbnail) {
    this.thumbnail = thumbnail;
    return this;
  }

   /**
   * The media item&#39;s thumbnail URI. This field is omitted until encoding is complete.
   * @return thumbnail
  **/
  @javax.annotation.Nullable
  public URI getThumbnail() {
    return thumbnail;
  }

  public void setThumbnail(URI thumbnail) {
    this.thumbnail = thumbnail;
  }


  public StreamVideos thumbnailTimestampPct(BigDecimal thumbnailTimestampPct) {
    this.thumbnailTimestampPct = thumbnailTimestampPct;
    return this;
  }

   /**
   * The timestamp for a thumbnail image calculated as a percentage value of the video&#39;s duration. To convert from a second-wise timestamp to a percentage, divide the desired timestamp by the total duration of the video.  If this value is not set, the default thumbnail image is taken from 0s of the video.
   * minimum: 0
   * maximum: 1
   * @return thumbnailTimestampPct
  **/
  @javax.annotation.Nullable
  public BigDecimal getThumbnailTimestampPct() {
    return thumbnailTimestampPct;
  }

  public void setThumbnailTimestampPct(BigDecimal thumbnailTimestampPct) {
    this.thumbnailTimestampPct = thumbnailTimestampPct;
  }


  public StreamVideos uid(String uid) {
    this.uid = uid;
    return this;
  }

   /**
   * A Cloudflare-generated unique identifier for a media item.
   * @return uid
  **/
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }

  public void setUid(String uid) {
    this.uid = uid;
  }


  public StreamVideos uploadExpiry(OffsetDateTime uploadExpiry) {
    this.uploadExpiry = uploadExpiry;
    return this;
  }

   /**
   * The date and time when the video upload URL is no longer valid for direct user uploads.
   * @return uploadExpiry
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getUploadExpiry() {
    return uploadExpiry;
  }

  public void setUploadExpiry(OffsetDateTime uploadExpiry) {
    this.uploadExpiry = uploadExpiry;
  }


  public StreamVideos uploaded(OffsetDateTime uploaded) {
    this.uploaded = uploaded;
    return this;
  }

   /**
   * The date and time the media item was uploaded.
   * @return uploaded
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getUploaded() {
    return uploaded;
  }

  public void setUploaded(OffsetDateTime uploaded) {
    this.uploaded = uploaded;
  }


  public StreamVideos watermark(StreamWatermarks watermark) {
    this.watermark = watermark;
    return this;
  }

   /**
   * Get watermark
   * @return watermark
  **/
  @javax.annotation.Nullable
  public StreamWatermarks getWatermark() {
    return watermark;
  }

  public void setWatermark(StreamWatermarks watermark) {
    this.watermark = watermark;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamVideos streamVideos = (StreamVideos) o;
    return Objects.equals(this.allowedOrigins, streamVideos.allowedOrigins) &&
        Objects.equals(this.created, streamVideos.created) &&
        Objects.equals(this.creator, streamVideos.creator) &&
        Objects.equals(this.duration, streamVideos.duration) &&
        Objects.equals(this.input, streamVideos.input) &&
        Objects.equals(this.liveInput, streamVideos.liveInput) &&
        Objects.equals(this.maxDurationSeconds, streamVideos.maxDurationSeconds) &&
        Objects.equals(this.meta, streamVideos.meta) &&
        Objects.equals(this.modified, streamVideos.modified) &&
        Objects.equals(this.playback, streamVideos.playback) &&
        Objects.equals(this.preview, streamVideos.preview) &&
        Objects.equals(this.readyToStream, streamVideos.readyToStream) &&
        Objects.equals(this.readyToStreamAt, streamVideos.readyToStreamAt) &&
        Objects.equals(this.requireSignedURLs, streamVideos.requireSignedURLs) &&
        Objects.equals(this.scheduledDeletion, streamVideos.scheduledDeletion) &&
        Objects.equals(this.size, streamVideos.size) &&
        Objects.equals(this.status, streamVideos.status) &&
        Objects.equals(this.thumbnail, streamVideos.thumbnail) &&
        Objects.equals(this.thumbnailTimestampPct, streamVideos.thumbnailTimestampPct) &&
        Objects.equals(this.uid, streamVideos.uid) &&
        Objects.equals(this.uploadExpiry, streamVideos.uploadExpiry) &&
        Objects.equals(this.uploaded, streamVideos.uploaded) &&
        Objects.equals(this.watermark, streamVideos.watermark);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedOrigins, created, creator, duration, input, liveInput, maxDurationSeconds, meta, modified, playback, preview, readyToStream, readyToStreamAt, requireSignedURLs, scheduledDeletion, size, status, thumbnail, thumbnailTimestampPct, uid, uploadExpiry, uploaded, watermark);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamVideos {\n");
    sb.append("    allowedOrigins: ").append(toIndentedString(allowedOrigins)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    creator: ").append(toIndentedString(creator)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    liveInput: ").append(toIndentedString(liveInput)).append("\n");
    sb.append("    maxDurationSeconds: ").append(toIndentedString(maxDurationSeconds)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    playback: ").append(toIndentedString(playback)).append("\n");
    sb.append("    preview: ").append(toIndentedString(preview)).append("\n");
    sb.append("    readyToStream: ").append(toIndentedString(readyToStream)).append("\n");
    sb.append("    readyToStreamAt: ").append(toIndentedString(readyToStreamAt)).append("\n");
    sb.append("    requireSignedURLs: ").append(toIndentedString(requireSignedURLs)).append("\n");
    sb.append("    scheduledDeletion: ").append(toIndentedString(scheduledDeletion)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    thumbnail: ").append(toIndentedString(thumbnail)).append("\n");
    sb.append("    thumbnailTimestampPct: ").append(toIndentedString(thumbnailTimestampPct)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    uploadExpiry: ").append(toIndentedString(uploadExpiry)).append("\n");
    sb.append("    uploaded: ").append(toIndentedString(uploaded)).append("\n");
    sb.append("    watermark: ").append(toIndentedString(watermark)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedOrigins");
    openapiFields.add("created");
    openapiFields.add("creator");
    openapiFields.add("duration");
    openapiFields.add("input");
    openapiFields.add("liveInput");
    openapiFields.add("maxDurationSeconds");
    openapiFields.add("meta");
    openapiFields.add("modified");
    openapiFields.add("playback");
    openapiFields.add("preview");
    openapiFields.add("readyToStream");
    openapiFields.add("readyToStreamAt");
    openapiFields.add("requireSignedURLs");
    openapiFields.add("scheduledDeletion");
    openapiFields.add("size");
    openapiFields.add("status");
    openapiFields.add("thumbnail");
    openapiFields.add("thumbnailTimestampPct");
    openapiFields.add("uid");
    openapiFields.add("uploadExpiry");
    openapiFields.add("uploaded");
    openapiFields.add("watermark");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to StreamVideos
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StreamVideos.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StreamVideos is not found in the empty JSON string", StreamVideos.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StreamVideos.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StreamVideos` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedOrigins") != null && !jsonObj.get("allowedOrigins").isJsonNull() && !jsonObj.get("allowedOrigins").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedOrigins` to be an array in the JSON string but got `%s`", jsonObj.get("allowedOrigins").toString()));
      }
      if ((jsonObj.get("creator") != null && !jsonObj.get("creator").isJsonNull()) && !jsonObj.get("creator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creator").toString()));
      }
      // validate the optional field `input`
      if (jsonObj.get("input") != null && !jsonObj.get("input").isJsonNull()) {
        StreamInput.validateJsonElement(jsonObj.get("input"));
      }
      if ((jsonObj.get("liveInput") != null && !jsonObj.get("liveInput").isJsonNull()) && !jsonObj.get("liveInput").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `liveInput` to be a primitive type in the JSON string but got `%s`", jsonObj.get("liveInput").toString()));
      }
      // validate the optional field `playback`
      if (jsonObj.get("playback") != null && !jsonObj.get("playback").isJsonNull()) {
        StreamPlayback.validateJsonElement(jsonObj.get("playback"));
      }
      if ((jsonObj.get("preview") != null && !jsonObj.get("preview").isJsonNull()) && !jsonObj.get("preview").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preview` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preview").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StreamMediaStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("thumbnail") != null && !jsonObj.get("thumbnail").isJsonNull()) && !jsonObj.get("thumbnail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbnail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbnail").toString()));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      // validate the optional field `watermark`
      if (jsonObj.get("watermark") != null && !jsonObj.get("watermark").isJsonNull()) {
        StreamWatermarks.validateJsonElement(jsonObj.get("watermark"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StreamVideos.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StreamVideos' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StreamVideos> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StreamVideos.class));

       return (TypeAdapter<T>) new TypeAdapter<StreamVideos>() {
           @Override
           public void write(JsonWriter out, StreamVideos value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StreamVideos read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of StreamVideos given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of StreamVideos
  * @throws IOException if the JSON string is invalid with respect to StreamVideos
  */
  public static StreamVideos fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StreamVideos.class);
  }

 /**
  * Convert an instance of StreamVideos to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

