/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * AccessLoginDesign
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class AccessLoginDesign {
  public static final String SERIALIZED_NAME_BACKGROUND_COLOR = "background_color";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_COLOR)
  private String backgroundColor;

  public static final String SERIALIZED_NAME_FOOTER_TEXT = "footer_text";
  @SerializedName(SERIALIZED_NAME_FOOTER_TEXT)
  private String footerText;

  public static final String SERIALIZED_NAME_HEADER_TEXT = "header_text";
  @SerializedName(SERIALIZED_NAME_HEADER_TEXT)
  private String headerText;

  public static final String SERIALIZED_NAME_LOGO_PATH = "logo_path";
  @SerializedName(SERIALIZED_NAME_LOGO_PATH)
  private String logoPath;

  public static final String SERIALIZED_NAME_TEXT_COLOR = "text_color";
  @SerializedName(SERIALIZED_NAME_TEXT_COLOR)
  private String textColor;

  public AccessLoginDesign() {
  }

  public AccessLoginDesign backgroundColor(String backgroundColor) {
    this.backgroundColor = backgroundColor;
    return this;
  }

   /**
   * The background color on your login page.
   * @return backgroundColor
  **/
  @javax.annotation.Nullable
  public String getBackgroundColor() {
    return backgroundColor;
  }

  public void setBackgroundColor(String backgroundColor) {
    this.backgroundColor = backgroundColor;
  }


  public AccessLoginDesign footerText(String footerText) {
    this.footerText = footerText;
    return this;
  }

   /**
   * The text at the bottom of your login page.
   * @return footerText
  **/
  @javax.annotation.Nullable
  public String getFooterText() {
    return footerText;
  }

  public void setFooterText(String footerText) {
    this.footerText = footerText;
  }


  public AccessLoginDesign headerText(String headerText) {
    this.headerText = headerText;
    return this;
  }

   /**
   * The text at the top of your login page.
   * @return headerText
  **/
  @javax.annotation.Nullable
  public String getHeaderText() {
    return headerText;
  }

  public void setHeaderText(String headerText) {
    this.headerText = headerText;
  }


  public AccessLoginDesign logoPath(String logoPath) {
    this.logoPath = logoPath;
    return this;
  }

   /**
   * The URL of the logo on your login page.
   * @return logoPath
  **/
  @javax.annotation.Nullable
  public String getLogoPath() {
    return logoPath;
  }

  public void setLogoPath(String logoPath) {
    this.logoPath = logoPath;
  }


  public AccessLoginDesign textColor(String textColor) {
    this.textColor = textColor;
    return this;
  }

   /**
   * The text color on your login page.
   * @return textColor
  **/
  @javax.annotation.Nullable
  public String getTextColor() {
    return textColor;
  }

  public void setTextColor(String textColor) {
    this.textColor = textColor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccessLoginDesign accessLoginDesign = (AccessLoginDesign) o;
    return Objects.equals(this.backgroundColor, accessLoginDesign.backgroundColor) &&
        Objects.equals(this.footerText, accessLoginDesign.footerText) &&
        Objects.equals(this.headerText, accessLoginDesign.headerText) &&
        Objects.equals(this.logoPath, accessLoginDesign.logoPath) &&
        Objects.equals(this.textColor, accessLoginDesign.textColor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backgroundColor, footerText, headerText, logoPath, textColor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccessLoginDesign {\n");
    sb.append("    backgroundColor: ").append(toIndentedString(backgroundColor)).append("\n");
    sb.append("    footerText: ").append(toIndentedString(footerText)).append("\n");
    sb.append("    headerText: ").append(toIndentedString(headerText)).append("\n");
    sb.append("    logoPath: ").append(toIndentedString(logoPath)).append("\n");
    sb.append("    textColor: ").append(toIndentedString(textColor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("background_color");
    openapiFields.add("footer_text");
    openapiFields.add("header_text");
    openapiFields.add("logo_path");
    openapiFields.add("text_color");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AccessLoginDesign
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccessLoginDesign.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccessLoginDesign is not found in the empty JSON string", AccessLoginDesign.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccessLoginDesign.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccessLoginDesign` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("background_color") != null && !jsonObj.get("background_color").isJsonNull()) && !jsonObj.get("background_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `background_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("background_color").toString()));
      }
      if ((jsonObj.get("footer_text") != null && !jsonObj.get("footer_text").isJsonNull()) && !jsonObj.get("footer_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `footer_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("footer_text").toString()));
      }
      if ((jsonObj.get("header_text") != null && !jsonObj.get("header_text").isJsonNull()) && !jsonObj.get("header_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `header_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("header_text").toString()));
      }
      if ((jsonObj.get("logo_path") != null && !jsonObj.get("logo_path").isJsonNull()) && !jsonObj.get("logo_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logo_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logo_path").toString()));
      }
      if ((jsonObj.get("text_color") != null && !jsonObj.get("text_color").isJsonNull()) && !jsonObj.get("text_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text_color").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccessLoginDesign.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccessLoginDesign' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccessLoginDesign> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccessLoginDesign.class));

       return (TypeAdapter<T>) new TypeAdapter<AccessLoginDesign>() {
           @Override
           public void write(JsonWriter out, AccessLoginDesign value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccessLoginDesign read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AccessLoginDesign given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AccessLoginDesign
  * @throws IOException if the JSON string is invalid with respect to AccessLoginDesign
  */
  public static AccessLoginDesign fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccessLoginDesign.class);
  }

 /**
  * Convert an instance of AccessLoginDesign to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

