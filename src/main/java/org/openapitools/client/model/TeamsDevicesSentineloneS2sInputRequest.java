/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * TeamsDevicesSentineloneS2sInputRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class TeamsDevicesSentineloneS2sInputRequest {
  public static final String SERIALIZED_NAME_ACTIVE_THREATS = "active_threats";
  @SerializedName(SERIALIZED_NAME_ACTIVE_THREATS)
  private BigDecimal activeThreats;

  public static final String SERIALIZED_NAME_CONNECTION_ID = "connection_id";
  @SerializedName(SERIALIZED_NAME_CONNECTION_ID)
  private String connectionId;

  public static final String SERIALIZED_NAME_INFECTED = "infected";
  @SerializedName(SERIALIZED_NAME_INFECTED)
  private Boolean infected;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "is_active";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  /**
   * Network status of device.
   */
  @JsonAdapter(NetworkStatusEnum.Adapter.class)
  public enum NetworkStatusEnum {
    CONNECTED("connected"),
    
    DISCONNECTED("disconnected"),
    
    DISCONNECTING("disconnecting"),
    
    CONNECTING("connecting");

    private String value;

    NetworkStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NetworkStatusEnum fromValue(String value) {
      for (NetworkStatusEnum b : NetworkStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NetworkStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NetworkStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NetworkStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NetworkStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NetworkStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NETWORK_STATUS = "network_status";
  @SerializedName(SERIALIZED_NAME_NETWORK_STATUS)
  private NetworkStatusEnum networkStatus;

  /**
   * operator
   */
  @JsonAdapter(OperatorEnum.Adapter.class)
  public enum OperatorEnum {
    LESS_THAN("<"),
    
    LESS_THAN_OR_EQUAL_TO("<="),
    
    GREATER_THAN(">"),
    
    GREATER_THAN_OR_EQUAL_TO(">="),
    
    u("==");

    private String value;

    OperatorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperatorEnum fromValue(String value) {
      for (OperatorEnum b : OperatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OperatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperatorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OperatorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OperatorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OPERATOR = "operator";
  @SerializedName(SERIALIZED_NAME_OPERATOR)
  private OperatorEnum operator;

  public TeamsDevicesSentineloneS2sInputRequest() {
  }

  public TeamsDevicesSentineloneS2sInputRequest activeThreats(BigDecimal activeThreats) {
    this.activeThreats = activeThreats;
    return this;
  }

   /**
   * The Number of active threats.
   * @return activeThreats
  **/
  @javax.annotation.Nullable
  public BigDecimal getActiveThreats() {
    return activeThreats;
  }

  public void setActiveThreats(BigDecimal activeThreats) {
    this.activeThreats = activeThreats;
  }


  public TeamsDevicesSentineloneS2sInputRequest connectionId(String connectionId) {
    this.connectionId = connectionId;
    return this;
  }

   /**
   * Posture Integration ID.
   * @return connectionId
  **/
  @javax.annotation.Nonnull
  public String getConnectionId() {
    return connectionId;
  }

  public void setConnectionId(String connectionId) {
    this.connectionId = connectionId;
  }


  public TeamsDevicesSentineloneS2sInputRequest infected(Boolean infected) {
    this.infected = infected;
    return this;
  }

   /**
   * Whether device is infected.
   * @return infected
  **/
  @javax.annotation.Nullable
  public Boolean getInfected() {
    return infected;
  }

  public void setInfected(Boolean infected) {
    this.infected = infected;
  }


  public TeamsDevicesSentineloneS2sInputRequest isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

   /**
   * Whether device is active.
   * @return isActive
  **/
  @javax.annotation.Nullable
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public TeamsDevicesSentineloneS2sInputRequest networkStatus(NetworkStatusEnum networkStatus) {
    this.networkStatus = networkStatus;
    return this;
  }

   /**
   * Network status of device.
   * @return networkStatus
  **/
  @javax.annotation.Nullable
  public NetworkStatusEnum getNetworkStatus() {
    return networkStatus;
  }

  public void setNetworkStatus(NetworkStatusEnum networkStatus) {
    this.networkStatus = networkStatus;
  }


  public TeamsDevicesSentineloneS2sInputRequest operator(OperatorEnum operator) {
    this.operator = operator;
    return this;
  }

   /**
   * operator
   * @return operator
  **/
  @javax.annotation.Nullable
  public OperatorEnum getOperator() {
    return operator;
  }

  public void setOperator(OperatorEnum operator) {
    this.operator = operator;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TeamsDevicesSentineloneS2sInputRequest teamsDevicesSentineloneS2sInputRequest = (TeamsDevicesSentineloneS2sInputRequest) o;
    return Objects.equals(this.activeThreats, teamsDevicesSentineloneS2sInputRequest.activeThreats) &&
        Objects.equals(this.connectionId, teamsDevicesSentineloneS2sInputRequest.connectionId) &&
        Objects.equals(this.infected, teamsDevicesSentineloneS2sInputRequest.infected) &&
        Objects.equals(this.isActive, teamsDevicesSentineloneS2sInputRequest.isActive) &&
        Objects.equals(this.networkStatus, teamsDevicesSentineloneS2sInputRequest.networkStatus) &&
        Objects.equals(this.operator, teamsDevicesSentineloneS2sInputRequest.operator);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeThreats, connectionId, infected, isActive, networkStatus, operator);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TeamsDevicesSentineloneS2sInputRequest {\n");
    sb.append("    activeThreats: ").append(toIndentedString(activeThreats)).append("\n");
    sb.append("    connectionId: ").append(toIndentedString(connectionId)).append("\n");
    sb.append("    infected: ").append(toIndentedString(infected)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    networkStatus: ").append(toIndentedString(networkStatus)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active_threats");
    openapiFields.add("connection_id");
    openapiFields.add("infected");
    openapiFields.add("is_active");
    openapiFields.add("network_status");
    openapiFields.add("operator");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("connection_id");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TeamsDevicesSentineloneS2sInputRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TeamsDevicesSentineloneS2sInputRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TeamsDevicesSentineloneS2sInputRequest is not found in the empty JSON string", TeamsDevicesSentineloneS2sInputRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TeamsDevicesSentineloneS2sInputRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TeamsDevicesSentineloneS2sInputRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TeamsDevicesSentineloneS2sInputRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("connection_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connection_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connection_id").toString()));
      }
      if ((jsonObj.get("network_status") != null && !jsonObj.get("network_status").isJsonNull()) && !jsonObj.get("network_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network_status").toString()));
      }
      // validate the optional field `network_status`
      if (jsonObj.get("network_status") != null && !jsonObj.get("network_status").isJsonNull()) {
        NetworkStatusEnum.validateJsonElement(jsonObj.get("network_status"));
      }
      if ((jsonObj.get("operator") != null && !jsonObj.get("operator").isJsonNull()) && !jsonObj.get("operator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operator").toString()));
      }
      // validate the optional field `operator`
      if (jsonObj.get("operator") != null && !jsonObj.get("operator").isJsonNull()) {
        OperatorEnum.validateJsonElement(jsonObj.get("operator"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TeamsDevicesSentineloneS2sInputRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TeamsDevicesSentineloneS2sInputRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TeamsDevicesSentineloneS2sInputRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TeamsDevicesSentineloneS2sInputRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TeamsDevicesSentineloneS2sInputRequest>() {
           @Override
           public void write(JsonWriter out, TeamsDevicesSentineloneS2sInputRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TeamsDevicesSentineloneS2sInputRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TeamsDevicesSentineloneS2sInputRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TeamsDevicesSentineloneS2sInputRequest
  * @throws IOException if the JSON string is invalid with respect to TeamsDevicesSentineloneS2sInputRequest
  */
  public static TeamsDevicesSentineloneS2sInputRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TeamsDevicesSentineloneS2sInputRequest.class);
  }

 /**
  * Convert an instance of TeamsDevicesSentineloneS2sInputRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

