/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.StreamWatermarks;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StreamDirectUploadResponseAllOfResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class StreamDirectUploadResponseAllOfResult {
  public static final String SERIALIZED_NAME_SCHEDULED_DELETION = "scheduledDeletion";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_DELETION)
  private OffsetDateTime scheduledDeletion;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_UPLOAD_U_R_L = "uploadURL";
  @SerializedName(SERIALIZED_NAME_UPLOAD_U_R_L)
  private String uploadURL;

  public static final String SERIALIZED_NAME_WATERMARK = "watermark";
  @SerializedName(SERIALIZED_NAME_WATERMARK)
  private StreamWatermarks watermark;

  public StreamDirectUploadResponseAllOfResult() {
  }

  public StreamDirectUploadResponseAllOfResult scheduledDeletion(OffsetDateTime scheduledDeletion) {
    this.scheduledDeletion = scheduledDeletion;
    return this;
  }

   /**
   * Indicates the date and time at which the video will be deleted. Omit the field to indicate no change, or include with a &#x60;null&#x60; value to remove an existing scheduled deletion. If specified, must be at least 30 days from upload time.
   * @return scheduledDeletion
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getScheduledDeletion() {
    return scheduledDeletion;
  }

  public void setScheduledDeletion(OffsetDateTime scheduledDeletion) {
    this.scheduledDeletion = scheduledDeletion;
  }


  public StreamDirectUploadResponseAllOfResult uid(String uid) {
    this.uid = uid;
    return this;
  }

   /**
   * A Cloudflare-generated unique identifier for a media item.
   * @return uid
  **/
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }

  public void setUid(String uid) {
    this.uid = uid;
  }


  public StreamDirectUploadResponseAllOfResult uploadURL(String uploadURL) {
    this.uploadURL = uploadURL;
    return this;
  }

   /**
   * The URL an unauthenticated upload can use for a single &#x60;HTTP POST multipart/form-data&#x60; request.
   * @return uploadURL
  **/
  @javax.annotation.Nullable
  public String getUploadURL() {
    return uploadURL;
  }

  public void setUploadURL(String uploadURL) {
    this.uploadURL = uploadURL;
  }


  public StreamDirectUploadResponseAllOfResult watermark(StreamWatermarks watermark) {
    this.watermark = watermark;
    return this;
  }

   /**
   * Get watermark
   * @return watermark
  **/
  @javax.annotation.Nullable
  public StreamWatermarks getWatermark() {
    return watermark;
  }

  public void setWatermark(StreamWatermarks watermark) {
    this.watermark = watermark;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamDirectUploadResponseAllOfResult streamDirectUploadResponseAllOfResult = (StreamDirectUploadResponseAllOfResult) o;
    return Objects.equals(this.scheduledDeletion, streamDirectUploadResponseAllOfResult.scheduledDeletion) &&
        Objects.equals(this.uid, streamDirectUploadResponseAllOfResult.uid) &&
        Objects.equals(this.uploadURL, streamDirectUploadResponseAllOfResult.uploadURL) &&
        Objects.equals(this.watermark, streamDirectUploadResponseAllOfResult.watermark);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scheduledDeletion, uid, uploadURL, watermark);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamDirectUploadResponseAllOfResult {\n");
    sb.append("    scheduledDeletion: ").append(toIndentedString(scheduledDeletion)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    uploadURL: ").append(toIndentedString(uploadURL)).append("\n");
    sb.append("    watermark: ").append(toIndentedString(watermark)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("scheduledDeletion");
    openapiFields.add("uid");
    openapiFields.add("uploadURL");
    openapiFields.add("watermark");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to StreamDirectUploadResponseAllOfResult
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StreamDirectUploadResponseAllOfResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StreamDirectUploadResponseAllOfResult is not found in the empty JSON string", StreamDirectUploadResponseAllOfResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StreamDirectUploadResponseAllOfResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StreamDirectUploadResponseAllOfResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      if ((jsonObj.get("uploadURL") != null && !jsonObj.get("uploadURL").isJsonNull()) && !jsonObj.get("uploadURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uploadURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uploadURL").toString()));
      }
      // validate the optional field `watermark`
      if (jsonObj.get("watermark") != null && !jsonObj.get("watermark").isJsonNull()) {
        StreamWatermarks.validateJsonElement(jsonObj.get("watermark"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StreamDirectUploadResponseAllOfResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StreamDirectUploadResponseAllOfResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StreamDirectUploadResponseAllOfResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StreamDirectUploadResponseAllOfResult.class));

       return (TypeAdapter<T>) new TypeAdapter<StreamDirectUploadResponseAllOfResult>() {
           @Override
           public void write(JsonWriter out, StreamDirectUploadResponseAllOfResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StreamDirectUploadResponseAllOfResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of StreamDirectUploadResponseAllOfResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of StreamDirectUploadResponseAllOfResult
  * @throws IOException if the JSON string is invalid with respect to StreamDirectUploadResponseAllOfResult
  */
  public static StreamDirectUploadResponseAllOfResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StreamDirectUploadResponseAllOfResult.class);
  }

 /**
  * Convert an instance of StreamDirectUploadResponseAllOfResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

