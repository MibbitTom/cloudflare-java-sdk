/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DigitalExperienceMonitoringHttpDetailsResponseTargetPoliciesInner;
import org.openapitools.client.model.DigitalExperienceMonitoringTracerouteDetailsResponseTracerouteStats;
import org.openapitools.client.model.DigitalExperienceMonitoringTracerouteDetailsResponseTracerouteStatsByColoInner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DigitalExperienceMonitoringTracerouteDetailsResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class DigitalExperienceMonitoringTracerouteDetailsResponse {
  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  private String interval;

  /**
   * Gets or Sets kind
   */
  @JsonAdapter(KindEnum.Adapter.class)
  public enum KindEnum {
    TRACEROUTE("traceroute");

    private String value;

    KindEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KindEnum fromValue(String value) {
      for (KindEnum b : KindEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KindEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KindEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KindEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KindEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KindEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private KindEnum kind;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TARGET_POLICIES = "target_policies";
  @SerializedName(SERIALIZED_NAME_TARGET_POLICIES)
  private List<DigitalExperienceMonitoringHttpDetailsResponseTargetPoliciesInner> targetPolicies;

  public static final String SERIALIZED_NAME_TARGETED = "targeted";
  @SerializedName(SERIALIZED_NAME_TARGETED)
  private Boolean targeted;

  public static final String SERIALIZED_NAME_TRACEROUTE_STATS = "tracerouteStats";
  @SerializedName(SERIALIZED_NAME_TRACEROUTE_STATS)
  private DigitalExperienceMonitoringTracerouteDetailsResponseTracerouteStats tracerouteStats;

  public static final String SERIALIZED_NAME_TRACEROUTE_STATS_BY_COLO = "tracerouteStatsByColo";
  @SerializedName(SERIALIZED_NAME_TRACEROUTE_STATS_BY_COLO)
  private List<DigitalExperienceMonitoringTracerouteDetailsResponseTracerouteStatsByColoInner> tracerouteStatsByColo = new ArrayList<>();

  public DigitalExperienceMonitoringTracerouteDetailsResponse() {
  }

  public DigitalExperienceMonitoringTracerouteDetailsResponse host(String host) {
    this.host = host;
    return this;
  }

   /**
   * The host of the Traceroute synthetic application test
   * @return host
  **/
  @javax.annotation.Nonnull
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }


  public DigitalExperienceMonitoringTracerouteDetailsResponse interval(String interval) {
    this.interval = interval;
    return this;
  }

   /**
   * The interval at which the Traceroute synthetic application test is set to run.
   * @return interval
  **/
  @javax.annotation.Nonnull
  public String getInterval() {
    return interval;
  }

  public void setInterval(String interval) {
    this.interval = interval;
  }


  public DigitalExperienceMonitoringTracerouteDetailsResponse kind(KindEnum kind) {
    this.kind = kind;
    return this;
  }

   /**
   * Get kind
   * @return kind
  **/
  @javax.annotation.Nonnull
  public KindEnum getKind() {
    return kind;
  }

  public void setKind(KindEnum kind) {
    this.kind = kind;
  }


  public DigitalExperienceMonitoringTracerouteDetailsResponse name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the Traceroute synthetic application test
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DigitalExperienceMonitoringTracerouteDetailsResponse targetPolicies(List<DigitalExperienceMonitoringHttpDetailsResponseTargetPoliciesInner> targetPolicies) {
    this.targetPolicies = targetPolicies;
    return this;
  }

  public DigitalExperienceMonitoringTracerouteDetailsResponse addTargetPoliciesItem(DigitalExperienceMonitoringHttpDetailsResponseTargetPoliciesInner targetPoliciesItem) {
    if (this.targetPolicies == null) {
      this.targetPolicies = new ArrayList<>();
    }
    this.targetPolicies.add(targetPoliciesItem);
    return this;
  }

   /**
   * Get targetPolicies
   * @return targetPolicies
  **/
  @javax.annotation.Nullable
  public List<DigitalExperienceMonitoringHttpDetailsResponseTargetPoliciesInner> getTargetPolicies() {
    return targetPolicies;
  }

  public void setTargetPolicies(List<DigitalExperienceMonitoringHttpDetailsResponseTargetPoliciesInner> targetPolicies) {
    this.targetPolicies = targetPolicies;
  }


  public DigitalExperienceMonitoringTracerouteDetailsResponse targeted(Boolean targeted) {
    this.targeted = targeted;
    return this;
  }

   /**
   * Get targeted
   * @return targeted
  **/
  @javax.annotation.Nullable
  public Boolean getTargeted() {
    return targeted;
  }

  public void setTargeted(Boolean targeted) {
    this.targeted = targeted;
  }


  public DigitalExperienceMonitoringTracerouteDetailsResponse tracerouteStats(DigitalExperienceMonitoringTracerouteDetailsResponseTracerouteStats tracerouteStats) {
    this.tracerouteStats = tracerouteStats;
    return this;
  }

   /**
   * Get tracerouteStats
   * @return tracerouteStats
  **/
  @javax.annotation.Nullable
  public DigitalExperienceMonitoringTracerouteDetailsResponseTracerouteStats getTracerouteStats() {
    return tracerouteStats;
  }

  public void setTracerouteStats(DigitalExperienceMonitoringTracerouteDetailsResponseTracerouteStats tracerouteStats) {
    this.tracerouteStats = tracerouteStats;
  }


  public DigitalExperienceMonitoringTracerouteDetailsResponse tracerouteStatsByColo(List<DigitalExperienceMonitoringTracerouteDetailsResponseTracerouteStatsByColoInner> tracerouteStatsByColo) {
    this.tracerouteStatsByColo = tracerouteStatsByColo;
    return this;
  }

  public DigitalExperienceMonitoringTracerouteDetailsResponse addTracerouteStatsByColoItem(DigitalExperienceMonitoringTracerouteDetailsResponseTracerouteStatsByColoInner tracerouteStatsByColoItem) {
    if (this.tracerouteStatsByColo == null) {
      this.tracerouteStatsByColo = new ArrayList<>();
    }
    this.tracerouteStatsByColo.add(tracerouteStatsByColoItem);
    return this;
  }

   /**
   * Get tracerouteStatsByColo
   * @return tracerouteStatsByColo
  **/
  @javax.annotation.Nullable
  public List<DigitalExperienceMonitoringTracerouteDetailsResponseTracerouteStatsByColoInner> getTracerouteStatsByColo() {
    return tracerouteStatsByColo;
  }

  public void setTracerouteStatsByColo(List<DigitalExperienceMonitoringTracerouteDetailsResponseTracerouteStatsByColoInner> tracerouteStatsByColo) {
    this.tracerouteStatsByColo = tracerouteStatsByColo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DigitalExperienceMonitoringTracerouteDetailsResponse digitalExperienceMonitoringTracerouteDetailsResponse = (DigitalExperienceMonitoringTracerouteDetailsResponse) o;
    return Objects.equals(this.host, digitalExperienceMonitoringTracerouteDetailsResponse.host) &&
        Objects.equals(this.interval, digitalExperienceMonitoringTracerouteDetailsResponse.interval) &&
        Objects.equals(this.kind, digitalExperienceMonitoringTracerouteDetailsResponse.kind) &&
        Objects.equals(this.name, digitalExperienceMonitoringTracerouteDetailsResponse.name) &&
        Objects.equals(this.targetPolicies, digitalExperienceMonitoringTracerouteDetailsResponse.targetPolicies) &&
        Objects.equals(this.targeted, digitalExperienceMonitoringTracerouteDetailsResponse.targeted) &&
        Objects.equals(this.tracerouteStats, digitalExperienceMonitoringTracerouteDetailsResponse.tracerouteStats) &&
        Objects.equals(this.tracerouteStatsByColo, digitalExperienceMonitoringTracerouteDetailsResponse.tracerouteStatsByColo);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(host, interval, kind, name, targetPolicies, targeted, tracerouteStats, tracerouteStatsByColo);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DigitalExperienceMonitoringTracerouteDetailsResponse {\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    targetPolicies: ").append(toIndentedString(targetPolicies)).append("\n");
    sb.append("    targeted: ").append(toIndentedString(targeted)).append("\n");
    sb.append("    tracerouteStats: ").append(toIndentedString(tracerouteStats)).append("\n");
    sb.append("    tracerouteStatsByColo: ").append(toIndentedString(tracerouteStatsByColo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("host");
    openapiFields.add("interval");
    openapiFields.add("kind");
    openapiFields.add("name");
    openapiFields.add("target_policies");
    openapiFields.add("targeted");
    openapiFields.add("tracerouteStats");
    openapiFields.add("tracerouteStatsByColo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("host");
    openapiRequiredFields.add("interval");
    openapiRequiredFields.add("kind");
    openapiRequiredFields.add("name");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DigitalExperienceMonitoringTracerouteDetailsResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DigitalExperienceMonitoringTracerouteDetailsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DigitalExperienceMonitoringTracerouteDetailsResponse is not found in the empty JSON string", DigitalExperienceMonitoringTracerouteDetailsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DigitalExperienceMonitoringTracerouteDetailsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DigitalExperienceMonitoringTracerouteDetailsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DigitalExperienceMonitoringTracerouteDetailsResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      if (!jsonObj.get("interval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interval").toString()));
      }
      if (!jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the required field `kind`
      KindEnum.validateJsonElement(jsonObj.get("kind"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("target_policies") != null && !jsonObj.get("target_policies").isJsonNull()) {
        JsonArray jsonArraytargetPolicies = jsonObj.getAsJsonArray("target_policies");
        if (jsonArraytargetPolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("target_policies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `target_policies` to be an array in the JSON string but got `%s`", jsonObj.get("target_policies").toString()));
          }

          // validate the optional field `target_policies` (array)
          for (int i = 0; i < jsonArraytargetPolicies.size(); i++) {
            DigitalExperienceMonitoringHttpDetailsResponseTargetPoliciesInner.validateJsonElement(jsonArraytargetPolicies.get(i));
          };
        }
      }
      // validate the optional field `tracerouteStats`
      if (jsonObj.get("tracerouteStats") != null && !jsonObj.get("tracerouteStats").isJsonNull()) {
        DigitalExperienceMonitoringTracerouteDetailsResponseTracerouteStats.validateJsonElement(jsonObj.get("tracerouteStats"));
      }
      if (jsonObj.get("tracerouteStatsByColo") != null && !jsonObj.get("tracerouteStatsByColo").isJsonNull()) {
        JsonArray jsonArraytracerouteStatsByColo = jsonObj.getAsJsonArray("tracerouteStatsByColo");
        if (jsonArraytracerouteStatsByColo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tracerouteStatsByColo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tracerouteStatsByColo` to be an array in the JSON string but got `%s`", jsonObj.get("tracerouteStatsByColo").toString()));
          }

          // validate the optional field `tracerouteStatsByColo` (array)
          for (int i = 0; i < jsonArraytracerouteStatsByColo.size(); i++) {
            DigitalExperienceMonitoringTracerouteDetailsResponseTracerouteStatsByColoInner.validateJsonElement(jsonArraytracerouteStatsByColo.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DigitalExperienceMonitoringTracerouteDetailsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DigitalExperienceMonitoringTracerouteDetailsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DigitalExperienceMonitoringTracerouteDetailsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DigitalExperienceMonitoringTracerouteDetailsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DigitalExperienceMonitoringTracerouteDetailsResponse>() {
           @Override
           public void write(JsonWriter out, DigitalExperienceMonitoringTracerouteDetailsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DigitalExperienceMonitoringTracerouteDetailsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DigitalExperienceMonitoringTracerouteDetailsResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DigitalExperienceMonitoringTracerouteDetailsResponse
  * @throws IOException if the JSON string is invalid with respect to DigitalExperienceMonitoringTracerouteDetailsResponse
  */
  public static DigitalExperienceMonitoringTracerouteDetailsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DigitalExperienceMonitoringTracerouteDetailsResponse.class);
  }

 /**
  * Convert an instance of DigitalExperienceMonitoringTracerouteDetailsResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

