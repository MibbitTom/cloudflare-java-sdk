/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadataMigrations;
import org.openapitools.client.model.WorkersPlacementConfig;
import org.openapitools.client.model.WorkersTailConsumersScript;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JSON encoded metadata about the uploaded parts and Worker configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata {
  public static final String SERIALIZED_NAME_BINDINGS = "bindings";
  @SerializedName(SERIALIZED_NAME_BINDINGS)
  private List<Object> bindings = new ArrayList<>();

  public static final String SERIALIZED_NAME_BODY_PART = "body_part";
  @SerializedName(SERIALIZED_NAME_BODY_PART)
  private String bodyPart;

  public static final String SERIALIZED_NAME_COMPATIBILITY_DATE = "compatibility_date";
  @SerializedName(SERIALIZED_NAME_COMPATIBILITY_DATE)
  private String compatibilityDate;

  public static final String SERIALIZED_NAME_COMPATIBILITY_FLAGS = "compatibility_flags";
  @SerializedName(SERIALIZED_NAME_COMPATIBILITY_FLAGS)
  private List<String> compatibilityFlags = new ArrayList<>();

  public static final String SERIALIZED_NAME_KEEP_BINDINGS = "keep_bindings";
  @SerializedName(SERIALIZED_NAME_KEEP_BINDINGS)
  private List<String> keepBindings = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOGPUSH = "logpush";
  @SerializedName(SERIALIZED_NAME_LOGPUSH)
  private Boolean logpush;

  public static final String SERIALIZED_NAME_MAIN_MODULE = "main_module";
  @SerializedName(SERIALIZED_NAME_MAIN_MODULE)
  private String mainModule;

  public static final String SERIALIZED_NAME_MIGRATIONS = "migrations";
  @SerializedName(SERIALIZED_NAME_MIGRATIONS)
  private NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadataMigrations migrations;

  public static final String SERIALIZED_NAME_PLACEMENT = "placement";
  @SerializedName(SERIALIZED_NAME_PLACEMENT)
  private WorkersPlacementConfig placement;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAIL_CONSUMERS = "tail_consumers";
  @SerializedName(SERIALIZED_NAME_TAIL_CONSUMERS)
  private List<WorkersTailConsumersScript> tailConsumers = new ArrayList<>();

  /**
   * Usage model to apply to invocations.
   */
  @JsonAdapter(UsageModelEnum.Adapter.class)
  public enum UsageModelEnum {
    BUNDLED("bundled"),
    
    UNBOUND("unbound");

    private String value;

    UsageModelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UsageModelEnum fromValue(String value) {
      for (UsageModelEnum b : UsageModelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UsageModelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UsageModelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UsageModelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UsageModelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UsageModelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_USAGE_MODEL = "usage_model";
  @SerializedName(SERIALIZED_NAME_USAGE_MODEL)
  private UsageModelEnum usageModel;

  public static final String SERIALIZED_NAME_VERSION_TAGS = "version_tags";
  @SerializedName(SERIALIZED_NAME_VERSION_TAGS)
  private Object versionTags;

  public NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata() {
  }

  public NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata bindings(List<Object> bindings) {
    this.bindings = bindings;
    return this;
  }

  public NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata addBindingsItem(Object bindingsItem) {
    if (this.bindings == null) {
      this.bindings = new ArrayList<>();
    }
    this.bindings.add(bindingsItem);
    return this;
  }

   /**
   * List of bindings available to the worker.
   * @return bindings
  **/
  @javax.annotation.Nullable
  public List<Object> getBindings() {
    return bindings;
  }

  public void setBindings(List<Object> bindings) {
    this.bindings = bindings;
  }


  public NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata bodyPart(String bodyPart) {
    this.bodyPart = bodyPart;
    return this;
  }

   /**
   * Name of the part in the multipart request that contains the script (e.g. the file adding a listener to the &#x60;fetch&#x60; event). Indicates a &#x60;service worker syntax&#x60; Worker.
   * @return bodyPart
  **/
  @javax.annotation.Nullable
  public String getBodyPart() {
    return bodyPart;
  }

  public void setBodyPart(String bodyPart) {
    this.bodyPart = bodyPart;
  }


  public NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata compatibilityDate(String compatibilityDate) {
    this.compatibilityDate = compatibilityDate;
    return this;
  }

   /**
   * Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
   * @return compatibilityDate
  **/
  @javax.annotation.Nullable
  public String getCompatibilityDate() {
    return compatibilityDate;
  }

  public void setCompatibilityDate(String compatibilityDate) {
    this.compatibilityDate = compatibilityDate;
  }


  public NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata compatibilityFlags(List<String> compatibilityFlags) {
    this.compatibilityFlags = compatibilityFlags;
    return this;
  }

  public NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata addCompatibilityFlagsItem(String compatibilityFlagsItem) {
    if (this.compatibilityFlags == null) {
      this.compatibilityFlags = new ArrayList<>();
    }
    this.compatibilityFlags.add(compatibilityFlagsItem);
    return this;
  }

   /**
   * Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a &#x60;compatibility_date&#x60;.
   * @return compatibilityFlags
  **/
  @javax.annotation.Nullable
  public List<String> getCompatibilityFlags() {
    return compatibilityFlags;
  }

  public void setCompatibilityFlags(List<String> compatibilityFlags) {
    this.compatibilityFlags = compatibilityFlags;
  }


  public NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata keepBindings(List<String> keepBindings) {
    this.keepBindings = keepBindings;
    return this;
  }

  public NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata addKeepBindingsItem(String keepBindingsItem) {
    if (this.keepBindings == null) {
      this.keepBindings = new ArrayList<>();
    }
    this.keepBindings.add(keepBindingsItem);
    return this;
  }

   /**
   * List of binding types to keep from previous_upload.
   * @return keepBindings
  **/
  @javax.annotation.Nullable
  public List<String> getKeepBindings() {
    return keepBindings;
  }

  public void setKeepBindings(List<String> keepBindings) {
    this.keepBindings = keepBindings;
  }


  public NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata logpush(Boolean logpush) {
    this.logpush = logpush;
    return this;
  }

   /**
   * Whether Logpush is turned on for the Worker.
   * @return logpush
  **/
  @javax.annotation.Nullable
  public Boolean getLogpush() {
    return logpush;
  }

  public void setLogpush(Boolean logpush) {
    this.logpush = logpush;
  }


  public NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata mainModule(String mainModule) {
    this.mainModule = mainModule;
    return this;
  }

   /**
   * Name of the part in the multipart request that contains the main module (e.g. the file exporting a &#x60;fetch&#x60; handler). Indicates a &#x60;module syntax&#x60; Worker.
   * @return mainModule
  **/
  @javax.annotation.Nullable
  public String getMainModule() {
    return mainModule;
  }

  public void setMainModule(String mainModule) {
    this.mainModule = mainModule;
  }


  public NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata migrations(NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadataMigrations migrations) {
    this.migrations = migrations;
    return this;
  }

   /**
   * Get migrations
   * @return migrations
  **/
  @javax.annotation.Nullable
  public NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadataMigrations getMigrations() {
    return migrations;
  }

  public void setMigrations(NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadataMigrations migrations) {
    this.migrations = migrations;
  }


  public NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata placement(WorkersPlacementConfig placement) {
    this.placement = placement;
    return this;
  }

   /**
   * Get placement
   * @return placement
  **/
  @javax.annotation.Nullable
  public WorkersPlacementConfig getPlacement() {
    return placement;
  }

  public void setPlacement(WorkersPlacementConfig placement) {
    this.placement = placement;
  }


  public NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * List of strings to use as tags for this Worker
   * @return tags
  **/
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata tailConsumers(List<WorkersTailConsumersScript> tailConsumers) {
    this.tailConsumers = tailConsumers;
    return this;
  }

  public NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata addTailConsumersItem(WorkersTailConsumersScript tailConsumersItem) {
    if (this.tailConsumers == null) {
      this.tailConsumers = new ArrayList<>();
    }
    this.tailConsumers.add(tailConsumersItem);
    return this;
  }

   /**
   * List of Workers that will consume logs from the attached Worker.
   * @return tailConsumers
  **/
  @javax.annotation.Nullable
  public List<WorkersTailConsumersScript> getTailConsumers() {
    return tailConsumers;
  }

  public void setTailConsumers(List<WorkersTailConsumersScript> tailConsumers) {
    this.tailConsumers = tailConsumers;
  }


  public NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata usageModel(UsageModelEnum usageModel) {
    this.usageModel = usageModel;
    return this;
  }

   /**
   * Usage model to apply to invocations.
   * @return usageModel
  **/
  @javax.annotation.Nullable
  public UsageModelEnum getUsageModel() {
    return usageModel;
  }

  public void setUsageModel(UsageModelEnum usageModel) {
    this.usageModel = usageModel;
  }


  public NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata versionTags(Object versionTags) {
    this.versionTags = versionTags;
    return this;
  }

   /**
   * Key-value pairs to use as tags for this version of this Worker
   * @return versionTags
  **/
  @javax.annotation.Nullable
  public Object getVersionTags() {
    return versionTags;
  }

  public void setVersionTags(Object versionTags) {
    this.versionTags = versionTags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata namespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata = (NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata) o;
    return Objects.equals(this.bindings, namespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata.bindings) &&
        Objects.equals(this.bodyPart, namespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata.bodyPart) &&
        Objects.equals(this.compatibilityDate, namespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata.compatibilityDate) &&
        Objects.equals(this.compatibilityFlags, namespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata.compatibilityFlags) &&
        Objects.equals(this.keepBindings, namespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata.keepBindings) &&
        Objects.equals(this.logpush, namespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata.logpush) &&
        Objects.equals(this.mainModule, namespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata.mainModule) &&
        Objects.equals(this.migrations, namespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata.migrations) &&
        Objects.equals(this.placement, namespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata.placement) &&
        Objects.equals(this.tags, namespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata.tags) &&
        Objects.equals(this.tailConsumers, namespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata.tailConsumers) &&
        Objects.equals(this.usageModel, namespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata.usageModel) &&
        Objects.equals(this.versionTags, namespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata.versionTags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bindings, bodyPart, compatibilityDate, compatibilityFlags, keepBindings, logpush, mainModule, migrations, placement, tags, tailConsumers, usageModel, versionTags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata {\n");
    sb.append("    bindings: ").append(toIndentedString(bindings)).append("\n");
    sb.append("    bodyPart: ").append(toIndentedString(bodyPart)).append("\n");
    sb.append("    compatibilityDate: ").append(toIndentedString(compatibilityDate)).append("\n");
    sb.append("    compatibilityFlags: ").append(toIndentedString(compatibilityFlags)).append("\n");
    sb.append("    keepBindings: ").append(toIndentedString(keepBindings)).append("\n");
    sb.append("    logpush: ").append(toIndentedString(logpush)).append("\n");
    sb.append("    mainModule: ").append(toIndentedString(mainModule)).append("\n");
    sb.append("    migrations: ").append(toIndentedString(migrations)).append("\n");
    sb.append("    placement: ").append(toIndentedString(placement)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    tailConsumers: ").append(toIndentedString(tailConsumers)).append("\n");
    sb.append("    usageModel: ").append(toIndentedString(usageModel)).append("\n");
    sb.append("    versionTags: ").append(toIndentedString(versionTags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bindings");
    openapiFields.add("body_part");
    openapiFields.add("compatibility_date");
    openapiFields.add("compatibility_flags");
    openapiFields.add("keep_bindings");
    openapiFields.add("logpush");
    openapiFields.add("main_module");
    openapiFields.add("migrations");
    openapiFields.add("placement");
    openapiFields.add("tags");
    openapiFields.add("tail_consumers");
    openapiFields.add("usage_model");
    openapiFields.add("version_tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata is not found in the empty JSON string", NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("bindings") != null && !jsonObj.get("bindings").isJsonNull() && !jsonObj.get("bindings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bindings` to be an array in the JSON string but got `%s`", jsonObj.get("bindings").toString()));
      }
      if ((jsonObj.get("body_part") != null && !jsonObj.get("body_part").isJsonNull()) && !jsonObj.get("body_part").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body_part` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body_part").toString()));
      }
      if ((jsonObj.get("compatibility_date") != null && !jsonObj.get("compatibility_date").isJsonNull()) && !jsonObj.get("compatibility_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compatibility_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compatibility_date").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("compatibility_flags") != null && !jsonObj.get("compatibility_flags").isJsonNull() && !jsonObj.get("compatibility_flags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `compatibility_flags` to be an array in the JSON string but got `%s`", jsonObj.get("compatibility_flags").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("keep_bindings") != null && !jsonObj.get("keep_bindings").isJsonNull() && !jsonObj.get("keep_bindings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `keep_bindings` to be an array in the JSON string but got `%s`", jsonObj.get("keep_bindings").toString()));
      }
      if ((jsonObj.get("main_module") != null && !jsonObj.get("main_module").isJsonNull()) && !jsonObj.get("main_module").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `main_module` to be a primitive type in the JSON string but got `%s`", jsonObj.get("main_module").toString()));
      }
      // validate the optional field `migrations`
      if (jsonObj.get("migrations") != null && !jsonObj.get("migrations").isJsonNull()) {
        NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadataMigrations.validateJsonElement(jsonObj.get("migrations"));
      }
      // validate the optional field `placement`
      if (jsonObj.get("placement") != null && !jsonObj.get("placement").isJsonNull()) {
        WorkersPlacementConfig.validateJsonElement(jsonObj.get("placement"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if (jsonObj.get("tail_consumers") != null && !jsonObj.get("tail_consumers").isJsonNull()) {
        JsonArray jsonArraytailConsumers = jsonObj.getAsJsonArray("tail_consumers");
        if (jsonArraytailConsumers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tail_consumers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tail_consumers` to be an array in the JSON string but got `%s`", jsonObj.get("tail_consumers").toString()));
          }

          // validate the optional field `tail_consumers` (array)
          for (int i = 0; i < jsonArraytailConsumers.size(); i++) {
            WorkersTailConsumersScript.validateJsonElement(jsonArraytailConsumers.get(i));
          };
        }
      }
      if ((jsonObj.get("usage_model") != null && !jsonObj.get("usage_model").isJsonNull()) && !jsonObj.get("usage_model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usage_model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usage_model").toString()));
      }
      // validate the optional field `usage_model`
      if (jsonObj.get("usage_model") != null && !jsonObj.get("usage_model").isJsonNull()) {
        UsageModelEnum.validateJsonElement(jsonObj.get("usage_model"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata>() {
           @Override
           public void write(JsonWriter out, NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata
  * @throws IOException if the JSON string is invalid with respect to NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata
  */
  public static NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata.class);
  }

 /**
  * Convert an instance of NamespaceWorkerScriptUploadWorkerModuleRequestOneOfMetadata to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

