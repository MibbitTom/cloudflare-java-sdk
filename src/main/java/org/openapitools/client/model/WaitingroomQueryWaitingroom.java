/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.WaitingroomAdditionalRoutesInner;
import org.openapitools.client.model.WaitingroomCookieAttributes;
import org.openapitools.client.model.WaitingroomDefaultTemplateLanguage;
import org.openapitools.client.model.WaitingroomQueueingMethod;
import org.openapitools.client.model.WaitingroomQueueingStatusCode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * WaitingroomQueryWaitingroom
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class WaitingroomQueryWaitingroom {
  public static final String SERIALIZED_NAME_ADDITIONAL_ROUTES = "additional_routes";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_ROUTES)
  private List<WaitingroomAdditionalRoutesInner> additionalRoutes = new ArrayList<>();

  public static final String SERIALIZED_NAME_COOKIE_ATTRIBUTES = "cookie_attributes";
  @SerializedName(SERIALIZED_NAME_COOKIE_ATTRIBUTES)
  private WaitingroomCookieAttributes cookieAttributes;

  public static final String SERIALIZED_NAME_COOKIE_SUFFIX = "cookie_suffix";
  @SerializedName(SERIALIZED_NAME_COOKIE_SUFFIX)
  private String cookieSuffix;

  public static final String SERIALIZED_NAME_CUSTOM_PAGE_HTML = "custom_page_html";
  @SerializedName(SERIALIZED_NAME_CUSTOM_PAGE_HTML)
  private String customPageHtml = "";

  public static final String SERIALIZED_NAME_DEFAULT_TEMPLATE_LANGUAGE = "default_template_language";
  @SerializedName(SERIALIZED_NAME_DEFAULT_TEMPLATE_LANGUAGE)
  private WaitingroomDefaultTemplateLanguage defaultTemplateLanguage = WaitingroomDefaultTemplateLanguage.EN_US;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description = "";

  public static final String SERIALIZED_NAME_DISABLE_SESSION_RENEWAL = "disable_session_renewal";
  @SerializedName(SERIALIZED_NAME_DISABLE_SESSION_RENEWAL)
  private Boolean disableSessionRenewal = false;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_JSON_RESPONSE_ENABLED = "json_response_enabled";
  @SerializedName(SERIALIZED_NAME_JSON_RESPONSE_ENABLED)
  private Boolean jsonResponseEnabled = false;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NEW_USERS_PER_MINUTE = "new_users_per_minute";
  @SerializedName(SERIALIZED_NAME_NEW_USERS_PER_MINUTE)
  private Integer newUsersPerMinute;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path = "/";

  public static final String SERIALIZED_NAME_QUEUE_ALL = "queue_all";
  @SerializedName(SERIALIZED_NAME_QUEUE_ALL)
  private Boolean queueAll = false;

  public static final String SERIALIZED_NAME_QUEUEING_METHOD = "queueing_method";
  @SerializedName(SERIALIZED_NAME_QUEUEING_METHOD)
  private WaitingroomQueueingMethod queueingMethod = WaitingroomQueueingMethod.FIFO;

  public static final String SERIALIZED_NAME_QUEUEING_STATUS_CODE = "queueing_status_code";
  @SerializedName(SERIALIZED_NAME_QUEUEING_STATUS_CODE)
  private WaitingroomQueueingStatusCode queueingStatusCode = WaitingroomQueueingStatusCode.NUMBER_200;

  public static final String SERIALIZED_NAME_SESSION_DURATION = "session_duration";
  @SerializedName(SERIALIZED_NAME_SESSION_DURATION)
  private Integer sessionDuration = 5;

  public static final String SERIALIZED_NAME_SUSPENDED = "suspended";
  @SerializedName(SERIALIZED_NAME_SUSPENDED)
  private Boolean suspended = false;

  public static final String SERIALIZED_NAME_TOTAL_ACTIVE_USERS = "total_active_users";
  @SerializedName(SERIALIZED_NAME_TOTAL_ACTIVE_USERS)
  private Integer totalActiveUsers;

  public WaitingroomQueryWaitingroom() {
  }

  public WaitingroomQueryWaitingroom additionalRoutes(List<WaitingroomAdditionalRoutesInner> additionalRoutes) {
    this.additionalRoutes = additionalRoutes;
    return this;
  }

  public WaitingroomQueryWaitingroom addAdditionalRoutesItem(WaitingroomAdditionalRoutesInner additionalRoutesItem) {
    if (this.additionalRoutes == null) {
      this.additionalRoutes = new ArrayList<>();
    }
    this.additionalRoutes.add(additionalRoutesItem);
    return this;
  }

   /**
   * Only available for the Waiting Room Advanced subscription. Additional hostname and path combinations to which this waiting room will be applied. There is an implied wildcard at the end of the path. The hostname and path combination must be unique to this and all other waiting rooms.
   * @return additionalRoutes
  **/
  @javax.annotation.Nullable
  public List<WaitingroomAdditionalRoutesInner> getAdditionalRoutes() {
    return additionalRoutes;
  }

  public void setAdditionalRoutes(List<WaitingroomAdditionalRoutesInner> additionalRoutes) {
    this.additionalRoutes = additionalRoutes;
  }


  public WaitingroomQueryWaitingroom cookieAttributes(WaitingroomCookieAttributes cookieAttributes) {
    this.cookieAttributes = cookieAttributes;
    return this;
  }

   /**
   * Get cookieAttributes
   * @return cookieAttributes
  **/
  @javax.annotation.Nullable
  public WaitingroomCookieAttributes getCookieAttributes() {
    return cookieAttributes;
  }

  public void setCookieAttributes(WaitingroomCookieAttributes cookieAttributes) {
    this.cookieAttributes = cookieAttributes;
  }


  public WaitingroomQueryWaitingroom cookieSuffix(String cookieSuffix) {
    this.cookieSuffix = cookieSuffix;
    return this;
  }

   /**
   * Appends a &#39;_&#39; + a custom suffix to the end of Cloudflare Waiting Room&#39;s cookie name(__cf_waitingroom). If &#x60;cookie_suffix&#x60; is \&quot;abcd\&quot;, the cookie name will be &#x60;__cf_waitingroom_abcd&#x60;. This field is required if using &#x60;additional_routes&#x60;.
   * @return cookieSuffix
  **/
  @javax.annotation.Nullable
  public String getCookieSuffix() {
    return cookieSuffix;
  }

  public void setCookieSuffix(String cookieSuffix) {
    this.cookieSuffix = cookieSuffix;
  }


  public WaitingroomQueryWaitingroom customPageHtml(String customPageHtml) {
    this.customPageHtml = customPageHtml;
    return this;
  }

   /**
   * Only available for the Waiting Room Advanced subscription. This is a template html file that will be rendered at the edge. If no custom_page_html is provided, the default waiting room will be used. The template is based on mustache ( https://mustache.github.io/ ). There are several variables that are evaluated by the Cloudflare edge: 1. {{&#x60;waitTimeKnown&#x60;}} Acts like a boolean value that indicates the behavior to take when wait time is not available, for instance when queue_all is **true**. 2. {{&#x60;waitTimeFormatted&#x60;}} Estimated wait time for the user. For example, five minutes. Alternatively, you can use: 3. {{&#x60;waitTime&#x60;}} Number of minutes of estimated wait for a user. 4. {{&#x60;waitTimeHours&#x60;}} Number of hours of estimated wait for a user (&#x60;Math.floor(waitTime/60)&#x60;). 5. {{&#x60;waitTimeHourMinutes&#x60;}} Number of minutes above the &#x60;waitTimeHours&#x60; value (&#x60;waitTime%60&#x60;). 6. {{&#x60;queueIsFull&#x60;}} Changes to **true** when no more people can be added to the queue.  To view the full list of variables, look at the &#x60;cfWaitingRoom&#x60; object described under the &#x60;json_response_enabled&#x60; property in other Waiting Room API calls.
   * @return customPageHtml
  **/
  @javax.annotation.Nullable
  public String getCustomPageHtml() {
    return customPageHtml;
  }

  public void setCustomPageHtml(String customPageHtml) {
    this.customPageHtml = customPageHtml;
  }


  public WaitingroomQueryWaitingroom defaultTemplateLanguage(WaitingroomDefaultTemplateLanguage defaultTemplateLanguage) {
    this.defaultTemplateLanguage = defaultTemplateLanguage;
    return this;
  }

   /**
   * Get defaultTemplateLanguage
   * @return defaultTemplateLanguage
  **/
  @javax.annotation.Nullable
  public WaitingroomDefaultTemplateLanguage getDefaultTemplateLanguage() {
    return defaultTemplateLanguage;
  }

  public void setDefaultTemplateLanguage(WaitingroomDefaultTemplateLanguage defaultTemplateLanguage) {
    this.defaultTemplateLanguage = defaultTemplateLanguage;
  }


  public WaitingroomQueryWaitingroom description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A note that you can use to add more details about the waiting room.
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public WaitingroomQueryWaitingroom disableSessionRenewal(Boolean disableSessionRenewal) {
    this.disableSessionRenewal = disableSessionRenewal;
    return this;
  }

   /**
   * Only available for the Waiting Room Advanced subscription. Disables automatic renewal of session cookies. If &#x60;true&#x60;, an accepted user will have session_duration minutes to browse the site. After that, they will have to go through the waiting room again. If &#x60;false&#x60;, a user&#39;s session cookie will be automatically renewed on every request.
   * @return disableSessionRenewal
  **/
  @javax.annotation.Nullable
  public Boolean getDisableSessionRenewal() {
    return disableSessionRenewal;
  }

  public void setDisableSessionRenewal(Boolean disableSessionRenewal) {
    this.disableSessionRenewal = disableSessionRenewal;
  }


  public WaitingroomQueryWaitingroom host(String host) {
    this.host = host;
    return this;
  }

   /**
   * The host name to which the waiting room will be applied (no wildcards). Please do not include the scheme (http:// or https://). The host and path combination must be unique.
   * @return host
  **/
  @javax.annotation.Nonnull
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }


  public WaitingroomQueryWaitingroom jsonResponseEnabled(Boolean jsonResponseEnabled) {
    this.jsonResponseEnabled = jsonResponseEnabled;
    return this;
  }

   /**
   * Only available for the Waiting Room Advanced subscription. If &#x60;true&#x60;, requests to the waiting room with the header &#x60;Accept: application/json&#x60; will receive a JSON response object with information on the user&#39;s status in the waiting room as opposed to the configured static HTML page. This JSON response object has one property &#x60;cfWaitingRoom&#x60; which is an object containing the following fields: 1. &#x60;inWaitingRoom&#x60;: Boolean indicating if the user is in the waiting room (always **true**). 2. &#x60;waitTimeKnown&#x60;: Boolean indicating if the current estimated wait times are accurate. If **false**, they are not available. 3. &#x60;waitTime&#x60;: Valid only when &#x60;waitTimeKnown&#x60; is **true**. Integer indicating the current estimated time in minutes the user will wait in the waiting room. When &#x60;queueingMethod&#x60; is **random**, this is set to &#x60;waitTime50Percentile&#x60;. 4. &#x60;waitTime25Percentile&#x60;: Valid only when &#x60;queueingMethod&#x60; is **random** and &#x60;waitTimeKnown&#x60; is **true**. Integer indicating the current estimated maximum wait time for the 25% of users that gain entry the fastest (25th percentile). 5. &#x60;waitTime50Percentile&#x60;: Valid only when &#x60;queueingMethod&#x60; is **random** and &#x60;waitTimeKnown&#x60; is **true**. Integer indicating the current estimated maximum wait time for the 50% of users that gain entry the fastest (50th percentile). In other words, half of the queued users are expected to let into the origin website before &#x60;waitTime50Percentile&#x60; and half are expected to be let in after it. 6. &#x60;waitTime75Percentile&#x60;: Valid only when &#x60;queueingMethod&#x60; is **random** and &#x60;waitTimeKnown&#x60; is **true**. Integer indicating the current estimated maximum wait time for the 75% of users that gain entry the fastest (75th percentile). 7. &#x60;waitTimeFormatted&#x60;: String displaying the &#x60;waitTime&#x60; formatted in English for users. If &#x60;waitTimeKnown&#x60; is **false**, &#x60;waitTimeFormatted&#x60; will display **unavailable**. 8. &#x60;queueIsFull&#x60;: Boolean indicating if the waiting room&#39;s queue is currently full and not accepting new users at the moment. 9. &#x60;queueAll&#x60;: Boolean indicating if all users will be queued in the waiting room and no one will be let into the origin website. 10. &#x60;lastUpdated&#x60;: String displaying the timestamp as an ISO 8601 string of the user&#39;s last attempt to leave the waiting room and be let into the origin website. The user is able to make another attempt after &#x60;refreshIntervalSeconds&#x60; past this time. If the user makes a request too soon, it will be ignored and &#x60;lastUpdated&#x60; will not change. 11. &#x60;refreshIntervalSeconds&#x60;: Integer indicating the number of seconds after &#x60;lastUpdated&#x60; until the user is able to make another attempt to leave the waiting room and be let into the origin website. When the &#x60;queueingMethod&#x60; is &#x60;reject&#x60;, there is no specified refresh time — it will always be **zero**. 12. &#x60;queueingMethod&#x60;: The queueing method currently used by the waiting room. It is either **fifo**, **random**, **passthrough**, or **reject**. 13. &#x60;isFIFOQueue&#x60;: Boolean indicating if the waiting room uses a FIFO (First-In-First-Out) queue. 14. &#x60;isRandomQueue&#x60;: Boolean indicating if the waiting room uses a Random queue where users gain access randomly. 15. &#x60;isPassthroughQueue&#x60;: Boolean indicating if the waiting room uses a passthrough queue. Keep in mind that when passthrough is enabled, this JSON response will only exist when &#x60;queueAll&#x60; is **true** or &#x60;isEventPrequeueing&#x60; is **true** because in all other cases requests will go directly to the origin. 16. &#x60;isRejectQueue&#x60;: Boolean indicating if the waiting room uses a reject queue. 17. &#x60;isEventActive&#x60;: Boolean indicating if an event is currently occurring. Events are able to change a waiting room&#39;s behavior during a specified period of time. For additional information, look at the event properties &#x60;prequeue_start_time&#x60;, &#x60;event_start_time&#x60;, and &#x60;event_end_time&#x60; in the documentation for creating waiting room events. Events are considered active between these start and end times, as well as during the prequeueing period if it exists. 18. &#x60;isEventPrequeueing&#x60;: Valid only when &#x60;isEventActive&#x60; is **true**. Boolean indicating if an event is currently prequeueing users before it starts. 19. &#x60;timeUntilEventStart&#x60;: Valid only when &#x60;isEventPrequeueing&#x60; is **true**. Integer indicating the number of minutes until the event starts. 20. &#x60;timeUntilEventStartFormatted&#x60;: String displaying the &#x60;timeUntilEventStart&#x60; formatted in English for users. If &#x60;isEventPrequeueing&#x60; is **false**, &#x60;timeUntilEventStartFormatted&#x60; will display **unavailable**. 21. &#x60;timeUntilEventEnd&#x60;: Valid only when &#x60;isEventActive&#x60; is **true**. Integer indicating the number of minutes until the event ends. 22. &#x60;timeUntilEventEndFormatted&#x60;: String displaying the &#x60;timeUntilEventEnd&#x60; formatted in English for users. If &#x60;isEventActive&#x60; is **false**, &#x60;timeUntilEventEndFormatted&#x60; will display **unavailable**. 23. &#x60;shuffleAtEventStart&#x60;: Valid only when &#x60;isEventActive&#x60; is **true**. Boolean indicating if the users in the prequeue are shuffled randomly when the event starts.  An example cURL to a waiting room could be:   curl -X GET \&quot;https://example.com/waitingroom\&quot; \\   -H \&quot;Accept: application/json\&quot;  If &#x60;json_response_enabled&#x60; is **true** and the request hits the waiting room, an example JSON response when &#x60;queueingMethod&#x60; is **fifo** and no event is active could be:   {   \&quot;cfWaitingRoom\&quot;: {    \&quot;inWaitingRoom\&quot;: true,    \&quot;waitTimeKnown\&quot;: true,    \&quot;waitTime\&quot;: 10,    \&quot;waitTime25Percentile\&quot;: 0,    \&quot;waitTime50Percentile\&quot;: 0,    \&quot;waitTime75Percentile\&quot;: 0,    \&quot;waitTimeFormatted\&quot;: \&quot;10 minutes\&quot;,    \&quot;queueIsFull\&quot;: false,    \&quot;queueAll\&quot;: false,    \&quot;lastUpdated\&quot;: \&quot;2020-08-03T23:46:00.000Z\&quot;,    \&quot;refreshIntervalSeconds\&quot;: 20,    \&quot;queueingMethod\&quot;: \&quot;fifo\&quot;,    \&quot;isFIFOQueue\&quot;: true,    \&quot;isRandomQueue\&quot;: false,    \&quot;isPassthroughQueue\&quot;: false,    \&quot;isRejectQueue\&quot;: false,    \&quot;isEventActive\&quot;: false,    \&quot;isEventPrequeueing\&quot;: false,    \&quot;timeUntilEventStart\&quot;: 0,    \&quot;timeUntilEventStartFormatted\&quot;: \&quot;unavailable\&quot;,    \&quot;timeUntilEventEnd\&quot;: 0,    \&quot;timeUntilEventEndFormatted\&quot;: \&quot;unavailable\&quot;,    \&quot;shuffleAtEventStart\&quot;: false   }  }  If &#x60;json_response_enabled&#x60; is **true** and the request hits the waiting room, an example JSON response when &#x60;queueingMethod&#x60; is **random** and an event is active could be:   {   \&quot;cfWaitingRoom\&quot;: {    \&quot;inWaitingRoom\&quot;: true,    \&quot;waitTimeKnown\&quot;: true,    \&quot;waitTime\&quot;: 10,    \&quot;waitTime25Percentile\&quot;: 5,    \&quot;waitTime50Percentile\&quot;: 10,    \&quot;waitTime75Percentile\&quot;: 15,    \&quot;waitTimeFormatted\&quot;: \&quot;5 minutes to 15 minutes\&quot;,    \&quot;queueIsFull\&quot;: false,    \&quot;queueAll\&quot;: false,    \&quot;lastUpdated\&quot;: \&quot;2020-08-03T23:46:00.000Z\&quot;,    \&quot;refreshIntervalSeconds\&quot;: 20,    \&quot;queueingMethod\&quot;: \&quot;random\&quot;,    \&quot;isFIFOQueue\&quot;: false,    \&quot;isRandomQueue\&quot;: true,    \&quot;isPassthroughQueue\&quot;: false,    \&quot;isRejectQueue\&quot;: false,    \&quot;isEventActive\&quot;: true,    \&quot;isEventPrequeueing\&quot;: false,    \&quot;timeUntilEventStart\&quot;: 0,    \&quot;timeUntilEventStartFormatted\&quot;: \&quot;unavailable\&quot;,    \&quot;timeUntilEventEnd\&quot;: 15,    \&quot;timeUntilEventEndFormatted\&quot;: \&quot;15 minutes\&quot;,    \&quot;shuffleAtEventStart\&quot;: true   }  }.
   * @return jsonResponseEnabled
  **/
  @javax.annotation.Nullable
  public Boolean getJsonResponseEnabled() {
    return jsonResponseEnabled;
  }

  public void setJsonResponseEnabled(Boolean jsonResponseEnabled) {
    this.jsonResponseEnabled = jsonResponseEnabled;
  }


  public WaitingroomQueryWaitingroom name(String name) {
    this.name = name;
    return this;
  }

   /**
   * A unique name to identify the waiting room. Only alphanumeric characters, hyphens and underscores are allowed.
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public WaitingroomQueryWaitingroom newUsersPerMinute(Integer newUsersPerMinute) {
    this.newUsersPerMinute = newUsersPerMinute;
    return this;
  }

   /**
   * Sets the number of new users that will be let into the route every minute. This value is used as baseline for the number of users that are let in per minute. So it is possible that there is a little more or little less traffic coming to the route based on the traffic patterns at that time around the world.
   * minimum: 200
   * maximum: 2147483647
   * @return newUsersPerMinute
  **/
  @javax.annotation.Nonnull
  public Integer getNewUsersPerMinute() {
    return newUsersPerMinute;
  }

  public void setNewUsersPerMinute(Integer newUsersPerMinute) {
    this.newUsersPerMinute = newUsersPerMinute;
  }


  public WaitingroomQueryWaitingroom path(String path) {
    this.path = path;
    return this;
  }

   /**
   * Sets the path within the host to enable the waiting room on. The waiting room will be enabled for all subpaths as well. If there are two waiting rooms on the same subpath, the waiting room for the most specific path will be chosen. Wildcards and query parameters are not supported.
   * @return path
  **/
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public WaitingroomQueryWaitingroom queueAll(Boolean queueAll) {
    this.queueAll = queueAll;
    return this;
  }

   /**
   * If queue_all is &#x60;true&#x60;, all the traffic that is coming to a route will be sent to the waiting room. No new traffic can get to the route once this field is set and estimated time will become unavailable.
   * @return queueAll
  **/
  @javax.annotation.Nullable
  public Boolean getQueueAll() {
    return queueAll;
  }

  public void setQueueAll(Boolean queueAll) {
    this.queueAll = queueAll;
  }


  public WaitingroomQueryWaitingroom queueingMethod(WaitingroomQueueingMethod queueingMethod) {
    this.queueingMethod = queueingMethod;
    return this;
  }

   /**
   * Get queueingMethod
   * @return queueingMethod
  **/
  @javax.annotation.Nullable
  public WaitingroomQueueingMethod getQueueingMethod() {
    return queueingMethod;
  }

  public void setQueueingMethod(WaitingroomQueueingMethod queueingMethod) {
    this.queueingMethod = queueingMethod;
  }


  public WaitingroomQueryWaitingroom queueingStatusCode(WaitingroomQueueingStatusCode queueingStatusCode) {
    this.queueingStatusCode = queueingStatusCode;
    return this;
  }

   /**
   * Get queueingStatusCode
   * @return queueingStatusCode
  **/
  @javax.annotation.Nullable
  public WaitingroomQueueingStatusCode getQueueingStatusCode() {
    return queueingStatusCode;
  }

  public void setQueueingStatusCode(WaitingroomQueueingStatusCode queueingStatusCode) {
    this.queueingStatusCode = queueingStatusCode;
  }


  public WaitingroomQueryWaitingroom sessionDuration(Integer sessionDuration) {
    this.sessionDuration = sessionDuration;
    return this;
  }

   /**
   * Lifetime of a cookie (in minutes) set by Cloudflare for users who get access to the route. If a user is not seen by Cloudflare again in that time period, they will be treated as a new user that visits the route.
   * minimum: 1
   * maximum: 30
   * @return sessionDuration
  **/
  @javax.annotation.Nullable
  public Integer getSessionDuration() {
    return sessionDuration;
  }

  public void setSessionDuration(Integer sessionDuration) {
    this.sessionDuration = sessionDuration;
  }


  public WaitingroomQueryWaitingroom suspended(Boolean suspended) {
    this.suspended = suspended;
    return this;
  }

   /**
   * Suspends or allows traffic going to the waiting room. If set to &#x60;true&#x60;, the traffic will not go to the waiting room.
   * @return suspended
  **/
  @javax.annotation.Nullable
  public Boolean getSuspended() {
    return suspended;
  }

  public void setSuspended(Boolean suspended) {
    this.suspended = suspended;
  }


  public WaitingroomQueryWaitingroom totalActiveUsers(Integer totalActiveUsers) {
    this.totalActiveUsers = totalActiveUsers;
    return this;
  }

   /**
   * Sets the total number of active user sessions on the route at a point in time. A route is a combination of host and path on which a waiting room is available. This value is used as a baseline for the total number of active user sessions on the route. It is possible to have a situation where there are more or less active users sessions on the route based on the traffic patterns at that time around the world.
   * minimum: 200
   * maximum: 2147483647
   * @return totalActiveUsers
  **/
  @javax.annotation.Nonnull
  public Integer getTotalActiveUsers() {
    return totalActiveUsers;
  }

  public void setTotalActiveUsers(Integer totalActiveUsers) {
    this.totalActiveUsers = totalActiveUsers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WaitingroomQueryWaitingroom waitingroomQueryWaitingroom = (WaitingroomQueryWaitingroom) o;
    return Objects.equals(this.additionalRoutes, waitingroomQueryWaitingroom.additionalRoutes) &&
        Objects.equals(this.cookieAttributes, waitingroomQueryWaitingroom.cookieAttributes) &&
        Objects.equals(this.cookieSuffix, waitingroomQueryWaitingroom.cookieSuffix) &&
        Objects.equals(this.customPageHtml, waitingroomQueryWaitingroom.customPageHtml) &&
        Objects.equals(this.defaultTemplateLanguage, waitingroomQueryWaitingroom.defaultTemplateLanguage) &&
        Objects.equals(this.description, waitingroomQueryWaitingroom.description) &&
        Objects.equals(this.disableSessionRenewal, waitingroomQueryWaitingroom.disableSessionRenewal) &&
        Objects.equals(this.host, waitingroomQueryWaitingroom.host) &&
        Objects.equals(this.jsonResponseEnabled, waitingroomQueryWaitingroom.jsonResponseEnabled) &&
        Objects.equals(this.name, waitingroomQueryWaitingroom.name) &&
        Objects.equals(this.newUsersPerMinute, waitingroomQueryWaitingroom.newUsersPerMinute) &&
        Objects.equals(this.path, waitingroomQueryWaitingroom.path) &&
        Objects.equals(this.queueAll, waitingroomQueryWaitingroom.queueAll) &&
        Objects.equals(this.queueingMethod, waitingroomQueryWaitingroom.queueingMethod) &&
        Objects.equals(this.queueingStatusCode, waitingroomQueryWaitingroom.queueingStatusCode) &&
        Objects.equals(this.sessionDuration, waitingroomQueryWaitingroom.sessionDuration) &&
        Objects.equals(this.suspended, waitingroomQueryWaitingroom.suspended) &&
        Objects.equals(this.totalActiveUsers, waitingroomQueryWaitingroom.totalActiveUsers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalRoutes, cookieAttributes, cookieSuffix, customPageHtml, defaultTemplateLanguage, description, disableSessionRenewal, host, jsonResponseEnabled, name, newUsersPerMinute, path, queueAll, queueingMethod, queueingStatusCode, sessionDuration, suspended, totalActiveUsers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WaitingroomQueryWaitingroom {\n");
    sb.append("    additionalRoutes: ").append(toIndentedString(additionalRoutes)).append("\n");
    sb.append("    cookieAttributes: ").append(toIndentedString(cookieAttributes)).append("\n");
    sb.append("    cookieSuffix: ").append(toIndentedString(cookieSuffix)).append("\n");
    sb.append("    customPageHtml: ").append(toIndentedString(customPageHtml)).append("\n");
    sb.append("    defaultTemplateLanguage: ").append(toIndentedString(defaultTemplateLanguage)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    disableSessionRenewal: ").append(toIndentedString(disableSessionRenewal)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    jsonResponseEnabled: ").append(toIndentedString(jsonResponseEnabled)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    newUsersPerMinute: ").append(toIndentedString(newUsersPerMinute)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    queueAll: ").append(toIndentedString(queueAll)).append("\n");
    sb.append("    queueingMethod: ").append(toIndentedString(queueingMethod)).append("\n");
    sb.append("    queueingStatusCode: ").append(toIndentedString(queueingStatusCode)).append("\n");
    sb.append("    sessionDuration: ").append(toIndentedString(sessionDuration)).append("\n");
    sb.append("    suspended: ").append(toIndentedString(suspended)).append("\n");
    sb.append("    totalActiveUsers: ").append(toIndentedString(totalActiveUsers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additional_routes");
    openapiFields.add("cookie_attributes");
    openapiFields.add("cookie_suffix");
    openapiFields.add("custom_page_html");
    openapiFields.add("default_template_language");
    openapiFields.add("description");
    openapiFields.add("disable_session_renewal");
    openapiFields.add("host");
    openapiFields.add("json_response_enabled");
    openapiFields.add("name");
    openapiFields.add("new_users_per_minute");
    openapiFields.add("path");
    openapiFields.add("queue_all");
    openapiFields.add("queueing_method");
    openapiFields.add("queueing_status_code");
    openapiFields.add("session_duration");
    openapiFields.add("suspended");
    openapiFields.add("total_active_users");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("host");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("new_users_per_minute");
    openapiRequiredFields.add("total_active_users");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to WaitingroomQueryWaitingroom
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WaitingroomQueryWaitingroom.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WaitingroomQueryWaitingroom is not found in the empty JSON string", WaitingroomQueryWaitingroom.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WaitingroomQueryWaitingroom.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WaitingroomQueryWaitingroom` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WaitingroomQueryWaitingroom.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("additional_routes") != null && !jsonObj.get("additional_routes").isJsonNull()) {
        JsonArray jsonArrayadditionalRoutes = jsonObj.getAsJsonArray("additional_routes");
        if (jsonArrayadditionalRoutes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additional_routes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additional_routes` to be an array in the JSON string but got `%s`", jsonObj.get("additional_routes").toString()));
          }

          // validate the optional field `additional_routes` (array)
          for (int i = 0; i < jsonArrayadditionalRoutes.size(); i++) {
            WaitingroomAdditionalRoutesInner.validateJsonElement(jsonArrayadditionalRoutes.get(i));
          };
        }
      }
      // validate the optional field `cookie_attributes`
      if (jsonObj.get("cookie_attributes") != null && !jsonObj.get("cookie_attributes").isJsonNull()) {
        WaitingroomCookieAttributes.validateJsonElement(jsonObj.get("cookie_attributes"));
      }
      if ((jsonObj.get("cookie_suffix") != null && !jsonObj.get("cookie_suffix").isJsonNull()) && !jsonObj.get("cookie_suffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cookie_suffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cookie_suffix").toString()));
      }
      if ((jsonObj.get("custom_page_html") != null && !jsonObj.get("custom_page_html").isJsonNull()) && !jsonObj.get("custom_page_html").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_page_html` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_page_html").toString()));
      }
      // validate the optional field `default_template_language`
      if (jsonObj.get("default_template_language") != null && !jsonObj.get("default_template_language").isJsonNull()) {
        WaitingroomDefaultTemplateLanguage.validateJsonElement(jsonObj.get("default_template_language"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      // validate the optional field `queueing_method`
      if (jsonObj.get("queueing_method") != null && !jsonObj.get("queueing_method").isJsonNull()) {
        WaitingroomQueueingMethod.validateJsonElement(jsonObj.get("queueing_method"));
      }
      // validate the optional field `queueing_status_code`
      if (jsonObj.get("queueing_status_code") != null && !jsonObj.get("queueing_status_code").isJsonNull()) {
        WaitingroomQueueingStatusCode.validateJsonElement(jsonObj.get("queueing_status_code"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WaitingroomQueryWaitingroom.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WaitingroomQueryWaitingroom' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WaitingroomQueryWaitingroom> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WaitingroomQueryWaitingroom.class));

       return (TypeAdapter<T>) new TypeAdapter<WaitingroomQueryWaitingroom>() {
           @Override
           public void write(JsonWriter out, WaitingroomQueryWaitingroom value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WaitingroomQueryWaitingroom read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WaitingroomQueryWaitingroom given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WaitingroomQueryWaitingroom
  * @throws IOException if the JSON string is invalid with respect to WaitingroomQueryWaitingroom
  */
  public static WaitingroomQueryWaitingroom fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WaitingroomQueryWaitingroom.class);
  }

 /**
  * Convert an instance of WaitingroomQueryWaitingroom to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

