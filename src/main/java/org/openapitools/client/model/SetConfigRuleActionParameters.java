/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AutoMinify;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SetConfigRuleActionParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class SetConfigRuleActionParameters {
  public static final String SERIALIZED_NAME_AUTOMATIC_HTTPS_REWRITES = "automatic_https_rewrites";
  @SerializedName(SERIALIZED_NAME_AUTOMATIC_HTTPS_REWRITES)
  private Boolean automaticHttpsRewrites;

  public static final String SERIALIZED_NAME_AUTOMINIFY = "autominify";
  @SerializedName(SERIALIZED_NAME_AUTOMINIFY)
  private AutoMinify autominify;

  public static final String SERIALIZED_NAME_BIC = "bic";
  @SerializedName(SERIALIZED_NAME_BIC)
  private Boolean bic;

  public static final String SERIALIZED_NAME_DISABLE_APPS = "disable_apps";
  @SerializedName(SERIALIZED_NAME_DISABLE_APPS)
  private Boolean disableApps;

  public static final String SERIALIZED_NAME_DISABLE_ZARAZ = "disable_zaraz";
  @SerializedName(SERIALIZED_NAME_DISABLE_ZARAZ)
  private Boolean disableZaraz;

  public static final String SERIALIZED_NAME_EMAIL_OBFUSCATION = "email_obfuscation";
  @SerializedName(SERIALIZED_NAME_EMAIL_OBFUSCATION)
  private Boolean emailObfuscation;

  public static final String SERIALIZED_NAME_HOTLINK_PROTECTION = "hotlink_protection";
  @SerializedName(SERIALIZED_NAME_HOTLINK_PROTECTION)
  private Boolean hotlinkProtection;

  public static final String SERIALIZED_NAME_MIRAGE = "mirage";
  @SerializedName(SERIALIZED_NAME_MIRAGE)
  private Boolean mirage;

  public static final String SERIALIZED_NAME_OPPORTUNISTIC_ENCRYPTION = "opportunistic_encryption";
  @SerializedName(SERIALIZED_NAME_OPPORTUNISTIC_ENCRYPTION)
  private Boolean opportunisticEncryption;

  /**
   * Configure the Polish level.
   */
  @JsonAdapter(PolishEnum.Adapter.class)
  public enum PolishEnum {
    OFF("off"),
    
    LOSSLESS("lossless"),
    
    LOSSY("lossy");

    private String value;

    PolishEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PolishEnum fromValue(String value) {
      for (PolishEnum b : PolishEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PolishEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PolishEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PolishEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PolishEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PolishEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POLISH = "polish";
  @SerializedName(SERIALIZED_NAME_POLISH)
  private PolishEnum polish;

  public static final String SERIALIZED_NAME_ROCKET_LOADER = "rocket_loader";
  @SerializedName(SERIALIZED_NAME_ROCKET_LOADER)
  private Boolean rocketLoader;

  /**
   * Configure the Security Level.
   */
  @JsonAdapter(SecurityLevelEnum.Adapter.class)
  public enum SecurityLevelEnum {
    OFF("off"),
    
    ESSENTIALLY_OFF("essentially_off"),
    
    LOW("low"),
    
    MEDIUM("medium"),
    
    HIGH("high"),
    
    UNDER_ATTACK("under_attack");

    private String value;

    SecurityLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SecurityLevelEnum fromValue(String value) {
      for (SecurityLevelEnum b : SecurityLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SecurityLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SecurityLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SecurityLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SecurityLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SecurityLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SECURITY_LEVEL = "security_level";
  @SerializedName(SERIALIZED_NAME_SECURITY_LEVEL)
  private SecurityLevelEnum securityLevel;

  public static final String SERIALIZED_NAME_SERVER_SIDE_EXCLUDES = "server_side_excludes";
  @SerializedName(SERIALIZED_NAME_SERVER_SIDE_EXCLUDES)
  private Boolean serverSideExcludes;

  /**
   * Configure the SSL level.
   */
  @JsonAdapter(SslEnum.Adapter.class)
  public enum SslEnum {
    OFF("off"),
    
    FLEXIBLE("flexible"),
    
    FULL("full"),
    
    STRICT("strict"),
    
    ORIGIN_PULL("origin_pull");

    private String value;

    SslEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SslEnum fromValue(String value) {
      for (SslEnum b : SslEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SslEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SslEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SslEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SslEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SslEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SSL = "ssl";
  @SerializedName(SERIALIZED_NAME_SSL)
  private SslEnum ssl;

  public static final String SERIALIZED_NAME_SXG = "sxg";
  @SerializedName(SERIALIZED_NAME_SXG)
  private Boolean sxg;

  public SetConfigRuleActionParameters() {
  }

  public SetConfigRuleActionParameters automaticHttpsRewrites(Boolean automaticHttpsRewrites) {
    this.automaticHttpsRewrites = automaticHttpsRewrites;
    return this;
  }

   /**
   * Turn on or off Automatic HTTPS Rewrites.
   * @return automaticHttpsRewrites
  **/
  @javax.annotation.Nullable
  public Boolean getAutomaticHttpsRewrites() {
    return automaticHttpsRewrites;
  }

  public void setAutomaticHttpsRewrites(Boolean automaticHttpsRewrites) {
    this.automaticHttpsRewrites = automaticHttpsRewrites;
  }


  public SetConfigRuleActionParameters autominify(AutoMinify autominify) {
    this.autominify = autominify;
    return this;
  }

   /**
   * Get autominify
   * @return autominify
  **/
  @javax.annotation.Nullable
  public AutoMinify getAutominify() {
    return autominify;
  }

  public void setAutominify(AutoMinify autominify) {
    this.autominify = autominify;
  }


  public SetConfigRuleActionParameters bic(Boolean bic) {
    this.bic = bic;
    return this;
  }

   /**
   * Turn on or off Browser Integrity Check.
   * @return bic
  **/
  @javax.annotation.Nullable
  public Boolean getBic() {
    return bic;
  }

  public void setBic(Boolean bic) {
    this.bic = bic;
  }


  public SetConfigRuleActionParameters disableApps(Boolean disableApps) {
    this.disableApps = disableApps;
    return this;
  }

   /**
   * Turn off all active Cloudflare Apps.
   * @return disableApps
  **/
  @javax.annotation.Nullable
  public Boolean getDisableApps() {
    return disableApps;
  }

  public void setDisableApps(Boolean disableApps) {
    this.disableApps = disableApps;
  }


  public SetConfigRuleActionParameters disableZaraz(Boolean disableZaraz) {
    this.disableZaraz = disableZaraz;
    return this;
  }

   /**
   * Turn off Zaraz.
   * @return disableZaraz
  **/
  @javax.annotation.Nullable
  public Boolean getDisableZaraz() {
    return disableZaraz;
  }

  public void setDisableZaraz(Boolean disableZaraz) {
    this.disableZaraz = disableZaraz;
  }


  public SetConfigRuleActionParameters emailObfuscation(Boolean emailObfuscation) {
    this.emailObfuscation = emailObfuscation;
    return this;
  }

   /**
   * Turn on or off Email Obfuscation.
   * @return emailObfuscation
  **/
  @javax.annotation.Nullable
  public Boolean getEmailObfuscation() {
    return emailObfuscation;
  }

  public void setEmailObfuscation(Boolean emailObfuscation) {
    this.emailObfuscation = emailObfuscation;
  }


  public SetConfigRuleActionParameters hotlinkProtection(Boolean hotlinkProtection) {
    this.hotlinkProtection = hotlinkProtection;
    return this;
  }

   /**
   * Turn on or off the Hotlink Protection.
   * @return hotlinkProtection
  **/
  @javax.annotation.Nullable
  public Boolean getHotlinkProtection() {
    return hotlinkProtection;
  }

  public void setHotlinkProtection(Boolean hotlinkProtection) {
    this.hotlinkProtection = hotlinkProtection;
  }


  public SetConfigRuleActionParameters mirage(Boolean mirage) {
    this.mirage = mirage;
    return this;
  }

   /**
   * Turn on or off Mirage.
   * @return mirage
  **/
  @javax.annotation.Nullable
  public Boolean getMirage() {
    return mirage;
  }

  public void setMirage(Boolean mirage) {
    this.mirage = mirage;
  }


  public SetConfigRuleActionParameters opportunisticEncryption(Boolean opportunisticEncryption) {
    this.opportunisticEncryption = opportunisticEncryption;
    return this;
  }

   /**
   * Turn on or off Opportunistic Encryption.
   * @return opportunisticEncryption
  **/
  @javax.annotation.Nullable
  public Boolean getOpportunisticEncryption() {
    return opportunisticEncryption;
  }

  public void setOpportunisticEncryption(Boolean opportunisticEncryption) {
    this.opportunisticEncryption = opportunisticEncryption;
  }


  public SetConfigRuleActionParameters polish(PolishEnum polish) {
    this.polish = polish;
    return this;
  }

   /**
   * Configure the Polish level.
   * @return polish
  **/
  @javax.annotation.Nullable
  public PolishEnum getPolish() {
    return polish;
  }

  public void setPolish(PolishEnum polish) {
    this.polish = polish;
  }


  public SetConfigRuleActionParameters rocketLoader(Boolean rocketLoader) {
    this.rocketLoader = rocketLoader;
    return this;
  }

   /**
   * Turn on or off Rocket Loader
   * @return rocketLoader
  **/
  @javax.annotation.Nullable
  public Boolean getRocketLoader() {
    return rocketLoader;
  }

  public void setRocketLoader(Boolean rocketLoader) {
    this.rocketLoader = rocketLoader;
  }


  public SetConfigRuleActionParameters securityLevel(SecurityLevelEnum securityLevel) {
    this.securityLevel = securityLevel;
    return this;
  }

   /**
   * Configure the Security Level.
   * @return securityLevel
  **/
  @javax.annotation.Nullable
  public SecurityLevelEnum getSecurityLevel() {
    return securityLevel;
  }

  public void setSecurityLevel(SecurityLevelEnum securityLevel) {
    this.securityLevel = securityLevel;
  }


  public SetConfigRuleActionParameters serverSideExcludes(Boolean serverSideExcludes) {
    this.serverSideExcludes = serverSideExcludes;
    return this;
  }

   /**
   * Turn on or off Server Side Excludes.
   * @return serverSideExcludes
  **/
  @javax.annotation.Nullable
  public Boolean getServerSideExcludes() {
    return serverSideExcludes;
  }

  public void setServerSideExcludes(Boolean serverSideExcludes) {
    this.serverSideExcludes = serverSideExcludes;
  }


  public SetConfigRuleActionParameters ssl(SslEnum ssl) {
    this.ssl = ssl;
    return this;
  }

   /**
   * Configure the SSL level.
   * @return ssl
  **/
  @javax.annotation.Nullable
  public SslEnum getSsl() {
    return ssl;
  }

  public void setSsl(SslEnum ssl) {
    this.ssl = ssl;
  }


  public SetConfigRuleActionParameters sxg(Boolean sxg) {
    this.sxg = sxg;
    return this;
  }

   /**
   * Turn on or off Signed Exchanges (SXG).
   * @return sxg
  **/
  @javax.annotation.Nullable
  public Boolean getSxg() {
    return sxg;
  }

  public void setSxg(Boolean sxg) {
    this.sxg = sxg;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SetConfigRuleActionParameters setConfigRuleActionParameters = (SetConfigRuleActionParameters) o;
    return Objects.equals(this.automaticHttpsRewrites, setConfigRuleActionParameters.automaticHttpsRewrites) &&
        Objects.equals(this.autominify, setConfigRuleActionParameters.autominify) &&
        Objects.equals(this.bic, setConfigRuleActionParameters.bic) &&
        Objects.equals(this.disableApps, setConfigRuleActionParameters.disableApps) &&
        Objects.equals(this.disableZaraz, setConfigRuleActionParameters.disableZaraz) &&
        Objects.equals(this.emailObfuscation, setConfigRuleActionParameters.emailObfuscation) &&
        Objects.equals(this.hotlinkProtection, setConfigRuleActionParameters.hotlinkProtection) &&
        Objects.equals(this.mirage, setConfigRuleActionParameters.mirage) &&
        Objects.equals(this.opportunisticEncryption, setConfigRuleActionParameters.opportunisticEncryption) &&
        Objects.equals(this.polish, setConfigRuleActionParameters.polish) &&
        Objects.equals(this.rocketLoader, setConfigRuleActionParameters.rocketLoader) &&
        Objects.equals(this.securityLevel, setConfigRuleActionParameters.securityLevel) &&
        Objects.equals(this.serverSideExcludes, setConfigRuleActionParameters.serverSideExcludes) &&
        Objects.equals(this.ssl, setConfigRuleActionParameters.ssl) &&
        Objects.equals(this.sxg, setConfigRuleActionParameters.sxg);
  }

  @Override
  public int hashCode() {
    return Objects.hash(automaticHttpsRewrites, autominify, bic, disableApps, disableZaraz, emailObfuscation, hotlinkProtection, mirage, opportunisticEncryption, polish, rocketLoader, securityLevel, serverSideExcludes, ssl, sxg);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SetConfigRuleActionParameters {\n");
    sb.append("    automaticHttpsRewrites: ").append(toIndentedString(automaticHttpsRewrites)).append("\n");
    sb.append("    autominify: ").append(toIndentedString(autominify)).append("\n");
    sb.append("    bic: ").append(toIndentedString(bic)).append("\n");
    sb.append("    disableApps: ").append(toIndentedString(disableApps)).append("\n");
    sb.append("    disableZaraz: ").append(toIndentedString(disableZaraz)).append("\n");
    sb.append("    emailObfuscation: ").append(toIndentedString(emailObfuscation)).append("\n");
    sb.append("    hotlinkProtection: ").append(toIndentedString(hotlinkProtection)).append("\n");
    sb.append("    mirage: ").append(toIndentedString(mirage)).append("\n");
    sb.append("    opportunisticEncryption: ").append(toIndentedString(opportunisticEncryption)).append("\n");
    sb.append("    polish: ").append(toIndentedString(polish)).append("\n");
    sb.append("    rocketLoader: ").append(toIndentedString(rocketLoader)).append("\n");
    sb.append("    securityLevel: ").append(toIndentedString(securityLevel)).append("\n");
    sb.append("    serverSideExcludes: ").append(toIndentedString(serverSideExcludes)).append("\n");
    sb.append("    ssl: ").append(toIndentedString(ssl)).append("\n");
    sb.append("    sxg: ").append(toIndentedString(sxg)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("automatic_https_rewrites");
    openapiFields.add("autominify");
    openapiFields.add("bic");
    openapiFields.add("disable_apps");
    openapiFields.add("disable_zaraz");
    openapiFields.add("email_obfuscation");
    openapiFields.add("hotlink_protection");
    openapiFields.add("mirage");
    openapiFields.add("opportunistic_encryption");
    openapiFields.add("polish");
    openapiFields.add("rocket_loader");
    openapiFields.add("security_level");
    openapiFields.add("server_side_excludes");
    openapiFields.add("ssl");
    openapiFields.add("sxg");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SetConfigRuleActionParameters
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SetConfigRuleActionParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SetConfigRuleActionParameters is not found in the empty JSON string", SetConfigRuleActionParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SetConfigRuleActionParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SetConfigRuleActionParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `autominify`
      if (jsonObj.get("autominify") != null && !jsonObj.get("autominify").isJsonNull()) {
        AutoMinify.validateJsonElement(jsonObj.get("autominify"));
      }
      if ((jsonObj.get("polish") != null && !jsonObj.get("polish").isJsonNull()) && !jsonObj.get("polish").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `polish` to be a primitive type in the JSON string but got `%s`", jsonObj.get("polish").toString()));
      }
      // validate the optional field `polish`
      if (jsonObj.get("polish") != null && !jsonObj.get("polish").isJsonNull()) {
        PolishEnum.validateJsonElement(jsonObj.get("polish"));
      }
      if ((jsonObj.get("security_level") != null && !jsonObj.get("security_level").isJsonNull()) && !jsonObj.get("security_level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `security_level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("security_level").toString()));
      }
      // validate the optional field `security_level`
      if (jsonObj.get("security_level") != null && !jsonObj.get("security_level").isJsonNull()) {
        SecurityLevelEnum.validateJsonElement(jsonObj.get("security_level"));
      }
      if ((jsonObj.get("ssl") != null && !jsonObj.get("ssl").isJsonNull()) && !jsonObj.get("ssl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssl").toString()));
      }
      // validate the optional field `ssl`
      if (jsonObj.get("ssl") != null && !jsonObj.get("ssl").isJsonNull()) {
        SslEnum.validateJsonElement(jsonObj.get("ssl"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SetConfigRuleActionParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SetConfigRuleActionParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SetConfigRuleActionParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SetConfigRuleActionParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<SetConfigRuleActionParameters>() {
           @Override
           public void write(JsonWriter out, SetConfigRuleActionParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SetConfigRuleActionParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SetConfigRuleActionParameters given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SetConfigRuleActionParameters
  * @throws IOException if the JSON string is invalid with respect to SetConfigRuleActionParameters
  */
  public static SetConfigRuleActionParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SetConfigRuleActionParameters.class);
  }

 /**
  * Convert an instance of SetConfigRuleActionParameters to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

