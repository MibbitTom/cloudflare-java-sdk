/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AccessAzureAD;
import org.openapitools.client.model.AccessCentrify;
import org.openapitools.client.model.AccessFacebook;
import org.openapitools.client.model.AccessGithub;
import org.openapitools.client.model.AccessGoogle;
import org.openapitools.client.model.AccessGoogleApps;
import org.openapitools.client.model.AccessIdentityProviderScimConfig;
import org.openapitools.client.model.AccessLinkedin;
import org.openapitools.client.model.AccessOidc;
import org.openapitools.client.model.AccessOkta;
import org.openapitools.client.model.AccessOnelogin;
import org.openapitools.client.model.AccessOnetimepin;
import org.openapitools.client.model.AccessPingone;
import org.openapitools.client.model.AccessSaml;
import org.openapitools.client.model.AccessYandex;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import invalidPackageName.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class AccessIdentityProviders extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(AccessIdentityProviders.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AccessIdentityProviders.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'AccessIdentityProviders' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AccessAzureAD> adapterAccessAzureAD = gson.getDelegateAdapter(this, TypeToken.get(AccessAzureAD.class));
            final TypeAdapter<AccessCentrify> adapterAccessCentrify = gson.getDelegateAdapter(this, TypeToken.get(AccessCentrify.class));
            final TypeAdapter<AccessFacebook> adapterAccessFacebook = gson.getDelegateAdapter(this, TypeToken.get(AccessFacebook.class));
            final TypeAdapter<AccessGithub> adapterAccessGithub = gson.getDelegateAdapter(this, TypeToken.get(AccessGithub.class));
            final TypeAdapter<AccessGoogle> adapterAccessGoogle = gson.getDelegateAdapter(this, TypeToken.get(AccessGoogle.class));
            final TypeAdapter<AccessGoogleApps> adapterAccessGoogleApps = gson.getDelegateAdapter(this, TypeToken.get(AccessGoogleApps.class));
            final TypeAdapter<AccessLinkedin> adapterAccessLinkedin = gson.getDelegateAdapter(this, TypeToken.get(AccessLinkedin.class));
            final TypeAdapter<AccessOidc> adapterAccessOidc = gson.getDelegateAdapter(this, TypeToken.get(AccessOidc.class));
            final TypeAdapter<AccessOkta> adapterAccessOkta = gson.getDelegateAdapter(this, TypeToken.get(AccessOkta.class));
            final TypeAdapter<AccessOnelogin> adapterAccessOnelogin = gson.getDelegateAdapter(this, TypeToken.get(AccessOnelogin.class));
            final TypeAdapter<AccessPingone> adapterAccessPingone = gson.getDelegateAdapter(this, TypeToken.get(AccessPingone.class));
            final TypeAdapter<AccessSaml> adapterAccessSaml = gson.getDelegateAdapter(this, TypeToken.get(AccessSaml.class));
            final TypeAdapter<AccessYandex> adapterAccessYandex = gson.getDelegateAdapter(this, TypeToken.get(AccessYandex.class));
            final TypeAdapter<AccessOnetimepin> adapterAccessOnetimepin = gson.getDelegateAdapter(this, TypeToken.get(AccessOnetimepin.class));

            return (TypeAdapter<T>) new TypeAdapter<AccessIdentityProviders>() {
                @Override
                public void write(JsonWriter out, AccessIdentityProviders value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `AccessAzureAD`
                    if (value.getActualInstance() instanceof AccessAzureAD) {
                        JsonElement element = adapterAccessAzureAD.toJsonTree((AccessAzureAD)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessCentrify`
                    if (value.getActualInstance() instanceof AccessCentrify) {
                        JsonElement element = adapterAccessCentrify.toJsonTree((AccessCentrify)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessFacebook`
                    if (value.getActualInstance() instanceof AccessFacebook) {
                        JsonElement element = adapterAccessFacebook.toJsonTree((AccessFacebook)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessGithub`
                    if (value.getActualInstance() instanceof AccessGithub) {
                        JsonElement element = adapterAccessGithub.toJsonTree((AccessGithub)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessGoogle`
                    if (value.getActualInstance() instanceof AccessGoogle) {
                        JsonElement element = adapterAccessGoogle.toJsonTree((AccessGoogle)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessGoogleApps`
                    if (value.getActualInstance() instanceof AccessGoogleApps) {
                        JsonElement element = adapterAccessGoogleApps.toJsonTree((AccessGoogleApps)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessLinkedin`
                    if (value.getActualInstance() instanceof AccessLinkedin) {
                        JsonElement element = adapterAccessLinkedin.toJsonTree((AccessLinkedin)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessOidc`
                    if (value.getActualInstance() instanceof AccessOidc) {
                        JsonElement element = adapterAccessOidc.toJsonTree((AccessOidc)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessOkta`
                    if (value.getActualInstance() instanceof AccessOkta) {
                        JsonElement element = adapterAccessOkta.toJsonTree((AccessOkta)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessOnelogin`
                    if (value.getActualInstance() instanceof AccessOnelogin) {
                        JsonElement element = adapterAccessOnelogin.toJsonTree((AccessOnelogin)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessPingone`
                    if (value.getActualInstance() instanceof AccessPingone) {
                        JsonElement element = adapterAccessPingone.toJsonTree((AccessPingone)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessSaml`
                    if (value.getActualInstance() instanceof AccessSaml) {
                        JsonElement element = adapterAccessSaml.toJsonTree((AccessSaml)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessYandex`
                    if (value.getActualInstance() instanceof AccessYandex) {
                        JsonElement element = adapterAccessYandex.toJsonTree((AccessYandex)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AccessOnetimepin`
                    if (value.getActualInstance() instanceof AccessOnetimepin) {
                        JsonElement element = adapterAccessOnetimepin.toJsonTree((AccessOnetimepin)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemas: AccessAzureAD, AccessCentrify, AccessFacebook, AccessGithub, AccessGoogle, AccessGoogleApps, AccessLinkedin, AccessOidc, AccessOkta, AccessOnelogin, AccessOnetimepin, AccessPingone, AccessSaml, AccessYandex");
                }

                @Override
                public AccessIdentityProviders read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize AccessAzureAD
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessAzureAD.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessAzureAD;
                        AccessIdentityProviders ret = new AccessIdentityProviders();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessAzureAD failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessAzureAD'", e);
                    }
                    // deserialize AccessCentrify
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessCentrify.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessCentrify;
                        AccessIdentityProviders ret = new AccessIdentityProviders();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessCentrify failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessCentrify'", e);
                    }
                    // deserialize AccessFacebook
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessFacebook.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessFacebook;
                        AccessIdentityProviders ret = new AccessIdentityProviders();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessFacebook failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessFacebook'", e);
                    }
                    // deserialize AccessGithub
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessGithub.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessGithub;
                        AccessIdentityProviders ret = new AccessIdentityProviders();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessGithub failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessGithub'", e);
                    }
                    // deserialize AccessGoogle
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessGoogle.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessGoogle;
                        AccessIdentityProviders ret = new AccessIdentityProviders();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessGoogle failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessGoogle'", e);
                    }
                    // deserialize AccessGoogleApps
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessGoogleApps.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessGoogleApps;
                        AccessIdentityProviders ret = new AccessIdentityProviders();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessGoogleApps failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessGoogleApps'", e);
                    }
                    // deserialize AccessLinkedin
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessLinkedin.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessLinkedin;
                        AccessIdentityProviders ret = new AccessIdentityProviders();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessLinkedin failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessLinkedin'", e);
                    }
                    // deserialize AccessOidc
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessOidc.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessOidc;
                        AccessIdentityProviders ret = new AccessIdentityProviders();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessOidc failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessOidc'", e);
                    }
                    // deserialize AccessOkta
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessOkta.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessOkta;
                        AccessIdentityProviders ret = new AccessIdentityProviders();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessOkta failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessOkta'", e);
                    }
                    // deserialize AccessOnelogin
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessOnelogin.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessOnelogin;
                        AccessIdentityProviders ret = new AccessIdentityProviders();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessOnelogin failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessOnelogin'", e);
                    }
                    // deserialize AccessPingone
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessPingone.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessPingone;
                        AccessIdentityProviders ret = new AccessIdentityProviders();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessPingone failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessPingone'", e);
                    }
                    // deserialize AccessSaml
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessSaml.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessSaml;
                        AccessIdentityProviders ret = new AccessIdentityProviders();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessSaml failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessSaml'", e);
                    }
                    // deserialize AccessYandex
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessYandex.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessYandex;
                        AccessIdentityProviders ret = new AccessIdentityProviders();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessYandex failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessYandex'", e);
                    }
                    // deserialize AccessOnetimepin
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessOnetimepin.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessOnetimepin;
                        AccessIdentityProviders ret = new AccessIdentityProviders();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessOnetimepin failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessOnetimepin'", e);
                    }

                    throw new IOException(String.format("Failed deserialization for AccessIdentityProviders: no class matches result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public AccessIdentityProviders() {
        super("anyOf", Boolean.FALSE);
    }

    public AccessIdentityProviders(AccessAzureAD o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessIdentityProviders(AccessCentrify o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessIdentityProviders(AccessFacebook o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessIdentityProviders(AccessGithub o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessIdentityProviders(AccessGoogle o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessIdentityProviders(AccessGoogleApps o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessIdentityProviders(AccessLinkedin o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessIdentityProviders(AccessOidc o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessIdentityProviders(AccessOkta o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessIdentityProviders(AccessOnelogin o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessIdentityProviders(AccessOnetimepin o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessIdentityProviders(AccessPingone o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessIdentityProviders(AccessSaml o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessIdentityProviders(AccessYandex o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("AccessAzureAD", AccessAzureAD.class);
        schemas.put("AccessCentrify", AccessCentrify.class);
        schemas.put("AccessFacebook", AccessFacebook.class);
        schemas.put("AccessGithub", AccessGithub.class);
        schemas.put("AccessGoogle", AccessGoogle.class);
        schemas.put("AccessGoogleApps", AccessGoogleApps.class);
        schemas.put("AccessLinkedin", AccessLinkedin.class);
        schemas.put("AccessOidc", AccessOidc.class);
        schemas.put("AccessOkta", AccessOkta.class);
        schemas.put("AccessOnelogin", AccessOnelogin.class);
        schemas.put("AccessPingone", AccessPingone.class);
        schemas.put("AccessSaml", AccessSaml.class);
        schemas.put("AccessYandex", AccessYandex.class);
        schemas.put("AccessOnetimepin", AccessOnetimepin.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return AccessIdentityProviders.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * AccessAzureAD, AccessCentrify, AccessFacebook, AccessGithub, AccessGoogle, AccessGoogleApps, AccessLinkedin, AccessOidc, AccessOkta, AccessOnelogin, AccessOnetimepin, AccessPingone, AccessSaml, AccessYandex
     *
     * It could be an instance of the 'anyOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof AccessAzureAD) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessCentrify) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessFacebook) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessGithub) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessGoogle) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessGoogleApps) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessLinkedin) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessOidc) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessOkta) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessOnelogin) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessPingone) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessSaml) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessYandex) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccessOnetimepin) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be AccessAzureAD, AccessCentrify, AccessFacebook, AccessGithub, AccessGoogle, AccessGoogleApps, AccessLinkedin, AccessOidc, AccessOkta, AccessOnelogin, AccessOnetimepin, AccessPingone, AccessSaml, AccessYandex");
    }

    /**
     * Get the actual instance, which can be the following:
     * AccessAzureAD, AccessCentrify, AccessFacebook, AccessGithub, AccessGoogle, AccessGoogleApps, AccessLinkedin, AccessOidc, AccessOkta, AccessOnelogin, AccessOnetimepin, AccessPingone, AccessSaml, AccessYandex
     *
     * @return The actual instance (AccessAzureAD, AccessCentrify, AccessFacebook, AccessGithub, AccessGoogle, AccessGoogleApps, AccessLinkedin, AccessOidc, AccessOkta, AccessOnelogin, AccessOnetimepin, AccessPingone, AccessSaml, AccessYandex)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `AccessAzureAD`. If the actual instance is not `AccessAzureAD`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessAzureAD`
     * @throws ClassCastException if the instance is not `AccessAzureAD`
     */
    public AccessAzureAD getAccessAzureAD() throws ClassCastException {
        return (AccessAzureAD)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessCentrify`. If the actual instance is not `AccessCentrify`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessCentrify`
     * @throws ClassCastException if the instance is not `AccessCentrify`
     */
    public AccessCentrify getAccessCentrify() throws ClassCastException {
        return (AccessCentrify)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessFacebook`. If the actual instance is not `AccessFacebook`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessFacebook`
     * @throws ClassCastException if the instance is not `AccessFacebook`
     */
    public AccessFacebook getAccessFacebook() throws ClassCastException {
        return (AccessFacebook)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessGithub`. If the actual instance is not `AccessGithub`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessGithub`
     * @throws ClassCastException if the instance is not `AccessGithub`
     */
    public AccessGithub getAccessGithub() throws ClassCastException {
        return (AccessGithub)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessGoogle`. If the actual instance is not `AccessGoogle`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessGoogle`
     * @throws ClassCastException if the instance is not `AccessGoogle`
     */
    public AccessGoogle getAccessGoogle() throws ClassCastException {
        return (AccessGoogle)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessGoogleApps`. If the actual instance is not `AccessGoogleApps`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessGoogleApps`
     * @throws ClassCastException if the instance is not `AccessGoogleApps`
     */
    public AccessGoogleApps getAccessGoogleApps() throws ClassCastException {
        return (AccessGoogleApps)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessLinkedin`. If the actual instance is not `AccessLinkedin`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessLinkedin`
     * @throws ClassCastException if the instance is not `AccessLinkedin`
     */
    public AccessLinkedin getAccessLinkedin() throws ClassCastException {
        return (AccessLinkedin)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessOidc`. If the actual instance is not `AccessOidc`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessOidc`
     * @throws ClassCastException if the instance is not `AccessOidc`
     */
    public AccessOidc getAccessOidc() throws ClassCastException {
        return (AccessOidc)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessOkta`. If the actual instance is not `AccessOkta`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessOkta`
     * @throws ClassCastException if the instance is not `AccessOkta`
     */
    public AccessOkta getAccessOkta() throws ClassCastException {
        return (AccessOkta)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessOnelogin`. If the actual instance is not `AccessOnelogin`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessOnelogin`
     * @throws ClassCastException if the instance is not `AccessOnelogin`
     */
    public AccessOnelogin getAccessOnelogin() throws ClassCastException {
        return (AccessOnelogin)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessPingone`. If the actual instance is not `AccessPingone`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessPingone`
     * @throws ClassCastException if the instance is not `AccessPingone`
     */
    public AccessPingone getAccessPingone() throws ClassCastException {
        return (AccessPingone)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessSaml`. If the actual instance is not `AccessSaml`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessSaml`
     * @throws ClassCastException if the instance is not `AccessSaml`
     */
    public AccessSaml getAccessSaml() throws ClassCastException {
        return (AccessSaml)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessYandex`. If the actual instance is not `AccessYandex`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessYandex`
     * @throws ClassCastException if the instance is not `AccessYandex`
     */
    public AccessYandex getAccessYandex() throws ClassCastException {
        return (AccessYandex)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccessOnetimepin`. If the actual instance is not `AccessOnetimepin`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessOnetimepin`
     * @throws ClassCastException if the instance is not `AccessOnetimepin`
     */
    public AccessOnetimepin getAccessOnetimepin() throws ClassCastException {
        return (AccessOnetimepin)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to AccessIdentityProviders
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate anyOf schemas one by one
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with AccessAzureAD
        try {
            AccessAzureAD.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessAzureAD failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessCentrify
        try {
            AccessCentrify.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessCentrify failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessFacebook
        try {
            AccessFacebook.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessFacebook failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessGithub
        try {
            AccessGithub.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessGithub failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessGoogle
        try {
            AccessGoogle.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessGoogle failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessGoogleApps
        try {
            AccessGoogleApps.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessGoogleApps failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessLinkedin
        try {
            AccessLinkedin.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessLinkedin failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessOidc
        try {
            AccessOidc.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessOidc failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessOkta
        try {
            AccessOkta.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessOkta failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessOnelogin
        try {
            AccessOnelogin.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessOnelogin failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessPingone
        try {
            AccessPingone.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessPingone failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessSaml
        try {
            AccessSaml.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessSaml failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessYandex
        try {
            AccessYandex.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessYandex failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AccessOnetimepin
        try {
            AccessOnetimepin.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessOnetimepin failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        throw new IOException(String.format("The JSON string is invalid for AccessIdentityProviders with anyOf schemas: AccessAzureAD, AccessCentrify, AccessFacebook, AccessGithub, AccessGoogle, AccessGoogleApps, AccessLinkedin, AccessOidc, AccessOkta, AccessOnelogin, AccessOnetimepin, AccessPingone, AccessSaml, AccessYandex. no class match the result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
    }

    /**
     * Create an instance of AccessIdentityProviders given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of AccessIdentityProviders
     * @throws IOException if the JSON string is invalid with respect to AccessIdentityProviders
     */
    public static AccessIdentityProviders fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, AccessIdentityProviders.class);
    }

    /**
     * Convert an instance of AccessIdentityProviders to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

