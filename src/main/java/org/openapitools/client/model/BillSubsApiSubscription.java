/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BillSubsApiComponentValue;
import org.openapitools.client.model.BillSubsApiFrequency;
import org.openapitools.client.model.BillSubsApiRatePlan;
import org.openapitools.client.model.BillSubsApiState;
import org.openapitools.client.model.BillSubsApiSubscriptionV2App;
import org.openapitools.client.model.BillSubsApiZone;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BillSubsApiSubscription
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class BillSubsApiSubscription {
  public static final String SERIALIZED_NAME_APP = "app";
  @SerializedName(SERIALIZED_NAME_APP)
  private BillSubsApiSubscriptionV2App app;

  public static final String SERIALIZED_NAME_COMPONENT_VALUES = "component_values";
  @SerializedName(SERIALIZED_NAME_COMPONENT_VALUES)
  private List<BillSubsApiComponentValue> componentValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_CURRENT_PERIOD_END = "current_period_end";
  @SerializedName(SERIALIZED_NAME_CURRENT_PERIOD_END)
  private OffsetDateTime currentPeriodEnd;

  public static final String SERIALIZED_NAME_CURRENT_PERIOD_START = "current_period_start";
  @SerializedName(SERIALIZED_NAME_CURRENT_PERIOD_START)
  private OffsetDateTime currentPeriodStart;

  public static final String SERIALIZED_NAME_FREQUENCY = "frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private BillSubsApiFrequency frequency;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private BigDecimal price;

  public static final String SERIALIZED_NAME_RATE_PLAN = "rate_plan";
  @SerializedName(SERIALIZED_NAME_RATE_PLAN)
  private BillSubsApiRatePlan ratePlan;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private BillSubsApiState state;

  public static final String SERIALIZED_NAME_ZONE = "zone";
  @SerializedName(SERIALIZED_NAME_ZONE)
  private BillSubsApiZone zone;

  public BillSubsApiSubscription() {
  }

  public BillSubsApiSubscription(
     String currency, 
     OffsetDateTime currentPeriodEnd, 
     OffsetDateTime currentPeriodStart, 
     String id, 
     BigDecimal price
  ) {
    this();
    this.currency = currency;
    this.currentPeriodEnd = currentPeriodEnd;
    this.currentPeriodStart = currentPeriodStart;
    this.id = id;
    this.price = price;
  }

  public BillSubsApiSubscription app(BillSubsApiSubscriptionV2App app) {
    this.app = app;
    return this;
  }

   /**
   * Get app
   * @return app
  **/
  @javax.annotation.Nullable
  public BillSubsApiSubscriptionV2App getApp() {
    return app;
  }

  public void setApp(BillSubsApiSubscriptionV2App app) {
    this.app = app;
  }


  public BillSubsApiSubscription componentValues(List<BillSubsApiComponentValue> componentValues) {
    this.componentValues = componentValues;
    return this;
  }

  public BillSubsApiSubscription addComponentValuesItem(BillSubsApiComponentValue componentValuesItem) {
    if (this.componentValues == null) {
      this.componentValues = new ArrayList<>();
    }
    this.componentValues.add(componentValuesItem);
    return this;
  }

   /**
   * The list of add-ons subscribed to.
   * @return componentValues
  **/
  @javax.annotation.Nullable
  public List<BillSubsApiComponentValue> getComponentValues() {
    return componentValues;
  }

  public void setComponentValues(List<BillSubsApiComponentValue> componentValues) {
    this.componentValues = componentValues;
  }


   /**
   * The monetary unit in which pricing information is displayed.
   * @return currency
  **/
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }



   /**
   * The end of the current period and also when the next billing is due.
   * @return currentPeriodEnd
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCurrentPeriodEnd() {
    return currentPeriodEnd;
  }



   /**
   * When the current billing period started. May match initial_period_start if this is the first period.
   * @return currentPeriodStart
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCurrentPeriodStart() {
    return currentPeriodStart;
  }



  public BillSubsApiSubscription frequency(BillSubsApiFrequency frequency) {
    this.frequency = frequency;
    return this;
  }

   /**
   * Get frequency
   * @return frequency
  **/
  @javax.annotation.Nullable
  public BillSubsApiFrequency getFrequency() {
    return frequency;
  }

  public void setFrequency(BillSubsApiFrequency frequency) {
    this.frequency = frequency;
  }


   /**
   * Subscription identifier tag.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



   /**
   * The price of the subscription that will be billed, in US dollars.
   * @return price
  **/
  @javax.annotation.Nullable
  public BigDecimal getPrice() {
    return price;
  }



  public BillSubsApiSubscription ratePlan(BillSubsApiRatePlan ratePlan) {
    this.ratePlan = ratePlan;
    return this;
  }

   /**
   * Get ratePlan
   * @return ratePlan
  **/
  @javax.annotation.Nullable
  public BillSubsApiRatePlan getRatePlan() {
    return ratePlan;
  }

  public void setRatePlan(BillSubsApiRatePlan ratePlan) {
    this.ratePlan = ratePlan;
  }


  public BillSubsApiSubscription state(BillSubsApiState state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  public BillSubsApiState getState() {
    return state;
  }

  public void setState(BillSubsApiState state) {
    this.state = state;
  }


  public BillSubsApiSubscription zone(BillSubsApiZone zone) {
    this.zone = zone;
    return this;
  }

   /**
   * Get zone
   * @return zone
  **/
  @javax.annotation.Nullable
  public BillSubsApiZone getZone() {
    return zone;
  }

  public void setZone(BillSubsApiZone zone) {
    this.zone = zone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BillSubsApiSubscription billSubsApiSubscription = (BillSubsApiSubscription) o;
    return Objects.equals(this.app, billSubsApiSubscription.app) &&
        Objects.equals(this.componentValues, billSubsApiSubscription.componentValues) &&
        Objects.equals(this.currency, billSubsApiSubscription.currency) &&
        Objects.equals(this.currentPeriodEnd, billSubsApiSubscription.currentPeriodEnd) &&
        Objects.equals(this.currentPeriodStart, billSubsApiSubscription.currentPeriodStart) &&
        Objects.equals(this.frequency, billSubsApiSubscription.frequency) &&
        Objects.equals(this.id, billSubsApiSubscription.id) &&
        Objects.equals(this.price, billSubsApiSubscription.price) &&
        Objects.equals(this.ratePlan, billSubsApiSubscription.ratePlan) &&
        Objects.equals(this.state, billSubsApiSubscription.state) &&
        Objects.equals(this.zone, billSubsApiSubscription.zone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(app, componentValues, currency, currentPeriodEnd, currentPeriodStart, frequency, id, price, ratePlan, state, zone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BillSubsApiSubscription {\n");
    sb.append("    app: ").append(toIndentedString(app)).append("\n");
    sb.append("    componentValues: ").append(toIndentedString(componentValues)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    currentPeriodEnd: ").append(toIndentedString(currentPeriodEnd)).append("\n");
    sb.append("    currentPeriodStart: ").append(toIndentedString(currentPeriodStart)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    ratePlan: ").append(toIndentedString(ratePlan)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    zone: ").append(toIndentedString(zone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("app");
    openapiFields.add("component_values");
    openapiFields.add("currency");
    openapiFields.add("current_period_end");
    openapiFields.add("current_period_start");
    openapiFields.add("frequency");
    openapiFields.add("id");
    openapiFields.add("price");
    openapiFields.add("rate_plan");
    openapiFields.add("state");
    openapiFields.add("zone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BillSubsApiSubscription
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BillSubsApiSubscription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BillSubsApiSubscription is not found in the empty JSON string", BillSubsApiSubscription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BillSubsApiSubscription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BillSubsApiSubscription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `app`
      if (jsonObj.get("app") != null && !jsonObj.get("app").isJsonNull()) {
        BillSubsApiSubscriptionV2App.validateJsonElement(jsonObj.get("app"));
      }
      if (jsonObj.get("component_values") != null && !jsonObj.get("component_values").isJsonNull()) {
        JsonArray jsonArraycomponentValues = jsonObj.getAsJsonArray("component_values");
        if (jsonArraycomponentValues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("component_values").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `component_values` to be an array in the JSON string but got `%s`", jsonObj.get("component_values").toString()));
          }

          // validate the optional field `component_values` (array)
          for (int i = 0; i < jsonArraycomponentValues.size(); i++) {
            BillSubsApiComponentValue.validateJsonElement(jsonArraycomponentValues.get(i));
          };
        }
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      // validate the optional field `frequency`
      if (jsonObj.get("frequency") != null && !jsonObj.get("frequency").isJsonNull()) {
        BillSubsApiFrequency.validateJsonElement(jsonObj.get("frequency"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `rate_plan`
      if (jsonObj.get("rate_plan") != null && !jsonObj.get("rate_plan").isJsonNull()) {
        BillSubsApiRatePlan.validateJsonElement(jsonObj.get("rate_plan"));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        BillSubsApiState.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `zone`
      if (jsonObj.get("zone") != null && !jsonObj.get("zone").isJsonNull()) {
        BillSubsApiZone.validateJsonElement(jsonObj.get("zone"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BillSubsApiSubscription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BillSubsApiSubscription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BillSubsApiSubscription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BillSubsApiSubscription.class));

       return (TypeAdapter<T>) new TypeAdapter<BillSubsApiSubscription>() {
           @Override
           public void write(JsonWriter out, BillSubsApiSubscription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BillSubsApiSubscription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BillSubsApiSubscription given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BillSubsApiSubscription
  * @throws IOException if the JSON string is invalid with respect to BillSubsApiSubscription
  */
  public static BillSubsApiSubscription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BillSubsApiSubscription.class);
  }

 /**
  * Convert an instance of BillSubsApiSubscription to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

