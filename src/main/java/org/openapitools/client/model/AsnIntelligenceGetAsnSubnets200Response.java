/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * AsnIntelligenceGetAsnSubnets200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class AsnIntelligenceGetAsnSubnets200Response {
  public static final String SERIALIZED_NAME_ASN = "asn";
  @SerializedName(SERIALIZED_NAME_ASN)
  private Integer asn;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private BigDecimal count;

  public static final String SERIALIZED_NAME_IP_COUNT_TOTAL = "ip_count_total";
  @SerializedName(SERIALIZED_NAME_IP_COUNT_TOTAL)
  private Integer ipCountTotal;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private BigDecimal page;

  public static final String SERIALIZED_NAME_PER_PAGE = "per_page";
  @SerializedName(SERIALIZED_NAME_PER_PAGE)
  private BigDecimal perPage;

  public static final String SERIALIZED_NAME_SUBNETS = "subnets";
  @SerializedName(SERIALIZED_NAME_SUBNETS)
  private List<String> subnets = new ArrayList<>();

  public AsnIntelligenceGetAsnSubnets200Response() {
  }

  public AsnIntelligenceGetAsnSubnets200Response asn(Integer asn) {
    this.asn = asn;
    return this;
  }

   /**
   * Get asn
   * @return asn
  **/
  @javax.annotation.Nullable
  public Integer getAsn() {
    return asn;
  }

  public void setAsn(Integer asn) {
    this.asn = asn;
  }


  public AsnIntelligenceGetAsnSubnets200Response count(BigDecimal count) {
    this.count = count;
    return this;
  }

   /**
   * Total results returned based on your search parameters.
   * @return count
  **/
  @javax.annotation.Nullable
  public BigDecimal getCount() {
    return count;
  }

  public void setCount(BigDecimal count) {
    this.count = count;
  }


  public AsnIntelligenceGetAsnSubnets200Response ipCountTotal(Integer ipCountTotal) {
    this.ipCountTotal = ipCountTotal;
    return this;
  }

   /**
   * Get ipCountTotal
   * @return ipCountTotal
  **/
  @javax.annotation.Nullable
  public Integer getIpCountTotal() {
    return ipCountTotal;
  }

  public void setIpCountTotal(Integer ipCountTotal) {
    this.ipCountTotal = ipCountTotal;
  }


  public AsnIntelligenceGetAsnSubnets200Response page(BigDecimal page) {
    this.page = page;
    return this;
  }

   /**
   * Current page within paginated list of results.
   * @return page
  **/
  @javax.annotation.Nullable
  public BigDecimal getPage() {
    return page;
  }

  public void setPage(BigDecimal page) {
    this.page = page;
  }


  public AsnIntelligenceGetAsnSubnets200Response perPage(BigDecimal perPage) {
    this.perPage = perPage;
    return this;
  }

   /**
   * Number of results per page of results.
   * @return perPage
  **/
  @javax.annotation.Nullable
  public BigDecimal getPerPage() {
    return perPage;
  }

  public void setPerPage(BigDecimal perPage) {
    this.perPage = perPage;
  }


  public AsnIntelligenceGetAsnSubnets200Response subnets(List<String> subnets) {
    this.subnets = subnets;
    return this;
  }

  public AsnIntelligenceGetAsnSubnets200Response addSubnetsItem(String subnetsItem) {
    if (this.subnets == null) {
      this.subnets = new ArrayList<>();
    }
    this.subnets.add(subnetsItem);
    return this;
  }

   /**
   * Get subnets
   * @return subnets
  **/
  @javax.annotation.Nullable
  public List<String> getSubnets() {
    return subnets;
  }

  public void setSubnets(List<String> subnets) {
    this.subnets = subnets;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AsnIntelligenceGetAsnSubnets200Response asnIntelligenceGetAsnSubnets200Response = (AsnIntelligenceGetAsnSubnets200Response) o;
    return Objects.equals(this.asn, asnIntelligenceGetAsnSubnets200Response.asn) &&
        Objects.equals(this.count, asnIntelligenceGetAsnSubnets200Response.count) &&
        Objects.equals(this.ipCountTotal, asnIntelligenceGetAsnSubnets200Response.ipCountTotal) &&
        Objects.equals(this.page, asnIntelligenceGetAsnSubnets200Response.page) &&
        Objects.equals(this.perPage, asnIntelligenceGetAsnSubnets200Response.perPage) &&
        Objects.equals(this.subnets, asnIntelligenceGetAsnSubnets200Response.subnets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(asn, count, ipCountTotal, page, perPage, subnets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AsnIntelligenceGetAsnSubnets200Response {\n");
    sb.append("    asn: ").append(toIndentedString(asn)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    ipCountTotal: ").append(toIndentedString(ipCountTotal)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    perPage: ").append(toIndentedString(perPage)).append("\n");
    sb.append("    subnets: ").append(toIndentedString(subnets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("asn");
    openapiFields.add("count");
    openapiFields.add("ip_count_total");
    openapiFields.add("page");
    openapiFields.add("per_page");
    openapiFields.add("subnets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AsnIntelligenceGetAsnSubnets200Response
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AsnIntelligenceGetAsnSubnets200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AsnIntelligenceGetAsnSubnets200Response is not found in the empty JSON string", AsnIntelligenceGetAsnSubnets200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AsnIntelligenceGetAsnSubnets200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AsnIntelligenceGetAsnSubnets200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("subnets") != null && !jsonObj.get("subnets").isJsonNull() && !jsonObj.get("subnets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subnets` to be an array in the JSON string but got `%s`", jsonObj.get("subnets").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AsnIntelligenceGetAsnSubnets200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AsnIntelligenceGetAsnSubnets200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AsnIntelligenceGetAsnSubnets200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AsnIntelligenceGetAsnSubnets200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<AsnIntelligenceGetAsnSubnets200Response>() {
           @Override
           public void write(JsonWriter out, AsnIntelligenceGetAsnSubnets200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AsnIntelligenceGetAsnSubnets200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AsnIntelligenceGetAsnSubnets200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AsnIntelligenceGetAsnSubnets200Response
  * @throws IOException if the JSON string is invalid with respect to AsnIntelligenceGetAsnSubnets200Response
  */
  public static AsnIntelligenceGetAsnSubnets200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AsnIntelligenceGetAsnSubnets200Response.class);
  }

 /**
  * Convert an instance of AsnIntelligenceGetAsnSubnets200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

