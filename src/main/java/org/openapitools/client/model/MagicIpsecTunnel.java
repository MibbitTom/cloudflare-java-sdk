/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.MagicPskMetadata;
import org.openapitools.client.model.MagicTunnelHealthCheck;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MagicIpsecTunnel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class MagicIpsecTunnel {
  public static final String SERIALIZED_NAME_ALLOW_NULL_CIPHER = "allow_null_cipher";
  @SerializedName(SERIALIZED_NAME_ALLOW_NULL_CIPHER)
  private Boolean allowNullCipher;

  public static final String SERIALIZED_NAME_CLOUDFLARE_ENDPOINT = "cloudflare_endpoint";
  @SerializedName(SERIALIZED_NAME_CLOUDFLARE_ENDPOINT)
  private String cloudflareEndpoint;

  public static final String SERIALIZED_NAME_CREATED_ON = "created_on";
  @SerializedName(SERIALIZED_NAME_CREATED_ON)
  private OffsetDateTime createdOn;

  public static final String SERIALIZED_NAME_CUSTOMER_ENDPOINT = "customer_endpoint";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ENDPOINT)
  private String customerEndpoint;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INTERFACE_ADDRESS = "interface_address";
  @SerializedName(SERIALIZED_NAME_INTERFACE_ADDRESS)
  private String interfaceAddress;

  public static final String SERIALIZED_NAME_MODIFIED_ON = "modified_on";
  @SerializedName(SERIALIZED_NAME_MODIFIED_ON)
  private OffsetDateTime modifiedOn;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PSK_METADATA = "psk_metadata";
  @SerializedName(SERIALIZED_NAME_PSK_METADATA)
  private MagicPskMetadata pskMetadata;

  public static final String SERIALIZED_NAME_REPLAY_PROTECTION = "replay_protection";
  @SerializedName(SERIALIZED_NAME_REPLAY_PROTECTION)
  private Boolean replayProtection = false;

  public static final String SERIALIZED_NAME_TUNNEL_HEALTH_CHECK = "tunnel_health_check";
  @SerializedName(SERIALIZED_NAME_TUNNEL_HEALTH_CHECK)
  private MagicTunnelHealthCheck tunnelHealthCheck;

  public MagicIpsecTunnel() {
  }

  public MagicIpsecTunnel(
     OffsetDateTime createdOn, 
     String id, 
     OffsetDateTime modifiedOn
  ) {
    this();
    this.createdOn = createdOn;
    this.id = id;
    this.modifiedOn = modifiedOn;
  }

  public MagicIpsecTunnel allowNullCipher(Boolean allowNullCipher) {
    this.allowNullCipher = allowNullCipher;
    return this;
  }

   /**
   * When &#x60;true&#x60;, the tunnel can use a null-cipher (&#x60;ENCR_NULL&#x60;) in the ESP tunnel (Phase 2).
   * @return allowNullCipher
  **/
  @javax.annotation.Nullable
  public Boolean getAllowNullCipher() {
    return allowNullCipher;
  }

  public void setAllowNullCipher(Boolean allowNullCipher) {
    this.allowNullCipher = allowNullCipher;
  }


  public MagicIpsecTunnel cloudflareEndpoint(String cloudflareEndpoint) {
    this.cloudflareEndpoint = cloudflareEndpoint;
    return this;
  }

   /**
   * The IP address assigned to the Cloudflare side of the IPsec tunnel.
   * @return cloudflareEndpoint
  **/
  @javax.annotation.Nonnull
  public String getCloudflareEndpoint() {
    return cloudflareEndpoint;
  }

  public void setCloudflareEndpoint(String cloudflareEndpoint) {
    this.cloudflareEndpoint = cloudflareEndpoint;
  }


   /**
   * The date and time the tunnel was created.
   * @return createdOn
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedOn() {
    return createdOn;
  }



  public MagicIpsecTunnel customerEndpoint(String customerEndpoint) {
    this.customerEndpoint = customerEndpoint;
    return this;
  }

   /**
   * The IP address assigned to the customer side of the IPsec tunnel. Not required, but must be set for proactive traceroutes to work.
   * @return customerEndpoint
  **/
  @javax.annotation.Nullable
  public String getCustomerEndpoint() {
    return customerEndpoint;
  }

  public void setCustomerEndpoint(String customerEndpoint) {
    this.customerEndpoint = customerEndpoint;
  }


  public MagicIpsecTunnel description(String description) {
    this.description = description;
    return this;
  }

   /**
   * An optional description forthe IPsec tunnel.
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


   /**
   * Tunnel identifier tag.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public MagicIpsecTunnel interfaceAddress(String interfaceAddress) {
    this.interfaceAddress = interfaceAddress;
    return this;
  }

   /**
   * A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
   * @return interfaceAddress
  **/
  @javax.annotation.Nonnull
  public String getInterfaceAddress() {
    return interfaceAddress;
  }

  public void setInterfaceAddress(String interfaceAddress) {
    this.interfaceAddress = interfaceAddress;
  }


   /**
   * The date and time the tunnel was last modified.
   * @return modifiedOn
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedOn() {
    return modifiedOn;
  }



  public MagicIpsecTunnel name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the IPsec tunnel. The name cannot share a name with other tunnels.
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public MagicIpsecTunnel pskMetadata(MagicPskMetadata pskMetadata) {
    this.pskMetadata = pskMetadata;
    return this;
  }

   /**
   * Get pskMetadata
   * @return pskMetadata
  **/
  @javax.annotation.Nullable
  public MagicPskMetadata getPskMetadata() {
    return pskMetadata;
  }

  public void setPskMetadata(MagicPskMetadata pskMetadata) {
    this.pskMetadata = pskMetadata;
  }


  public MagicIpsecTunnel replayProtection(Boolean replayProtection) {
    this.replayProtection = replayProtection;
    return this;
  }

   /**
   * If &#x60;true&#x60;, then IPsec replay protection will be supported in the Cloudflare-to-customer direction.
   * @return replayProtection
  **/
  @javax.annotation.Nullable
  public Boolean getReplayProtection() {
    return replayProtection;
  }

  public void setReplayProtection(Boolean replayProtection) {
    this.replayProtection = replayProtection;
  }


  public MagicIpsecTunnel tunnelHealthCheck(MagicTunnelHealthCheck tunnelHealthCheck) {
    this.tunnelHealthCheck = tunnelHealthCheck;
    return this;
  }

   /**
   * Get tunnelHealthCheck
   * @return tunnelHealthCheck
  **/
  @javax.annotation.Nullable
  public MagicTunnelHealthCheck getTunnelHealthCheck() {
    return tunnelHealthCheck;
  }

  public void setTunnelHealthCheck(MagicTunnelHealthCheck tunnelHealthCheck) {
    this.tunnelHealthCheck = tunnelHealthCheck;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MagicIpsecTunnel magicIpsecTunnel = (MagicIpsecTunnel) o;
    return Objects.equals(this.allowNullCipher, magicIpsecTunnel.allowNullCipher) &&
        Objects.equals(this.cloudflareEndpoint, magicIpsecTunnel.cloudflareEndpoint) &&
        Objects.equals(this.createdOn, magicIpsecTunnel.createdOn) &&
        Objects.equals(this.customerEndpoint, magicIpsecTunnel.customerEndpoint) &&
        Objects.equals(this.description, magicIpsecTunnel.description) &&
        Objects.equals(this.id, magicIpsecTunnel.id) &&
        Objects.equals(this.interfaceAddress, magicIpsecTunnel.interfaceAddress) &&
        Objects.equals(this.modifiedOn, magicIpsecTunnel.modifiedOn) &&
        Objects.equals(this.name, magicIpsecTunnel.name) &&
        Objects.equals(this.pskMetadata, magicIpsecTunnel.pskMetadata) &&
        Objects.equals(this.replayProtection, magicIpsecTunnel.replayProtection) &&
        Objects.equals(this.tunnelHealthCheck, magicIpsecTunnel.tunnelHealthCheck);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowNullCipher, cloudflareEndpoint, createdOn, customerEndpoint, description, id, interfaceAddress, modifiedOn, name, pskMetadata, replayProtection, tunnelHealthCheck);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MagicIpsecTunnel {\n");
    sb.append("    allowNullCipher: ").append(toIndentedString(allowNullCipher)).append("\n");
    sb.append("    cloudflareEndpoint: ").append(toIndentedString(cloudflareEndpoint)).append("\n");
    sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
    sb.append("    customerEndpoint: ").append(toIndentedString(customerEndpoint)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    interfaceAddress: ").append(toIndentedString(interfaceAddress)).append("\n");
    sb.append("    modifiedOn: ").append(toIndentedString(modifiedOn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pskMetadata: ").append(toIndentedString(pskMetadata)).append("\n");
    sb.append("    replayProtection: ").append(toIndentedString(replayProtection)).append("\n");
    sb.append("    tunnelHealthCheck: ").append(toIndentedString(tunnelHealthCheck)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allow_null_cipher");
    openapiFields.add("cloudflare_endpoint");
    openapiFields.add("created_on");
    openapiFields.add("customer_endpoint");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("interface_address");
    openapiFields.add("modified_on");
    openapiFields.add("name");
    openapiFields.add("psk_metadata");
    openapiFields.add("replay_protection");
    openapiFields.add("tunnel_health_check");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cloudflare_endpoint");
    openapiRequiredFields.add("interface_address");
    openapiRequiredFields.add("name");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MagicIpsecTunnel
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MagicIpsecTunnel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MagicIpsecTunnel is not found in the empty JSON string", MagicIpsecTunnel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MagicIpsecTunnel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MagicIpsecTunnel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MagicIpsecTunnel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("cloudflare_endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloudflare_endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cloudflare_endpoint").toString()));
      }
      if ((jsonObj.get("customer_endpoint") != null && !jsonObj.get("customer_endpoint").isJsonNull()) && !jsonObj.get("customer_endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_endpoint").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("interface_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interface_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interface_address").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `psk_metadata`
      if (jsonObj.get("psk_metadata") != null && !jsonObj.get("psk_metadata").isJsonNull()) {
        MagicPskMetadata.validateJsonElement(jsonObj.get("psk_metadata"));
      }
      // validate the optional field `tunnel_health_check`
      if (jsonObj.get("tunnel_health_check") != null && !jsonObj.get("tunnel_health_check").isJsonNull()) {
        MagicTunnelHealthCheck.validateJsonElement(jsonObj.get("tunnel_health_check"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MagicIpsecTunnel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MagicIpsecTunnel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MagicIpsecTunnel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MagicIpsecTunnel.class));

       return (TypeAdapter<T>) new TypeAdapter<MagicIpsecTunnel>() {
           @Override
           public void write(JsonWriter out, MagicIpsecTunnel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MagicIpsecTunnel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MagicIpsecTunnel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MagicIpsecTunnel
  * @throws IOException if the JSON string is invalid with respect to MagicIpsecTunnel
  */
  public static MagicIpsecTunnel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MagicIpsecTunnel.class);
  }

 /**
  * Convert an instance of MagicIpsecTunnel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

