/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AddressingIpamPrefixes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class AddressingIpamPrefixes {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ADVERTISED = "advertised";
  @SerializedName(SERIALIZED_NAME_ADVERTISED)
  private Boolean advertised;

  public static final String SERIALIZED_NAME_ADVERTISED_MODIFIED_AT = "advertised_modified_at";
  @SerializedName(SERIALIZED_NAME_ADVERTISED_MODIFIED_AT)
  private OffsetDateTime advertisedModifiedAt;

  public static final String SERIALIZED_NAME_APPROVED = "approved";
  @SerializedName(SERIALIZED_NAME_APPROVED)
  private String approved;

  public static final String SERIALIZED_NAME_ASN = "asn";
  @SerializedName(SERIALIZED_NAME_ASN)
  private Integer asn;

  public static final String SERIALIZED_NAME_CIDR = "cidr";
  @SerializedName(SERIALIZED_NAME_CIDR)
  private String cidr;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOA_DOCUMENT_ID = "loa_document_id";
  @SerializedName(SERIALIZED_NAME_LOA_DOCUMENT_ID)
  private String loaDocumentId;

  public static final String SERIALIZED_NAME_MODIFIED_AT = "modified_at";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AT)
  private OffsetDateTime modifiedAt;

  public static final String SERIALIZED_NAME_ON_DEMAND_ENABLED = "on_demand_enabled";
  @SerializedName(SERIALIZED_NAME_ON_DEMAND_ENABLED)
  private Boolean onDemandEnabled;

  public static final String SERIALIZED_NAME_ON_DEMAND_LOCKED = "on_demand_locked";
  @SerializedName(SERIALIZED_NAME_ON_DEMAND_LOCKED)
  private Boolean onDemandLocked;

  public AddressingIpamPrefixes() {
  }

  public AddressingIpamPrefixes(
     String accountId, 
     OffsetDateTime createdAt, 
     String id, 
     OffsetDateTime modifiedAt
  ) {
    this();
    this.accountId = accountId;
    this.createdAt = createdAt;
    this.id = id;
    this.modifiedAt = modifiedAt;
  }

   /**
   * Identifier
   * @return accountId
  **/
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }



  public AddressingIpamPrefixes advertised(Boolean advertised) {
    this.advertised = advertised;
    return this;
  }

   /**
   * Prefix advertisement status to the Internet. This field is only not &#39;null&#39; if on demand is enabled.
   * @return advertised
  **/
  @javax.annotation.Nullable
  public Boolean getAdvertised() {
    return advertised;
  }

  public void setAdvertised(Boolean advertised) {
    this.advertised = advertised;
  }


  public AddressingIpamPrefixes advertisedModifiedAt(OffsetDateTime advertisedModifiedAt) {
    this.advertisedModifiedAt = advertisedModifiedAt;
    return this;
  }

   /**
   * Last time the advertisement status was changed. This field is only not &#39;null&#39; if on demand is enabled.
   * @return advertisedModifiedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getAdvertisedModifiedAt() {
    return advertisedModifiedAt;
  }

  public void setAdvertisedModifiedAt(OffsetDateTime advertisedModifiedAt) {
    this.advertisedModifiedAt = advertisedModifiedAt;
  }


  public AddressingIpamPrefixes approved(String approved) {
    this.approved = approved;
    return this;
  }

   /**
   * Approval state of the prefix (P &#x3D; pending, V &#x3D; active).
   * @return approved
  **/
  @javax.annotation.Nullable
  public String getApproved() {
    return approved;
  }

  public void setApproved(String approved) {
    this.approved = approved;
  }


  public AddressingIpamPrefixes asn(Integer asn) {
    this.asn = asn;
    return this;
  }

   /**
   * Autonomous System Number (ASN) the prefix will be advertised under.
   * @return asn
  **/
  @javax.annotation.Nullable
  public Integer getAsn() {
    return asn;
  }

  public void setAsn(Integer asn) {
    this.asn = asn;
  }


  public AddressingIpamPrefixes cidr(String cidr) {
    this.cidr = cidr;
    return this;
  }

   /**
   * IP Prefix in Classless Inter-Domain Routing format.
   * @return cidr
  **/
  @javax.annotation.Nullable
  public String getCidr() {
    return cidr;
  }

  public void setCidr(String cidr) {
    this.cidr = cidr;
  }


   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  public AddressingIpamPrefixes description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description of the prefix.
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


   /**
   * Identifier
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public AddressingIpamPrefixes loaDocumentId(String loaDocumentId) {
    this.loaDocumentId = loaDocumentId;
    return this;
  }

   /**
   * Identifier for the uploaded LOA document.
   * @return loaDocumentId
  **/
  @javax.annotation.Nullable
  public String getLoaDocumentId() {
    return loaDocumentId;
  }

  public void setLoaDocumentId(String loaDocumentId) {
    this.loaDocumentId = loaDocumentId;
  }


   /**
   * Get modifiedAt
   * @return modifiedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedAt() {
    return modifiedAt;
  }



  public AddressingIpamPrefixes onDemandEnabled(Boolean onDemandEnabled) {
    this.onDemandEnabled = onDemandEnabled;
    return this;
  }

   /**
   * Whether advertisement of the prefix to the Internet may be dynamically enabled or disabled.
   * @return onDemandEnabled
  **/
  @javax.annotation.Nullable
  public Boolean getOnDemandEnabled() {
    return onDemandEnabled;
  }

  public void setOnDemandEnabled(Boolean onDemandEnabled) {
    this.onDemandEnabled = onDemandEnabled;
  }


  public AddressingIpamPrefixes onDemandLocked(Boolean onDemandLocked) {
    this.onDemandLocked = onDemandLocked;
    return this;
  }

   /**
   * Whether advertisement status of the prefix is locked, meaning it cannot be changed.
   * @return onDemandLocked
  **/
  @javax.annotation.Nullable
  public Boolean getOnDemandLocked() {
    return onDemandLocked;
  }

  public void setOnDemandLocked(Boolean onDemandLocked) {
    this.onDemandLocked = onDemandLocked;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddressingIpamPrefixes addressingIpamPrefixes = (AddressingIpamPrefixes) o;
    return Objects.equals(this.accountId, addressingIpamPrefixes.accountId) &&
        Objects.equals(this.advertised, addressingIpamPrefixes.advertised) &&
        Objects.equals(this.advertisedModifiedAt, addressingIpamPrefixes.advertisedModifiedAt) &&
        Objects.equals(this.approved, addressingIpamPrefixes.approved) &&
        Objects.equals(this.asn, addressingIpamPrefixes.asn) &&
        Objects.equals(this.cidr, addressingIpamPrefixes.cidr) &&
        Objects.equals(this.createdAt, addressingIpamPrefixes.createdAt) &&
        Objects.equals(this.description, addressingIpamPrefixes.description) &&
        Objects.equals(this.id, addressingIpamPrefixes.id) &&
        Objects.equals(this.loaDocumentId, addressingIpamPrefixes.loaDocumentId) &&
        Objects.equals(this.modifiedAt, addressingIpamPrefixes.modifiedAt) &&
        Objects.equals(this.onDemandEnabled, addressingIpamPrefixes.onDemandEnabled) &&
        Objects.equals(this.onDemandLocked, addressingIpamPrefixes.onDemandLocked);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, advertised, advertisedModifiedAt, approved, asn, cidr, createdAt, description, id, loaDocumentId, modifiedAt, onDemandEnabled, onDemandLocked);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddressingIpamPrefixes {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    advertised: ").append(toIndentedString(advertised)).append("\n");
    sb.append("    advertisedModifiedAt: ").append(toIndentedString(advertisedModifiedAt)).append("\n");
    sb.append("    approved: ").append(toIndentedString(approved)).append("\n");
    sb.append("    asn: ").append(toIndentedString(asn)).append("\n");
    sb.append("    cidr: ").append(toIndentedString(cidr)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    loaDocumentId: ").append(toIndentedString(loaDocumentId)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    onDemandEnabled: ").append(toIndentedString(onDemandEnabled)).append("\n");
    sb.append("    onDemandLocked: ").append(toIndentedString(onDemandLocked)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_id");
    openapiFields.add("advertised");
    openapiFields.add("advertised_modified_at");
    openapiFields.add("approved");
    openapiFields.add("asn");
    openapiFields.add("cidr");
    openapiFields.add("created_at");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("loa_document_id");
    openapiFields.add("modified_at");
    openapiFields.add("on_demand_enabled");
    openapiFields.add("on_demand_locked");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AddressingIpamPrefixes
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddressingIpamPrefixes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddressingIpamPrefixes is not found in the empty JSON string", AddressingIpamPrefixes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AddressingIpamPrefixes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddressingIpamPrefixes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_id") != null && !jsonObj.get("account_id").isJsonNull()) && !jsonObj.get("account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_id").toString()));
      }
      if ((jsonObj.get("approved") != null && !jsonObj.get("approved").isJsonNull()) && !jsonObj.get("approved").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approved` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approved").toString()));
      }
      if ((jsonObj.get("cidr") != null && !jsonObj.get("cidr").isJsonNull()) && !jsonObj.get("cidr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cidr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cidr").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("loa_document_id") != null && !jsonObj.get("loa_document_id").isJsonNull()) && !jsonObj.get("loa_document_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loa_document_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loa_document_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddressingIpamPrefixes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddressingIpamPrefixes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddressingIpamPrefixes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddressingIpamPrefixes.class));

       return (TypeAdapter<T>) new TypeAdapter<AddressingIpamPrefixes>() {
           @Override
           public void write(JsonWriter out, AddressingIpamPrefixes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddressingIpamPrefixes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AddressingIpamPrefixes given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AddressingIpamPrefixes
  * @throws IOException if the JSON string is invalid with respect to AddressingIpamPrefixes
  */
  public static AddressingIpamPrefixes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddressingIpamPrefixes.class);
  }

 /**
  * Convert an instance of AddressingIpamPrefixes to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

