/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.AaaMechanismType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AaaHistory
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class AaaHistory {
  public static final String SERIALIZED_NAME_ALERT_BODY = "alert_body";
  @SerializedName(SERIALIZED_NAME_ALERT_BODY)
  private String alertBody;

  public static final String SERIALIZED_NAME_ALERT_TYPE = "alert_type";
  @SerializedName(SERIALIZED_NAME_ALERT_TYPE)
  private String alertType;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MECHANISM = "mechanism";
  @SerializedName(SERIALIZED_NAME_MECHANISM)
  private String mechanism;

  public static final String SERIALIZED_NAME_MECHANISM_TYPE = "mechanism_type";
  @SerializedName(SERIALIZED_NAME_MECHANISM_TYPE)
  private AaaMechanismType mechanismType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POLICY_ID = "policy_id";
  @SerializedName(SERIALIZED_NAME_POLICY_ID)
  private String policyId;

  public static final String SERIALIZED_NAME_SENT = "sent";
  @SerializedName(SERIALIZED_NAME_SENT)
  private OffsetDateTime sent;

  public AaaHistory() {
  }

  public AaaHistory(
     String id, 
     String policyId
  ) {
    this();
    this.id = id;
    this.policyId = policyId;
  }

  public AaaHistory alertBody(String alertBody) {
    this.alertBody = alertBody;
    return this;
  }

   /**
   * Message body included in the notification sent.
   * @return alertBody
  **/
  @javax.annotation.Nullable
  public String getAlertBody() {
    return alertBody;
  }

  public void setAlertBody(String alertBody) {
    this.alertBody = alertBody;
  }


  public AaaHistory alertType(String alertType) {
    this.alertType = alertType;
    return this;
  }

   /**
   * Type of notification that has been dispatched.
   * @return alertType
  **/
  @javax.annotation.Nullable
  public String getAlertType() {
    return alertType;
  }

  public void setAlertType(String alertType) {
    this.alertType = alertType;
  }


  public AaaHistory description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description of the notification policy (if present).
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


   /**
   * UUID
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public AaaHistory mechanism(String mechanism) {
    this.mechanism = mechanism;
    return this;
  }

   /**
   * The mechanism to which the notification has been dispatched.
   * @return mechanism
  **/
  @javax.annotation.Nullable
  public String getMechanism() {
    return mechanism;
  }

  public void setMechanism(String mechanism) {
    this.mechanism = mechanism;
  }


  public AaaHistory mechanismType(AaaMechanismType mechanismType) {
    this.mechanismType = mechanismType;
    return this;
  }

   /**
   * Get mechanismType
   * @return mechanismType
  **/
  @javax.annotation.Nullable
  public AaaMechanismType getMechanismType() {
    return mechanismType;
  }

  public void setMechanismType(AaaMechanismType mechanismType) {
    this.mechanismType = mechanismType;
  }


  public AaaHistory name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the policy.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


   /**
   * The unique identifier of a notification policy
   * @return policyId
  **/
  @javax.annotation.Nullable
  public String getPolicyId() {
    return policyId;
  }



  public AaaHistory sent(OffsetDateTime sent) {
    this.sent = sent;
    return this;
  }

   /**
   * Timestamp of when the notification was dispatched in ISO 8601 format.
   * @return sent
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getSent() {
    return sent;
  }

  public void setSent(OffsetDateTime sent) {
    this.sent = sent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AaaHistory aaaHistory = (AaaHistory) o;
    return Objects.equals(this.alertBody, aaaHistory.alertBody) &&
        Objects.equals(this.alertType, aaaHistory.alertType) &&
        Objects.equals(this.description, aaaHistory.description) &&
        Objects.equals(this.id, aaaHistory.id) &&
        Objects.equals(this.mechanism, aaaHistory.mechanism) &&
        Objects.equals(this.mechanismType, aaaHistory.mechanismType) &&
        Objects.equals(this.name, aaaHistory.name) &&
        Objects.equals(this.policyId, aaaHistory.policyId) &&
        Objects.equals(this.sent, aaaHistory.sent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alertBody, alertType, description, id, mechanism, mechanismType, name, policyId, sent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AaaHistory {\n");
    sb.append("    alertBody: ").append(toIndentedString(alertBody)).append("\n");
    sb.append("    alertType: ").append(toIndentedString(alertType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    mechanism: ").append(toIndentedString(mechanism)).append("\n");
    sb.append("    mechanismType: ").append(toIndentedString(mechanismType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    policyId: ").append(toIndentedString(policyId)).append("\n");
    sb.append("    sent: ").append(toIndentedString(sent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alert_body");
    openapiFields.add("alert_type");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("mechanism");
    openapiFields.add("mechanism_type");
    openapiFields.add("name");
    openapiFields.add("policy_id");
    openapiFields.add("sent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AaaHistory
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AaaHistory.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AaaHistory is not found in the empty JSON string", AaaHistory.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AaaHistory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AaaHistory` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alert_body") != null && !jsonObj.get("alert_body").isJsonNull()) && !jsonObj.get("alert_body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alert_body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alert_body").toString()));
      }
      if ((jsonObj.get("alert_type") != null && !jsonObj.get("alert_type").isJsonNull()) && !jsonObj.get("alert_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alert_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alert_type").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("mechanism") != null && !jsonObj.get("mechanism").isJsonNull()) && !jsonObj.get("mechanism").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mechanism` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mechanism").toString()));
      }
      // validate the optional field `mechanism_type`
      if (jsonObj.get("mechanism_type") != null && !jsonObj.get("mechanism_type").isJsonNull()) {
        AaaMechanismType.validateJsonElement(jsonObj.get("mechanism_type"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("policy_id") != null && !jsonObj.get("policy_id").isJsonNull()) && !jsonObj.get("policy_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policy_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policy_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AaaHistory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AaaHistory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AaaHistory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AaaHistory.class));

       return (TypeAdapter<T>) new TypeAdapter<AaaHistory>() {
           @Override
           public void write(JsonWriter out, AaaHistory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AaaHistory read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AaaHistory given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AaaHistory
  * @throws IOException if the JSON string is invalid with respect to AaaHistory
  */
  public static AaaHistory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AaaHistory.class);
  }

 /**
  * Convert an instance of AaaHistory to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

