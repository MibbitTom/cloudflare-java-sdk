/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.CategoryOverride;
import org.openapitools.client.model.OverridesAction;
import org.openapitools.client.model.OverridesEnabled1;
import org.openapitools.client.model.OverridesSensitivityLevel2;
import org.openapitools.client.model.RuleOverride;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * A set of overrides to apply to the target ruleset.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class Overrides {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private OverridesAction action;

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private Set<CategoryOverride> categories = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private OverridesEnabled1 enabled;

  public static final String SERIALIZED_NAME_RULES = "rules";
  @SerializedName(SERIALIZED_NAME_RULES)
  private Set<RuleOverride> rules = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_SENSITIVITY_LEVEL = "sensitivity_level";
  @SerializedName(SERIALIZED_NAME_SENSITIVITY_LEVEL)
  private OverridesSensitivityLevel2 sensitivityLevel;

  public Overrides() {
  }

  public Overrides action(OverridesAction action) {
    this.action = action;
    return this;
  }

   /**
   * Get action
   * @return action
  **/
  @javax.annotation.Nullable
  public OverridesAction getAction() {
    return action;
  }

  public void setAction(OverridesAction action) {
    this.action = action;
  }


  public Overrides categories(Set<CategoryOverride> categories) {
    this.categories = categories;
    return this;
  }

  public Overrides addCategoriesItem(CategoryOverride categoriesItem) {
    if (this.categories == null) {
      this.categories = new LinkedHashSet<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

   /**
   * A list of category-level overrides. This option has the second-highest precedence after rule-level overrides.
   * @return categories
  **/
  @javax.annotation.Nullable
  public Set<CategoryOverride> getCategories() {
    return categories;
  }

  public void setCategories(Set<CategoryOverride> categories) {
    this.categories = categories;
  }


  public Overrides enabled(OverridesEnabled1 enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Get enabled
   * @return enabled
  **/
  @javax.annotation.Nullable
  public OverridesEnabled1 getEnabled() {
    return enabled;
  }

  public void setEnabled(OverridesEnabled1 enabled) {
    this.enabled = enabled;
  }


  public Overrides rules(Set<RuleOverride> rules) {
    this.rules = rules;
    return this;
  }

  public Overrides addRulesItem(RuleOverride rulesItem) {
    if (this.rules == null) {
      this.rules = new LinkedHashSet<>();
    }
    this.rules.add(rulesItem);
    return this;
  }

   /**
   * A list of rule-level overrides. This option has the highest precedence.
   * @return rules
  **/
  @javax.annotation.Nullable
  public Set<RuleOverride> getRules() {
    return rules;
  }

  public void setRules(Set<RuleOverride> rules) {
    this.rules = rules;
  }


  public Overrides sensitivityLevel(OverridesSensitivityLevel2 sensitivityLevel) {
    this.sensitivityLevel = sensitivityLevel;
    return this;
  }

   /**
   * Get sensitivityLevel
   * @return sensitivityLevel
  **/
  @javax.annotation.Nullable
  public OverridesSensitivityLevel2 getSensitivityLevel() {
    return sensitivityLevel;
  }

  public void setSensitivityLevel(OverridesSensitivityLevel2 sensitivityLevel) {
    this.sensitivityLevel = sensitivityLevel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Overrides overrides = (Overrides) o;
    return Objects.equals(this.action, overrides.action) &&
        Objects.equals(this.categories, overrides.categories) &&
        Objects.equals(this.enabled, overrides.enabled) &&
        Objects.equals(this.rules, overrides.rules) &&
        Objects.equals(this.sensitivityLevel, overrides.sensitivityLevel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, categories, enabled, rules, sensitivityLevel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Overrides {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
    sb.append("    sensitivityLevel: ").append(toIndentedString(sensitivityLevel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("categories");
    openapiFields.add("enabled");
    openapiFields.add("rules");
    openapiFields.add("sensitivity_level");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Overrides
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Overrides.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Overrides is not found in the empty JSON string", Overrides.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Overrides.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Overrides` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `action`
      if (jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) {
        OverridesAction.validateJsonElement(jsonObj.get("action"));
      }
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonNull()) {
        JsonArray jsonArraycategories = jsonObj.getAsJsonArray("categories");
        if (jsonArraycategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("categories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
          }

          // validate the optional field `categories` (array)
          for (int i = 0; i < jsonArraycategories.size(); i++) {
            CategoryOverride.validateJsonElement(jsonArraycategories.get(i));
          };
        }
      }
      // validate the optional field `enabled`
      if (jsonObj.get("enabled") != null && !jsonObj.get("enabled").isJsonNull()) {
        OverridesEnabled1.validateJsonElement(jsonObj.get("enabled"));
      }
      if (jsonObj.get("rules") != null && !jsonObj.get("rules").isJsonNull()) {
        JsonArray jsonArrayrules = jsonObj.getAsJsonArray("rules");
        if (jsonArrayrules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rules` to be an array in the JSON string but got `%s`", jsonObj.get("rules").toString()));
          }

          // validate the optional field `rules` (array)
          for (int i = 0; i < jsonArrayrules.size(); i++) {
            RuleOverride.validateJsonElement(jsonArrayrules.get(i));
          };
        }
      }
      // validate the optional field `sensitivity_level`
      if (jsonObj.get("sensitivity_level") != null && !jsonObj.get("sensitivity_level").isJsonNull()) {
        OverridesSensitivityLevel2.validateJsonElement(jsonObj.get("sensitivity_level"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Overrides.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Overrides' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Overrides> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Overrides.class));

       return (TypeAdapter<T>) new TypeAdapter<Overrides>() {
           @Override
           public void write(JsonWriter out, Overrides value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Overrides read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Overrides given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Overrides
  * @throws IOException if the JSON string is invalid with respect to Overrides
  */
  public static Overrides fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Overrides.class);
  }

 /**
  * Convert an instance of Overrides to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

