/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ZarazZarazConfigBaseConsentButtonTextTranslations;
import org.openapitools.client.model.ZarazZarazConfigBaseConsentPurposesValue;
import org.openapitools.client.model.ZarazZarazConfigBaseConsentPurposesWithTranslationsValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Consent management configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class ZarazZarazConfigBaseConsent {
  public static final String SERIALIZED_NAME_BUTTON_TEXT_TRANSLATIONS = "buttonTextTranslations";
  @SerializedName(SERIALIZED_NAME_BUTTON_TEXT_TRANSLATIONS)
  private ZarazZarazConfigBaseConsentButtonTextTranslations buttonTextTranslations;

  public static final String SERIALIZED_NAME_COMPANY_EMAIL = "companyEmail";
  @SerializedName(SERIALIZED_NAME_COMPANY_EMAIL)
  private String companyEmail;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "companyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_COMPANY_STREET_ADDRESS = "companyStreetAddress";
  @SerializedName(SERIALIZED_NAME_COMPANY_STREET_ADDRESS)
  private String companyStreetAddress;

  public static final String SERIALIZED_NAME_CONSENT_MODAL_INTRO_H_T_M_L = "consentModalIntroHTML";
  @SerializedName(SERIALIZED_NAME_CONSENT_MODAL_INTRO_H_T_M_L)
  private String consentModalIntroHTML;

  public static final String SERIALIZED_NAME_CONSENT_MODAL_INTRO_H_T_M_L_WITH_TRANSLATIONS = "consentModalIntroHTMLWithTranslations";
  @SerializedName(SERIALIZED_NAME_CONSENT_MODAL_INTRO_H_T_M_L_WITH_TRANSLATIONS)
  private Map<String, String> consentModalIntroHTMLWithTranslations = new HashMap<>();

  public static final String SERIALIZED_NAME_COOKIE_NAME = "cookieName";
  @SerializedName(SERIALIZED_NAME_COOKIE_NAME)
  private String cookieName;

  public static final String SERIALIZED_NAME_CUSTOM_C_S_S = "customCSS";
  @SerializedName(SERIALIZED_NAME_CUSTOM_C_S_S)
  private String customCSS;

  public static final String SERIALIZED_NAME_CUSTOM_INTRO_DISCLAIMER_DISMISSED = "customIntroDisclaimerDismissed";
  @SerializedName(SERIALIZED_NAME_CUSTOM_INTRO_DISCLAIMER_DISMISSED)
  private Boolean customIntroDisclaimerDismissed;

  public static final String SERIALIZED_NAME_DEFAULT_LANGUAGE = "defaultLanguage";
  @SerializedName(SERIALIZED_NAME_DEFAULT_LANGUAGE)
  private String defaultLanguage;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_HIDE_MODAL = "hideModal";
  @SerializedName(SERIALIZED_NAME_HIDE_MODAL)
  private Boolean hideModal;

  public static final String SERIALIZED_NAME_PURPOSES = "purposes";
  @SerializedName(SERIALIZED_NAME_PURPOSES)
  private Map<String, ZarazZarazConfigBaseConsentPurposesValue> purposes = new HashMap<>();

  public static final String SERIALIZED_NAME_PURPOSES_WITH_TRANSLATIONS = "purposesWithTranslations";
  @SerializedName(SERIALIZED_NAME_PURPOSES_WITH_TRANSLATIONS)
  private Map<String, ZarazZarazConfigBaseConsentPurposesWithTranslationsValue> purposesWithTranslations = new HashMap<>();

  public static final String SERIALIZED_NAME_TCF_COMPLIANT = "tcfCompliant";
  @SerializedName(SERIALIZED_NAME_TCF_COMPLIANT)
  private Boolean tcfCompliant;

  public ZarazZarazConfigBaseConsent() {
  }

  public ZarazZarazConfigBaseConsent buttonTextTranslations(ZarazZarazConfigBaseConsentButtonTextTranslations buttonTextTranslations) {
    this.buttonTextTranslations = buttonTextTranslations;
    return this;
  }

   /**
   * Get buttonTextTranslations
   * @return buttonTextTranslations
  **/
  @javax.annotation.Nullable
  public ZarazZarazConfigBaseConsentButtonTextTranslations getButtonTextTranslations() {
    return buttonTextTranslations;
  }

  public void setButtonTextTranslations(ZarazZarazConfigBaseConsentButtonTextTranslations buttonTextTranslations) {
    this.buttonTextTranslations = buttonTextTranslations;
  }


  public ZarazZarazConfigBaseConsent companyEmail(String companyEmail) {
    this.companyEmail = companyEmail;
    return this;
  }

   /**
   * Get companyEmail
   * @return companyEmail
  **/
  @javax.annotation.Nullable
  public String getCompanyEmail() {
    return companyEmail;
  }

  public void setCompanyEmail(String companyEmail) {
    this.companyEmail = companyEmail;
  }


  public ZarazZarazConfigBaseConsent companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

   /**
   * Get companyName
   * @return companyName
  **/
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }


  public ZarazZarazConfigBaseConsent companyStreetAddress(String companyStreetAddress) {
    this.companyStreetAddress = companyStreetAddress;
    return this;
  }

   /**
   * Get companyStreetAddress
   * @return companyStreetAddress
  **/
  @javax.annotation.Nullable
  public String getCompanyStreetAddress() {
    return companyStreetAddress;
  }

  public void setCompanyStreetAddress(String companyStreetAddress) {
    this.companyStreetAddress = companyStreetAddress;
  }


  public ZarazZarazConfigBaseConsent consentModalIntroHTML(String consentModalIntroHTML) {
    this.consentModalIntroHTML = consentModalIntroHTML;
    return this;
  }

   /**
   * Get consentModalIntroHTML
   * @return consentModalIntroHTML
  **/
  @javax.annotation.Nullable
  public String getConsentModalIntroHTML() {
    return consentModalIntroHTML;
  }

  public void setConsentModalIntroHTML(String consentModalIntroHTML) {
    this.consentModalIntroHTML = consentModalIntroHTML;
  }


  public ZarazZarazConfigBaseConsent consentModalIntroHTMLWithTranslations(Map<String, String> consentModalIntroHTMLWithTranslations) {
    this.consentModalIntroHTMLWithTranslations = consentModalIntroHTMLWithTranslations;
    return this;
  }

  public ZarazZarazConfigBaseConsent putConsentModalIntroHTMLWithTranslationsItem(String key, String consentModalIntroHTMLWithTranslationsItem) {
    if (this.consentModalIntroHTMLWithTranslations == null) {
      this.consentModalIntroHTMLWithTranslations = new HashMap<>();
    }
    this.consentModalIntroHTMLWithTranslations.put(key, consentModalIntroHTMLWithTranslationsItem);
    return this;
  }

   /**
   * Object where keys are language codes
   * @return consentModalIntroHTMLWithTranslations
  **/
  @javax.annotation.Nullable
  public Map<String, String> getConsentModalIntroHTMLWithTranslations() {
    return consentModalIntroHTMLWithTranslations;
  }

  public void setConsentModalIntroHTMLWithTranslations(Map<String, String> consentModalIntroHTMLWithTranslations) {
    this.consentModalIntroHTMLWithTranslations = consentModalIntroHTMLWithTranslations;
  }


  public ZarazZarazConfigBaseConsent cookieName(String cookieName) {
    this.cookieName = cookieName;
    return this;
  }

   /**
   * Get cookieName
   * @return cookieName
  **/
  @javax.annotation.Nullable
  public String getCookieName() {
    return cookieName;
  }

  public void setCookieName(String cookieName) {
    this.cookieName = cookieName;
  }


  public ZarazZarazConfigBaseConsent customCSS(String customCSS) {
    this.customCSS = customCSS;
    return this;
  }

   /**
   * Get customCSS
   * @return customCSS
  **/
  @javax.annotation.Nullable
  public String getCustomCSS() {
    return customCSS;
  }

  public void setCustomCSS(String customCSS) {
    this.customCSS = customCSS;
  }


  public ZarazZarazConfigBaseConsent customIntroDisclaimerDismissed(Boolean customIntroDisclaimerDismissed) {
    this.customIntroDisclaimerDismissed = customIntroDisclaimerDismissed;
    return this;
  }

   /**
   * Get customIntroDisclaimerDismissed
   * @return customIntroDisclaimerDismissed
  **/
  @javax.annotation.Nullable
  public Boolean getCustomIntroDisclaimerDismissed() {
    return customIntroDisclaimerDismissed;
  }

  public void setCustomIntroDisclaimerDismissed(Boolean customIntroDisclaimerDismissed) {
    this.customIntroDisclaimerDismissed = customIntroDisclaimerDismissed;
  }


  public ZarazZarazConfigBaseConsent defaultLanguage(String defaultLanguage) {
    this.defaultLanguage = defaultLanguage;
    return this;
  }

   /**
   * Get defaultLanguage
   * @return defaultLanguage
  **/
  @javax.annotation.Nullable
  public String getDefaultLanguage() {
    return defaultLanguage;
  }

  public void setDefaultLanguage(String defaultLanguage) {
    this.defaultLanguage = defaultLanguage;
  }


  public ZarazZarazConfigBaseConsent enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Get enabled
   * @return enabled
  **/
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public ZarazZarazConfigBaseConsent hideModal(Boolean hideModal) {
    this.hideModal = hideModal;
    return this;
  }

   /**
   * Get hideModal
   * @return hideModal
  **/
  @javax.annotation.Nullable
  public Boolean getHideModal() {
    return hideModal;
  }

  public void setHideModal(Boolean hideModal) {
    this.hideModal = hideModal;
  }


  public ZarazZarazConfigBaseConsent purposes(Map<String, ZarazZarazConfigBaseConsentPurposesValue> purposes) {
    this.purposes = purposes;
    return this;
  }

  public ZarazZarazConfigBaseConsent putPurposesItem(String key, ZarazZarazConfigBaseConsentPurposesValue purposesItem) {
    if (this.purposes == null) {
      this.purposes = new HashMap<>();
    }
    this.purposes.put(key, purposesItem);
    return this;
  }

   /**
   * Object where keys are purpose alpha-numeric IDs
   * @return purposes
  **/
  @javax.annotation.Nullable
  public Map<String, ZarazZarazConfigBaseConsentPurposesValue> getPurposes() {
    return purposes;
  }

  public void setPurposes(Map<String, ZarazZarazConfigBaseConsentPurposesValue> purposes) {
    this.purposes = purposes;
  }


  public ZarazZarazConfigBaseConsent purposesWithTranslations(Map<String, ZarazZarazConfigBaseConsentPurposesWithTranslationsValue> purposesWithTranslations) {
    this.purposesWithTranslations = purposesWithTranslations;
    return this;
  }

  public ZarazZarazConfigBaseConsent putPurposesWithTranslationsItem(String key, ZarazZarazConfigBaseConsentPurposesWithTranslationsValue purposesWithTranslationsItem) {
    if (this.purposesWithTranslations == null) {
      this.purposesWithTranslations = new HashMap<>();
    }
    this.purposesWithTranslations.put(key, purposesWithTranslationsItem);
    return this;
  }

   /**
   * Object where keys are purpose alpha-numeric IDs
   * @return purposesWithTranslations
  **/
  @javax.annotation.Nullable
  public Map<String, ZarazZarazConfigBaseConsentPurposesWithTranslationsValue> getPurposesWithTranslations() {
    return purposesWithTranslations;
  }

  public void setPurposesWithTranslations(Map<String, ZarazZarazConfigBaseConsentPurposesWithTranslationsValue> purposesWithTranslations) {
    this.purposesWithTranslations = purposesWithTranslations;
  }


  public ZarazZarazConfigBaseConsent tcfCompliant(Boolean tcfCompliant) {
    this.tcfCompliant = tcfCompliant;
    return this;
  }

   /**
   * Get tcfCompliant
   * @return tcfCompliant
  **/
  @javax.annotation.Nullable
  public Boolean getTcfCompliant() {
    return tcfCompliant;
  }

  public void setTcfCompliant(Boolean tcfCompliant) {
    this.tcfCompliant = tcfCompliant;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ZarazZarazConfigBaseConsent zarazZarazConfigBaseConsent = (ZarazZarazConfigBaseConsent) o;
    return Objects.equals(this.buttonTextTranslations, zarazZarazConfigBaseConsent.buttonTextTranslations) &&
        Objects.equals(this.companyEmail, zarazZarazConfigBaseConsent.companyEmail) &&
        Objects.equals(this.companyName, zarazZarazConfigBaseConsent.companyName) &&
        Objects.equals(this.companyStreetAddress, zarazZarazConfigBaseConsent.companyStreetAddress) &&
        Objects.equals(this.consentModalIntroHTML, zarazZarazConfigBaseConsent.consentModalIntroHTML) &&
        Objects.equals(this.consentModalIntroHTMLWithTranslations, zarazZarazConfigBaseConsent.consentModalIntroHTMLWithTranslations) &&
        Objects.equals(this.cookieName, zarazZarazConfigBaseConsent.cookieName) &&
        Objects.equals(this.customCSS, zarazZarazConfigBaseConsent.customCSS) &&
        Objects.equals(this.customIntroDisclaimerDismissed, zarazZarazConfigBaseConsent.customIntroDisclaimerDismissed) &&
        Objects.equals(this.defaultLanguage, zarazZarazConfigBaseConsent.defaultLanguage) &&
        Objects.equals(this.enabled, zarazZarazConfigBaseConsent.enabled) &&
        Objects.equals(this.hideModal, zarazZarazConfigBaseConsent.hideModal) &&
        Objects.equals(this.purposes, zarazZarazConfigBaseConsent.purposes) &&
        Objects.equals(this.purposesWithTranslations, zarazZarazConfigBaseConsent.purposesWithTranslations) &&
        Objects.equals(this.tcfCompliant, zarazZarazConfigBaseConsent.tcfCompliant);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buttonTextTranslations, companyEmail, companyName, companyStreetAddress, consentModalIntroHTML, consentModalIntroHTMLWithTranslations, cookieName, customCSS, customIntroDisclaimerDismissed, defaultLanguage, enabled, hideModal, purposes, purposesWithTranslations, tcfCompliant);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ZarazZarazConfigBaseConsent {\n");
    sb.append("    buttonTextTranslations: ").append(toIndentedString(buttonTextTranslations)).append("\n");
    sb.append("    companyEmail: ").append(toIndentedString(companyEmail)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    companyStreetAddress: ").append(toIndentedString(companyStreetAddress)).append("\n");
    sb.append("    consentModalIntroHTML: ").append(toIndentedString(consentModalIntroHTML)).append("\n");
    sb.append("    consentModalIntroHTMLWithTranslations: ").append(toIndentedString(consentModalIntroHTMLWithTranslations)).append("\n");
    sb.append("    cookieName: ").append(toIndentedString(cookieName)).append("\n");
    sb.append("    customCSS: ").append(toIndentedString(customCSS)).append("\n");
    sb.append("    customIntroDisclaimerDismissed: ").append(toIndentedString(customIntroDisclaimerDismissed)).append("\n");
    sb.append("    defaultLanguage: ").append(toIndentedString(defaultLanguage)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    hideModal: ").append(toIndentedString(hideModal)).append("\n");
    sb.append("    purposes: ").append(toIndentedString(purposes)).append("\n");
    sb.append("    purposesWithTranslations: ").append(toIndentedString(purposesWithTranslations)).append("\n");
    sb.append("    tcfCompliant: ").append(toIndentedString(tcfCompliant)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("buttonTextTranslations");
    openapiFields.add("companyEmail");
    openapiFields.add("companyName");
    openapiFields.add("companyStreetAddress");
    openapiFields.add("consentModalIntroHTML");
    openapiFields.add("consentModalIntroHTMLWithTranslations");
    openapiFields.add("cookieName");
    openapiFields.add("customCSS");
    openapiFields.add("customIntroDisclaimerDismissed");
    openapiFields.add("defaultLanguage");
    openapiFields.add("enabled");
    openapiFields.add("hideModal");
    openapiFields.add("purposes");
    openapiFields.add("purposesWithTranslations");
    openapiFields.add("tcfCompliant");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("enabled");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ZarazZarazConfigBaseConsent
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ZarazZarazConfigBaseConsent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ZarazZarazConfigBaseConsent is not found in the empty JSON string", ZarazZarazConfigBaseConsent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ZarazZarazConfigBaseConsent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ZarazZarazConfigBaseConsent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ZarazZarazConfigBaseConsent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `buttonTextTranslations`
      if (jsonObj.get("buttonTextTranslations") != null && !jsonObj.get("buttonTextTranslations").isJsonNull()) {
        ZarazZarazConfigBaseConsentButtonTextTranslations.validateJsonElement(jsonObj.get("buttonTextTranslations"));
      }
      if ((jsonObj.get("companyEmail") != null && !jsonObj.get("companyEmail").isJsonNull()) && !jsonObj.get("companyEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyEmail").toString()));
      }
      if ((jsonObj.get("companyName") != null && !jsonObj.get("companyName").isJsonNull()) && !jsonObj.get("companyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyName").toString()));
      }
      if ((jsonObj.get("companyStreetAddress") != null && !jsonObj.get("companyStreetAddress").isJsonNull()) && !jsonObj.get("companyStreetAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyStreetAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyStreetAddress").toString()));
      }
      if ((jsonObj.get("consentModalIntroHTML") != null && !jsonObj.get("consentModalIntroHTML").isJsonNull()) && !jsonObj.get("consentModalIntroHTML").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consentModalIntroHTML` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consentModalIntroHTML").toString()));
      }
      if ((jsonObj.get("cookieName") != null && !jsonObj.get("cookieName").isJsonNull()) && !jsonObj.get("cookieName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cookieName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cookieName").toString()));
      }
      if ((jsonObj.get("customCSS") != null && !jsonObj.get("customCSS").isJsonNull()) && !jsonObj.get("customCSS").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customCSS` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customCSS").toString()));
      }
      if ((jsonObj.get("defaultLanguage") != null && !jsonObj.get("defaultLanguage").isJsonNull()) && !jsonObj.get("defaultLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultLanguage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ZarazZarazConfigBaseConsent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ZarazZarazConfigBaseConsent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ZarazZarazConfigBaseConsent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ZarazZarazConfigBaseConsent.class));

       return (TypeAdapter<T>) new TypeAdapter<ZarazZarazConfigBaseConsent>() {
           @Override
           public void write(JsonWriter out, ZarazZarazConfigBaseConsent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ZarazZarazConfigBaseConsent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ZarazZarazConfigBaseConsent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ZarazZarazConfigBaseConsent
  * @throws IOException if the JSON string is invalid with respect to ZarazZarazConfigBaseConsent
  */
  public static ZarazZarazConfigBaseConsent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ZarazZarazConfigBaseConsent.class);
  }

 /**
  * Convert an instance of ZarazZarazConfigBaseConsent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

