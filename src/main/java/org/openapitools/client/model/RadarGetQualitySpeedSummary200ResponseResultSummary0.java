/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RadarGetQualitySpeedSummary200ResponseResultSummary0
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class RadarGetQualitySpeedSummary200ResponseResultSummary0 {
  public static final String SERIALIZED_NAME_BANDWIDTH_DOWNLOAD = "bandwidthDownload";
  @SerializedName(SERIALIZED_NAME_BANDWIDTH_DOWNLOAD)
  private String bandwidthDownload;

  public static final String SERIALIZED_NAME_BANDWIDTH_UPLOAD = "bandwidthUpload";
  @SerializedName(SERIALIZED_NAME_BANDWIDTH_UPLOAD)
  private String bandwidthUpload;

  public static final String SERIALIZED_NAME_JITTER_IDLE = "jitterIdle";
  @SerializedName(SERIALIZED_NAME_JITTER_IDLE)
  private String jitterIdle;

  public static final String SERIALIZED_NAME_JITTER_LOADED = "jitterLoaded";
  @SerializedName(SERIALIZED_NAME_JITTER_LOADED)
  private String jitterLoaded;

  public static final String SERIALIZED_NAME_LATENCY_IDLE = "latencyIdle";
  @SerializedName(SERIALIZED_NAME_LATENCY_IDLE)
  private String latencyIdle;

  public static final String SERIALIZED_NAME_LATENCY_LOADED = "latencyLoaded";
  @SerializedName(SERIALIZED_NAME_LATENCY_LOADED)
  private String latencyLoaded;

  public static final String SERIALIZED_NAME_PACKET_LOSS = "packetLoss";
  @SerializedName(SERIALIZED_NAME_PACKET_LOSS)
  private String packetLoss;

  public RadarGetQualitySpeedSummary200ResponseResultSummary0() {
  }

  public RadarGetQualitySpeedSummary200ResponseResultSummary0 bandwidthDownload(String bandwidthDownload) {
    this.bandwidthDownload = bandwidthDownload;
    return this;
  }

   /**
   * Get bandwidthDownload
   * @return bandwidthDownload
  **/
  @javax.annotation.Nonnull
  public String getBandwidthDownload() {
    return bandwidthDownload;
  }

  public void setBandwidthDownload(String bandwidthDownload) {
    this.bandwidthDownload = bandwidthDownload;
  }


  public RadarGetQualitySpeedSummary200ResponseResultSummary0 bandwidthUpload(String bandwidthUpload) {
    this.bandwidthUpload = bandwidthUpload;
    return this;
  }

   /**
   * Get bandwidthUpload
   * @return bandwidthUpload
  **/
  @javax.annotation.Nonnull
  public String getBandwidthUpload() {
    return bandwidthUpload;
  }

  public void setBandwidthUpload(String bandwidthUpload) {
    this.bandwidthUpload = bandwidthUpload;
  }


  public RadarGetQualitySpeedSummary200ResponseResultSummary0 jitterIdle(String jitterIdle) {
    this.jitterIdle = jitterIdle;
    return this;
  }

   /**
   * Get jitterIdle
   * @return jitterIdle
  **/
  @javax.annotation.Nonnull
  public String getJitterIdle() {
    return jitterIdle;
  }

  public void setJitterIdle(String jitterIdle) {
    this.jitterIdle = jitterIdle;
  }


  public RadarGetQualitySpeedSummary200ResponseResultSummary0 jitterLoaded(String jitterLoaded) {
    this.jitterLoaded = jitterLoaded;
    return this;
  }

   /**
   * Get jitterLoaded
   * @return jitterLoaded
  **/
  @javax.annotation.Nonnull
  public String getJitterLoaded() {
    return jitterLoaded;
  }

  public void setJitterLoaded(String jitterLoaded) {
    this.jitterLoaded = jitterLoaded;
  }


  public RadarGetQualitySpeedSummary200ResponseResultSummary0 latencyIdle(String latencyIdle) {
    this.latencyIdle = latencyIdle;
    return this;
  }

   /**
   * Get latencyIdle
   * @return latencyIdle
  **/
  @javax.annotation.Nonnull
  public String getLatencyIdle() {
    return latencyIdle;
  }

  public void setLatencyIdle(String latencyIdle) {
    this.latencyIdle = latencyIdle;
  }


  public RadarGetQualitySpeedSummary200ResponseResultSummary0 latencyLoaded(String latencyLoaded) {
    this.latencyLoaded = latencyLoaded;
    return this;
  }

   /**
   * Get latencyLoaded
   * @return latencyLoaded
  **/
  @javax.annotation.Nonnull
  public String getLatencyLoaded() {
    return latencyLoaded;
  }

  public void setLatencyLoaded(String latencyLoaded) {
    this.latencyLoaded = latencyLoaded;
  }


  public RadarGetQualitySpeedSummary200ResponseResultSummary0 packetLoss(String packetLoss) {
    this.packetLoss = packetLoss;
    return this;
  }

   /**
   * Get packetLoss
   * @return packetLoss
  **/
  @javax.annotation.Nonnull
  public String getPacketLoss() {
    return packetLoss;
  }

  public void setPacketLoss(String packetLoss) {
    this.packetLoss = packetLoss;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RadarGetQualitySpeedSummary200ResponseResultSummary0 radarGetQualitySpeedSummary200ResponseResultSummary0 = (RadarGetQualitySpeedSummary200ResponseResultSummary0) o;
    return Objects.equals(this.bandwidthDownload, radarGetQualitySpeedSummary200ResponseResultSummary0.bandwidthDownload) &&
        Objects.equals(this.bandwidthUpload, radarGetQualitySpeedSummary200ResponseResultSummary0.bandwidthUpload) &&
        Objects.equals(this.jitterIdle, radarGetQualitySpeedSummary200ResponseResultSummary0.jitterIdle) &&
        Objects.equals(this.jitterLoaded, radarGetQualitySpeedSummary200ResponseResultSummary0.jitterLoaded) &&
        Objects.equals(this.latencyIdle, radarGetQualitySpeedSummary200ResponseResultSummary0.latencyIdle) &&
        Objects.equals(this.latencyLoaded, radarGetQualitySpeedSummary200ResponseResultSummary0.latencyLoaded) &&
        Objects.equals(this.packetLoss, radarGetQualitySpeedSummary200ResponseResultSummary0.packetLoss);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bandwidthDownload, bandwidthUpload, jitterIdle, jitterLoaded, latencyIdle, latencyLoaded, packetLoss);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RadarGetQualitySpeedSummary200ResponseResultSummary0 {\n");
    sb.append("    bandwidthDownload: ").append(toIndentedString(bandwidthDownload)).append("\n");
    sb.append("    bandwidthUpload: ").append(toIndentedString(bandwidthUpload)).append("\n");
    sb.append("    jitterIdle: ").append(toIndentedString(jitterIdle)).append("\n");
    sb.append("    jitterLoaded: ").append(toIndentedString(jitterLoaded)).append("\n");
    sb.append("    latencyIdle: ").append(toIndentedString(latencyIdle)).append("\n");
    sb.append("    latencyLoaded: ").append(toIndentedString(latencyLoaded)).append("\n");
    sb.append("    packetLoss: ").append(toIndentedString(packetLoss)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bandwidthDownload");
    openapiFields.add("bandwidthUpload");
    openapiFields.add("jitterIdle");
    openapiFields.add("jitterLoaded");
    openapiFields.add("latencyIdle");
    openapiFields.add("latencyLoaded");
    openapiFields.add("packetLoss");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("bandwidthDownload");
    openapiRequiredFields.add("bandwidthUpload");
    openapiRequiredFields.add("jitterIdle");
    openapiRequiredFields.add("jitterLoaded");
    openapiRequiredFields.add("latencyIdle");
    openapiRequiredFields.add("latencyLoaded");
    openapiRequiredFields.add("packetLoss");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RadarGetQualitySpeedSummary200ResponseResultSummary0
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RadarGetQualitySpeedSummary200ResponseResultSummary0.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RadarGetQualitySpeedSummary200ResponseResultSummary0 is not found in the empty JSON string", RadarGetQualitySpeedSummary200ResponseResultSummary0.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RadarGetQualitySpeedSummary200ResponseResultSummary0.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RadarGetQualitySpeedSummary200ResponseResultSummary0` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RadarGetQualitySpeedSummary200ResponseResultSummary0.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("bandwidthDownload").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bandwidthDownload` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bandwidthDownload").toString()));
      }
      if (!jsonObj.get("bandwidthUpload").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bandwidthUpload` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bandwidthUpload").toString()));
      }
      if (!jsonObj.get("jitterIdle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jitterIdle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jitterIdle").toString()));
      }
      if (!jsonObj.get("jitterLoaded").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jitterLoaded` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jitterLoaded").toString()));
      }
      if (!jsonObj.get("latencyIdle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latencyIdle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latencyIdle").toString()));
      }
      if (!jsonObj.get("latencyLoaded").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latencyLoaded` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latencyLoaded").toString()));
      }
      if (!jsonObj.get("packetLoss").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `packetLoss` to be a primitive type in the JSON string but got `%s`", jsonObj.get("packetLoss").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RadarGetQualitySpeedSummary200ResponseResultSummary0.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RadarGetQualitySpeedSummary200ResponseResultSummary0' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RadarGetQualitySpeedSummary200ResponseResultSummary0> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RadarGetQualitySpeedSummary200ResponseResultSummary0.class));

       return (TypeAdapter<T>) new TypeAdapter<RadarGetQualitySpeedSummary200ResponseResultSummary0>() {
           @Override
           public void write(JsonWriter out, RadarGetQualitySpeedSummary200ResponseResultSummary0 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RadarGetQualitySpeedSummary200ResponseResultSummary0 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RadarGetQualitySpeedSummary200ResponseResultSummary0 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RadarGetQualitySpeedSummary200ResponseResultSummary0
  * @throws IOException if the JSON string is invalid with respect to RadarGetQualitySpeedSummary200ResponseResultSummary0
  */
  public static RadarGetQualitySpeedSummary200ResponseResultSummary0 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RadarGetQualitySpeedSummary200ResponseResultSummary0.class);
  }

 /**
  * Convert an instance of RadarGetQualitySpeedSummary200ResponseResultSummary0 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

