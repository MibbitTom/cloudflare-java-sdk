/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RadarGetBgpHijacksEvents200ResponseResultEventsInnerTagsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * RadarGetBgpHijacksEvents200ResponseResultEventsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class RadarGetBgpHijacksEvents200ResponseResultEventsInner {
  public static final String SERIALIZED_NAME_CONFIDENCE_SCORE = "confidence_score";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE_SCORE)
  private Integer confidenceScore;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "event_type";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private Integer eventType;

  public static final String SERIALIZED_NAME_HIJACK_MSGS_COUNT = "hijack_msgs_count";
  @SerializedName(SERIALIZED_NAME_HIJACK_MSGS_COUNT)
  private Integer hijackMsgsCount;

  public static final String SERIALIZED_NAME_HIJACKER_ASN = "hijacker_asn";
  @SerializedName(SERIALIZED_NAME_HIJACKER_ASN)
  private Integer hijackerAsn;

  public static final String SERIALIZED_NAME_HIJACKER_COUNTRY = "hijacker_country";
  @SerializedName(SERIALIZED_NAME_HIJACKER_COUNTRY)
  private String hijackerCountry;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IS_STALE = "is_stale";
  @SerializedName(SERIALIZED_NAME_IS_STALE)
  private Boolean isStale;

  public static final String SERIALIZED_NAME_MAX_HIJACK_TS = "max_hijack_ts";
  @SerializedName(SERIALIZED_NAME_MAX_HIJACK_TS)
  private String maxHijackTs;

  public static final String SERIALIZED_NAME_MAX_MSG_TS = "max_msg_ts";
  @SerializedName(SERIALIZED_NAME_MAX_MSG_TS)
  private String maxMsgTs;

  public static final String SERIALIZED_NAME_MIN_HIJACK_TS = "min_hijack_ts";
  @SerializedName(SERIALIZED_NAME_MIN_HIJACK_TS)
  private String minHijackTs;

  public static final String SERIALIZED_NAME_ON_GOING_COUNT = "on_going_count";
  @SerializedName(SERIALIZED_NAME_ON_GOING_COUNT)
  private Integer onGoingCount;

  public static final String SERIALIZED_NAME_PEER_ASNS = "peer_asns";
  @SerializedName(SERIALIZED_NAME_PEER_ASNS)
  private List<Integer> peerAsns = new ArrayList<>();

  public static final String SERIALIZED_NAME_PEER_IP_COUNT = "peer_ip_count";
  @SerializedName(SERIALIZED_NAME_PEER_IP_COUNT)
  private Integer peerIpCount;

  public static final String SERIALIZED_NAME_PREFIXES = "prefixes";
  @SerializedName(SERIALIZED_NAME_PREFIXES)
  private List<String> prefixes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<RadarGetBgpHijacksEvents200ResponseResultEventsInnerTagsInner> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_VICTIM_ASNS = "victim_asns";
  @SerializedName(SERIALIZED_NAME_VICTIM_ASNS)
  private List<Integer> victimAsns = new ArrayList<>();

  public static final String SERIALIZED_NAME_VICTIM_COUNTRIES = "victim_countries";
  @SerializedName(SERIALIZED_NAME_VICTIM_COUNTRIES)
  private List<String> victimCountries = new ArrayList<>();

  public RadarGetBgpHijacksEvents200ResponseResultEventsInner() {
  }

  public RadarGetBgpHijacksEvents200ResponseResultEventsInner confidenceScore(Integer confidenceScore) {
    this.confidenceScore = confidenceScore;
    return this;
  }

   /**
   * Get confidenceScore
   * @return confidenceScore
  **/
  @javax.annotation.Nonnull
  public Integer getConfidenceScore() {
    return confidenceScore;
  }

  public void setConfidenceScore(Integer confidenceScore) {
    this.confidenceScore = confidenceScore;
  }


  public RadarGetBgpHijacksEvents200ResponseResultEventsInner duration(Integer duration) {
    this.duration = duration;
    return this;
  }

   /**
   * Get duration
   * @return duration
  **/
  @javax.annotation.Nonnull
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  public RadarGetBgpHijacksEvents200ResponseResultEventsInner eventType(Integer eventType) {
    this.eventType = eventType;
    return this;
  }

   /**
   * Get eventType
   * @return eventType
  **/
  @javax.annotation.Nonnull
  public Integer getEventType() {
    return eventType;
  }

  public void setEventType(Integer eventType) {
    this.eventType = eventType;
  }


  public RadarGetBgpHijacksEvents200ResponseResultEventsInner hijackMsgsCount(Integer hijackMsgsCount) {
    this.hijackMsgsCount = hijackMsgsCount;
    return this;
  }

   /**
   * Get hijackMsgsCount
   * @return hijackMsgsCount
  **/
  @javax.annotation.Nonnull
  public Integer getHijackMsgsCount() {
    return hijackMsgsCount;
  }

  public void setHijackMsgsCount(Integer hijackMsgsCount) {
    this.hijackMsgsCount = hijackMsgsCount;
  }


  public RadarGetBgpHijacksEvents200ResponseResultEventsInner hijackerAsn(Integer hijackerAsn) {
    this.hijackerAsn = hijackerAsn;
    return this;
  }

   /**
   * Get hijackerAsn
   * @return hijackerAsn
  **/
  @javax.annotation.Nonnull
  public Integer getHijackerAsn() {
    return hijackerAsn;
  }

  public void setHijackerAsn(Integer hijackerAsn) {
    this.hijackerAsn = hijackerAsn;
  }


  public RadarGetBgpHijacksEvents200ResponseResultEventsInner hijackerCountry(String hijackerCountry) {
    this.hijackerCountry = hijackerCountry;
    return this;
  }

   /**
   * Get hijackerCountry
   * @return hijackerCountry
  **/
  @javax.annotation.Nonnull
  public String getHijackerCountry() {
    return hijackerCountry;
  }

  public void setHijackerCountry(String hijackerCountry) {
    this.hijackerCountry = hijackerCountry;
  }


  public RadarGetBgpHijacksEvents200ResponseResultEventsInner id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public RadarGetBgpHijacksEvents200ResponseResultEventsInner isStale(Boolean isStale) {
    this.isStale = isStale;
    return this;
  }

   /**
   * Get isStale
   * @return isStale
  **/
  @javax.annotation.Nonnull
  public Boolean getIsStale() {
    return isStale;
  }

  public void setIsStale(Boolean isStale) {
    this.isStale = isStale;
  }


  public RadarGetBgpHijacksEvents200ResponseResultEventsInner maxHijackTs(String maxHijackTs) {
    this.maxHijackTs = maxHijackTs;
    return this;
  }

   /**
   * Get maxHijackTs
   * @return maxHijackTs
  **/
  @javax.annotation.Nonnull
  public String getMaxHijackTs() {
    return maxHijackTs;
  }

  public void setMaxHijackTs(String maxHijackTs) {
    this.maxHijackTs = maxHijackTs;
  }


  public RadarGetBgpHijacksEvents200ResponseResultEventsInner maxMsgTs(String maxMsgTs) {
    this.maxMsgTs = maxMsgTs;
    return this;
  }

   /**
   * Get maxMsgTs
   * @return maxMsgTs
  **/
  @javax.annotation.Nonnull
  public String getMaxMsgTs() {
    return maxMsgTs;
  }

  public void setMaxMsgTs(String maxMsgTs) {
    this.maxMsgTs = maxMsgTs;
  }


  public RadarGetBgpHijacksEvents200ResponseResultEventsInner minHijackTs(String minHijackTs) {
    this.minHijackTs = minHijackTs;
    return this;
  }

   /**
   * Get minHijackTs
   * @return minHijackTs
  **/
  @javax.annotation.Nonnull
  public String getMinHijackTs() {
    return minHijackTs;
  }

  public void setMinHijackTs(String minHijackTs) {
    this.minHijackTs = minHijackTs;
  }


  public RadarGetBgpHijacksEvents200ResponseResultEventsInner onGoingCount(Integer onGoingCount) {
    this.onGoingCount = onGoingCount;
    return this;
  }

   /**
   * Get onGoingCount
   * @return onGoingCount
  **/
  @javax.annotation.Nonnull
  public Integer getOnGoingCount() {
    return onGoingCount;
  }

  public void setOnGoingCount(Integer onGoingCount) {
    this.onGoingCount = onGoingCount;
  }


  public RadarGetBgpHijacksEvents200ResponseResultEventsInner peerAsns(List<Integer> peerAsns) {
    this.peerAsns = peerAsns;
    return this;
  }

  public RadarGetBgpHijacksEvents200ResponseResultEventsInner addPeerAsnsItem(Integer peerAsnsItem) {
    if (this.peerAsns == null) {
      this.peerAsns = new ArrayList<>();
    }
    this.peerAsns.add(peerAsnsItem);
    return this;
  }

   /**
   * Get peerAsns
   * @return peerAsns
  **/
  @javax.annotation.Nonnull
  public List<Integer> getPeerAsns() {
    return peerAsns;
  }

  public void setPeerAsns(List<Integer> peerAsns) {
    this.peerAsns = peerAsns;
  }


  public RadarGetBgpHijacksEvents200ResponseResultEventsInner peerIpCount(Integer peerIpCount) {
    this.peerIpCount = peerIpCount;
    return this;
  }

   /**
   * Get peerIpCount
   * @return peerIpCount
  **/
  @javax.annotation.Nonnull
  public Integer getPeerIpCount() {
    return peerIpCount;
  }

  public void setPeerIpCount(Integer peerIpCount) {
    this.peerIpCount = peerIpCount;
  }


  public RadarGetBgpHijacksEvents200ResponseResultEventsInner prefixes(List<String> prefixes) {
    this.prefixes = prefixes;
    return this;
  }

  public RadarGetBgpHijacksEvents200ResponseResultEventsInner addPrefixesItem(String prefixesItem) {
    if (this.prefixes == null) {
      this.prefixes = new ArrayList<>();
    }
    this.prefixes.add(prefixesItem);
    return this;
  }

   /**
   * Get prefixes
   * @return prefixes
  **/
  @javax.annotation.Nonnull
  public List<String> getPrefixes() {
    return prefixes;
  }

  public void setPrefixes(List<String> prefixes) {
    this.prefixes = prefixes;
  }


  public RadarGetBgpHijacksEvents200ResponseResultEventsInner tags(List<RadarGetBgpHijacksEvents200ResponseResultEventsInnerTagsInner> tags) {
    this.tags = tags;
    return this;
  }

  public RadarGetBgpHijacksEvents200ResponseResultEventsInner addTagsItem(RadarGetBgpHijacksEvents200ResponseResultEventsInnerTagsInner tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nonnull
  public List<RadarGetBgpHijacksEvents200ResponseResultEventsInnerTagsInner> getTags() {
    return tags;
  }

  public void setTags(List<RadarGetBgpHijacksEvents200ResponseResultEventsInnerTagsInner> tags) {
    this.tags = tags;
  }


  public RadarGetBgpHijacksEvents200ResponseResultEventsInner victimAsns(List<Integer> victimAsns) {
    this.victimAsns = victimAsns;
    return this;
  }

  public RadarGetBgpHijacksEvents200ResponseResultEventsInner addVictimAsnsItem(Integer victimAsnsItem) {
    if (this.victimAsns == null) {
      this.victimAsns = new ArrayList<>();
    }
    this.victimAsns.add(victimAsnsItem);
    return this;
  }

   /**
   * Get victimAsns
   * @return victimAsns
  **/
  @javax.annotation.Nonnull
  public List<Integer> getVictimAsns() {
    return victimAsns;
  }

  public void setVictimAsns(List<Integer> victimAsns) {
    this.victimAsns = victimAsns;
  }


  public RadarGetBgpHijacksEvents200ResponseResultEventsInner victimCountries(List<String> victimCountries) {
    this.victimCountries = victimCountries;
    return this;
  }

  public RadarGetBgpHijacksEvents200ResponseResultEventsInner addVictimCountriesItem(String victimCountriesItem) {
    if (this.victimCountries == null) {
      this.victimCountries = new ArrayList<>();
    }
    this.victimCountries.add(victimCountriesItem);
    return this;
  }

   /**
   * Get victimCountries
   * @return victimCountries
  **/
  @javax.annotation.Nonnull
  public List<String> getVictimCountries() {
    return victimCountries;
  }

  public void setVictimCountries(List<String> victimCountries) {
    this.victimCountries = victimCountries;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RadarGetBgpHijacksEvents200ResponseResultEventsInner radarGetBgpHijacksEvents200ResponseResultEventsInner = (RadarGetBgpHijacksEvents200ResponseResultEventsInner) o;
    return Objects.equals(this.confidenceScore, radarGetBgpHijacksEvents200ResponseResultEventsInner.confidenceScore) &&
        Objects.equals(this.duration, radarGetBgpHijacksEvents200ResponseResultEventsInner.duration) &&
        Objects.equals(this.eventType, radarGetBgpHijacksEvents200ResponseResultEventsInner.eventType) &&
        Objects.equals(this.hijackMsgsCount, radarGetBgpHijacksEvents200ResponseResultEventsInner.hijackMsgsCount) &&
        Objects.equals(this.hijackerAsn, radarGetBgpHijacksEvents200ResponseResultEventsInner.hijackerAsn) &&
        Objects.equals(this.hijackerCountry, radarGetBgpHijacksEvents200ResponseResultEventsInner.hijackerCountry) &&
        Objects.equals(this.id, radarGetBgpHijacksEvents200ResponseResultEventsInner.id) &&
        Objects.equals(this.isStale, radarGetBgpHijacksEvents200ResponseResultEventsInner.isStale) &&
        Objects.equals(this.maxHijackTs, radarGetBgpHijacksEvents200ResponseResultEventsInner.maxHijackTs) &&
        Objects.equals(this.maxMsgTs, radarGetBgpHijacksEvents200ResponseResultEventsInner.maxMsgTs) &&
        Objects.equals(this.minHijackTs, radarGetBgpHijacksEvents200ResponseResultEventsInner.minHijackTs) &&
        Objects.equals(this.onGoingCount, radarGetBgpHijacksEvents200ResponseResultEventsInner.onGoingCount) &&
        Objects.equals(this.peerAsns, radarGetBgpHijacksEvents200ResponseResultEventsInner.peerAsns) &&
        Objects.equals(this.peerIpCount, radarGetBgpHijacksEvents200ResponseResultEventsInner.peerIpCount) &&
        Objects.equals(this.prefixes, radarGetBgpHijacksEvents200ResponseResultEventsInner.prefixes) &&
        Objects.equals(this.tags, radarGetBgpHijacksEvents200ResponseResultEventsInner.tags) &&
        Objects.equals(this.victimAsns, radarGetBgpHijacksEvents200ResponseResultEventsInner.victimAsns) &&
        Objects.equals(this.victimCountries, radarGetBgpHijacksEvents200ResponseResultEventsInner.victimCountries);
  }

  @Override
  public int hashCode() {
    return Objects.hash(confidenceScore, duration, eventType, hijackMsgsCount, hijackerAsn, hijackerCountry, id, isStale, maxHijackTs, maxMsgTs, minHijackTs, onGoingCount, peerAsns, peerIpCount, prefixes, tags, victimAsns, victimCountries);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RadarGetBgpHijacksEvents200ResponseResultEventsInner {\n");
    sb.append("    confidenceScore: ").append(toIndentedString(confidenceScore)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    hijackMsgsCount: ").append(toIndentedString(hijackMsgsCount)).append("\n");
    sb.append("    hijackerAsn: ").append(toIndentedString(hijackerAsn)).append("\n");
    sb.append("    hijackerCountry: ").append(toIndentedString(hijackerCountry)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isStale: ").append(toIndentedString(isStale)).append("\n");
    sb.append("    maxHijackTs: ").append(toIndentedString(maxHijackTs)).append("\n");
    sb.append("    maxMsgTs: ").append(toIndentedString(maxMsgTs)).append("\n");
    sb.append("    minHijackTs: ").append(toIndentedString(minHijackTs)).append("\n");
    sb.append("    onGoingCount: ").append(toIndentedString(onGoingCount)).append("\n");
    sb.append("    peerAsns: ").append(toIndentedString(peerAsns)).append("\n");
    sb.append("    peerIpCount: ").append(toIndentedString(peerIpCount)).append("\n");
    sb.append("    prefixes: ").append(toIndentedString(prefixes)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    victimAsns: ").append(toIndentedString(victimAsns)).append("\n");
    sb.append("    victimCountries: ").append(toIndentedString(victimCountries)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("confidence_score");
    openapiFields.add("duration");
    openapiFields.add("event_type");
    openapiFields.add("hijack_msgs_count");
    openapiFields.add("hijacker_asn");
    openapiFields.add("hijacker_country");
    openapiFields.add("id");
    openapiFields.add("is_stale");
    openapiFields.add("max_hijack_ts");
    openapiFields.add("max_msg_ts");
    openapiFields.add("min_hijack_ts");
    openapiFields.add("on_going_count");
    openapiFields.add("peer_asns");
    openapiFields.add("peer_ip_count");
    openapiFields.add("prefixes");
    openapiFields.add("tags");
    openapiFields.add("victim_asns");
    openapiFields.add("victim_countries");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("confidence_score");
    openapiRequiredFields.add("duration");
    openapiRequiredFields.add("event_type");
    openapiRequiredFields.add("hijack_msgs_count");
    openapiRequiredFields.add("hijacker_asn");
    openapiRequiredFields.add("hijacker_country");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("is_stale");
    openapiRequiredFields.add("max_hijack_ts");
    openapiRequiredFields.add("max_msg_ts");
    openapiRequiredFields.add("min_hijack_ts");
    openapiRequiredFields.add("on_going_count");
    openapiRequiredFields.add("peer_asns");
    openapiRequiredFields.add("peer_ip_count");
    openapiRequiredFields.add("prefixes");
    openapiRequiredFields.add("tags");
    openapiRequiredFields.add("victim_asns");
    openapiRequiredFields.add("victim_countries");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RadarGetBgpHijacksEvents200ResponseResultEventsInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RadarGetBgpHijacksEvents200ResponseResultEventsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RadarGetBgpHijacksEvents200ResponseResultEventsInner is not found in the empty JSON string", RadarGetBgpHijacksEvents200ResponseResultEventsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RadarGetBgpHijacksEvents200ResponseResultEventsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RadarGetBgpHijacksEvents200ResponseResultEventsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RadarGetBgpHijacksEvents200ResponseResultEventsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("hijacker_country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hijacker_country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hijacker_country").toString()));
      }
      if (!jsonObj.get("max_hijack_ts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `max_hijack_ts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("max_hijack_ts").toString()));
      }
      if (!jsonObj.get("max_msg_ts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `max_msg_ts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("max_msg_ts").toString()));
      }
      if (!jsonObj.get("min_hijack_ts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `min_hijack_ts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("min_hijack_ts").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("peer_asns") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("peer_asns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `peer_asns` to be an array in the JSON string but got `%s`", jsonObj.get("peer_asns").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("prefixes") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("prefixes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefixes` to be an array in the JSON string but got `%s`", jsonObj.get("prefixes").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }

      JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
      // validate the required field `tags` (array)
      for (int i = 0; i < jsonArraytags.size(); i++) {
        RadarGetBgpHijacksEvents200ResponseResultEventsInnerTagsInner.validateJsonElement(jsonArraytags.get(i));
      };
      // ensure the required json array is present
      if (jsonObj.get("victim_asns") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("victim_asns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `victim_asns` to be an array in the JSON string but got `%s`", jsonObj.get("victim_asns").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("victim_countries") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("victim_countries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `victim_countries` to be an array in the JSON string but got `%s`", jsonObj.get("victim_countries").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RadarGetBgpHijacksEvents200ResponseResultEventsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RadarGetBgpHijacksEvents200ResponseResultEventsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RadarGetBgpHijacksEvents200ResponseResultEventsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RadarGetBgpHijacksEvents200ResponseResultEventsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<RadarGetBgpHijacksEvents200ResponseResultEventsInner>() {
           @Override
           public void write(JsonWriter out, RadarGetBgpHijacksEvents200ResponseResultEventsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RadarGetBgpHijacksEvents200ResponseResultEventsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RadarGetBgpHijacksEvents200ResponseResultEventsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RadarGetBgpHijacksEvents200ResponseResultEventsInner
  * @throws IOException if the JSON string is invalid with respect to RadarGetBgpHijacksEvents200ResponseResultEventsInner
  */
  public static RadarGetBgpHijacksEvents200ResponseResultEventsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RadarGetBgpHijacksEvents200ResponseResultEventsInner.class);
  }

 /**
  * Convert an instance of RadarGetBgpHijacksEvents200ResponseResultEventsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

