/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import org.openapitools.client.model.SkipRuleActionParametersPhases;
import org.openapitools.client.model.SkipRuleActionParametersRulesets;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * SkipRuleActionParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class SkipRuleActionParameters {
  public static final String SERIALIZED_NAME_PHASES = "phases";
  @SerializedName(SERIALIZED_NAME_PHASES)
  private Set<SkipRuleActionParametersPhases> phases = new LinkedHashSet<>();

  /**
   * The name of a legacy security product to skip the execution of.
   */
  @JsonAdapter(ProductsEnum.Adapter.class)
  public enum ProductsEnum {
    BIC("bic"),
    
    HOT("hot"),
    
    RATELIMIT("rateLimit"),
    
    SECURITYLEVEL("securityLevel"),
    
    UABLOCK("uaBlock"),
    
    WAF("waf"),
    
    ZONELOCKDOWN("zoneLockdown");

    private String value;

    ProductsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProductsEnum fromValue(String value) {
      for (ProductsEnum b : ProductsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProductsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProductsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProductsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProductsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProductsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRODUCTS = "products";
  @SerializedName(SERIALIZED_NAME_PRODUCTS)
  private Set<ProductsEnum> products = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_RULES = "rules";
  @SerializedName(SERIALIZED_NAME_RULES)
  private Map<String, Set<String>> rules = new HashMap<>();

  /**
   * A ruleset to skip the execution of. This option is incompatible with the rulesets, rules and phases options.
   */
  @JsonAdapter(RulesetEnum.Adapter.class)
  public enum RulesetEnum {
    CURRENT("current");

    private String value;

    RulesetEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RulesetEnum fromValue(String value) {
      for (RulesetEnum b : RulesetEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RulesetEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RulesetEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RulesetEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RulesetEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RulesetEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RULESET = "ruleset";
  @SerializedName(SERIALIZED_NAME_RULESET)
  private RulesetEnum ruleset;

  public static final String SERIALIZED_NAME_RULESETS = "rulesets";
  @SerializedName(SERIALIZED_NAME_RULESETS)
  private Set<SkipRuleActionParametersRulesets> rulesets = new LinkedHashSet<>();

  public SkipRuleActionParameters() {
  }

  public SkipRuleActionParameters phases(Set<SkipRuleActionParametersPhases> phases) {
    this.phases = phases;
    return this;
  }

  public SkipRuleActionParameters addPhasesItem(SkipRuleActionParametersPhases phasesItem) {
    if (this.phases == null) {
      this.phases = new LinkedHashSet<>();
    }
    this.phases.add(phasesItem);
    return this;
  }

   /**
   * A list of phases to skip the execution of. This option is incompatible with the ruleset and rulesets options.
   * @return phases
  **/
  @javax.annotation.Nullable
  public Set<SkipRuleActionParametersPhases> getPhases() {
    return phases;
  }

  public void setPhases(Set<SkipRuleActionParametersPhases> phases) {
    this.phases = phases;
  }


  public SkipRuleActionParameters products(Set<ProductsEnum> products) {
    this.products = products;
    return this;
  }

  public SkipRuleActionParameters addProductsItem(ProductsEnum productsItem) {
    if (this.products == null) {
      this.products = new LinkedHashSet<>();
    }
    this.products.add(productsItem);
    return this;
  }

   /**
   * A list of legacy security products to skip the execution of.
   * @return products
  **/
  @javax.annotation.Nullable
  public Set<ProductsEnum> getProducts() {
    return products;
  }

  public void setProducts(Set<ProductsEnum> products) {
    this.products = products;
  }


  public SkipRuleActionParameters rules(Map<String, Set<String>> rules) {
    this.rules = rules;
    return this;
  }

  public SkipRuleActionParameters putRulesItem(String key, Set<String> rulesItem) {
    if (this.rules == null) {
      this.rules = new HashMap<>();
    }
    this.rules.put(key, rulesItem);
    return this;
  }

   /**
   * A mapping of ruleset IDs to a list of rule IDs in that ruleset to skip the execution of. This option is incompatible with the ruleset option.
   * @return rules
  **/
  @javax.annotation.Nullable
  public Map<String, Set<String>> getRules() {
    return rules;
  }

  public void setRules(Map<String, Set<String>> rules) {
    this.rules = rules;
  }


  public SkipRuleActionParameters ruleset(RulesetEnum ruleset) {
    this.ruleset = ruleset;
    return this;
  }

   /**
   * A ruleset to skip the execution of. This option is incompatible with the rulesets, rules and phases options.
   * @return ruleset
  **/
  @javax.annotation.Nullable
  public RulesetEnum getRuleset() {
    return ruleset;
  }

  public void setRuleset(RulesetEnum ruleset) {
    this.ruleset = ruleset;
  }


  public SkipRuleActionParameters rulesets(Set<SkipRuleActionParametersRulesets> rulesets) {
    this.rulesets = rulesets;
    return this;
  }

  public SkipRuleActionParameters addRulesetsItem(SkipRuleActionParametersRulesets rulesetsItem) {
    if (this.rulesets == null) {
      this.rulesets = new LinkedHashSet<>();
    }
    this.rulesets.add(rulesetsItem);
    return this;
  }

   /**
   * A list of ruleset IDs to skip the execution of. This option is incompatible with the ruleset and phases options.
   * @return rulesets
  **/
  @javax.annotation.Nullable
  public Set<SkipRuleActionParametersRulesets> getRulesets() {
    return rulesets;
  }

  public void setRulesets(Set<SkipRuleActionParametersRulesets> rulesets) {
    this.rulesets = rulesets;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SkipRuleActionParameters skipRuleActionParameters = (SkipRuleActionParameters) o;
    return Objects.equals(this.phases, skipRuleActionParameters.phases) &&
        Objects.equals(this.products, skipRuleActionParameters.products) &&
        Objects.equals(this.rules, skipRuleActionParameters.rules) &&
        Objects.equals(this.ruleset, skipRuleActionParameters.ruleset) &&
        Objects.equals(this.rulesets, skipRuleActionParameters.rulesets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(phases, products, rules, ruleset, rulesets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SkipRuleActionParameters {\n");
    sb.append("    phases: ").append(toIndentedString(phases)).append("\n");
    sb.append("    products: ").append(toIndentedString(products)).append("\n");
    sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
    sb.append("    ruleset: ").append(toIndentedString(ruleset)).append("\n");
    sb.append("    rulesets: ").append(toIndentedString(rulesets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("phases");
    openapiFields.add("products");
    openapiFields.add("rules");
    openapiFields.add("ruleset");
    openapiFields.add("rulesets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SkipRuleActionParameters
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SkipRuleActionParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SkipRuleActionParameters is not found in the empty JSON string", SkipRuleActionParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SkipRuleActionParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SkipRuleActionParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("phases") != null && !jsonObj.get("phases").isJsonNull()) {
        JsonArray jsonArrayphases = jsonObj.getAsJsonArray("phases");
        if (jsonArrayphases != null) {
          // ensure the json data is an array
          if (!jsonObj.get("phases").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `phases` to be an array in the JSON string but got `%s`", jsonObj.get("phases").toString()));
          }

          // validate the optional field `phases` (array)
          for (int i = 0; i < jsonArrayphases.size(); i++) {
            SkipRuleActionParametersPhases.validateJsonElement(jsonArrayphases.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("products") != null && !jsonObj.get("products").isJsonNull() && !jsonObj.get("products").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `products` to be an array in the JSON string but got `%s`", jsonObj.get("products").toString()));
      }
      if ((jsonObj.get("ruleset") != null && !jsonObj.get("ruleset").isJsonNull()) && !jsonObj.get("ruleset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleset").toString()));
      }
      // validate the optional field `ruleset`
      if (jsonObj.get("ruleset") != null && !jsonObj.get("ruleset").isJsonNull()) {
        RulesetEnum.validateJsonElement(jsonObj.get("ruleset"));
      }
      if (jsonObj.get("rulesets") != null && !jsonObj.get("rulesets").isJsonNull()) {
        JsonArray jsonArrayrulesets = jsonObj.getAsJsonArray("rulesets");
        if (jsonArrayrulesets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rulesets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rulesets` to be an array in the JSON string but got `%s`", jsonObj.get("rulesets").toString()));
          }

          // validate the optional field `rulesets` (array)
          for (int i = 0; i < jsonArrayrulesets.size(); i++) {
            SkipRuleActionParametersRulesets.validateJsonElement(jsonArrayrulesets.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SkipRuleActionParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SkipRuleActionParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SkipRuleActionParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SkipRuleActionParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<SkipRuleActionParameters>() {
           @Override
           public void write(JsonWriter out, SkipRuleActionParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SkipRuleActionParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SkipRuleActionParameters given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SkipRuleActionParameters
  * @throws IOException if the JSON string is invalid with respect to SkipRuleActionParameters
  */
  public static SkipRuleActionParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SkipRuleActionParameters.class);
  }

 /**
  * Convert an instance of SkipRuleActionParameters to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

