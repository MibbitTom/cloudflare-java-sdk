/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.WaitingroomStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WaitingroomStatusResponseAllOfResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class WaitingroomStatusResponseAllOfResult {
  public static final String SERIALIZED_NAME_ESTIMATED_QUEUED_USERS = "estimated_queued_users";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_QUEUED_USERS)
  private Integer estimatedQueuedUsers;

  public static final String SERIALIZED_NAME_ESTIMATED_TOTAL_ACTIVE_USERS = "estimated_total_active_users";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_TOTAL_ACTIVE_USERS)
  private Integer estimatedTotalActiveUsers;

  public static final String SERIALIZED_NAME_EVENT_ID = "event_id";
  @SerializedName(SERIALIZED_NAME_EVENT_ID)
  private String eventId;

  public static final String SERIALIZED_NAME_MAX_ESTIMATED_TIME_MINUTES = "max_estimated_time_minutes";
  @SerializedName(SERIALIZED_NAME_MAX_ESTIMATED_TIME_MINUTES)
  private Integer maxEstimatedTimeMinutes;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private WaitingroomStatus status;

  public WaitingroomStatusResponseAllOfResult() {
  }

  public WaitingroomStatusResponseAllOfResult estimatedQueuedUsers(Integer estimatedQueuedUsers) {
    this.estimatedQueuedUsers = estimatedQueuedUsers;
    return this;
  }

   /**
   * Get estimatedQueuedUsers
   * @return estimatedQueuedUsers
  **/
  @javax.annotation.Nullable
  public Integer getEstimatedQueuedUsers() {
    return estimatedQueuedUsers;
  }

  public void setEstimatedQueuedUsers(Integer estimatedQueuedUsers) {
    this.estimatedQueuedUsers = estimatedQueuedUsers;
  }


  public WaitingroomStatusResponseAllOfResult estimatedTotalActiveUsers(Integer estimatedTotalActiveUsers) {
    this.estimatedTotalActiveUsers = estimatedTotalActiveUsers;
    return this;
  }

   /**
   * Get estimatedTotalActiveUsers
   * @return estimatedTotalActiveUsers
  **/
  @javax.annotation.Nullable
  public Integer getEstimatedTotalActiveUsers() {
    return estimatedTotalActiveUsers;
  }

  public void setEstimatedTotalActiveUsers(Integer estimatedTotalActiveUsers) {
    this.estimatedTotalActiveUsers = estimatedTotalActiveUsers;
  }


  public WaitingroomStatusResponseAllOfResult eventId(String eventId) {
    this.eventId = eventId;
    return this;
  }

   /**
   * Get eventId
   * @return eventId
  **/
  @javax.annotation.Nullable
  public String getEventId() {
    return eventId;
  }

  public void setEventId(String eventId) {
    this.eventId = eventId;
  }


  public WaitingroomStatusResponseAllOfResult maxEstimatedTimeMinutes(Integer maxEstimatedTimeMinutes) {
    this.maxEstimatedTimeMinutes = maxEstimatedTimeMinutes;
    return this;
  }

   /**
   * Get maxEstimatedTimeMinutes
   * @return maxEstimatedTimeMinutes
  **/
  @javax.annotation.Nullable
  public Integer getMaxEstimatedTimeMinutes() {
    return maxEstimatedTimeMinutes;
  }

  public void setMaxEstimatedTimeMinutes(Integer maxEstimatedTimeMinutes) {
    this.maxEstimatedTimeMinutes = maxEstimatedTimeMinutes;
  }


  public WaitingroomStatusResponseAllOfResult status(WaitingroomStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  public WaitingroomStatus getStatus() {
    return status;
  }

  public void setStatus(WaitingroomStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WaitingroomStatusResponseAllOfResult waitingroomStatusResponseAllOfResult = (WaitingroomStatusResponseAllOfResult) o;
    return Objects.equals(this.estimatedQueuedUsers, waitingroomStatusResponseAllOfResult.estimatedQueuedUsers) &&
        Objects.equals(this.estimatedTotalActiveUsers, waitingroomStatusResponseAllOfResult.estimatedTotalActiveUsers) &&
        Objects.equals(this.eventId, waitingroomStatusResponseAllOfResult.eventId) &&
        Objects.equals(this.maxEstimatedTimeMinutes, waitingroomStatusResponseAllOfResult.maxEstimatedTimeMinutes) &&
        Objects.equals(this.status, waitingroomStatusResponseAllOfResult.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(estimatedQueuedUsers, estimatedTotalActiveUsers, eventId, maxEstimatedTimeMinutes, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WaitingroomStatusResponseAllOfResult {\n");
    sb.append("    estimatedQueuedUsers: ").append(toIndentedString(estimatedQueuedUsers)).append("\n");
    sb.append("    estimatedTotalActiveUsers: ").append(toIndentedString(estimatedTotalActiveUsers)).append("\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    maxEstimatedTimeMinutes: ").append(toIndentedString(maxEstimatedTimeMinutes)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("estimated_queued_users");
    openapiFields.add("estimated_total_active_users");
    openapiFields.add("event_id");
    openapiFields.add("max_estimated_time_minutes");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to WaitingroomStatusResponseAllOfResult
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WaitingroomStatusResponseAllOfResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WaitingroomStatusResponseAllOfResult is not found in the empty JSON string", WaitingroomStatusResponseAllOfResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WaitingroomStatusResponseAllOfResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WaitingroomStatusResponseAllOfResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("event_id") != null && !jsonObj.get("event_id").isJsonNull()) && !jsonObj.get("event_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_id").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        WaitingroomStatus.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WaitingroomStatusResponseAllOfResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WaitingroomStatusResponseAllOfResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WaitingroomStatusResponseAllOfResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WaitingroomStatusResponseAllOfResult.class));

       return (TypeAdapter<T>) new TypeAdapter<WaitingroomStatusResponseAllOfResult>() {
           @Override
           public void write(JsonWriter out, WaitingroomStatusResponseAllOfResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WaitingroomStatusResponseAllOfResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WaitingroomStatusResponseAllOfResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WaitingroomStatusResponseAllOfResult
  * @throws IOException if the JSON string is invalid with respect to WaitingroomStatusResponseAllOfResult
  */
  public static WaitingroomStatusResponseAllOfResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WaitingroomStatusResponseAllOfResult.class);
  }

 /**
  * Convert an instance of WaitingroomStatusResponseAllOfResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

