/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest {
  public static final String SERIALIZED_NAME_GUIDANCE = "guidance";
  @SerializedName(SERIALIZED_NAME_GUIDANCE)
  private BigDecimal guidance = new BigDecimal("7.5");

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private List<BigDecimal> image = new ArrayList<>();

  public static final String SERIALIZED_NAME_MASK = "mask";
  @SerializedName(SERIALIZED_NAME_MASK)
  private List<BigDecimal> mask = new ArrayList<>();

  public static final String SERIALIZED_NAME_NUM_STEPS = "num_steps";
  @SerializedName(SERIALIZED_NAME_NUM_STEPS)
  private Integer numSteps = 20;

  public static final String SERIALIZED_NAME_PROMPT = "prompt";
  @SerializedName(SERIALIZED_NAME_PROMPT)
  private String prompt;

  public static final String SERIALIZED_NAME_STRENGTH = "strength";
  @SerializedName(SERIALIZED_NAME_STRENGTH)
  private BigDecimal strength = new BigDecimal("1");

  public WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest() {
  }

  public WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest guidance(BigDecimal guidance) {
    this.guidance = guidance;
    return this;
  }

   /**
   * Get guidance
   * @return guidance
  **/
  @javax.annotation.Nullable
  public BigDecimal getGuidance() {
    return guidance;
  }

  public void setGuidance(BigDecimal guidance) {
    this.guidance = guidance;
  }


  public WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest image(List<BigDecimal> image) {
    this.image = image;
    return this;
  }

  public WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest addImageItem(BigDecimal imageItem) {
    if (this.image == null) {
      this.image = new ArrayList<>();
    }
    this.image.add(imageItem);
    return this;
  }

   /**
   * Get image
   * @return image
  **/
  @javax.annotation.Nullable
  public List<BigDecimal> getImage() {
    return image;
  }

  public void setImage(List<BigDecimal> image) {
    this.image = image;
  }


  public WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest mask(List<BigDecimal> mask) {
    this.mask = mask;
    return this;
  }

  public WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest addMaskItem(BigDecimal maskItem) {
    if (this.mask == null) {
      this.mask = new ArrayList<>();
    }
    this.mask.add(maskItem);
    return this;
  }

   /**
   * Get mask
   * @return mask
  **/
  @javax.annotation.Nullable
  public List<BigDecimal> getMask() {
    return mask;
  }

  public void setMask(List<BigDecimal> mask) {
    this.mask = mask;
  }


  public WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest numSteps(Integer numSteps) {
    this.numSteps = numSteps;
    return this;
  }

   /**
   * Get numSteps
   * maximum: 20
   * @return numSteps
  **/
  @javax.annotation.Nullable
  public Integer getNumSteps() {
    return numSteps;
  }

  public void setNumSteps(Integer numSteps) {
    this.numSteps = numSteps;
  }


  public WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest prompt(String prompt) {
    this.prompt = prompt;
    return this;
  }

   /**
   * Get prompt
   * @return prompt
  **/
  @javax.annotation.Nonnull
  public String getPrompt() {
    return prompt;
  }

  public void setPrompt(String prompt) {
    this.prompt = prompt;
  }


  public WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest strength(BigDecimal strength) {
    this.strength = strength;
    return this;
  }

   /**
   * Get strength
   * @return strength
  **/
  @javax.annotation.Nullable
  public BigDecimal getStrength() {
    return strength;
  }

  public void setStrength(BigDecimal strength) {
    this.strength = strength;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest = (WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest) o;
    return Objects.equals(this.guidance, workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest.guidance) &&
        Objects.equals(this.image, workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest.image) &&
        Objects.equals(this.mask, workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest.mask) &&
        Objects.equals(this.numSteps, workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest.numSteps) &&
        Objects.equals(this.prompt, workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest.prompt) &&
        Objects.equals(this.strength, workersAiPostRunCfBytedanceStableDiffusionXlLightningRequest.strength);
  }

  @Override
  public int hashCode() {
    return Objects.hash(guidance, image, mask, numSteps, prompt, strength);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest {\n");
    sb.append("    guidance: ").append(toIndentedString(guidance)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    mask: ").append(toIndentedString(mask)).append("\n");
    sb.append("    numSteps: ").append(toIndentedString(numSteps)).append("\n");
    sb.append("    prompt: ").append(toIndentedString(prompt)).append("\n");
    sb.append("    strength: ").append(toIndentedString(strength)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("guidance");
    openapiFields.add("image");
    openapiFields.add("mask");
    openapiFields.add("num_steps");
    openapiFields.add("prompt");
    openapiFields.add("strength");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("prompt");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest is not found in the empty JSON string", WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull() && !jsonObj.get("image").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be an array in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("mask") != null && !jsonObj.get("mask").isJsonNull() && !jsonObj.get("mask").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mask` to be an array in the JSON string but got `%s`", jsonObj.get("mask").toString()));
      }
      if (!jsonObj.get("prompt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prompt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prompt").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest>() {
           @Override
           public void write(JsonWriter out, WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest
  * @throws IOException if the JSON string is invalid with respect to WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest
  */
  public static WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest.class);
  }

 /**
  * Convert an instance of WorkersAiPostRunCfBytedanceStableDiffusionXlLightningRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

