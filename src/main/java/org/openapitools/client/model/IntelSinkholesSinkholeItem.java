/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IntelSinkholesSinkholeItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class IntelSinkholesSinkholeItem {
  public static final String SERIALIZED_NAME_ACCOUNT_TAG = "account_tag";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TAG)
  private String accountTag;

  public static final String SERIALIZED_NAME_CREATED_ON = "created_on";
  @SerializedName(SERIALIZED_NAME_CREATED_ON)
  private OffsetDateTime createdOn;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_MODIFIED_ON = "modified_on";
  @SerializedName(SERIALIZED_NAME_MODIFIED_ON)
  private OffsetDateTime modifiedOn;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_R2_BUCKET = "r2_bucket";
  @SerializedName(SERIALIZED_NAME_R2_BUCKET)
  private String r2Bucket;

  public static final String SERIALIZED_NAME_R2_ID = "r2_id";
  @SerializedName(SERIALIZED_NAME_R2_ID)
  private String r2Id;

  public IntelSinkholesSinkholeItem() {
  }

  public IntelSinkholesSinkholeItem accountTag(String accountTag) {
    this.accountTag = accountTag;
    return this;
  }

   /**
   * The account tag that owns this sinkhole
   * @return accountTag
  **/
  @javax.annotation.Nullable
  public String getAccountTag() {
    return accountTag;
  }

  public void setAccountTag(String accountTag) {
    this.accountTag = accountTag;
  }


  public IntelSinkholesSinkholeItem createdOn(OffsetDateTime createdOn) {
    this.createdOn = createdOn;
    return this;
  }

   /**
   * The date and time when the sinkhole was created
   * @return createdOn
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedOn() {
    return createdOn;
  }

  public void setCreatedOn(OffsetDateTime createdOn) {
    this.createdOn = createdOn;
  }


  public IntelSinkholesSinkholeItem id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * The unique identifier for the sinkhole
   * @return id
  **/
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public IntelSinkholesSinkholeItem modifiedOn(OffsetDateTime modifiedOn) {
    this.modifiedOn = modifiedOn;
    return this;
  }

   /**
   * The date and time when the sinkhole was last modified
   * @return modifiedOn
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedOn() {
    return modifiedOn;
  }

  public void setModifiedOn(OffsetDateTime modifiedOn) {
    this.modifiedOn = modifiedOn;
  }


  public IntelSinkholesSinkholeItem name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the sinkhole
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public IntelSinkholesSinkholeItem r2Bucket(String r2Bucket) {
    this.r2Bucket = r2Bucket;
    return this;
  }

   /**
   * The name of the R2 bucket to store results
   * @return r2Bucket
  **/
  @javax.annotation.Nullable
  public String getR2Bucket() {
    return r2Bucket;
  }

  public void setR2Bucket(String r2Bucket) {
    this.r2Bucket = r2Bucket;
  }


  public IntelSinkholesSinkholeItem r2Id(String r2Id) {
    this.r2Id = r2Id;
    return this;
  }

   /**
   * The id of the R2 instance
   * @return r2Id
  **/
  @javax.annotation.Nullable
  public String getR2Id() {
    return r2Id;
  }

  public void setR2Id(String r2Id) {
    this.r2Id = r2Id;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntelSinkholesSinkholeItem intelSinkholesSinkholeItem = (IntelSinkholesSinkholeItem) o;
    return Objects.equals(this.accountTag, intelSinkholesSinkholeItem.accountTag) &&
        Objects.equals(this.createdOn, intelSinkholesSinkholeItem.createdOn) &&
        Objects.equals(this.id, intelSinkholesSinkholeItem.id) &&
        Objects.equals(this.modifiedOn, intelSinkholesSinkholeItem.modifiedOn) &&
        Objects.equals(this.name, intelSinkholesSinkholeItem.name) &&
        Objects.equals(this.r2Bucket, intelSinkholesSinkholeItem.r2Bucket) &&
        Objects.equals(this.r2Id, intelSinkholesSinkholeItem.r2Id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountTag, createdOn, id, modifiedOn, name, r2Bucket, r2Id);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntelSinkholesSinkholeItem {\n");
    sb.append("    accountTag: ").append(toIndentedString(accountTag)).append("\n");
    sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    modifiedOn: ").append(toIndentedString(modifiedOn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    r2Bucket: ").append(toIndentedString(r2Bucket)).append("\n");
    sb.append("    r2Id: ").append(toIndentedString(r2Id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_tag");
    openapiFields.add("created_on");
    openapiFields.add("id");
    openapiFields.add("modified_on");
    openapiFields.add("name");
    openapiFields.add("r2_bucket");
    openapiFields.add("r2_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to IntelSinkholesSinkholeItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IntelSinkholesSinkholeItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IntelSinkholesSinkholeItem is not found in the empty JSON string", IntelSinkholesSinkholeItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IntelSinkholesSinkholeItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IntelSinkholesSinkholeItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_tag") != null && !jsonObj.get("account_tag").isJsonNull()) && !jsonObj.get("account_tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_tag").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("r2_bucket") != null && !jsonObj.get("r2_bucket").isJsonNull()) && !jsonObj.get("r2_bucket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `r2_bucket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("r2_bucket").toString()));
      }
      if ((jsonObj.get("r2_id") != null && !jsonObj.get("r2_id").isJsonNull()) && !jsonObj.get("r2_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `r2_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("r2_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IntelSinkholesSinkholeItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IntelSinkholesSinkholeItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IntelSinkholesSinkholeItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IntelSinkholesSinkholeItem.class));

       return (TypeAdapter<T>) new TypeAdapter<IntelSinkholesSinkholeItem>() {
           @Override
           public void write(JsonWriter out, IntelSinkholesSinkholeItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IntelSinkholesSinkholeItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IntelSinkholesSinkholeItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IntelSinkholesSinkholeItem
  * @throws IOException if the JSON string is invalid with respect to IntelSinkholesSinkholeItem
  */
  public static IntelSinkholesSinkholeItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IntelSinkholesSinkholeItem.class);
  }

 /**
  * Convert an instance of IntelSinkholesSinkholeItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

