/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * Configures load shedding policies and percentages for the pool.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class LoadBalancingLoadShedding {
  public static final String SERIALIZED_NAME_DEFAULT_PERCENT = "default_percent";
  @SerializedName(SERIALIZED_NAME_DEFAULT_PERCENT)
  private BigDecimal defaultPercent = new BigDecimal("0");

  /**
   * The default policy to use when load shedding. A random policy randomly sheds a given percent of requests. A hash policy computes a hash over the CF-Connecting-IP address and sheds all requests originating from a percent of IPs.
   */
  @JsonAdapter(DefaultPolicyEnum.Adapter.class)
  public enum DefaultPolicyEnum {
    RANDOM("random"),
    
    HASH("hash");

    private String value;

    DefaultPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DefaultPolicyEnum fromValue(String value) {
      for (DefaultPolicyEnum b : DefaultPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DefaultPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DefaultPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DefaultPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DefaultPolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DefaultPolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEFAULT_POLICY = "default_policy";
  @SerializedName(SERIALIZED_NAME_DEFAULT_POLICY)
  private DefaultPolicyEnum defaultPolicy = DefaultPolicyEnum.RANDOM;

  public static final String SERIALIZED_NAME_SESSION_PERCENT = "session_percent";
  @SerializedName(SERIALIZED_NAME_SESSION_PERCENT)
  private BigDecimal sessionPercent = new BigDecimal("0");

  /**
   * Only the hash policy is supported for existing sessions (to avoid exponential decay).
   */
  @JsonAdapter(SessionPolicyEnum.Adapter.class)
  public enum SessionPolicyEnum {
    HASH("hash");

    private String value;

    SessionPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SessionPolicyEnum fromValue(String value) {
      for (SessionPolicyEnum b : SessionPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SessionPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SessionPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SessionPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SessionPolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SessionPolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SESSION_POLICY = "session_policy";
  @SerializedName(SERIALIZED_NAME_SESSION_POLICY)
  private SessionPolicyEnum sessionPolicy = SessionPolicyEnum.HASH;

  public LoadBalancingLoadShedding() {
  }

  public LoadBalancingLoadShedding defaultPercent(BigDecimal defaultPercent) {
    this.defaultPercent = defaultPercent;
    return this;
  }

   /**
   * The percent of traffic to shed from the pool, according to the default policy. Applies to new sessions and traffic without session affinity.
   * minimum: 0
   * maximum: 100
   * @return defaultPercent
  **/
  @javax.annotation.Nullable
  public BigDecimal getDefaultPercent() {
    return defaultPercent;
  }

  public void setDefaultPercent(BigDecimal defaultPercent) {
    this.defaultPercent = defaultPercent;
  }


  public LoadBalancingLoadShedding defaultPolicy(DefaultPolicyEnum defaultPolicy) {
    this.defaultPolicy = defaultPolicy;
    return this;
  }

   /**
   * The default policy to use when load shedding. A random policy randomly sheds a given percent of requests. A hash policy computes a hash over the CF-Connecting-IP address and sheds all requests originating from a percent of IPs.
   * @return defaultPolicy
  **/
  @javax.annotation.Nullable
  public DefaultPolicyEnum getDefaultPolicy() {
    return defaultPolicy;
  }

  public void setDefaultPolicy(DefaultPolicyEnum defaultPolicy) {
    this.defaultPolicy = defaultPolicy;
  }


  public LoadBalancingLoadShedding sessionPercent(BigDecimal sessionPercent) {
    this.sessionPercent = sessionPercent;
    return this;
  }

   /**
   * The percent of existing sessions to shed from the pool, according to the session policy.
   * minimum: 0
   * maximum: 100
   * @return sessionPercent
  **/
  @javax.annotation.Nullable
  public BigDecimal getSessionPercent() {
    return sessionPercent;
  }

  public void setSessionPercent(BigDecimal sessionPercent) {
    this.sessionPercent = sessionPercent;
  }


  public LoadBalancingLoadShedding sessionPolicy(SessionPolicyEnum sessionPolicy) {
    this.sessionPolicy = sessionPolicy;
    return this;
  }

   /**
   * Only the hash policy is supported for existing sessions (to avoid exponential decay).
   * @return sessionPolicy
  **/
  @javax.annotation.Nullable
  public SessionPolicyEnum getSessionPolicy() {
    return sessionPolicy;
  }

  public void setSessionPolicy(SessionPolicyEnum sessionPolicy) {
    this.sessionPolicy = sessionPolicy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoadBalancingLoadShedding loadBalancingLoadShedding = (LoadBalancingLoadShedding) o;
    return Objects.equals(this.defaultPercent, loadBalancingLoadShedding.defaultPercent) &&
        Objects.equals(this.defaultPolicy, loadBalancingLoadShedding.defaultPolicy) &&
        Objects.equals(this.sessionPercent, loadBalancingLoadShedding.sessionPercent) &&
        Objects.equals(this.sessionPolicy, loadBalancingLoadShedding.sessionPolicy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultPercent, defaultPolicy, sessionPercent, sessionPolicy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoadBalancingLoadShedding {\n");
    sb.append("    defaultPercent: ").append(toIndentedString(defaultPercent)).append("\n");
    sb.append("    defaultPolicy: ").append(toIndentedString(defaultPolicy)).append("\n");
    sb.append("    sessionPercent: ").append(toIndentedString(sessionPercent)).append("\n");
    sb.append("    sessionPolicy: ").append(toIndentedString(sessionPolicy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("default_percent");
    openapiFields.add("default_policy");
    openapiFields.add("session_percent");
    openapiFields.add("session_policy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to LoadBalancingLoadShedding
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LoadBalancingLoadShedding.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoadBalancingLoadShedding is not found in the empty JSON string", LoadBalancingLoadShedding.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LoadBalancingLoadShedding.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LoadBalancingLoadShedding` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("default_policy") != null && !jsonObj.get("default_policy").isJsonNull()) && !jsonObj.get("default_policy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_policy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_policy").toString()));
      }
      // validate the optional field `default_policy`
      if (jsonObj.get("default_policy") != null && !jsonObj.get("default_policy").isJsonNull()) {
        DefaultPolicyEnum.validateJsonElement(jsonObj.get("default_policy"));
      }
      if ((jsonObj.get("session_policy") != null && !jsonObj.get("session_policy").isJsonNull()) && !jsonObj.get("session_policy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `session_policy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("session_policy").toString()));
      }
      // validate the optional field `session_policy`
      if (jsonObj.get("session_policy") != null && !jsonObj.get("session_policy").isJsonNull()) {
        SessionPolicyEnum.validateJsonElement(jsonObj.get("session_policy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoadBalancingLoadShedding.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoadBalancingLoadShedding' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoadBalancingLoadShedding> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoadBalancingLoadShedding.class));

       return (TypeAdapter<T>) new TypeAdapter<LoadBalancingLoadShedding>() {
           @Override
           public void write(JsonWriter out, LoadBalancingLoadShedding value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LoadBalancingLoadShedding read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LoadBalancingLoadShedding given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LoadBalancingLoadShedding
  * @throws IOException if the JSON string is invalid with respect to LoadBalancingLoadShedding
  */
  public static LoadBalancingLoadShedding fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoadBalancingLoadShedding.class);
  }

 /**
  * Convert an instance of LoadBalancingLoadShedding to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

