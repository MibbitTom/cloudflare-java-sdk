/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MagicTransitColo;
import org.openapitools.client.model.MagicTransitError;
import org.openapitools.client.model.MagicTransitHopResult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * MagicTransitColoResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class MagicTransitColoResult {
  public static final String SERIALIZED_NAME_COLO = "colo";
  @SerializedName(SERIALIZED_NAME_COLO)
  private MagicTransitColo colo;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private MagicTransitError error;

  public static final String SERIALIZED_NAME_HOPS = "hops";
  @SerializedName(SERIALIZED_NAME_HOPS)
  private List<MagicTransitHopResult> hops = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET_SUMMARY = "target_summary";
  @SerializedName(SERIALIZED_NAME_TARGET_SUMMARY)
  private Object targetSummary;

  public static final String SERIALIZED_NAME_TRACEROUTE_TIME_MS = "traceroute_time_ms";
  @SerializedName(SERIALIZED_NAME_TRACEROUTE_TIME_MS)
  private Integer tracerouteTimeMs;

  public MagicTransitColoResult() {
  }

  public MagicTransitColoResult colo(MagicTransitColo colo) {
    this.colo = colo;
    return this;
  }

   /**
   * Get colo
   * @return colo
  **/
  @javax.annotation.Nullable
  public MagicTransitColo getColo() {
    return colo;
  }

  public void setColo(MagicTransitColo colo) {
    this.colo = colo;
  }


  public MagicTransitColoResult error(MagicTransitError error) {
    this.error = error;
    return this;
  }

   /**
   * Get error
   * @return error
  **/
  @javax.annotation.Nullable
  public MagicTransitError getError() {
    return error;
  }

  public void setError(MagicTransitError error) {
    this.error = error;
  }


  public MagicTransitColoResult hops(List<MagicTransitHopResult> hops) {
    this.hops = hops;
    return this;
  }

  public MagicTransitColoResult addHopsItem(MagicTransitHopResult hopsItem) {
    if (this.hops == null) {
      this.hops = new ArrayList<>();
    }
    this.hops.add(hopsItem);
    return this;
  }

   /**
   * Get hops
   * @return hops
  **/
  @javax.annotation.Nullable
  public List<MagicTransitHopResult> getHops() {
    return hops;
  }

  public void setHops(List<MagicTransitHopResult> hops) {
    this.hops = hops;
  }


  public MagicTransitColoResult targetSummary(Object targetSummary) {
    this.targetSummary = targetSummary;
    return this;
  }

   /**
   * Aggregated statistics from all hops about the target.
   * @return targetSummary
  **/
  @javax.annotation.Nullable
  public Object getTargetSummary() {
    return targetSummary;
  }

  public void setTargetSummary(Object targetSummary) {
    this.targetSummary = targetSummary;
  }


  public MagicTransitColoResult tracerouteTimeMs(Integer tracerouteTimeMs) {
    this.tracerouteTimeMs = tracerouteTimeMs;
    return this;
  }

   /**
   * Total time of traceroute in ms.
   * @return tracerouteTimeMs
  **/
  @javax.annotation.Nullable
  public Integer getTracerouteTimeMs() {
    return tracerouteTimeMs;
  }

  public void setTracerouteTimeMs(Integer tracerouteTimeMs) {
    this.tracerouteTimeMs = tracerouteTimeMs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MagicTransitColoResult magicTransitColoResult = (MagicTransitColoResult) o;
    return Objects.equals(this.colo, magicTransitColoResult.colo) &&
        Objects.equals(this.error, magicTransitColoResult.error) &&
        Objects.equals(this.hops, magicTransitColoResult.hops) &&
        Objects.equals(this.targetSummary, magicTransitColoResult.targetSummary) &&
        Objects.equals(this.tracerouteTimeMs, magicTransitColoResult.tracerouteTimeMs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(colo, error, hops, targetSummary, tracerouteTimeMs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MagicTransitColoResult {\n");
    sb.append("    colo: ").append(toIndentedString(colo)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    hops: ").append(toIndentedString(hops)).append("\n");
    sb.append("    targetSummary: ").append(toIndentedString(targetSummary)).append("\n");
    sb.append("    tracerouteTimeMs: ").append(toIndentedString(tracerouteTimeMs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("colo");
    openapiFields.add("error");
    openapiFields.add("hops");
    openapiFields.add("target_summary");
    openapiFields.add("traceroute_time_ms");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MagicTransitColoResult
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MagicTransitColoResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MagicTransitColoResult is not found in the empty JSON string", MagicTransitColoResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MagicTransitColoResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MagicTransitColoResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `colo`
      if (jsonObj.get("colo") != null && !jsonObj.get("colo").isJsonNull()) {
        MagicTransitColo.validateJsonElement(jsonObj.get("colo"));
      }
      // validate the optional field `error`
      if (jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) {
        MagicTransitError.validateJsonElement(jsonObj.get("error"));
      }
      if (jsonObj.get("hops") != null && !jsonObj.get("hops").isJsonNull()) {
        JsonArray jsonArrayhops = jsonObj.getAsJsonArray("hops");
        if (jsonArrayhops != null) {
          // ensure the json data is an array
          if (!jsonObj.get("hops").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `hops` to be an array in the JSON string but got `%s`", jsonObj.get("hops").toString()));
          }

          // validate the optional field `hops` (array)
          for (int i = 0; i < jsonArrayhops.size(); i++) {
            MagicTransitHopResult.validateJsonElement(jsonArrayhops.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MagicTransitColoResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MagicTransitColoResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MagicTransitColoResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MagicTransitColoResult.class));

       return (TypeAdapter<T>) new TypeAdapter<MagicTransitColoResult>() {
           @Override
           public void write(JsonWriter out, MagicTransitColoResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MagicTransitColoResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MagicTransitColoResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MagicTransitColoResult
  * @throws IOException if the JSON string is invalid with respect to MagicTransitColoResult
  */
  public static MagicTransitColoResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MagicTransitColoResult.class);
  }

 /**
  * Convert an instance of MagicTransitColoResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

