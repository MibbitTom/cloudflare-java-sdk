/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AddressingBgpOnDemand
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class AddressingBgpOnDemand {
  public static final String SERIALIZED_NAME_ADVERTISED = "advertised";
  @SerializedName(SERIALIZED_NAME_ADVERTISED)
  private Boolean advertised;

  public static final String SERIALIZED_NAME_ADVERTISED_MODIFIED_AT = "advertised_modified_at";
  @SerializedName(SERIALIZED_NAME_ADVERTISED_MODIFIED_AT)
  private OffsetDateTime advertisedModifiedAt;

  public static final String SERIALIZED_NAME_ON_DEMAND_ENABLED = "on_demand_enabled";
  @SerializedName(SERIALIZED_NAME_ON_DEMAND_ENABLED)
  private Boolean onDemandEnabled;

  public static final String SERIALIZED_NAME_ON_DEMAND_LOCKED = "on_demand_locked";
  @SerializedName(SERIALIZED_NAME_ON_DEMAND_LOCKED)
  private Boolean onDemandLocked;

  public AddressingBgpOnDemand() {
  }

  public AddressingBgpOnDemand advertised(Boolean advertised) {
    this.advertised = advertised;
    return this;
  }

   /**
   * Prefix advertisement status to the Internet. This field is only not &#39;null&#39; if on demand is enabled.
   * @return advertised
  **/
  @javax.annotation.Nullable
  public Boolean getAdvertised() {
    return advertised;
  }

  public void setAdvertised(Boolean advertised) {
    this.advertised = advertised;
  }


  public AddressingBgpOnDemand advertisedModifiedAt(OffsetDateTime advertisedModifiedAt) {
    this.advertisedModifiedAt = advertisedModifiedAt;
    return this;
  }

   /**
   * Last time the advertisement status was changed. This field is only not &#39;null&#39; if on demand is enabled.
   * @return advertisedModifiedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getAdvertisedModifiedAt() {
    return advertisedModifiedAt;
  }

  public void setAdvertisedModifiedAt(OffsetDateTime advertisedModifiedAt) {
    this.advertisedModifiedAt = advertisedModifiedAt;
  }


  public AddressingBgpOnDemand onDemandEnabled(Boolean onDemandEnabled) {
    this.onDemandEnabled = onDemandEnabled;
    return this;
  }

   /**
   * Whether advertisement of the prefix to the Internet may be dynamically enabled or disabled.
   * @return onDemandEnabled
  **/
  @javax.annotation.Nullable
  public Boolean getOnDemandEnabled() {
    return onDemandEnabled;
  }

  public void setOnDemandEnabled(Boolean onDemandEnabled) {
    this.onDemandEnabled = onDemandEnabled;
  }


  public AddressingBgpOnDemand onDemandLocked(Boolean onDemandLocked) {
    this.onDemandLocked = onDemandLocked;
    return this;
  }

   /**
   * Whether advertisement status of the prefix is locked, meaning it cannot be changed.
   * @return onDemandLocked
  **/
  @javax.annotation.Nullable
  public Boolean getOnDemandLocked() {
    return onDemandLocked;
  }

  public void setOnDemandLocked(Boolean onDemandLocked) {
    this.onDemandLocked = onDemandLocked;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddressingBgpOnDemand addressingBgpOnDemand = (AddressingBgpOnDemand) o;
    return Objects.equals(this.advertised, addressingBgpOnDemand.advertised) &&
        Objects.equals(this.advertisedModifiedAt, addressingBgpOnDemand.advertisedModifiedAt) &&
        Objects.equals(this.onDemandEnabled, addressingBgpOnDemand.onDemandEnabled) &&
        Objects.equals(this.onDemandLocked, addressingBgpOnDemand.onDemandLocked);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(advertised, advertisedModifiedAt, onDemandEnabled, onDemandLocked);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddressingBgpOnDemand {\n");
    sb.append("    advertised: ").append(toIndentedString(advertised)).append("\n");
    sb.append("    advertisedModifiedAt: ").append(toIndentedString(advertisedModifiedAt)).append("\n");
    sb.append("    onDemandEnabled: ").append(toIndentedString(onDemandEnabled)).append("\n");
    sb.append("    onDemandLocked: ").append(toIndentedString(onDemandLocked)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advertised");
    openapiFields.add("advertised_modified_at");
    openapiFields.add("on_demand_enabled");
    openapiFields.add("on_demand_locked");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AddressingBgpOnDemand
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddressingBgpOnDemand.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddressingBgpOnDemand is not found in the empty JSON string", AddressingBgpOnDemand.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AddressingBgpOnDemand.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddressingBgpOnDemand` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddressingBgpOnDemand.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddressingBgpOnDemand' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddressingBgpOnDemand> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddressingBgpOnDemand.class));

       return (TypeAdapter<T>) new TypeAdapter<AddressingBgpOnDemand>() {
           @Override
           public void write(JsonWriter out, AddressingBgpOnDemand value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddressingBgpOnDemand read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AddressingBgpOnDemand given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AddressingBgpOnDemand
  * @throws IOException if the JSON string is invalid with respect to AddressingBgpOnDemand
  */
  public static AddressingBgpOnDemand fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddressingBgpOnDemand.class);
  }

 /**
  * Convert an instance of AddressingBgpOnDemand to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

