/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.ApiShieldApiDiscoveryOrigin;
import org.openapitools.client.model.ApiShieldApiDiscoveryState;
import org.openapitools.client.model.ApiShieldMethod;
import org.openapitools.client.model.ApiShieldTrafficStats;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * ApiShieldDiscoveryOperation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class ApiShieldDiscoveryOperation {
  public static final String SERIALIZED_NAME_ENDPOINT = "endpoint";
  @SerializedName(SERIALIZED_NAME_ENDPOINT)
  private String endpoint;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private ApiShieldMethod method;

  public static final String SERIALIZED_NAME_FEATURES = "features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  private ApiShieldTrafficStats features;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "last_updated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private List<ApiShieldApiDiscoveryOrigin> origin = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private ApiShieldApiDiscoveryState state;

  public ApiShieldDiscoveryOperation() {
  }

  public ApiShieldDiscoveryOperation(
     UUID id, 
     OffsetDateTime lastUpdated
  ) {
    this();
    this.id = id;
    this.lastUpdated = lastUpdated;
  }

  public ApiShieldDiscoveryOperation endpoint(String endpoint) {
    this.endpoint = endpoint;
    return this;
  }

   /**
   * The endpoint which can contain path parameter templates in curly braces, each will be replaced from left to right with {varN}, starting with {var1}, during insertion. This will further be Cloudflare-normalized upon insertion. See: https://developers.cloudflare.com/rules/normalization/how-it-works/.
   * @return endpoint
  **/
  @javax.annotation.Nonnull
  public String getEndpoint() {
    return endpoint;
  }

  public void setEndpoint(String endpoint) {
    this.endpoint = endpoint;
  }


  public ApiShieldDiscoveryOperation host(String host) {
    this.host = host;
    return this;
  }

   /**
   * RFC3986-compliant host.
   * @return host
  **/
  @javax.annotation.Nonnull
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }


  public ApiShieldDiscoveryOperation method(ApiShieldMethod method) {
    this.method = method;
    return this;
  }

   /**
   * Get method
   * @return method
  **/
  @javax.annotation.Nonnull
  public ApiShieldMethod getMethod() {
    return method;
  }

  public void setMethod(ApiShieldMethod method) {
    this.method = method;
  }


  public ApiShieldDiscoveryOperation features(ApiShieldTrafficStats features) {
    this.features = features;
    return this;
  }

   /**
   * Get features
   * @return features
  **/
  @javax.annotation.Nullable
  public ApiShieldTrafficStats getFeatures() {
    return features;
  }

  public void setFeatures(ApiShieldTrafficStats features) {
    this.features = features;
  }


   /**
   * UUID identifier
   * @return id
  **/
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }



   /**
   * Get lastUpdated
   * @return lastUpdated
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }



  public ApiShieldDiscoveryOperation origin(List<ApiShieldApiDiscoveryOrigin> origin) {
    this.origin = origin;
    return this;
  }

  public ApiShieldDiscoveryOperation addOriginItem(ApiShieldApiDiscoveryOrigin originItem) {
    if (this.origin == null) {
      this.origin = new ArrayList<>();
    }
    this.origin.add(originItem);
    return this;
  }

   /**
   * API discovery engine(s) that discovered this operation
   * @return origin
  **/
  @javax.annotation.Nonnull
  public List<ApiShieldApiDiscoveryOrigin> getOrigin() {
    return origin;
  }

  public void setOrigin(List<ApiShieldApiDiscoveryOrigin> origin) {
    this.origin = origin;
  }


  public ApiShieldDiscoveryOperation state(ApiShieldApiDiscoveryState state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nonnull
  public ApiShieldApiDiscoveryState getState() {
    return state;
  }

  public void setState(ApiShieldApiDiscoveryState state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiShieldDiscoveryOperation apiShieldDiscoveryOperation = (ApiShieldDiscoveryOperation) o;
    return Objects.equals(this.endpoint, apiShieldDiscoveryOperation.endpoint) &&
        Objects.equals(this.host, apiShieldDiscoveryOperation.host) &&
        Objects.equals(this.method, apiShieldDiscoveryOperation.method) &&
        Objects.equals(this.features, apiShieldDiscoveryOperation.features) &&
        Objects.equals(this.id, apiShieldDiscoveryOperation.id) &&
        Objects.equals(this.lastUpdated, apiShieldDiscoveryOperation.lastUpdated) &&
        Objects.equals(this.origin, apiShieldDiscoveryOperation.origin) &&
        Objects.equals(this.state, apiShieldDiscoveryOperation.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endpoint, host, method, features, id, lastUpdated, origin, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiShieldDiscoveryOperation {\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endpoint");
    openapiFields.add("host");
    openapiFields.add("method");
    openapiFields.add("features");
    openapiFields.add("id");
    openapiFields.add("last_updated");
    openapiFields.add("origin");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("endpoint");
    openapiRequiredFields.add("host");
    openapiRequiredFields.add("method");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("last_updated");
    openapiRequiredFields.add("origin");
    openapiRequiredFields.add("state");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ApiShieldDiscoveryOperation
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiShieldDiscoveryOperation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiShieldDiscoveryOperation is not found in the empty JSON string", ApiShieldDiscoveryOperation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiShieldDiscoveryOperation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiShieldDiscoveryOperation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApiShieldDiscoveryOperation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpoint").toString()));
      }
      if (!jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      // validate the required field `method`
      ApiShieldMethod.validateJsonElement(jsonObj.get("method"));
      // validate the optional field `features`
      if (jsonObj.get("features") != null && !jsonObj.get("features").isJsonNull()) {
        ApiShieldTrafficStats.validateJsonElement(jsonObj.get("features"));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("origin") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("origin").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `origin` to be an array in the JSON string but got `%s`", jsonObj.get("origin").toString()));
      }
      // validate the required field `state`
      ApiShieldApiDiscoveryState.validateJsonElement(jsonObj.get("state"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiShieldDiscoveryOperation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiShieldDiscoveryOperation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiShieldDiscoveryOperation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiShieldDiscoveryOperation.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiShieldDiscoveryOperation>() {
           @Override
           public void write(JsonWriter out, ApiShieldDiscoveryOperation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiShieldDiscoveryOperation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApiShieldDiscoveryOperation given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApiShieldDiscoveryOperation
  * @throws IOException if the JSON string is invalid with respect to ApiShieldDiscoveryOperation
  */
  public static ApiShieldDiscoveryOperation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiShieldDiscoveryOperation.class);
  }

 /**
  * Convert an instance of ApiShieldDiscoveryOperation to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

