/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.Logging;
import org.openapitools.client.model.RulesetsBlockRule;
import org.openapitools.client.model.RulesetsChallengeRule;
import org.openapitools.client.model.RulesetsCompressResponseRule;
import org.openapitools.client.model.RulesetsExecuteRule;
import org.openapitools.client.model.RulesetsJsChallengeRule;
import org.openapitools.client.model.RulesetsLogRule;
import org.openapitools.client.model.RulesetsManagedChallengeRule;
import org.openapitools.client.model.RulesetsRedirectRule;
import org.openapitools.client.model.RulesetsRewriteRule;
import org.openapitools.client.model.RulesetsRouteRule;
import org.openapitools.client.model.RulesetsScoreRule;
import org.openapitools.client.model.RulesetsServeErrorRule;
import org.openapitools.client.model.RulesetsSetCacheSettingsRule;
import org.openapitools.client.model.RulesetsSetConfigRule;
import org.openapitools.client.model.RulesetsSkipRule;
import org.openapitools.client.model.SetCacheSettingsRuleActionParameters;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import invalidPackageName.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class RulesetsRequestRule extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(RulesetsRequestRule.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!RulesetsRequestRule.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'RulesetsRequestRule' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<RulesetsBlockRule> adapterRulesetsBlockRule = gson.getDelegateAdapter(this, TypeToken.get(RulesetsBlockRule.class));
            final TypeAdapter<RulesetsChallengeRule> adapterRulesetsChallengeRule = gson.getDelegateAdapter(this, TypeToken.get(RulesetsChallengeRule.class));
            final TypeAdapter<RulesetsCompressResponseRule> adapterRulesetsCompressResponseRule = gson.getDelegateAdapter(this, TypeToken.get(RulesetsCompressResponseRule.class));
            final TypeAdapter<RulesetsExecuteRule> adapterRulesetsExecuteRule = gson.getDelegateAdapter(this, TypeToken.get(RulesetsExecuteRule.class));
            final TypeAdapter<RulesetsJsChallengeRule> adapterRulesetsJsChallengeRule = gson.getDelegateAdapter(this, TypeToken.get(RulesetsJsChallengeRule.class));
            final TypeAdapter<RulesetsLogRule> adapterRulesetsLogRule = gson.getDelegateAdapter(this, TypeToken.get(RulesetsLogRule.class));
            final TypeAdapter<RulesetsManagedChallengeRule> adapterRulesetsManagedChallengeRule = gson.getDelegateAdapter(this, TypeToken.get(RulesetsManagedChallengeRule.class));
            final TypeAdapter<RulesetsRedirectRule> adapterRulesetsRedirectRule = gson.getDelegateAdapter(this, TypeToken.get(RulesetsRedirectRule.class));
            final TypeAdapter<RulesetsRewriteRule> adapterRulesetsRewriteRule = gson.getDelegateAdapter(this, TypeToken.get(RulesetsRewriteRule.class));
            final TypeAdapter<RulesetsRouteRule> adapterRulesetsRouteRule = gson.getDelegateAdapter(this, TypeToken.get(RulesetsRouteRule.class));
            final TypeAdapter<RulesetsScoreRule> adapterRulesetsScoreRule = gson.getDelegateAdapter(this, TypeToken.get(RulesetsScoreRule.class));
            final TypeAdapter<RulesetsServeErrorRule> adapterRulesetsServeErrorRule = gson.getDelegateAdapter(this, TypeToken.get(RulesetsServeErrorRule.class));
            final TypeAdapter<RulesetsSetConfigRule> adapterRulesetsSetConfigRule = gson.getDelegateAdapter(this, TypeToken.get(RulesetsSetConfigRule.class));
            final TypeAdapter<RulesetsSkipRule> adapterRulesetsSkipRule = gson.getDelegateAdapter(this, TypeToken.get(RulesetsSkipRule.class));
            final TypeAdapter<RulesetsSetCacheSettingsRule> adapterRulesetsSetCacheSettingsRule = gson.getDelegateAdapter(this, TypeToken.get(RulesetsSetCacheSettingsRule.class));

            return (TypeAdapter<T>) new TypeAdapter<RulesetsRequestRule>() {
                @Override
                public void write(JsonWriter out, RulesetsRequestRule value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `RulesetsBlockRule`
                    if (value.getActualInstance() instanceof RulesetsBlockRule) {
                        JsonElement element = adapterRulesetsBlockRule.toJsonTree((RulesetsBlockRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `RulesetsChallengeRule`
                    if (value.getActualInstance() instanceof RulesetsChallengeRule) {
                        JsonElement element = adapterRulesetsChallengeRule.toJsonTree((RulesetsChallengeRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `RulesetsCompressResponseRule`
                    if (value.getActualInstance() instanceof RulesetsCompressResponseRule) {
                        JsonElement element = adapterRulesetsCompressResponseRule.toJsonTree((RulesetsCompressResponseRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `RulesetsExecuteRule`
                    if (value.getActualInstance() instanceof RulesetsExecuteRule) {
                        JsonElement element = adapterRulesetsExecuteRule.toJsonTree((RulesetsExecuteRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `RulesetsJsChallengeRule`
                    if (value.getActualInstance() instanceof RulesetsJsChallengeRule) {
                        JsonElement element = adapterRulesetsJsChallengeRule.toJsonTree((RulesetsJsChallengeRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `RulesetsLogRule`
                    if (value.getActualInstance() instanceof RulesetsLogRule) {
                        JsonElement element = adapterRulesetsLogRule.toJsonTree((RulesetsLogRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `RulesetsManagedChallengeRule`
                    if (value.getActualInstance() instanceof RulesetsManagedChallengeRule) {
                        JsonElement element = adapterRulesetsManagedChallengeRule.toJsonTree((RulesetsManagedChallengeRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `RulesetsRedirectRule`
                    if (value.getActualInstance() instanceof RulesetsRedirectRule) {
                        JsonElement element = adapterRulesetsRedirectRule.toJsonTree((RulesetsRedirectRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `RulesetsRewriteRule`
                    if (value.getActualInstance() instanceof RulesetsRewriteRule) {
                        JsonElement element = adapterRulesetsRewriteRule.toJsonTree((RulesetsRewriteRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `RulesetsRouteRule`
                    if (value.getActualInstance() instanceof RulesetsRouteRule) {
                        JsonElement element = adapterRulesetsRouteRule.toJsonTree((RulesetsRouteRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `RulesetsScoreRule`
                    if (value.getActualInstance() instanceof RulesetsScoreRule) {
                        JsonElement element = adapterRulesetsScoreRule.toJsonTree((RulesetsScoreRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `RulesetsServeErrorRule`
                    if (value.getActualInstance() instanceof RulesetsServeErrorRule) {
                        JsonElement element = adapterRulesetsServeErrorRule.toJsonTree((RulesetsServeErrorRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `RulesetsSetConfigRule`
                    if (value.getActualInstance() instanceof RulesetsSetConfigRule) {
                        JsonElement element = adapterRulesetsSetConfigRule.toJsonTree((RulesetsSetConfigRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `RulesetsSkipRule`
                    if (value.getActualInstance() instanceof RulesetsSkipRule) {
                        JsonElement element = adapterRulesetsSkipRule.toJsonTree((RulesetsSkipRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `RulesetsSetCacheSettingsRule`
                    if (value.getActualInstance() instanceof RulesetsSetCacheSettingsRule) {
                        JsonElement element = adapterRulesetsSetCacheSettingsRule.toJsonTree((RulesetsSetCacheSettingsRule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: RulesetsBlockRule, RulesetsChallengeRule, RulesetsCompressResponseRule, RulesetsExecuteRule, RulesetsJsChallengeRule, RulesetsLogRule, RulesetsManagedChallengeRule, RulesetsRedirectRule, RulesetsRewriteRule, RulesetsRouteRule, RulesetsScoreRule, RulesetsServeErrorRule, RulesetsSetCacheSettingsRule, RulesetsSetConfigRule, RulesetsSkipRule");
                }

                @Override
                public RulesetsRequestRule read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize RulesetsBlockRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RulesetsBlockRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterRulesetsBlockRule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RulesetsBlockRule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RulesetsBlockRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RulesetsBlockRule'", e);
                    }
                    // deserialize RulesetsChallengeRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RulesetsChallengeRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterRulesetsChallengeRule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RulesetsChallengeRule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RulesetsChallengeRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RulesetsChallengeRule'", e);
                    }
                    // deserialize RulesetsCompressResponseRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RulesetsCompressResponseRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterRulesetsCompressResponseRule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RulesetsCompressResponseRule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RulesetsCompressResponseRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RulesetsCompressResponseRule'", e);
                    }
                    // deserialize RulesetsExecuteRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RulesetsExecuteRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterRulesetsExecuteRule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RulesetsExecuteRule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RulesetsExecuteRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RulesetsExecuteRule'", e);
                    }
                    // deserialize RulesetsJsChallengeRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RulesetsJsChallengeRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterRulesetsJsChallengeRule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RulesetsJsChallengeRule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RulesetsJsChallengeRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RulesetsJsChallengeRule'", e);
                    }
                    // deserialize RulesetsLogRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RulesetsLogRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterRulesetsLogRule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RulesetsLogRule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RulesetsLogRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RulesetsLogRule'", e);
                    }
                    // deserialize RulesetsManagedChallengeRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RulesetsManagedChallengeRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterRulesetsManagedChallengeRule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RulesetsManagedChallengeRule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RulesetsManagedChallengeRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RulesetsManagedChallengeRule'", e);
                    }
                    // deserialize RulesetsRedirectRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RulesetsRedirectRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterRulesetsRedirectRule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RulesetsRedirectRule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RulesetsRedirectRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RulesetsRedirectRule'", e);
                    }
                    // deserialize RulesetsRewriteRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RulesetsRewriteRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterRulesetsRewriteRule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RulesetsRewriteRule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RulesetsRewriteRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RulesetsRewriteRule'", e);
                    }
                    // deserialize RulesetsRouteRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RulesetsRouteRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterRulesetsRouteRule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RulesetsRouteRule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RulesetsRouteRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RulesetsRouteRule'", e);
                    }
                    // deserialize RulesetsScoreRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RulesetsScoreRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterRulesetsScoreRule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RulesetsScoreRule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RulesetsScoreRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RulesetsScoreRule'", e);
                    }
                    // deserialize RulesetsServeErrorRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RulesetsServeErrorRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterRulesetsServeErrorRule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RulesetsServeErrorRule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RulesetsServeErrorRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RulesetsServeErrorRule'", e);
                    }
                    // deserialize RulesetsSetConfigRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RulesetsSetConfigRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterRulesetsSetConfigRule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RulesetsSetConfigRule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RulesetsSetConfigRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RulesetsSetConfigRule'", e);
                    }
                    // deserialize RulesetsSkipRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RulesetsSkipRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterRulesetsSkipRule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RulesetsSkipRule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RulesetsSkipRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RulesetsSkipRule'", e);
                    }
                    // deserialize RulesetsSetCacheSettingsRule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RulesetsSetCacheSettingsRule.validateJsonElement(jsonElement);
                        actualAdapter = adapterRulesetsSetCacheSettingsRule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RulesetsSetCacheSettingsRule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RulesetsSetCacheSettingsRule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RulesetsSetCacheSettingsRule'", e);
                    }

                    if (match == 1) {
                        RulesetsRequestRule ret = new RulesetsRequestRule();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for RulesetsRequestRule: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public RulesetsRequestRule() {
        super("oneOf", Boolean.FALSE);
    }

    public RulesetsRequestRule(RulesetsBlockRule o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public RulesetsRequestRule(RulesetsChallengeRule o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public RulesetsRequestRule(RulesetsCompressResponseRule o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public RulesetsRequestRule(RulesetsExecuteRule o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public RulesetsRequestRule(RulesetsJsChallengeRule o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public RulesetsRequestRule(RulesetsLogRule o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public RulesetsRequestRule(RulesetsManagedChallengeRule o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public RulesetsRequestRule(RulesetsRedirectRule o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public RulesetsRequestRule(RulesetsRewriteRule o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public RulesetsRequestRule(RulesetsRouteRule o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public RulesetsRequestRule(RulesetsScoreRule o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public RulesetsRequestRule(RulesetsServeErrorRule o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public RulesetsRequestRule(RulesetsSetCacheSettingsRule o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public RulesetsRequestRule(RulesetsSetConfigRule o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public RulesetsRequestRule(RulesetsSkipRule o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("RulesetsBlockRule", RulesetsBlockRule.class);
        schemas.put("RulesetsChallengeRule", RulesetsChallengeRule.class);
        schemas.put("RulesetsCompressResponseRule", RulesetsCompressResponseRule.class);
        schemas.put("RulesetsExecuteRule", RulesetsExecuteRule.class);
        schemas.put("RulesetsJsChallengeRule", RulesetsJsChallengeRule.class);
        schemas.put("RulesetsLogRule", RulesetsLogRule.class);
        schemas.put("RulesetsManagedChallengeRule", RulesetsManagedChallengeRule.class);
        schemas.put("RulesetsRedirectRule", RulesetsRedirectRule.class);
        schemas.put("RulesetsRewriteRule", RulesetsRewriteRule.class);
        schemas.put("RulesetsRouteRule", RulesetsRouteRule.class);
        schemas.put("RulesetsScoreRule", RulesetsScoreRule.class);
        schemas.put("RulesetsServeErrorRule", RulesetsServeErrorRule.class);
        schemas.put("RulesetsSetConfigRule", RulesetsSetConfigRule.class);
        schemas.put("RulesetsSkipRule", RulesetsSkipRule.class);
        schemas.put("RulesetsSetCacheSettingsRule", RulesetsSetCacheSettingsRule.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return RulesetsRequestRule.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * RulesetsBlockRule, RulesetsChallengeRule, RulesetsCompressResponseRule, RulesetsExecuteRule, RulesetsJsChallengeRule, RulesetsLogRule, RulesetsManagedChallengeRule, RulesetsRedirectRule, RulesetsRewriteRule, RulesetsRouteRule, RulesetsScoreRule, RulesetsServeErrorRule, RulesetsSetCacheSettingsRule, RulesetsSetConfigRule, RulesetsSkipRule
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof RulesetsBlockRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RulesetsChallengeRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RulesetsCompressResponseRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RulesetsExecuteRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RulesetsJsChallengeRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RulesetsLogRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RulesetsManagedChallengeRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RulesetsRedirectRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RulesetsRewriteRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RulesetsRouteRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RulesetsScoreRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RulesetsServeErrorRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RulesetsSetConfigRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RulesetsSkipRule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RulesetsSetCacheSettingsRule) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be RulesetsBlockRule, RulesetsChallengeRule, RulesetsCompressResponseRule, RulesetsExecuteRule, RulesetsJsChallengeRule, RulesetsLogRule, RulesetsManagedChallengeRule, RulesetsRedirectRule, RulesetsRewriteRule, RulesetsRouteRule, RulesetsScoreRule, RulesetsServeErrorRule, RulesetsSetCacheSettingsRule, RulesetsSetConfigRule, RulesetsSkipRule");
    }

    /**
     * Get the actual instance, which can be the following:
     * RulesetsBlockRule, RulesetsChallengeRule, RulesetsCompressResponseRule, RulesetsExecuteRule, RulesetsJsChallengeRule, RulesetsLogRule, RulesetsManagedChallengeRule, RulesetsRedirectRule, RulesetsRewriteRule, RulesetsRouteRule, RulesetsScoreRule, RulesetsServeErrorRule, RulesetsSetCacheSettingsRule, RulesetsSetConfigRule, RulesetsSkipRule
     *
     * @return The actual instance (RulesetsBlockRule, RulesetsChallengeRule, RulesetsCompressResponseRule, RulesetsExecuteRule, RulesetsJsChallengeRule, RulesetsLogRule, RulesetsManagedChallengeRule, RulesetsRedirectRule, RulesetsRewriteRule, RulesetsRouteRule, RulesetsScoreRule, RulesetsServeErrorRule, RulesetsSetCacheSettingsRule, RulesetsSetConfigRule, RulesetsSkipRule)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `RulesetsBlockRule`. If the actual instance is not `RulesetsBlockRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RulesetsBlockRule`
     * @throws ClassCastException if the instance is not `RulesetsBlockRule`
     */
    public RulesetsBlockRule getRulesetsBlockRule() throws ClassCastException {
        return (RulesetsBlockRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `RulesetsChallengeRule`. If the actual instance is not `RulesetsChallengeRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RulesetsChallengeRule`
     * @throws ClassCastException if the instance is not `RulesetsChallengeRule`
     */
    public RulesetsChallengeRule getRulesetsChallengeRule() throws ClassCastException {
        return (RulesetsChallengeRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `RulesetsCompressResponseRule`. If the actual instance is not `RulesetsCompressResponseRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RulesetsCompressResponseRule`
     * @throws ClassCastException if the instance is not `RulesetsCompressResponseRule`
     */
    public RulesetsCompressResponseRule getRulesetsCompressResponseRule() throws ClassCastException {
        return (RulesetsCompressResponseRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `RulesetsExecuteRule`. If the actual instance is not `RulesetsExecuteRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RulesetsExecuteRule`
     * @throws ClassCastException if the instance is not `RulesetsExecuteRule`
     */
    public RulesetsExecuteRule getRulesetsExecuteRule() throws ClassCastException {
        return (RulesetsExecuteRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `RulesetsJsChallengeRule`. If the actual instance is not `RulesetsJsChallengeRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RulesetsJsChallengeRule`
     * @throws ClassCastException if the instance is not `RulesetsJsChallengeRule`
     */
    public RulesetsJsChallengeRule getRulesetsJsChallengeRule() throws ClassCastException {
        return (RulesetsJsChallengeRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `RulesetsLogRule`. If the actual instance is not `RulesetsLogRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RulesetsLogRule`
     * @throws ClassCastException if the instance is not `RulesetsLogRule`
     */
    public RulesetsLogRule getRulesetsLogRule() throws ClassCastException {
        return (RulesetsLogRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `RulesetsManagedChallengeRule`. If the actual instance is not `RulesetsManagedChallengeRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RulesetsManagedChallengeRule`
     * @throws ClassCastException if the instance is not `RulesetsManagedChallengeRule`
     */
    public RulesetsManagedChallengeRule getRulesetsManagedChallengeRule() throws ClassCastException {
        return (RulesetsManagedChallengeRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `RulesetsRedirectRule`. If the actual instance is not `RulesetsRedirectRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RulesetsRedirectRule`
     * @throws ClassCastException if the instance is not `RulesetsRedirectRule`
     */
    public RulesetsRedirectRule getRulesetsRedirectRule() throws ClassCastException {
        return (RulesetsRedirectRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `RulesetsRewriteRule`. If the actual instance is not `RulesetsRewriteRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RulesetsRewriteRule`
     * @throws ClassCastException if the instance is not `RulesetsRewriteRule`
     */
    public RulesetsRewriteRule getRulesetsRewriteRule() throws ClassCastException {
        return (RulesetsRewriteRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `RulesetsRouteRule`. If the actual instance is not `RulesetsRouteRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RulesetsRouteRule`
     * @throws ClassCastException if the instance is not `RulesetsRouteRule`
     */
    public RulesetsRouteRule getRulesetsRouteRule() throws ClassCastException {
        return (RulesetsRouteRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `RulesetsScoreRule`. If the actual instance is not `RulesetsScoreRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RulesetsScoreRule`
     * @throws ClassCastException if the instance is not `RulesetsScoreRule`
     */
    public RulesetsScoreRule getRulesetsScoreRule() throws ClassCastException {
        return (RulesetsScoreRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `RulesetsServeErrorRule`. If the actual instance is not `RulesetsServeErrorRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RulesetsServeErrorRule`
     * @throws ClassCastException if the instance is not `RulesetsServeErrorRule`
     */
    public RulesetsServeErrorRule getRulesetsServeErrorRule() throws ClassCastException {
        return (RulesetsServeErrorRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `RulesetsSetConfigRule`. If the actual instance is not `RulesetsSetConfigRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RulesetsSetConfigRule`
     * @throws ClassCastException if the instance is not `RulesetsSetConfigRule`
     */
    public RulesetsSetConfigRule getRulesetsSetConfigRule() throws ClassCastException {
        return (RulesetsSetConfigRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `RulesetsSkipRule`. If the actual instance is not `RulesetsSkipRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RulesetsSkipRule`
     * @throws ClassCastException if the instance is not `RulesetsSkipRule`
     */
    public RulesetsSkipRule getRulesetsSkipRule() throws ClassCastException {
        return (RulesetsSkipRule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `RulesetsSetCacheSettingsRule`. If the actual instance is not `RulesetsSetCacheSettingsRule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RulesetsSetCacheSettingsRule`
     * @throws ClassCastException if the instance is not `RulesetsSetCacheSettingsRule`
     */
    public RulesetsSetCacheSettingsRule getRulesetsSetCacheSettingsRule() throws ClassCastException {
        return (RulesetsSetCacheSettingsRule)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to RulesetsRequestRule
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with RulesetsBlockRule
        try {
            RulesetsBlockRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for RulesetsBlockRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with RulesetsChallengeRule
        try {
            RulesetsChallengeRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for RulesetsChallengeRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with RulesetsCompressResponseRule
        try {
            RulesetsCompressResponseRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for RulesetsCompressResponseRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with RulesetsExecuteRule
        try {
            RulesetsExecuteRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for RulesetsExecuteRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with RulesetsJsChallengeRule
        try {
            RulesetsJsChallengeRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for RulesetsJsChallengeRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with RulesetsLogRule
        try {
            RulesetsLogRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for RulesetsLogRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with RulesetsManagedChallengeRule
        try {
            RulesetsManagedChallengeRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for RulesetsManagedChallengeRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with RulesetsRedirectRule
        try {
            RulesetsRedirectRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for RulesetsRedirectRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with RulesetsRewriteRule
        try {
            RulesetsRewriteRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for RulesetsRewriteRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with RulesetsRouteRule
        try {
            RulesetsRouteRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for RulesetsRouteRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with RulesetsScoreRule
        try {
            RulesetsScoreRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for RulesetsScoreRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with RulesetsServeErrorRule
        try {
            RulesetsServeErrorRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for RulesetsServeErrorRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with RulesetsSetConfigRule
        try {
            RulesetsSetConfigRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for RulesetsSetConfigRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with RulesetsSkipRule
        try {
            RulesetsSkipRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for RulesetsSkipRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with RulesetsSetCacheSettingsRule
        try {
            RulesetsSetCacheSettingsRule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for RulesetsSetCacheSettingsRule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for RulesetsRequestRule with oneOf schemas: RulesetsBlockRule, RulesetsChallengeRule, RulesetsCompressResponseRule, RulesetsExecuteRule, RulesetsJsChallengeRule, RulesetsLogRule, RulesetsManagedChallengeRule, RulesetsRedirectRule, RulesetsRewriteRule, RulesetsRouteRule, RulesetsScoreRule, RulesetsServeErrorRule, RulesetsSetCacheSettingsRule, RulesetsSetConfigRule, RulesetsSkipRule. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of RulesetsRequestRule given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of RulesetsRequestRule
     * @throws IOException if the JSON string is invalid with respect to RulesetsRequestRule
     */
    public static RulesetsRequestRule fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, RulesetsRequestRule.class);
    }

    /**
     * Convert an instance of RulesetsRequestRule to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

