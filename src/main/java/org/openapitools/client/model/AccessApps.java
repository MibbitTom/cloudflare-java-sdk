/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AccessCorsHeaders;
import org.openapitools.client.model.AccessSaasPropsSaasApp;
import org.openapitools.client.model.AppLauncherApplication;
import org.openapitools.client.model.BookmarkApplication;
import org.openapitools.client.model.BrowserIsolationPermissionsApplication;
import org.openapitools.client.model.BrowserSSHApplication;
import org.openapitools.client.model.BrowserVNCApplication;
import org.openapitools.client.model.DeviceEnrollmentPermissionsApplication;
import org.openapitools.client.model.SaaSApplication;
import org.openapitools.client.model.SelfHostedApplication;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import invalidPackageName.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class AccessApps extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(AccessApps.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AccessApps.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'AccessApps' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SelfHostedApplication> adapterSelfHostedApplication = gson.getDelegateAdapter(this, TypeToken.get(SelfHostedApplication.class));
            final TypeAdapter<SaaSApplication> adapterSaaSApplication = gson.getDelegateAdapter(this, TypeToken.get(SaaSApplication.class));
            final TypeAdapter<BrowserSSHApplication> adapterBrowserSSHApplication = gson.getDelegateAdapter(this, TypeToken.get(BrowserSSHApplication.class));
            final TypeAdapter<BrowserVNCApplication> adapterBrowserVNCApplication = gson.getDelegateAdapter(this, TypeToken.get(BrowserVNCApplication.class));
            final TypeAdapter<AppLauncherApplication> adapterAppLauncherApplication = gson.getDelegateAdapter(this, TypeToken.get(AppLauncherApplication.class));
            final TypeAdapter<DeviceEnrollmentPermissionsApplication> adapterDeviceEnrollmentPermissionsApplication = gson.getDelegateAdapter(this, TypeToken.get(DeviceEnrollmentPermissionsApplication.class));
            final TypeAdapter<BrowserIsolationPermissionsApplication> adapterBrowserIsolationPermissionsApplication = gson.getDelegateAdapter(this, TypeToken.get(BrowserIsolationPermissionsApplication.class));
            final TypeAdapter<BookmarkApplication> adapterBookmarkApplication = gson.getDelegateAdapter(this, TypeToken.get(BookmarkApplication.class));

            return (TypeAdapter<T>) new TypeAdapter<AccessApps>() {
                @Override
                public void write(JsonWriter out, AccessApps value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `SelfHostedApplication`
                    if (value.getActualInstance() instanceof SelfHostedApplication) {
                        JsonElement element = adapterSelfHostedApplication.toJsonTree((SelfHostedApplication)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SaaSApplication`
                    if (value.getActualInstance() instanceof SaaSApplication) {
                        JsonElement element = adapterSaaSApplication.toJsonTree((SaaSApplication)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `BrowserSSHApplication`
                    if (value.getActualInstance() instanceof BrowserSSHApplication) {
                        JsonElement element = adapterBrowserSSHApplication.toJsonTree((BrowserSSHApplication)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `BrowserVNCApplication`
                    if (value.getActualInstance() instanceof BrowserVNCApplication) {
                        JsonElement element = adapterBrowserVNCApplication.toJsonTree((BrowserVNCApplication)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AppLauncherApplication`
                    if (value.getActualInstance() instanceof AppLauncherApplication) {
                        JsonElement element = adapterAppLauncherApplication.toJsonTree((AppLauncherApplication)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DeviceEnrollmentPermissionsApplication`
                    if (value.getActualInstance() instanceof DeviceEnrollmentPermissionsApplication) {
                        JsonElement element = adapterDeviceEnrollmentPermissionsApplication.toJsonTree((DeviceEnrollmentPermissionsApplication)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `BrowserIsolationPermissionsApplication`
                    if (value.getActualInstance() instanceof BrowserIsolationPermissionsApplication) {
                        JsonElement element = adapterBrowserIsolationPermissionsApplication.toJsonTree((BrowserIsolationPermissionsApplication)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `BookmarkApplication`
                    if (value.getActualInstance() instanceof BookmarkApplication) {
                        JsonElement element = adapterBookmarkApplication.toJsonTree((BookmarkApplication)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemas: AppLauncherApplication, BookmarkApplication, BrowserIsolationPermissionsApplication, BrowserSSHApplication, BrowserVNCApplication, DeviceEnrollmentPermissionsApplication, SaaSApplication, SelfHostedApplication");
                }

                @Override
                public AccessApps read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize SelfHostedApplication
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SelfHostedApplication.validateJsonElement(jsonElement);
                        actualAdapter = adapterSelfHostedApplication;
                        AccessApps ret = new AccessApps();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SelfHostedApplication failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SelfHostedApplication'", e);
                    }
                    // deserialize SaaSApplication
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SaaSApplication.validateJsonElement(jsonElement);
                        actualAdapter = adapterSaaSApplication;
                        AccessApps ret = new AccessApps();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SaaSApplication failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SaaSApplication'", e);
                    }
                    // deserialize BrowserSSHApplication
                    try {
                        // validate the JSON object to see if any exception is thrown
                        BrowserSSHApplication.validateJsonElement(jsonElement);
                        actualAdapter = adapterBrowserSSHApplication;
                        AccessApps ret = new AccessApps();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for BrowserSSHApplication failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'BrowserSSHApplication'", e);
                    }
                    // deserialize BrowserVNCApplication
                    try {
                        // validate the JSON object to see if any exception is thrown
                        BrowserVNCApplication.validateJsonElement(jsonElement);
                        actualAdapter = adapterBrowserVNCApplication;
                        AccessApps ret = new AccessApps();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for BrowserVNCApplication failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'BrowserVNCApplication'", e);
                    }
                    // deserialize AppLauncherApplication
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AppLauncherApplication.validateJsonElement(jsonElement);
                        actualAdapter = adapterAppLauncherApplication;
                        AccessApps ret = new AccessApps();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AppLauncherApplication failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AppLauncherApplication'", e);
                    }
                    // deserialize DeviceEnrollmentPermissionsApplication
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DeviceEnrollmentPermissionsApplication.validateJsonElement(jsonElement);
                        actualAdapter = adapterDeviceEnrollmentPermissionsApplication;
                        AccessApps ret = new AccessApps();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DeviceEnrollmentPermissionsApplication failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DeviceEnrollmentPermissionsApplication'", e);
                    }
                    // deserialize BrowserIsolationPermissionsApplication
                    try {
                        // validate the JSON object to see if any exception is thrown
                        BrowserIsolationPermissionsApplication.validateJsonElement(jsonElement);
                        actualAdapter = adapterBrowserIsolationPermissionsApplication;
                        AccessApps ret = new AccessApps();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for BrowserIsolationPermissionsApplication failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'BrowserIsolationPermissionsApplication'", e);
                    }
                    // deserialize BookmarkApplication
                    try {
                        // validate the JSON object to see if any exception is thrown
                        BookmarkApplication.validateJsonElement(jsonElement);
                        actualAdapter = adapterBookmarkApplication;
                        AccessApps ret = new AccessApps();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for BookmarkApplication failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'BookmarkApplication'", e);
                    }

                    throw new IOException(String.format("Failed deserialization for AccessApps: no class matches result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public AccessApps() {
        super("anyOf", Boolean.FALSE);
    }

    public AccessApps(AppLauncherApplication o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessApps(BookmarkApplication o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessApps(BrowserIsolationPermissionsApplication o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessApps(BrowserSSHApplication o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessApps(BrowserVNCApplication o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessApps(DeviceEnrollmentPermissionsApplication o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessApps(SaaSApplication o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AccessApps(SelfHostedApplication o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("SelfHostedApplication", SelfHostedApplication.class);
        schemas.put("SaaSApplication", SaaSApplication.class);
        schemas.put("BrowserSSHApplication", BrowserSSHApplication.class);
        schemas.put("BrowserVNCApplication", BrowserVNCApplication.class);
        schemas.put("AppLauncherApplication", AppLauncherApplication.class);
        schemas.put("DeviceEnrollmentPermissionsApplication", DeviceEnrollmentPermissionsApplication.class);
        schemas.put("BrowserIsolationPermissionsApplication", BrowserIsolationPermissionsApplication.class);
        schemas.put("BookmarkApplication", BookmarkApplication.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return AccessApps.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * AppLauncherApplication, BookmarkApplication, BrowserIsolationPermissionsApplication, BrowserSSHApplication, BrowserVNCApplication, DeviceEnrollmentPermissionsApplication, SaaSApplication, SelfHostedApplication
     *
     * It could be an instance of the 'anyOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof SelfHostedApplication) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SaaSApplication) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof BrowserSSHApplication) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof BrowserVNCApplication) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AppLauncherApplication) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DeviceEnrollmentPermissionsApplication) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof BrowserIsolationPermissionsApplication) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof BookmarkApplication) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be AppLauncherApplication, BookmarkApplication, BrowserIsolationPermissionsApplication, BrowserSSHApplication, BrowserVNCApplication, DeviceEnrollmentPermissionsApplication, SaaSApplication, SelfHostedApplication");
    }

    /**
     * Get the actual instance, which can be the following:
     * AppLauncherApplication, BookmarkApplication, BrowserIsolationPermissionsApplication, BrowserSSHApplication, BrowserVNCApplication, DeviceEnrollmentPermissionsApplication, SaaSApplication, SelfHostedApplication
     *
     * @return The actual instance (AppLauncherApplication, BookmarkApplication, BrowserIsolationPermissionsApplication, BrowserSSHApplication, BrowserVNCApplication, DeviceEnrollmentPermissionsApplication, SaaSApplication, SelfHostedApplication)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `SelfHostedApplication`. If the actual instance is not `SelfHostedApplication`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SelfHostedApplication`
     * @throws ClassCastException if the instance is not `SelfHostedApplication`
     */
    public SelfHostedApplication getSelfHostedApplication() throws ClassCastException {
        return (SelfHostedApplication)super.getActualInstance();
    }
    /**
     * Get the actual instance of `SaaSApplication`. If the actual instance is not `SaaSApplication`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SaaSApplication`
     * @throws ClassCastException if the instance is not `SaaSApplication`
     */
    public SaaSApplication getSaaSApplication() throws ClassCastException {
        return (SaaSApplication)super.getActualInstance();
    }
    /**
     * Get the actual instance of `BrowserSSHApplication`. If the actual instance is not `BrowserSSHApplication`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BrowserSSHApplication`
     * @throws ClassCastException if the instance is not `BrowserSSHApplication`
     */
    public BrowserSSHApplication getBrowserSSHApplication() throws ClassCastException {
        return (BrowserSSHApplication)super.getActualInstance();
    }
    /**
     * Get the actual instance of `BrowserVNCApplication`. If the actual instance is not `BrowserVNCApplication`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BrowserVNCApplication`
     * @throws ClassCastException if the instance is not `BrowserVNCApplication`
     */
    public BrowserVNCApplication getBrowserVNCApplication() throws ClassCastException {
        return (BrowserVNCApplication)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AppLauncherApplication`. If the actual instance is not `AppLauncherApplication`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AppLauncherApplication`
     * @throws ClassCastException if the instance is not `AppLauncherApplication`
     */
    public AppLauncherApplication getAppLauncherApplication() throws ClassCastException {
        return (AppLauncherApplication)super.getActualInstance();
    }
    /**
     * Get the actual instance of `DeviceEnrollmentPermissionsApplication`. If the actual instance is not `DeviceEnrollmentPermissionsApplication`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DeviceEnrollmentPermissionsApplication`
     * @throws ClassCastException if the instance is not `DeviceEnrollmentPermissionsApplication`
     */
    public DeviceEnrollmentPermissionsApplication getDeviceEnrollmentPermissionsApplication() throws ClassCastException {
        return (DeviceEnrollmentPermissionsApplication)super.getActualInstance();
    }
    /**
     * Get the actual instance of `BrowserIsolationPermissionsApplication`. If the actual instance is not `BrowserIsolationPermissionsApplication`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BrowserIsolationPermissionsApplication`
     * @throws ClassCastException if the instance is not `BrowserIsolationPermissionsApplication`
     */
    public BrowserIsolationPermissionsApplication getBrowserIsolationPermissionsApplication() throws ClassCastException {
        return (BrowserIsolationPermissionsApplication)super.getActualInstance();
    }
    /**
     * Get the actual instance of `BookmarkApplication`. If the actual instance is not `BookmarkApplication`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BookmarkApplication`
     * @throws ClassCastException if the instance is not `BookmarkApplication`
     */
    public BookmarkApplication getBookmarkApplication() throws ClassCastException {
        return (BookmarkApplication)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to AccessApps
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate anyOf schemas one by one
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with SelfHostedApplication
        try {
            SelfHostedApplication.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SelfHostedApplication failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SaaSApplication
        try {
            SaaSApplication.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SaaSApplication failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with BrowserSSHApplication
        try {
            BrowserSSHApplication.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for BrowserSSHApplication failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with BrowserVNCApplication
        try {
            BrowserVNCApplication.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for BrowserVNCApplication failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AppLauncherApplication
        try {
            AppLauncherApplication.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AppLauncherApplication failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DeviceEnrollmentPermissionsApplication
        try {
            DeviceEnrollmentPermissionsApplication.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DeviceEnrollmentPermissionsApplication failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with BrowserIsolationPermissionsApplication
        try {
            BrowserIsolationPermissionsApplication.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for BrowserIsolationPermissionsApplication failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with BookmarkApplication
        try {
            BookmarkApplication.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for BookmarkApplication failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        throw new IOException(String.format("The JSON string is invalid for AccessApps with anyOf schemas: AppLauncherApplication, BookmarkApplication, BrowserIsolationPermissionsApplication, BrowserSSHApplication, BrowserVNCApplication, DeviceEnrollmentPermissionsApplication, SaaSApplication, SelfHostedApplication. no class match the result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
    }

    /**
     * Create an instance of AccessApps given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of AccessApps
     * @throws IOException if the JSON string is invalid with respect to AccessApps
     */
    public static AccessApps fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, AccessApps.class);
    }

    /**
     * Convert an instance of AccessApps to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

