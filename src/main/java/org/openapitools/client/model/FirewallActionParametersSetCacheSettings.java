/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FirewallActionParametersSetCacheSettingsBrowserTtl;
import org.openapitools.client.model.FirewallActionParametersSetCacheSettingsCacheKey;
import org.openapitools.client.model.FirewallActionParametersSetCacheSettingsEdgeTtl;
import org.openapitools.client.model.FirewallActionParametersSetCacheSettingsServeStale;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * The configuration parameters for the set_cache_settings action.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class FirewallActionParametersSetCacheSettings {
  public static final String SERIALIZED_NAME_BROWSER_TTL = "browser_ttl";
  @SerializedName(SERIALIZED_NAME_BROWSER_TTL)
  private FirewallActionParametersSetCacheSettingsBrowserTtl browserTtl;

  public static final String SERIALIZED_NAME_CACHE_KEY = "cache_key";
  @SerializedName(SERIALIZED_NAME_CACHE_KEY)
  private FirewallActionParametersSetCacheSettingsCacheKey cacheKey;

  public static final String SERIALIZED_NAME_EDGE_TTL = "edge_ttl";
  @SerializedName(SERIALIZED_NAME_EDGE_TTL)
  private FirewallActionParametersSetCacheSettingsEdgeTtl edgeTtl;

  public static final String SERIALIZED_NAME_ORIGIN_ERROR_PAGE_PASSTHRU = "origin_error_page_passthru";
  @SerializedName(SERIALIZED_NAME_ORIGIN_ERROR_PAGE_PASSTHRU)
  private Boolean originErrorPagePassthru;

  public static final String SERIALIZED_NAME_RESPECT_STRONG_ETAGS = "respect_strong_etags";
  @SerializedName(SERIALIZED_NAME_RESPECT_STRONG_ETAGS)
  private Boolean respectStrongEtags;

  public static final String SERIALIZED_NAME_SERVE_STALE = "serve_stale";
  @SerializedName(SERIALIZED_NAME_SERVE_STALE)
  private FirewallActionParametersSetCacheSettingsServeStale serveStale;

  public FirewallActionParametersSetCacheSettings() {
  }

  public FirewallActionParametersSetCacheSettings browserTtl(FirewallActionParametersSetCacheSettingsBrowserTtl browserTtl) {
    this.browserTtl = browserTtl;
    return this;
  }

   /**
   * Get browserTtl
   * @return browserTtl
  **/
  @javax.annotation.Nullable
  public FirewallActionParametersSetCacheSettingsBrowserTtl getBrowserTtl() {
    return browserTtl;
  }

  public void setBrowserTtl(FirewallActionParametersSetCacheSettingsBrowserTtl browserTtl) {
    this.browserTtl = browserTtl;
  }


  public FirewallActionParametersSetCacheSettings cacheKey(FirewallActionParametersSetCacheSettingsCacheKey cacheKey) {
    this.cacheKey = cacheKey;
    return this;
  }

   /**
   * Get cacheKey
   * @return cacheKey
  **/
  @javax.annotation.Nullable
  public FirewallActionParametersSetCacheSettingsCacheKey getCacheKey() {
    return cacheKey;
  }

  public void setCacheKey(FirewallActionParametersSetCacheSettingsCacheKey cacheKey) {
    this.cacheKey = cacheKey;
  }


  public FirewallActionParametersSetCacheSettings edgeTtl(FirewallActionParametersSetCacheSettingsEdgeTtl edgeTtl) {
    this.edgeTtl = edgeTtl;
    return this;
  }

   /**
   * Get edgeTtl
   * @return edgeTtl
  **/
  @javax.annotation.Nullable
  public FirewallActionParametersSetCacheSettingsEdgeTtl getEdgeTtl() {
    return edgeTtl;
  }

  public void setEdgeTtl(FirewallActionParametersSetCacheSettingsEdgeTtl edgeTtl) {
    this.edgeTtl = edgeTtl;
  }


  public FirewallActionParametersSetCacheSettings originErrorPagePassthru(Boolean originErrorPagePassthru) {
    this.originErrorPagePassthru = originErrorPagePassthru;
    return this;
  }

   /**
   * Get originErrorPagePassthru
   * @return originErrorPagePassthru
  **/
  @javax.annotation.Nullable
  public Boolean getOriginErrorPagePassthru() {
    return originErrorPagePassthru;
  }

  public void setOriginErrorPagePassthru(Boolean originErrorPagePassthru) {
    this.originErrorPagePassthru = originErrorPagePassthru;
  }


  public FirewallActionParametersSetCacheSettings respectStrongEtags(Boolean respectStrongEtags) {
    this.respectStrongEtags = respectStrongEtags;
    return this;
  }

   /**
   * Get respectStrongEtags
   * @return respectStrongEtags
  **/
  @javax.annotation.Nullable
  public Boolean getRespectStrongEtags() {
    return respectStrongEtags;
  }

  public void setRespectStrongEtags(Boolean respectStrongEtags) {
    this.respectStrongEtags = respectStrongEtags;
  }


  public FirewallActionParametersSetCacheSettings serveStale(FirewallActionParametersSetCacheSettingsServeStale serveStale) {
    this.serveStale = serveStale;
    return this;
  }

   /**
   * Get serveStale
   * @return serveStale
  **/
  @javax.annotation.Nullable
  public FirewallActionParametersSetCacheSettingsServeStale getServeStale() {
    return serveStale;
  }

  public void setServeStale(FirewallActionParametersSetCacheSettingsServeStale serveStale) {
    this.serveStale = serveStale;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FirewallActionParametersSetCacheSettings firewallActionParametersSetCacheSettings = (FirewallActionParametersSetCacheSettings) o;
    return Objects.equals(this.browserTtl, firewallActionParametersSetCacheSettings.browserTtl) &&
        Objects.equals(this.cacheKey, firewallActionParametersSetCacheSettings.cacheKey) &&
        Objects.equals(this.edgeTtl, firewallActionParametersSetCacheSettings.edgeTtl) &&
        Objects.equals(this.originErrorPagePassthru, firewallActionParametersSetCacheSettings.originErrorPagePassthru) &&
        Objects.equals(this.respectStrongEtags, firewallActionParametersSetCacheSettings.respectStrongEtags) &&
        Objects.equals(this.serveStale, firewallActionParametersSetCacheSettings.serveStale);
  }

  @Override
  public int hashCode() {
    return Objects.hash(browserTtl, cacheKey, edgeTtl, originErrorPagePassthru, respectStrongEtags, serveStale);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FirewallActionParametersSetCacheSettings {\n");
    sb.append("    browserTtl: ").append(toIndentedString(browserTtl)).append("\n");
    sb.append("    cacheKey: ").append(toIndentedString(cacheKey)).append("\n");
    sb.append("    edgeTtl: ").append(toIndentedString(edgeTtl)).append("\n");
    sb.append("    originErrorPagePassthru: ").append(toIndentedString(originErrorPagePassthru)).append("\n");
    sb.append("    respectStrongEtags: ").append(toIndentedString(respectStrongEtags)).append("\n");
    sb.append("    serveStale: ").append(toIndentedString(serveStale)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("browser_ttl");
    openapiFields.add("cache_key");
    openapiFields.add("edge_ttl");
    openapiFields.add("origin_error_page_passthru");
    openapiFields.add("respect_strong_etags");
    openapiFields.add("serve_stale");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FirewallActionParametersSetCacheSettings
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FirewallActionParametersSetCacheSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FirewallActionParametersSetCacheSettings is not found in the empty JSON string", FirewallActionParametersSetCacheSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FirewallActionParametersSetCacheSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FirewallActionParametersSetCacheSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `browser_ttl`
      if (jsonObj.get("browser_ttl") != null && !jsonObj.get("browser_ttl").isJsonNull()) {
        FirewallActionParametersSetCacheSettingsBrowserTtl.validateJsonElement(jsonObj.get("browser_ttl"));
      }
      // validate the optional field `cache_key`
      if (jsonObj.get("cache_key") != null && !jsonObj.get("cache_key").isJsonNull()) {
        FirewallActionParametersSetCacheSettingsCacheKey.validateJsonElement(jsonObj.get("cache_key"));
      }
      // validate the optional field `edge_ttl`
      if (jsonObj.get("edge_ttl") != null && !jsonObj.get("edge_ttl").isJsonNull()) {
        FirewallActionParametersSetCacheSettingsEdgeTtl.validateJsonElement(jsonObj.get("edge_ttl"));
      }
      // validate the optional field `serve_stale`
      if (jsonObj.get("serve_stale") != null && !jsonObj.get("serve_stale").isJsonNull()) {
        FirewallActionParametersSetCacheSettingsServeStale.validateJsonElement(jsonObj.get("serve_stale"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FirewallActionParametersSetCacheSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FirewallActionParametersSetCacheSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FirewallActionParametersSetCacheSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FirewallActionParametersSetCacheSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<FirewallActionParametersSetCacheSettings>() {
           @Override
           public void write(JsonWriter out, FirewallActionParametersSetCacheSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FirewallActionParametersSetCacheSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FirewallActionParametersSetCacheSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FirewallActionParametersSetCacheSettings
  * @throws IOException if the JSON string is invalid with respect to FirewallActionParametersSetCacheSettings
  */
  public static FirewallActionParametersSetCacheSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FirewallActionParametersSetCacheSettings.class);
  }

 /**
  * Convert an instance of FirewallActionParametersSetCacheSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

