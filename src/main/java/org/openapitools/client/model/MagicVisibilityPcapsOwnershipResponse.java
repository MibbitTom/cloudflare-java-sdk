/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * MagicVisibilityPcapsOwnershipResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class MagicVisibilityPcapsOwnershipResponse {
  public static final String SERIALIZED_NAME_DESTINATION_CONF = "destination_conf";
  @SerializedName(SERIALIZED_NAME_DESTINATION_CONF)
  private String destinationConf;

  public static final String SERIALIZED_NAME_FILENAME = "filename";
  @SerializedName(SERIALIZED_NAME_FILENAME)
  private String filename;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * The status of the ownership challenge. Can be pending, success or failed.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    PENDING("pending"),
    
    SUCCESS("success"),
    
    FAILED("failed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SUBMITTED = "submitted";
  @SerializedName(SERIALIZED_NAME_SUBMITTED)
  private String submitted;

  public static final String SERIALIZED_NAME_VALIDATED = "validated";
  @SerializedName(SERIALIZED_NAME_VALIDATED)
  private String validated;

  public MagicVisibilityPcapsOwnershipResponse() {
  }

  public MagicVisibilityPcapsOwnershipResponse destinationConf(String destinationConf) {
    this.destinationConf = destinationConf;
    return this;
  }

   /**
   * The full URI for the bucket. This field only applies to &#x60;full&#x60; packet captures.
   * @return destinationConf
  **/
  @javax.annotation.Nonnull
  public String getDestinationConf() {
    return destinationConf;
  }

  public void setDestinationConf(String destinationConf) {
    this.destinationConf = destinationConf;
  }


  public MagicVisibilityPcapsOwnershipResponse filename(String filename) {
    this.filename = filename;
    return this;
  }

   /**
   * The ownership challenge filename stored in the bucket.
   * @return filename
  **/
  @javax.annotation.Nonnull
  public String getFilename() {
    return filename;
  }

  public void setFilename(String filename) {
    this.filename = filename;
  }


  public MagicVisibilityPcapsOwnershipResponse id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The bucket ID associated with the packet captures API.
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public MagicVisibilityPcapsOwnershipResponse status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * The status of the ownership challenge. Can be pending, success or failed.
   * @return status
  **/
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public MagicVisibilityPcapsOwnershipResponse submitted(String submitted) {
    this.submitted = submitted;
    return this;
  }

   /**
   * The RFC 3339 timestamp when the bucket was added to packet captures API.
   * @return submitted
  **/
  @javax.annotation.Nonnull
  public String getSubmitted() {
    return submitted;
  }

  public void setSubmitted(String submitted) {
    this.submitted = submitted;
  }


  public MagicVisibilityPcapsOwnershipResponse validated(String validated) {
    this.validated = validated;
    return this;
  }

   /**
   * The RFC 3339 timestamp when the bucket was validated.
   * @return validated
  **/
  @javax.annotation.Nullable
  public String getValidated() {
    return validated;
  }

  public void setValidated(String validated) {
    this.validated = validated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MagicVisibilityPcapsOwnershipResponse magicVisibilityPcapsOwnershipResponse = (MagicVisibilityPcapsOwnershipResponse) o;
    return Objects.equals(this.destinationConf, magicVisibilityPcapsOwnershipResponse.destinationConf) &&
        Objects.equals(this.filename, magicVisibilityPcapsOwnershipResponse.filename) &&
        Objects.equals(this.id, magicVisibilityPcapsOwnershipResponse.id) &&
        Objects.equals(this.status, magicVisibilityPcapsOwnershipResponse.status) &&
        Objects.equals(this.submitted, magicVisibilityPcapsOwnershipResponse.submitted) &&
        Objects.equals(this.validated, magicVisibilityPcapsOwnershipResponse.validated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinationConf, filename, id, status, submitted, validated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MagicVisibilityPcapsOwnershipResponse {\n");
    sb.append("    destinationConf: ").append(toIndentedString(destinationConf)).append("\n");
    sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    submitted: ").append(toIndentedString(submitted)).append("\n");
    sb.append("    validated: ").append(toIndentedString(validated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("destination_conf");
    openapiFields.add("filename");
    openapiFields.add("id");
    openapiFields.add("status");
    openapiFields.add("submitted");
    openapiFields.add("validated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("destination_conf");
    openapiRequiredFields.add("filename");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("submitted");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MagicVisibilityPcapsOwnershipResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MagicVisibilityPcapsOwnershipResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MagicVisibilityPcapsOwnershipResponse is not found in the empty JSON string", MagicVisibilityPcapsOwnershipResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MagicVisibilityPcapsOwnershipResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MagicVisibilityPcapsOwnershipResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MagicVisibilityPcapsOwnershipResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("destination_conf").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination_conf` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destination_conf").toString()));
      }
      if (!jsonObj.get("filename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filename").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      if (!jsonObj.get("submitted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `submitted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("submitted").toString()));
      }
      if ((jsonObj.get("validated") != null && !jsonObj.get("validated").isJsonNull()) && !jsonObj.get("validated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validated").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MagicVisibilityPcapsOwnershipResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MagicVisibilityPcapsOwnershipResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MagicVisibilityPcapsOwnershipResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MagicVisibilityPcapsOwnershipResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<MagicVisibilityPcapsOwnershipResponse>() {
           @Override
           public void write(JsonWriter out, MagicVisibilityPcapsOwnershipResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MagicVisibilityPcapsOwnershipResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MagicVisibilityPcapsOwnershipResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MagicVisibilityPcapsOwnershipResponse
  * @throws IOException if the JSON string is invalid with respect to MagicVisibilityPcapsOwnershipResponse
  */
  public static MagicVisibilityPcapsOwnershipResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MagicVisibilityPcapsOwnershipResponse.class);
  }

 /**
  * Convert an instance of MagicVisibilityPcapsOwnershipResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

