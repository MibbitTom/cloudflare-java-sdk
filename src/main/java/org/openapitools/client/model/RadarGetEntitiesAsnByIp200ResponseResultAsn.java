/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RadarGetEntitiesAsnByIp200ResponseResultAsnEstimatedUsers;
import org.openapitools.client.model.RadarGetEntitiesAsnByIp200ResponseResultAsnRelatedInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * RadarGetEntitiesAsnByIp200ResponseResultAsn
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class RadarGetEntitiesAsnByIp200ResponseResultAsn {
  public static final String SERIALIZED_NAME_AKA = "aka";
  @SerializedName(SERIALIZED_NAME_AKA)
  private String aka;

  public static final String SERIALIZED_NAME_ASN = "asn";
  @SerializedName(SERIALIZED_NAME_ASN)
  private Integer asn;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_COUNTRY_NAME = "countryName";
  @SerializedName(SERIALIZED_NAME_COUNTRY_NAME)
  private String countryName;

  public static final String SERIALIZED_NAME_ESTIMATED_USERS = "estimatedUsers";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_USERS)
  private RadarGetEntitiesAsnByIp200ResponseResultAsnEstimatedUsers estimatedUsers;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAME_LONG = "nameLong";
  @SerializedName(SERIALIZED_NAME_NAME_LONG)
  private String nameLong;

  public static final String SERIALIZED_NAME_ORG_NAME = "orgName";
  @SerializedName(SERIALIZED_NAME_ORG_NAME)
  private String orgName;

  public static final String SERIALIZED_NAME_RELATED = "related";
  @SerializedName(SERIALIZED_NAME_RELATED)
  private List<RadarGetEntitiesAsnByIp200ResponseResultAsnRelatedInner> related = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public RadarGetEntitiesAsnByIp200ResponseResultAsn() {
  }

  public RadarGetEntitiesAsnByIp200ResponseResultAsn aka(String aka) {
    this.aka = aka;
    return this;
  }

   /**
   * Get aka
   * @return aka
  **/
  @javax.annotation.Nullable
  public String getAka() {
    return aka;
  }

  public void setAka(String aka) {
    this.aka = aka;
  }


  public RadarGetEntitiesAsnByIp200ResponseResultAsn asn(Integer asn) {
    this.asn = asn;
    return this;
  }

   /**
   * Get asn
   * @return asn
  **/
  @javax.annotation.Nonnull
  public Integer getAsn() {
    return asn;
  }

  public void setAsn(Integer asn) {
    this.asn = asn;
  }


  public RadarGetEntitiesAsnByIp200ResponseResultAsn country(String country) {
    this.country = country;
    return this;
  }

   /**
   * Get country
   * @return country
  **/
  @javax.annotation.Nonnull
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public RadarGetEntitiesAsnByIp200ResponseResultAsn countryName(String countryName) {
    this.countryName = countryName;
    return this;
  }

   /**
   * Get countryName
   * @return countryName
  **/
  @javax.annotation.Nonnull
  public String getCountryName() {
    return countryName;
  }

  public void setCountryName(String countryName) {
    this.countryName = countryName;
  }


  public RadarGetEntitiesAsnByIp200ResponseResultAsn estimatedUsers(RadarGetEntitiesAsnByIp200ResponseResultAsnEstimatedUsers estimatedUsers) {
    this.estimatedUsers = estimatedUsers;
    return this;
  }

   /**
   * Get estimatedUsers
   * @return estimatedUsers
  **/
  @javax.annotation.Nonnull
  public RadarGetEntitiesAsnByIp200ResponseResultAsnEstimatedUsers getEstimatedUsers() {
    return estimatedUsers;
  }

  public void setEstimatedUsers(RadarGetEntitiesAsnByIp200ResponseResultAsnEstimatedUsers estimatedUsers) {
    this.estimatedUsers = estimatedUsers;
  }


  public RadarGetEntitiesAsnByIp200ResponseResultAsn name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public RadarGetEntitiesAsnByIp200ResponseResultAsn nameLong(String nameLong) {
    this.nameLong = nameLong;
    return this;
  }

   /**
   * Deprecated field. Please use &#39;aka&#39;.
   * @return nameLong
  **/
  @javax.annotation.Nullable
  public String getNameLong() {
    return nameLong;
  }

  public void setNameLong(String nameLong) {
    this.nameLong = nameLong;
  }


  public RadarGetEntitiesAsnByIp200ResponseResultAsn orgName(String orgName) {
    this.orgName = orgName;
    return this;
  }

   /**
   * Get orgName
   * @return orgName
  **/
  @javax.annotation.Nonnull
  public String getOrgName() {
    return orgName;
  }

  public void setOrgName(String orgName) {
    this.orgName = orgName;
  }


  public RadarGetEntitiesAsnByIp200ResponseResultAsn related(List<RadarGetEntitiesAsnByIp200ResponseResultAsnRelatedInner> related) {
    this.related = related;
    return this;
  }

  public RadarGetEntitiesAsnByIp200ResponseResultAsn addRelatedItem(RadarGetEntitiesAsnByIp200ResponseResultAsnRelatedInner relatedItem) {
    if (this.related == null) {
      this.related = new ArrayList<>();
    }
    this.related.add(relatedItem);
    return this;
  }

   /**
   * Get related
   * @return related
  **/
  @javax.annotation.Nonnull
  public List<RadarGetEntitiesAsnByIp200ResponseResultAsnRelatedInner> getRelated() {
    return related;
  }

  public void setRelated(List<RadarGetEntitiesAsnByIp200ResponseResultAsnRelatedInner> related) {
    this.related = related;
  }


  public RadarGetEntitiesAsnByIp200ResponseResultAsn source(String source) {
    this.source = source;
    return this;
  }

   /**
   * Regional Internet Registry
   * @return source
  **/
  @javax.annotation.Nonnull
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public RadarGetEntitiesAsnByIp200ResponseResultAsn website(String website) {
    this.website = website;
    return this;
  }

   /**
   * Get website
   * @return website
  **/
  @javax.annotation.Nonnull
  public String getWebsite() {
    return website;
  }

  public void setWebsite(String website) {
    this.website = website;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RadarGetEntitiesAsnByIp200ResponseResultAsn radarGetEntitiesAsnByIp200ResponseResultAsn = (RadarGetEntitiesAsnByIp200ResponseResultAsn) o;
    return Objects.equals(this.aka, radarGetEntitiesAsnByIp200ResponseResultAsn.aka) &&
        Objects.equals(this.asn, radarGetEntitiesAsnByIp200ResponseResultAsn.asn) &&
        Objects.equals(this.country, radarGetEntitiesAsnByIp200ResponseResultAsn.country) &&
        Objects.equals(this.countryName, radarGetEntitiesAsnByIp200ResponseResultAsn.countryName) &&
        Objects.equals(this.estimatedUsers, radarGetEntitiesAsnByIp200ResponseResultAsn.estimatedUsers) &&
        Objects.equals(this.name, radarGetEntitiesAsnByIp200ResponseResultAsn.name) &&
        Objects.equals(this.nameLong, radarGetEntitiesAsnByIp200ResponseResultAsn.nameLong) &&
        Objects.equals(this.orgName, radarGetEntitiesAsnByIp200ResponseResultAsn.orgName) &&
        Objects.equals(this.related, radarGetEntitiesAsnByIp200ResponseResultAsn.related) &&
        Objects.equals(this.source, radarGetEntitiesAsnByIp200ResponseResultAsn.source) &&
        Objects.equals(this.website, radarGetEntitiesAsnByIp200ResponseResultAsn.website);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aka, asn, country, countryName, estimatedUsers, name, nameLong, orgName, related, source, website);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RadarGetEntitiesAsnByIp200ResponseResultAsn {\n");
    sb.append("    aka: ").append(toIndentedString(aka)).append("\n");
    sb.append("    asn: ").append(toIndentedString(asn)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    countryName: ").append(toIndentedString(countryName)).append("\n");
    sb.append("    estimatedUsers: ").append(toIndentedString(estimatedUsers)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nameLong: ").append(toIndentedString(nameLong)).append("\n");
    sb.append("    orgName: ").append(toIndentedString(orgName)).append("\n");
    sb.append("    related: ").append(toIndentedString(related)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aka");
    openapiFields.add("asn");
    openapiFields.add("country");
    openapiFields.add("countryName");
    openapiFields.add("estimatedUsers");
    openapiFields.add("name");
    openapiFields.add("nameLong");
    openapiFields.add("orgName");
    openapiFields.add("related");
    openapiFields.add("source");
    openapiFields.add("website");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("asn");
    openapiRequiredFields.add("country");
    openapiRequiredFields.add("countryName");
    openapiRequiredFields.add("estimatedUsers");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("orgName");
    openapiRequiredFields.add("related");
    openapiRequiredFields.add("source");
    openapiRequiredFields.add("website");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RadarGetEntitiesAsnByIp200ResponseResultAsn
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RadarGetEntitiesAsnByIp200ResponseResultAsn.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RadarGetEntitiesAsnByIp200ResponseResultAsn is not found in the empty JSON string", RadarGetEntitiesAsnByIp200ResponseResultAsn.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RadarGetEntitiesAsnByIp200ResponseResultAsn.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RadarGetEntitiesAsnByIp200ResponseResultAsn` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RadarGetEntitiesAsnByIp200ResponseResultAsn.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aka") != null && !jsonObj.get("aka").isJsonNull()) && !jsonObj.get("aka").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aka` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aka").toString()));
      }
      if (!jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if (!jsonObj.get("countryName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryName").toString()));
      }
      // validate the required field `estimatedUsers`
      RadarGetEntitiesAsnByIp200ResponseResultAsnEstimatedUsers.validateJsonElement(jsonObj.get("estimatedUsers"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("nameLong") != null && !jsonObj.get("nameLong").isJsonNull()) && !jsonObj.get("nameLong").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameLong` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameLong").toString()));
      }
      if (!jsonObj.get("orgName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgName").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("related").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `related` to be an array in the JSON string but got `%s`", jsonObj.get("related").toString()));
      }

      JsonArray jsonArrayrelated = jsonObj.getAsJsonArray("related");
      // validate the required field `related` (array)
      for (int i = 0; i < jsonArrayrelated.size(); i++) {
        RadarGetEntitiesAsnByIp200ResponseResultAsnRelatedInner.validateJsonElement(jsonArrayrelated.get(i));
      };
      if (!jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if (!jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RadarGetEntitiesAsnByIp200ResponseResultAsn.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RadarGetEntitiesAsnByIp200ResponseResultAsn' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RadarGetEntitiesAsnByIp200ResponseResultAsn> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RadarGetEntitiesAsnByIp200ResponseResultAsn.class));

       return (TypeAdapter<T>) new TypeAdapter<RadarGetEntitiesAsnByIp200ResponseResultAsn>() {
           @Override
           public void write(JsonWriter out, RadarGetEntitiesAsnByIp200ResponseResultAsn value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RadarGetEntitiesAsnByIp200ResponseResultAsn read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RadarGetEntitiesAsnByIp200ResponseResultAsn given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RadarGetEntitiesAsnByIp200ResponseResultAsn
  * @throws IOException if the JSON string is invalid with respect to RadarGetEntitiesAsnByIp200ResponseResultAsn
  */
  public static RadarGetEntitiesAsnByIp200ResponseResultAsn fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RadarGetEntitiesAsnByIp200ResponseResultAsn.class);
  }

 /**
  * Convert an instance of RadarGetEntitiesAsnByIp200ResponseResultAsn to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

