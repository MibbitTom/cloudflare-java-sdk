/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequestHeadersInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest {
  public static final String SERIALIZED_NAME_BODY_SIZE = "bodySize";
  @SerializedName(SERIALIZED_NAME_BODY_SIZE)
  private BigDecimal bodySize;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private List<UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequestHeadersInner> headers = new ArrayList<>();

  public static final String SERIALIZED_NAME_HEADERS_SIZE = "headersSize";
  @SerializedName(SERIALIZED_NAME_HEADERS_SIZE)
  private BigDecimal headersSize;

  public static final String SERIALIZED_NAME_HTTP_VERSION = "httpVersion";
  @SerializedName(SERIALIZED_NAME_HTTP_VERSION)
  private String httpVersion;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private String method;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest() {
  }

  public UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest bodySize(BigDecimal bodySize) {
    this.bodySize = bodySize;
    return this;
  }

   /**
   * Get bodySize
   * @return bodySize
  **/
  @javax.annotation.Nonnull
  public BigDecimal getBodySize() {
    return bodySize;
  }

  public void setBodySize(BigDecimal bodySize) {
    this.bodySize = bodySize;
  }


  public UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest headers(List<UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequestHeadersInner> headers) {
    this.headers = headers;
    return this;
  }

  public UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest addHeadersItem(UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequestHeadersInner headersItem) {
    if (this.headers == null) {
      this.headers = new ArrayList<>();
    }
    this.headers.add(headersItem);
    return this;
  }

   /**
   * Get headers
   * @return headers
  **/
  @javax.annotation.Nonnull
  public List<UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequestHeadersInner> getHeaders() {
    return headers;
  }

  public void setHeaders(List<UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequestHeadersInner> headers) {
    this.headers = headers;
  }


  public UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest headersSize(BigDecimal headersSize) {
    this.headersSize = headersSize;
    return this;
  }

   /**
   * Get headersSize
   * @return headersSize
  **/
  @javax.annotation.Nonnull
  public BigDecimal getHeadersSize() {
    return headersSize;
  }

  public void setHeadersSize(BigDecimal headersSize) {
    this.headersSize = headersSize;
  }


  public UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest httpVersion(String httpVersion) {
    this.httpVersion = httpVersion;
    return this;
  }

   /**
   * Get httpVersion
   * @return httpVersion
  **/
  @javax.annotation.Nonnull
  public String getHttpVersion() {
    return httpVersion;
  }

  public void setHttpVersion(String httpVersion) {
    this.httpVersion = httpVersion;
  }


  public UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest method(String method) {
    this.method = method;
    return this;
  }

   /**
   * Get method
   * @return method
  **/
  @javax.annotation.Nonnull
  public String getMethod() {
    return method;
  }

  public void setMethod(String method) {
    this.method = method;
  }


  public UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest urlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest = (UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest) o;
    return Objects.equals(this.bodySize, urlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest.bodySize) &&
        Objects.equals(this.headers, urlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest.headers) &&
        Objects.equals(this.headersSize, urlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest.headersSize) &&
        Objects.equals(this.httpVersion, urlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest.httpVersion) &&
        Objects.equals(this.method, urlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest.method) &&
        Objects.equals(this.url, urlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bodySize, headers, headersSize, httpVersion, method, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest {\n");
    sb.append("    bodySize: ").append(toIndentedString(bodySize)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    headersSize: ").append(toIndentedString(headersSize)).append("\n");
    sb.append("    httpVersion: ").append(toIndentedString(httpVersion)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bodySize");
    openapiFields.add("headers");
    openapiFields.add("headersSize");
    openapiFields.add("httpVersion");
    openapiFields.add("method");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("bodySize");
    openapiRequiredFields.add("headers");
    openapiRequiredFields.add("headersSize");
    openapiRequiredFields.add("httpVersion");
    openapiRequiredFields.add("method");
    openapiRequiredFields.add("url");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest is not found in the empty JSON string", UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("headers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `headers` to be an array in the JSON string but got `%s`", jsonObj.get("headers").toString()));
      }

      JsonArray jsonArrayheaders = jsonObj.getAsJsonArray("headers");
      // validate the required field `headers` (array)
      for (int i = 0; i < jsonArrayheaders.size(); i++) {
        UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequestHeadersInner.validateJsonElement(jsonArrayheaders.get(i));
      };
      if (!jsonObj.get("httpVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `httpVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("httpVersion").toString()));
      }
      if (!jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest>() {
           @Override
           public void write(JsonWriter out, UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest
  * @throws IOException if the JSON string is invalid with respect to UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest
  */
  public static UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest.class);
  }

 /**
  * Convert an instance of UrlscannerGetScanHar200ResponseResultHarLogEntriesInnerRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

