/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.R2EnableSippyAws;
import org.openapitools.client.model.R2EnableSippyAwsDestination;
import org.openapitools.client.model.R2EnableSippyGcs;
import org.openapitools.client.model.R2EnableSippyGcsSource;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import invalidPackageName.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class R2PutBucketSippyConfigRequest extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(R2PutBucketSippyConfigRequest.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!R2PutBucketSippyConfigRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'R2PutBucketSippyConfigRequest' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<R2EnableSippyAws> adapterR2EnableSippyAws = gson.getDelegateAdapter(this, TypeToken.get(R2EnableSippyAws.class));
            final TypeAdapter<R2EnableSippyGcs> adapterR2EnableSippyGcs = gson.getDelegateAdapter(this, TypeToken.get(R2EnableSippyGcs.class));

            return (TypeAdapter<T>) new TypeAdapter<R2PutBucketSippyConfigRequest>() {
                @Override
                public void write(JsonWriter out, R2PutBucketSippyConfigRequest value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `R2EnableSippyAws`
                    if (value.getActualInstance() instanceof R2EnableSippyAws) {
                        JsonElement element = adapterR2EnableSippyAws.toJsonTree((R2EnableSippyAws)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `R2EnableSippyGcs`
                    if (value.getActualInstance() instanceof R2EnableSippyGcs) {
                        JsonElement element = adapterR2EnableSippyGcs.toJsonTree((R2EnableSippyGcs)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: R2EnableSippyAws, R2EnableSippyGcs");
                }

                @Override
                public R2PutBucketSippyConfigRequest read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize R2EnableSippyAws
                    try {
                        // validate the JSON object to see if any exception is thrown
                        R2EnableSippyAws.validateJsonElement(jsonElement);
                        actualAdapter = adapterR2EnableSippyAws;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'R2EnableSippyAws'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for R2EnableSippyAws failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'R2EnableSippyAws'", e);
                    }
                    // deserialize R2EnableSippyGcs
                    try {
                        // validate the JSON object to see if any exception is thrown
                        R2EnableSippyGcs.validateJsonElement(jsonElement);
                        actualAdapter = adapterR2EnableSippyGcs;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'R2EnableSippyGcs'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for R2EnableSippyGcs failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'R2EnableSippyGcs'", e);
                    }

                    if (match == 1) {
                        R2PutBucketSippyConfigRequest ret = new R2PutBucketSippyConfigRequest();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for R2PutBucketSippyConfigRequest: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public R2PutBucketSippyConfigRequest() {
        super("oneOf", Boolean.FALSE);
    }

    public R2PutBucketSippyConfigRequest(R2EnableSippyAws o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public R2PutBucketSippyConfigRequest(R2EnableSippyGcs o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("R2EnableSippyAws", R2EnableSippyAws.class);
        schemas.put("R2EnableSippyGcs", R2EnableSippyGcs.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return R2PutBucketSippyConfigRequest.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * R2EnableSippyAws, R2EnableSippyGcs
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof R2EnableSippyAws) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof R2EnableSippyGcs) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be R2EnableSippyAws, R2EnableSippyGcs");
    }

    /**
     * Get the actual instance, which can be the following:
     * R2EnableSippyAws, R2EnableSippyGcs
     *
     * @return The actual instance (R2EnableSippyAws, R2EnableSippyGcs)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `R2EnableSippyAws`. If the actual instance is not `R2EnableSippyAws`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `R2EnableSippyAws`
     * @throws ClassCastException if the instance is not `R2EnableSippyAws`
     */
    public R2EnableSippyAws getR2EnableSippyAws() throws ClassCastException {
        return (R2EnableSippyAws)super.getActualInstance();
    }
    /**
     * Get the actual instance of `R2EnableSippyGcs`. If the actual instance is not `R2EnableSippyGcs`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `R2EnableSippyGcs`
     * @throws ClassCastException if the instance is not `R2EnableSippyGcs`
     */
    public R2EnableSippyGcs getR2EnableSippyGcs() throws ClassCastException {
        return (R2EnableSippyGcs)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to R2PutBucketSippyConfigRequest
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with R2EnableSippyAws
        try {
            R2EnableSippyAws.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for R2EnableSippyAws failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with R2EnableSippyGcs
        try {
            R2EnableSippyGcs.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for R2EnableSippyGcs failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for R2PutBucketSippyConfigRequest with oneOf schemas: R2EnableSippyAws, R2EnableSippyGcs. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of R2PutBucketSippyConfigRequest given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of R2PutBucketSippyConfigRequest
     * @throws IOException if the JSON string is invalid with respect to R2PutBucketSippyConfigRequest
     */
    public static R2PutBucketSippyConfigRequest fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, R2PutBucketSippyConfigRequest.class);
    }

    /**
     * Convert an instance of R2PutBucketSippyConfigRequest to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

