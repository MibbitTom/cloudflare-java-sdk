/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RumRule;
import org.openapitools.client.model.RumRuleset;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RumSite
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class RumSite {
  public static final String SERIALIZED_NAME_AUTO_INSTALL = "auto_install";
  @SerializedName(SERIALIZED_NAME_AUTO_INSTALL)
  private Boolean autoInstall;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_RULES = "rules";
  @SerializedName(SERIALIZED_NAME_RULES)
  private List<RumRule> rules = new ArrayList<>();

  public static final String SERIALIZED_NAME_RULESET = "ruleset";
  @SerializedName(SERIALIZED_NAME_RULESET)
  private RumRuleset ruleset;

  public static final String SERIALIZED_NAME_SITE_TAG = "site_tag";
  @SerializedName(SERIALIZED_NAME_SITE_TAG)
  private String siteTag;

  public static final String SERIALIZED_NAME_SITE_TOKEN = "site_token";
  @SerializedName(SERIALIZED_NAME_SITE_TOKEN)
  private String siteToken;

  public static final String SERIALIZED_NAME_SNIPPET = "snippet";
  @SerializedName(SERIALIZED_NAME_SNIPPET)
  private String snippet;

  public RumSite() {
  }

  public RumSite(
     OffsetDateTime created
  ) {
    this();
    this.created = created;
  }

  public RumSite autoInstall(Boolean autoInstall) {
    this.autoInstall = autoInstall;
    return this;
  }

   /**
   * If enabled, the JavaScript snippet is automatically injected for orange-clouded sites.
   * @return autoInstall
  **/
  @javax.annotation.Nullable
  public Boolean getAutoInstall() {
    return autoInstall;
  }

  public void setAutoInstall(Boolean autoInstall) {
    this.autoInstall = autoInstall;
  }


   /**
   * Get created
   * @return created
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }



  public RumSite rules(List<RumRule> rules) {
    this.rules = rules;
    return this;
  }

  public RumSite addRulesItem(RumRule rulesItem) {
    if (this.rules == null) {
      this.rules = new ArrayList<>();
    }
    this.rules.add(rulesItem);
    return this;
  }

   /**
   * A list of rules.
   * @return rules
  **/
  @javax.annotation.Nullable
  public List<RumRule> getRules() {
    return rules;
  }

  public void setRules(List<RumRule> rules) {
    this.rules = rules;
  }


  public RumSite ruleset(RumRuleset ruleset) {
    this.ruleset = ruleset;
    return this;
  }

   /**
   * Get ruleset
   * @return ruleset
  **/
  @javax.annotation.Nullable
  public RumRuleset getRuleset() {
    return ruleset;
  }

  public void setRuleset(RumRuleset ruleset) {
    this.ruleset = ruleset;
  }


  public RumSite siteTag(String siteTag) {
    this.siteTag = siteTag;
    return this;
  }

   /**
   * The Web Analytics site identifier.
   * @return siteTag
  **/
  @javax.annotation.Nullable
  public String getSiteTag() {
    return siteTag;
  }

  public void setSiteTag(String siteTag) {
    this.siteTag = siteTag;
  }


  public RumSite siteToken(String siteToken) {
    this.siteToken = siteToken;
    return this;
  }

   /**
   * The Web Analytics site token.
   * @return siteToken
  **/
  @javax.annotation.Nullable
  public String getSiteToken() {
    return siteToken;
  }

  public void setSiteToken(String siteToken) {
    this.siteToken = siteToken;
  }


  public RumSite snippet(String snippet) {
    this.snippet = snippet;
    return this;
  }

   /**
   * Encoded JavaScript snippet.
   * @return snippet
  **/
  @javax.annotation.Nullable
  public String getSnippet() {
    return snippet;
  }

  public void setSnippet(String snippet) {
    this.snippet = snippet;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RumSite rumSite = (RumSite) o;
    return Objects.equals(this.autoInstall, rumSite.autoInstall) &&
        Objects.equals(this.created, rumSite.created) &&
        Objects.equals(this.rules, rumSite.rules) &&
        Objects.equals(this.ruleset, rumSite.ruleset) &&
        Objects.equals(this.siteTag, rumSite.siteTag) &&
        Objects.equals(this.siteToken, rumSite.siteToken) &&
        Objects.equals(this.snippet, rumSite.snippet);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoInstall, created, rules, ruleset, siteTag, siteToken, snippet);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RumSite {\n");
    sb.append("    autoInstall: ").append(toIndentedString(autoInstall)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
    sb.append("    ruleset: ").append(toIndentedString(ruleset)).append("\n");
    sb.append("    siteTag: ").append(toIndentedString(siteTag)).append("\n");
    sb.append("    siteToken: ").append(toIndentedString(siteToken)).append("\n");
    sb.append("    snippet: ").append(toIndentedString(snippet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auto_install");
    openapiFields.add("created");
    openapiFields.add("rules");
    openapiFields.add("ruleset");
    openapiFields.add("site_tag");
    openapiFields.add("site_token");
    openapiFields.add("snippet");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RumSite
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RumSite.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RumSite is not found in the empty JSON string", RumSite.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RumSite.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RumSite` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("rules") != null && !jsonObj.get("rules").isJsonNull()) {
        JsonArray jsonArrayrules = jsonObj.getAsJsonArray("rules");
        if (jsonArrayrules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rules` to be an array in the JSON string but got `%s`", jsonObj.get("rules").toString()));
          }

          // validate the optional field `rules` (array)
          for (int i = 0; i < jsonArrayrules.size(); i++) {
            RumRule.validateJsonElement(jsonArrayrules.get(i));
          };
        }
      }
      // validate the optional field `ruleset`
      if (jsonObj.get("ruleset") != null && !jsonObj.get("ruleset").isJsonNull()) {
        RumRuleset.validateJsonElement(jsonObj.get("ruleset"));
      }
      if ((jsonObj.get("site_tag") != null && !jsonObj.get("site_tag").isJsonNull()) && !jsonObj.get("site_tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `site_tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("site_tag").toString()));
      }
      if ((jsonObj.get("site_token") != null && !jsonObj.get("site_token").isJsonNull()) && !jsonObj.get("site_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `site_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("site_token").toString()));
      }
      if ((jsonObj.get("snippet") != null && !jsonObj.get("snippet").isJsonNull()) && !jsonObj.get("snippet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `snippet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("snippet").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RumSite.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RumSite' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RumSite> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RumSite.class));

       return (TypeAdapter<T>) new TypeAdapter<RumSite>() {
           @Override
           public void write(JsonWriter out, RumSite value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RumSite read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RumSite given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RumSite
  * @throws IOException if the JSON string is invalid with respect to RumSite
  */
  public static RumSite fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RumSite.class);
  }

 /**
  * Convert an instance of RumSite to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

