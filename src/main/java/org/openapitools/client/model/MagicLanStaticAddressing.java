/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MagicLanDhcpRelay;
import org.openapitools.client.model.MagicLanDhcpServer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * If the site is not configured in high availability mode, this configuration is optional (if omitted, use DHCP). However, if in high availability mode, static_address is required along with secondary and virtual address.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class MagicLanStaticAddressing {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_DHCP_RELAY = "dhcp_relay";
  @SerializedName(SERIALIZED_NAME_DHCP_RELAY)
  private MagicLanDhcpRelay dhcpRelay;

  public static final String SERIALIZED_NAME_DHCP_SERVER = "dhcp_server";
  @SerializedName(SERIALIZED_NAME_DHCP_SERVER)
  private MagicLanDhcpServer dhcpServer;

  public static final String SERIALIZED_NAME_SECONDARY_ADDRESS = "secondary_address";
  @SerializedName(SERIALIZED_NAME_SECONDARY_ADDRESS)
  private String secondaryAddress;

  public static final String SERIALIZED_NAME_VIRTUAL_ADDRESS = "virtual_address";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_ADDRESS)
  private String virtualAddress;

  public MagicLanStaticAddressing() {
  }

  public MagicLanStaticAddressing address(String address) {
    this.address = address;
    return this;
  }

   /**
   * A valid CIDR notation representing an IP range.
   * @return address
  **/
  @javax.annotation.Nonnull
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public MagicLanStaticAddressing dhcpRelay(MagicLanDhcpRelay dhcpRelay) {
    this.dhcpRelay = dhcpRelay;
    return this;
  }

   /**
   * Get dhcpRelay
   * @return dhcpRelay
  **/
  @javax.annotation.Nullable
  public MagicLanDhcpRelay getDhcpRelay() {
    return dhcpRelay;
  }

  public void setDhcpRelay(MagicLanDhcpRelay dhcpRelay) {
    this.dhcpRelay = dhcpRelay;
  }


  public MagicLanStaticAddressing dhcpServer(MagicLanDhcpServer dhcpServer) {
    this.dhcpServer = dhcpServer;
    return this;
  }

   /**
   * Get dhcpServer
   * @return dhcpServer
  **/
  @javax.annotation.Nullable
  public MagicLanDhcpServer getDhcpServer() {
    return dhcpServer;
  }

  public void setDhcpServer(MagicLanDhcpServer dhcpServer) {
    this.dhcpServer = dhcpServer;
  }


  public MagicLanStaticAddressing secondaryAddress(String secondaryAddress) {
    this.secondaryAddress = secondaryAddress;
    return this;
  }

   /**
   * A valid CIDR notation representing an IP range.
   * @return secondaryAddress
  **/
  @javax.annotation.Nullable
  public String getSecondaryAddress() {
    return secondaryAddress;
  }

  public void setSecondaryAddress(String secondaryAddress) {
    this.secondaryAddress = secondaryAddress;
  }


  public MagicLanStaticAddressing virtualAddress(String virtualAddress) {
    this.virtualAddress = virtualAddress;
    return this;
  }

   /**
   * A valid CIDR notation representing an IP range.
   * @return virtualAddress
  **/
  @javax.annotation.Nullable
  public String getVirtualAddress() {
    return virtualAddress;
  }

  public void setVirtualAddress(String virtualAddress) {
    this.virtualAddress = virtualAddress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MagicLanStaticAddressing magicLanStaticAddressing = (MagicLanStaticAddressing) o;
    return Objects.equals(this.address, magicLanStaticAddressing.address) &&
        Objects.equals(this.dhcpRelay, magicLanStaticAddressing.dhcpRelay) &&
        Objects.equals(this.dhcpServer, magicLanStaticAddressing.dhcpServer) &&
        Objects.equals(this.secondaryAddress, magicLanStaticAddressing.secondaryAddress) &&
        Objects.equals(this.virtualAddress, magicLanStaticAddressing.virtualAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, dhcpRelay, dhcpServer, secondaryAddress, virtualAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MagicLanStaticAddressing {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    dhcpRelay: ").append(toIndentedString(dhcpRelay)).append("\n");
    sb.append("    dhcpServer: ").append(toIndentedString(dhcpServer)).append("\n");
    sb.append("    secondaryAddress: ").append(toIndentedString(secondaryAddress)).append("\n");
    sb.append("    virtualAddress: ").append(toIndentedString(virtualAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("dhcp_relay");
    openapiFields.add("dhcp_server");
    openapiFields.add("secondary_address");
    openapiFields.add("virtual_address");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("address");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MagicLanStaticAddressing
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MagicLanStaticAddressing.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MagicLanStaticAddressing is not found in the empty JSON string", MagicLanStaticAddressing.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MagicLanStaticAddressing.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MagicLanStaticAddressing` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MagicLanStaticAddressing.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      // validate the optional field `dhcp_relay`
      if (jsonObj.get("dhcp_relay") != null && !jsonObj.get("dhcp_relay").isJsonNull()) {
        MagicLanDhcpRelay.validateJsonElement(jsonObj.get("dhcp_relay"));
      }
      // validate the optional field `dhcp_server`
      if (jsonObj.get("dhcp_server") != null && !jsonObj.get("dhcp_server").isJsonNull()) {
        MagicLanDhcpServer.validateJsonElement(jsonObj.get("dhcp_server"));
      }
      if ((jsonObj.get("secondary_address") != null && !jsonObj.get("secondary_address").isJsonNull()) && !jsonObj.get("secondary_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondary_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondary_address").toString()));
      }
      if ((jsonObj.get("virtual_address") != null && !jsonObj.get("virtual_address").isJsonNull()) && !jsonObj.get("virtual_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `virtual_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("virtual_address").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MagicLanStaticAddressing.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MagicLanStaticAddressing' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MagicLanStaticAddressing> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MagicLanStaticAddressing.class));

       return (TypeAdapter<T>) new TypeAdapter<MagicLanStaticAddressing>() {
           @Override
           public void write(JsonWriter out, MagicLanStaticAddressing value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MagicLanStaticAddressing read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MagicLanStaticAddressing given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MagicLanStaticAddressing
  * @throws IOException if the JSON string is invalid with respect to MagicLanStaticAddressing
  */
  public static MagicLanStaticAddressing fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MagicLanStaticAddressing.class);
  }

 /**
  * Convert an instance of MagicLanStaticAddressing to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

