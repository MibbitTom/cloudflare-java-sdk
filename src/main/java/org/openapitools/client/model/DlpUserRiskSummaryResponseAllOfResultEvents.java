/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.DlpRiskLevel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DlpUserRiskSummaryResponseAllOfResultEvents
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class DlpUserRiskSummaryResponseAllOfResultEvents {
  public static final String SERIALIZED_NAME_EVENT_DETAILS = "event_details";
  @SerializedName(SERIALIZED_NAME_EVENT_DETAILS)
  private Object eventDetails;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RISK_LEVEL = "risk_level";
  @SerializedName(SERIALIZED_NAME_RISK_LEVEL)
  private DlpRiskLevel riskLevel;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public DlpUserRiskSummaryResponseAllOfResultEvents() {
  }

  public DlpUserRiskSummaryResponseAllOfResultEvents(
     OffsetDateTime timestamp
  ) {
    this();
    this.timestamp = timestamp;
  }

  public DlpUserRiskSummaryResponseAllOfResultEvents eventDetails(Object eventDetails) {
    this.eventDetails = eventDetails;
    return this;
  }

   /**
   * Get eventDetails
   * @return eventDetails
  **/
  @javax.annotation.Nullable
  public Object getEventDetails() {
    return eventDetails;
  }

  public void setEventDetails(Object eventDetails) {
    this.eventDetails = eventDetails;
  }


  public DlpUserRiskSummaryResponseAllOfResultEvents id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public DlpUserRiskSummaryResponseAllOfResultEvents name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DlpUserRiskSummaryResponseAllOfResultEvents riskLevel(DlpRiskLevel riskLevel) {
    this.riskLevel = riskLevel;
    return this;
  }

   /**
   * Get riskLevel
   * @return riskLevel
  **/
  @javax.annotation.Nonnull
  public DlpRiskLevel getRiskLevel() {
    return riskLevel;
  }

  public void setRiskLevel(DlpRiskLevel riskLevel) {
    this.riskLevel = riskLevel;
  }


   /**
   * Get timestamp
   * @return timestamp
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DlpUserRiskSummaryResponseAllOfResultEvents dlpUserRiskSummaryResponseAllOfResultEvents = (DlpUserRiskSummaryResponseAllOfResultEvents) o;
    return Objects.equals(this.eventDetails, dlpUserRiskSummaryResponseAllOfResultEvents.eventDetails) &&
        Objects.equals(this.id, dlpUserRiskSummaryResponseAllOfResultEvents.id) &&
        Objects.equals(this.name, dlpUserRiskSummaryResponseAllOfResultEvents.name) &&
        Objects.equals(this.riskLevel, dlpUserRiskSummaryResponseAllOfResultEvents.riskLevel) &&
        Objects.equals(this.timestamp, dlpUserRiskSummaryResponseAllOfResultEvents.timestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventDetails, id, name, riskLevel, timestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DlpUserRiskSummaryResponseAllOfResultEvents {\n");
    sb.append("    eventDetails: ").append(toIndentedString(eventDetails)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    riskLevel: ").append(toIndentedString(riskLevel)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("event_details");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("risk_level");
    openapiFields.add("timestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("risk_level");
    openapiRequiredFields.add("timestamp");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DlpUserRiskSummaryResponseAllOfResultEvents
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DlpUserRiskSummaryResponseAllOfResultEvents.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DlpUserRiskSummaryResponseAllOfResultEvents is not found in the empty JSON string", DlpUserRiskSummaryResponseAllOfResultEvents.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DlpUserRiskSummaryResponseAllOfResultEvents.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DlpUserRiskSummaryResponseAllOfResultEvents` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DlpUserRiskSummaryResponseAllOfResultEvents.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `risk_level`
      DlpRiskLevel.validateJsonElement(jsonObj.get("risk_level"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DlpUserRiskSummaryResponseAllOfResultEvents.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DlpUserRiskSummaryResponseAllOfResultEvents' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DlpUserRiskSummaryResponseAllOfResultEvents> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DlpUserRiskSummaryResponseAllOfResultEvents.class));

       return (TypeAdapter<T>) new TypeAdapter<DlpUserRiskSummaryResponseAllOfResultEvents>() {
           @Override
           public void write(JsonWriter out, DlpUserRiskSummaryResponseAllOfResultEvents value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DlpUserRiskSummaryResponseAllOfResultEvents read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DlpUserRiskSummaryResponseAllOfResultEvents given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DlpUserRiskSummaryResponseAllOfResultEvents
  * @throws IOException if the JSON string is invalid with respect to DlpUserRiskSummaryResponseAllOfResultEvents
  */
  public static DlpUserRiskSummaryResponseAllOfResultEvents fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DlpUserRiskSummaryResponseAllOfResultEvents.class);
  }

 /**
  * Convert an instance of DlpUserRiskSummaryResponseAllOfResultEvents to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

