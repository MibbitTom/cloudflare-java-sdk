/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TunnelSchemasConnection;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A client (typically cloudflared) that maintains connections to a Cloudflare data center.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class TunnelTunnelClient {
  public static final String SERIALIZED_NAME_ARCH = "arch";
  @SerializedName(SERIALIZED_NAME_ARCH)
  private String arch;

  public static final String SERIALIZED_NAME_CONFIG_VERSION = "config_version";
  @SerializedName(SERIALIZED_NAME_CONFIG_VERSION)
  private Integer configVersion;

  public static final String SERIALIZED_NAME_CONNS = "conns";
  @SerializedName(SERIALIZED_NAME_CONNS)
  private List<TunnelSchemasConnection> conns = new ArrayList<>();

  public static final String SERIALIZED_NAME_FEATURES = "features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  private List<String> features = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_RUN_AT = "run_at";
  @SerializedName(SERIALIZED_NAME_RUN_AT)
  private OffsetDateTime runAt;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public TunnelTunnelClient() {
  }

  public TunnelTunnelClient(
     String id
  ) {
    this();
    this.id = id;
  }

  public TunnelTunnelClient arch(String arch) {
    this.arch = arch;
    return this;
  }

   /**
   * The cloudflared OS architecture used to establish this connection.
   * @return arch
  **/
  @javax.annotation.Nullable
  public String getArch() {
    return arch;
  }

  public void setArch(String arch) {
    this.arch = arch;
  }


  public TunnelTunnelClient configVersion(Integer configVersion) {
    this.configVersion = configVersion;
    return this;
  }

   /**
   * The version of the remote tunnel configuration. Used internally to sync cloudflared with the Zero Trust dashboard.
   * @return configVersion
  **/
  @javax.annotation.Nullable
  public Integer getConfigVersion() {
    return configVersion;
  }

  public void setConfigVersion(Integer configVersion) {
    this.configVersion = configVersion;
  }


  public TunnelTunnelClient conns(List<TunnelSchemasConnection> conns) {
    this.conns = conns;
    return this;
  }

  public TunnelTunnelClient addConnsItem(TunnelSchemasConnection connsItem) {
    if (this.conns == null) {
      this.conns = new ArrayList<>();
    }
    this.conns.add(connsItem);
    return this;
  }

   /**
   * The Cloudflare Tunnel connections between your origin and Cloudflare&#39;s edge.
   * @return conns
  **/
  @javax.annotation.Nullable
  public List<TunnelSchemasConnection> getConns() {
    return conns;
  }

  public void setConns(List<TunnelSchemasConnection> conns) {
    this.conns = conns;
  }


  public TunnelTunnelClient features(List<String> features) {
    this.features = features;
    return this;
  }

  public TunnelTunnelClient addFeaturesItem(String featuresItem) {
    if (this.features == null) {
      this.features = new ArrayList<>();
    }
    this.features.add(featuresItem);
    return this;
  }

   /**
   * Features enabled for the Cloudflare Tunnel.
   * @return features
  **/
  @javax.annotation.Nullable
  public List<String> getFeatures() {
    return features;
  }

  public void setFeatures(List<String> features) {
    this.features = features;
  }


   /**
   * UUID of the Cloudflare Tunnel connection.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public TunnelTunnelClient runAt(OffsetDateTime runAt) {
    this.runAt = runAt;
    return this;
  }

   /**
   * Timestamp of when the tunnel connection was started.
   * @return runAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getRunAt() {
    return runAt;
  }

  public void setRunAt(OffsetDateTime runAt) {
    this.runAt = runAt;
  }


  public TunnelTunnelClient version(String version) {
    this.version = version;
    return this;
  }

   /**
   * The cloudflared version used to establish this connection.
   * @return version
  **/
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TunnelTunnelClient tunnelTunnelClient = (TunnelTunnelClient) o;
    return Objects.equals(this.arch, tunnelTunnelClient.arch) &&
        Objects.equals(this.configVersion, tunnelTunnelClient.configVersion) &&
        Objects.equals(this.conns, tunnelTunnelClient.conns) &&
        Objects.equals(this.features, tunnelTunnelClient.features) &&
        Objects.equals(this.id, tunnelTunnelClient.id) &&
        Objects.equals(this.runAt, tunnelTunnelClient.runAt) &&
        Objects.equals(this.version, tunnelTunnelClient.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arch, configVersion, conns, features, id, runAt, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TunnelTunnelClient {\n");
    sb.append("    arch: ").append(toIndentedString(arch)).append("\n");
    sb.append("    configVersion: ").append(toIndentedString(configVersion)).append("\n");
    sb.append("    conns: ").append(toIndentedString(conns)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    runAt: ").append(toIndentedString(runAt)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arch");
    openapiFields.add("config_version");
    openapiFields.add("conns");
    openapiFields.add("features");
    openapiFields.add("id");
    openapiFields.add("run_at");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TunnelTunnelClient
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TunnelTunnelClient.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TunnelTunnelClient is not found in the empty JSON string", TunnelTunnelClient.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TunnelTunnelClient.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TunnelTunnelClient` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("arch") != null && !jsonObj.get("arch").isJsonNull()) && !jsonObj.get("arch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `arch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("arch").toString()));
      }
      if (jsonObj.get("conns") != null && !jsonObj.get("conns").isJsonNull()) {
        JsonArray jsonArrayconns = jsonObj.getAsJsonArray("conns");
        if (jsonArrayconns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conns` to be an array in the JSON string but got `%s`", jsonObj.get("conns").toString()));
          }

          // validate the optional field `conns` (array)
          for (int i = 0; i < jsonArrayconns.size(); i++) {
            TunnelSchemasConnection.validateJsonElement(jsonArrayconns.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("features") != null && !jsonObj.get("features").isJsonNull() && !jsonObj.get("features").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `features` to be an array in the JSON string but got `%s`", jsonObj.get("features").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TunnelTunnelClient.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TunnelTunnelClient' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TunnelTunnelClient> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TunnelTunnelClient.class));

       return (TypeAdapter<T>) new TypeAdapter<TunnelTunnelClient>() {
           @Override
           public void write(JsonWriter out, TunnelTunnelClient value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TunnelTunnelClient read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TunnelTunnelClient given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TunnelTunnelClient
  * @throws IOException if the JSON string is invalid with respect to TunnelTunnelClient
  */
  public static TunnelTunnelClient fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TunnelTunnelClient.class);
  }

 /**
  * Convert an instance of TunnelTunnelClient to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

