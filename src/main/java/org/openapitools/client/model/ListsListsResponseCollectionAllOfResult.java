/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.ListsKind;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * ListsListsResponseCollectionAllOfResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class ListsListsResponseCollectionAllOfResult {
  public static final String SERIALIZED_NAME_CREATED_ON = "created_on";
  @SerializedName(SERIALIZED_NAME_CREATED_ON)
  private String createdOn;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private ListsKind kind;

  public static final String SERIALIZED_NAME_MODIFIED_ON = "modified_on";
  @SerializedName(SERIALIZED_NAME_MODIFIED_ON)
  private String modifiedOn;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUM_ITEMS = "num_items";
  @SerializedName(SERIALIZED_NAME_NUM_ITEMS)
  private BigDecimal numItems;

  public static final String SERIALIZED_NAME_NUM_REFERENCING_FILTERS = "num_referencing_filters";
  @SerializedName(SERIALIZED_NAME_NUM_REFERENCING_FILTERS)
  private BigDecimal numReferencingFilters;

  public ListsListsResponseCollectionAllOfResult() {
  }

  public ListsListsResponseCollectionAllOfResult(
     String id
  ) {
    this();
    this.id = id;
  }

  public ListsListsResponseCollectionAllOfResult createdOn(String createdOn) {
    this.createdOn = createdOn;
    return this;
  }

   /**
   * The RFC 3339 timestamp of when the list was created.
   * @return createdOn
  **/
  @javax.annotation.Nonnull
  public String getCreatedOn() {
    return createdOn;
  }

  public void setCreatedOn(String createdOn) {
    this.createdOn = createdOn;
  }


  public ListsListsResponseCollectionAllOfResult description(String description) {
    this.description = description;
    return this;
  }

   /**
   * An informative summary of the list.
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


   /**
   * The unique ID of the list.
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }



  public ListsListsResponseCollectionAllOfResult kind(ListsKind kind) {
    this.kind = kind;
    return this;
  }

   /**
   * Get kind
   * @return kind
  **/
  @javax.annotation.Nonnull
  public ListsKind getKind() {
    return kind;
  }

  public void setKind(ListsKind kind) {
    this.kind = kind;
  }


  public ListsListsResponseCollectionAllOfResult modifiedOn(String modifiedOn) {
    this.modifiedOn = modifiedOn;
    return this;
  }

   /**
   * The RFC 3339 timestamp of when the list was last modified.
   * @return modifiedOn
  **/
  @javax.annotation.Nonnull
  public String getModifiedOn() {
    return modifiedOn;
  }

  public void setModifiedOn(String modifiedOn) {
    this.modifiedOn = modifiedOn;
  }


  public ListsListsResponseCollectionAllOfResult name(String name) {
    this.name = name;
    return this;
  }

   /**
   * An informative name for the list. Use this name in filter and rule expressions.
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ListsListsResponseCollectionAllOfResult numItems(BigDecimal numItems) {
    this.numItems = numItems;
    return this;
  }

   /**
   * The number of items in the list.
   * @return numItems
  **/
  @javax.annotation.Nonnull
  public BigDecimal getNumItems() {
    return numItems;
  }

  public void setNumItems(BigDecimal numItems) {
    this.numItems = numItems;
  }


  public ListsListsResponseCollectionAllOfResult numReferencingFilters(BigDecimal numReferencingFilters) {
    this.numReferencingFilters = numReferencingFilters;
    return this;
  }

   /**
   * The number of [filters](/operations/filters-list-filters) referencing the list.
   * @return numReferencingFilters
  **/
  @javax.annotation.Nullable
  public BigDecimal getNumReferencingFilters() {
    return numReferencingFilters;
  }

  public void setNumReferencingFilters(BigDecimal numReferencingFilters) {
    this.numReferencingFilters = numReferencingFilters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListsListsResponseCollectionAllOfResult listsListsResponseCollectionAllOfResult = (ListsListsResponseCollectionAllOfResult) o;
    return Objects.equals(this.createdOn, listsListsResponseCollectionAllOfResult.createdOn) &&
        Objects.equals(this.description, listsListsResponseCollectionAllOfResult.description) &&
        Objects.equals(this.id, listsListsResponseCollectionAllOfResult.id) &&
        Objects.equals(this.kind, listsListsResponseCollectionAllOfResult.kind) &&
        Objects.equals(this.modifiedOn, listsListsResponseCollectionAllOfResult.modifiedOn) &&
        Objects.equals(this.name, listsListsResponseCollectionAllOfResult.name) &&
        Objects.equals(this.numItems, listsListsResponseCollectionAllOfResult.numItems) &&
        Objects.equals(this.numReferencingFilters, listsListsResponseCollectionAllOfResult.numReferencingFilters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdOn, description, id, kind, modifiedOn, name, numItems, numReferencingFilters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListsListsResponseCollectionAllOfResult {\n");
    sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    modifiedOn: ").append(toIndentedString(modifiedOn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    numItems: ").append(toIndentedString(numItems)).append("\n");
    sb.append("    numReferencingFilters: ").append(toIndentedString(numReferencingFilters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created_on");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("modified_on");
    openapiFields.add("name");
    openapiFields.add("num_items");
    openapiFields.add("num_referencing_filters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("created_on");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("kind");
    openapiRequiredFields.add("modified_on");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("num_items");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ListsListsResponseCollectionAllOfResult
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListsListsResponseCollectionAllOfResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListsListsResponseCollectionAllOfResult is not found in the empty JSON string", ListsListsResponseCollectionAllOfResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListsListsResponseCollectionAllOfResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListsListsResponseCollectionAllOfResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListsListsResponseCollectionAllOfResult.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("created_on").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_on` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_on").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the required field `kind`
      ListsKind.validateJsonElement(jsonObj.get("kind"));
      if (!jsonObj.get("modified_on").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modified_on` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modified_on").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListsListsResponseCollectionAllOfResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListsListsResponseCollectionAllOfResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListsListsResponseCollectionAllOfResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListsListsResponseCollectionAllOfResult.class));

       return (TypeAdapter<T>) new TypeAdapter<ListsListsResponseCollectionAllOfResult>() {
           @Override
           public void write(JsonWriter out, ListsListsResponseCollectionAllOfResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListsListsResponseCollectionAllOfResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ListsListsResponseCollectionAllOfResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ListsListsResponseCollectionAllOfResult
  * @throws IOException if the JSON string is invalid with respect to ListsListsResponseCollectionAllOfResult
  */
  public static ListsListsResponseCollectionAllOfResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListsListsResponseCollectionAllOfResult.class);
  }

 /**
  * Convert an instance of ListsListsResponseCollectionAllOfResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

