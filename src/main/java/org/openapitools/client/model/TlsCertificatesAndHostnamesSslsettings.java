/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SSL specific settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:11:08.999300719+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class TlsCertificatesAndHostnamesSslsettings {
  public static final String SERIALIZED_NAME_CIPHERS = "ciphers";
  @SerializedName(SERIALIZED_NAME_CIPHERS)
  private Set<String> ciphers = new LinkedHashSet<>();

  /**
   * Whether or not Early Hints is enabled.
   */
  @JsonAdapter(EarlyHintsEnum.Adapter.class)
  public enum EarlyHintsEnum {
    ON("on"),
    
    OFF("off");

    private String value;

    EarlyHintsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EarlyHintsEnum fromValue(String value) {
      for (EarlyHintsEnum b : EarlyHintsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EarlyHintsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EarlyHintsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EarlyHintsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EarlyHintsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EarlyHintsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EARLY_HINTS = "early_hints";
  @SerializedName(SERIALIZED_NAME_EARLY_HINTS)
  private EarlyHintsEnum earlyHints;

  /**
   * Whether or not HTTP2 is enabled.
   */
  @JsonAdapter(Http2Enum.Adapter.class)
  public enum Http2Enum {
    ON("on"),
    
    OFF("off");

    private String value;

    Http2Enum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static Http2Enum fromValue(String value) {
      for (Http2Enum b : Http2Enum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<Http2Enum> {
      @Override
      public void write(final JsonWriter jsonWriter, final Http2Enum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public Http2Enum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return Http2Enum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      Http2Enum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HTTP2 = "http2";
  @SerializedName(SERIALIZED_NAME_HTTP2)
  private Http2Enum http2;

  /**
   * The minimum TLS version supported.
   */
  @JsonAdapter(MinTlsVersionEnum.Adapter.class)
  public enum MinTlsVersionEnum {
    _0("1.0"),
    
    _1("1.1"),
    
    _2("1.2"),
    
    _3("1.3");

    private String value;

    MinTlsVersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MinTlsVersionEnum fromValue(String value) {
      for (MinTlsVersionEnum b : MinTlsVersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MinTlsVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MinTlsVersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MinTlsVersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MinTlsVersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MinTlsVersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MIN_TLS_VERSION = "min_tls_version";
  @SerializedName(SERIALIZED_NAME_MIN_TLS_VERSION)
  private MinTlsVersionEnum minTlsVersion;

  /**
   * Whether or not TLS 1.3 is enabled.
   */
  @JsonAdapter(Tls13Enum.Adapter.class)
  public enum Tls13Enum {
    ON("on"),
    
    OFF("off");

    private String value;

    Tls13Enum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static Tls13Enum fromValue(String value) {
      for (Tls13Enum b : Tls13Enum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<Tls13Enum> {
      @Override
      public void write(final JsonWriter jsonWriter, final Tls13Enum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public Tls13Enum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return Tls13Enum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      Tls13Enum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TLS13 = "tls_1_3";
  @SerializedName(SERIALIZED_NAME_TLS13)
  private Tls13Enum tls13;

  public TlsCertificatesAndHostnamesSslsettings() {
  }

  public TlsCertificatesAndHostnamesSslsettings ciphers(Set<String> ciphers) {
    this.ciphers = ciphers;
    return this;
  }

  public TlsCertificatesAndHostnamesSslsettings addCiphersItem(String ciphersItem) {
    if (this.ciphers == null) {
      this.ciphers = new LinkedHashSet<>();
    }
    this.ciphers.add(ciphersItem);
    return this;
  }

   /**
   * An allowlist of ciphers for TLS termination. These ciphers must be in the BoringSSL format.
   * @return ciphers
  **/
  @javax.annotation.Nullable
  public Set<String> getCiphers() {
    return ciphers;
  }

  public void setCiphers(Set<String> ciphers) {
    this.ciphers = ciphers;
  }


  public TlsCertificatesAndHostnamesSslsettings earlyHints(EarlyHintsEnum earlyHints) {
    this.earlyHints = earlyHints;
    return this;
  }

   /**
   * Whether or not Early Hints is enabled.
   * @return earlyHints
  **/
  @javax.annotation.Nullable
  public EarlyHintsEnum getEarlyHints() {
    return earlyHints;
  }

  public void setEarlyHints(EarlyHintsEnum earlyHints) {
    this.earlyHints = earlyHints;
  }


  public TlsCertificatesAndHostnamesSslsettings http2(Http2Enum http2) {
    this.http2 = http2;
    return this;
  }

   /**
   * Whether or not HTTP2 is enabled.
   * @return http2
  **/
  @javax.annotation.Nullable
  public Http2Enum getHttp2() {
    return http2;
  }

  public void setHttp2(Http2Enum http2) {
    this.http2 = http2;
  }


  public TlsCertificatesAndHostnamesSslsettings minTlsVersion(MinTlsVersionEnum minTlsVersion) {
    this.minTlsVersion = minTlsVersion;
    return this;
  }

   /**
   * The minimum TLS version supported.
   * @return minTlsVersion
  **/
  @javax.annotation.Nullable
  public MinTlsVersionEnum getMinTlsVersion() {
    return minTlsVersion;
  }

  public void setMinTlsVersion(MinTlsVersionEnum minTlsVersion) {
    this.minTlsVersion = minTlsVersion;
  }


  public TlsCertificatesAndHostnamesSslsettings tls13(Tls13Enum tls13) {
    this.tls13 = tls13;
    return this;
  }

   /**
   * Whether or not TLS 1.3 is enabled.
   * @return tls13
  **/
  @javax.annotation.Nullable
  public Tls13Enum getTls13() {
    return tls13;
  }

  public void setTls13(Tls13Enum tls13) {
    this.tls13 = tls13;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TlsCertificatesAndHostnamesSslsettings tlsCertificatesAndHostnamesSslsettings = (TlsCertificatesAndHostnamesSslsettings) o;
    return Objects.equals(this.ciphers, tlsCertificatesAndHostnamesSslsettings.ciphers) &&
        Objects.equals(this.earlyHints, tlsCertificatesAndHostnamesSslsettings.earlyHints) &&
        Objects.equals(this.http2, tlsCertificatesAndHostnamesSslsettings.http2) &&
        Objects.equals(this.minTlsVersion, tlsCertificatesAndHostnamesSslsettings.minTlsVersion) &&
        Objects.equals(this.tls13, tlsCertificatesAndHostnamesSslsettings.tls13);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ciphers, earlyHints, http2, minTlsVersion, tls13);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TlsCertificatesAndHostnamesSslsettings {\n");
    sb.append("    ciphers: ").append(toIndentedString(ciphers)).append("\n");
    sb.append("    earlyHints: ").append(toIndentedString(earlyHints)).append("\n");
    sb.append("    http2: ").append(toIndentedString(http2)).append("\n");
    sb.append("    minTlsVersion: ").append(toIndentedString(minTlsVersion)).append("\n");
    sb.append("    tls13: ").append(toIndentedString(tls13)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ciphers");
    openapiFields.add("early_hints");
    openapiFields.add("http2");
    openapiFields.add("min_tls_version");
    openapiFields.add("tls_1_3");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TlsCertificatesAndHostnamesSslsettings
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TlsCertificatesAndHostnamesSslsettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TlsCertificatesAndHostnamesSslsettings is not found in the empty JSON string", TlsCertificatesAndHostnamesSslsettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TlsCertificatesAndHostnamesSslsettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TlsCertificatesAndHostnamesSslsettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("ciphers") != null && !jsonObj.get("ciphers").isJsonNull() && !jsonObj.get("ciphers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ciphers` to be an array in the JSON string but got `%s`", jsonObj.get("ciphers").toString()));
      }
      if ((jsonObj.get("early_hints") != null && !jsonObj.get("early_hints").isJsonNull()) && !jsonObj.get("early_hints").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `early_hints` to be a primitive type in the JSON string but got `%s`", jsonObj.get("early_hints").toString()));
      }
      // validate the optional field `early_hints`
      if (jsonObj.get("early_hints") != null && !jsonObj.get("early_hints").isJsonNull()) {
        EarlyHintsEnum.validateJsonElement(jsonObj.get("early_hints"));
      }
      if ((jsonObj.get("http2") != null && !jsonObj.get("http2").isJsonNull()) && !jsonObj.get("http2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `http2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("http2").toString()));
      }
      // validate the optional field `http2`
      if (jsonObj.get("http2") != null && !jsonObj.get("http2").isJsonNull()) {
        Http2Enum.validateJsonElement(jsonObj.get("http2"));
      }
      if ((jsonObj.get("min_tls_version") != null && !jsonObj.get("min_tls_version").isJsonNull()) && !jsonObj.get("min_tls_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `min_tls_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("min_tls_version").toString()));
      }
      // validate the optional field `min_tls_version`
      if (jsonObj.get("min_tls_version") != null && !jsonObj.get("min_tls_version").isJsonNull()) {
        MinTlsVersionEnum.validateJsonElement(jsonObj.get("min_tls_version"));
      }
      if ((jsonObj.get("tls_1_3") != null && !jsonObj.get("tls_1_3").isJsonNull()) && !jsonObj.get("tls_1_3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tls_1_3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tls_1_3").toString()));
      }
      // validate the optional field `tls_1_3`
      if (jsonObj.get("tls_1_3") != null && !jsonObj.get("tls_1_3").isJsonNull()) {
        Tls13Enum.validateJsonElement(jsonObj.get("tls_1_3"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TlsCertificatesAndHostnamesSslsettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TlsCertificatesAndHostnamesSslsettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TlsCertificatesAndHostnamesSslsettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TlsCertificatesAndHostnamesSslsettings.class));

       return (TypeAdapter<T>) new TypeAdapter<TlsCertificatesAndHostnamesSslsettings>() {
           @Override
           public void write(JsonWriter out, TlsCertificatesAndHostnamesSslsettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TlsCertificatesAndHostnamesSslsettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TlsCertificatesAndHostnamesSslsettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TlsCertificatesAndHostnamesSslsettings
  * @throws IOException if the JSON string is invalid with respect to TlsCertificatesAndHostnamesSslsettings
  */
  public static TlsCertificatesAndHostnamesSslsettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TlsCertificatesAndHostnamesSslsettings.class);
  }

 /**
  * Convert an instance of TlsCertificatesAndHostnamesSslsettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

