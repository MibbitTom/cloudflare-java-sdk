/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * AccessOidcSaasApp
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-22T11:29:23.936635354+01:00[Europe/London]", comments = "Generator version: 7.5.0")
public class AccessOidcSaasApp {
  public static final String SERIALIZED_NAME_APP_LAUNCHER_URL = "app_launcher_url";
  @SerializedName(SERIALIZED_NAME_APP_LAUNCHER_URL)
  private String appLauncherUrl;

  /**
   * Identifier of the authentication protocol used for the saas app. Required for OIDC.
   */
  @JsonAdapter(AuthTypeEnum.Adapter.class)
  public enum AuthTypeEnum {
    SAML("saml"),
    
    OIDC("oidc");

    private String value;

    AuthTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthTypeEnum fromValue(String value) {
      for (AuthTypeEnum b : AuthTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTH_TYPE = "auth_type";
  @SerializedName(SERIALIZED_NAME_AUTH_TYPE)
  private AuthTypeEnum authType;

  public static final String SERIALIZED_NAME_CLIENT_ID = "client_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CLIENT_SECRET = "client_secret";
  @SerializedName(SERIALIZED_NAME_CLIENT_SECRET)
  private String clientSecret;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  /**
   * Gets or Sets grantTypes
   */
  @JsonAdapter(GrantTypesEnum.Adapter.class)
  public enum GrantTypesEnum {
    CODE("authorization_code"),
    
    CODE_WITH_PKCE("authorization_code_with_pkce");

    private String value;

    GrantTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GrantTypesEnum fromValue(String value) {
      for (GrantTypesEnum b : GrantTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GrantTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GrantTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GrantTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GrantTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GrantTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GRANT_TYPES = "grant_types";
  @SerializedName(SERIALIZED_NAME_GRANT_TYPES)
  private List<GrantTypesEnum> grantTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_GROUP_FILTER_REGEX = "group_filter_regex";
  @SerializedName(SERIALIZED_NAME_GROUP_FILTER_REGEX)
  private String groupFilterRegex;

  public static final String SERIALIZED_NAME_PUBLIC_KEY = "public_key";
  @SerializedName(SERIALIZED_NAME_PUBLIC_KEY)
  private String publicKey;

  public static final String SERIALIZED_NAME_REDIRECT_URIS = "redirect_uris";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URIS)
  private List<String> redirectUris = new ArrayList<>();

  /**
   * Gets or Sets scopes
   */
  @JsonAdapter(ScopesEnum.Adapter.class)
  public enum ScopesEnum {
    OPENID("openid"),
    
    GROUPS("groups"),
    
    EMAIL("email"),
    
    PROFILE("profile");

    private String value;

    ScopesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScopesEnum fromValue(String value) {
      for (ScopesEnum b : ScopesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScopesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScopesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScopesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScopesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ScopesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCOPES = "scopes";
  @SerializedName(SERIALIZED_NAME_SCOPES)
  private List<ScopesEnum> scopes = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public AccessOidcSaasApp() {
  }

  public AccessOidcSaasApp(
     OffsetDateTime createdAt, 
     OffsetDateTime updatedAt
  ) {
    this();
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
  }

  public AccessOidcSaasApp appLauncherUrl(String appLauncherUrl) {
    this.appLauncherUrl = appLauncherUrl;
    return this;
  }

   /**
   * The URL where this applications tile redirects users
   * @return appLauncherUrl
  **/
  @javax.annotation.Nullable
  public String getAppLauncherUrl() {
    return appLauncherUrl;
  }

  public void setAppLauncherUrl(String appLauncherUrl) {
    this.appLauncherUrl = appLauncherUrl;
  }


  public AccessOidcSaasApp authType(AuthTypeEnum authType) {
    this.authType = authType;
    return this;
  }

   /**
   * Identifier of the authentication protocol used for the saas app. Required for OIDC.
   * @return authType
  **/
  @javax.annotation.Nullable
  public AuthTypeEnum getAuthType() {
    return authType;
  }

  public void setAuthType(AuthTypeEnum authType) {
    this.authType = authType;
  }


  public AccessOidcSaasApp clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

   /**
   * The application client id
   * @return clientId
  **/
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public AccessOidcSaasApp clientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
    return this;
  }

   /**
   * The application client secret, only returned on POST request.
   * @return clientSecret
  **/
  @javax.annotation.Nullable
  public String getClientSecret() {
    return clientSecret;
  }

  public void setClientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
  }


   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  public AccessOidcSaasApp grantTypes(List<GrantTypesEnum> grantTypes) {
    this.grantTypes = grantTypes;
    return this;
  }

  public AccessOidcSaasApp addGrantTypesItem(GrantTypesEnum grantTypesItem) {
    if (this.grantTypes == null) {
      this.grantTypes = new ArrayList<>();
    }
    this.grantTypes.add(grantTypesItem);
    return this;
  }

   /**
   * The OIDC flows supported by this application
   * @return grantTypes
  **/
  @javax.annotation.Nullable
  public List<GrantTypesEnum> getGrantTypes() {
    return grantTypes;
  }

  public void setGrantTypes(List<GrantTypesEnum> grantTypes) {
    this.grantTypes = grantTypes;
  }


  public AccessOidcSaasApp groupFilterRegex(String groupFilterRegex) {
    this.groupFilterRegex = groupFilterRegex;
    return this;
  }

   /**
   * A regex to filter Cloudflare groups returned in ID token and userinfo endpoint
   * @return groupFilterRegex
  **/
  @javax.annotation.Nullable
  public String getGroupFilterRegex() {
    return groupFilterRegex;
  }

  public void setGroupFilterRegex(String groupFilterRegex) {
    this.groupFilterRegex = groupFilterRegex;
  }


  public AccessOidcSaasApp publicKey(String publicKey) {
    this.publicKey = publicKey;
    return this;
  }

   /**
   * The Access public certificate that will be used to verify your identity.
   * @return publicKey
  **/
  @javax.annotation.Nullable
  public String getPublicKey() {
    return publicKey;
  }

  public void setPublicKey(String publicKey) {
    this.publicKey = publicKey;
  }


  public AccessOidcSaasApp redirectUris(List<String> redirectUris) {
    this.redirectUris = redirectUris;
    return this;
  }

  public AccessOidcSaasApp addRedirectUrisItem(String redirectUrisItem) {
    if (this.redirectUris == null) {
      this.redirectUris = new ArrayList<>();
    }
    this.redirectUris.add(redirectUrisItem);
    return this;
  }

   /**
   * The permitted URL&#39;s for Cloudflare to return Authorization codes and Access/ID tokens
   * @return redirectUris
  **/
  @javax.annotation.Nullable
  public List<String> getRedirectUris() {
    return redirectUris;
  }

  public void setRedirectUris(List<String> redirectUris) {
    this.redirectUris = redirectUris;
  }


  public AccessOidcSaasApp scopes(List<ScopesEnum> scopes) {
    this.scopes = scopes;
    return this;
  }

  public AccessOidcSaasApp addScopesItem(ScopesEnum scopesItem) {
    if (this.scopes == null) {
      this.scopes = new ArrayList<>();
    }
    this.scopes.add(scopesItem);
    return this;
  }

   /**
   * Define the user information shared with access
   * @return scopes
  **/
  @javax.annotation.Nullable
  public List<ScopesEnum> getScopes() {
    return scopes;
  }

  public void setScopes(List<ScopesEnum> scopes) {
    this.scopes = scopes;
  }


   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccessOidcSaasApp accessOidcSaasApp = (AccessOidcSaasApp) o;
    return Objects.equals(this.appLauncherUrl, accessOidcSaasApp.appLauncherUrl) &&
        Objects.equals(this.authType, accessOidcSaasApp.authType) &&
        Objects.equals(this.clientId, accessOidcSaasApp.clientId) &&
        Objects.equals(this.clientSecret, accessOidcSaasApp.clientSecret) &&
        Objects.equals(this.createdAt, accessOidcSaasApp.createdAt) &&
        Objects.equals(this.grantTypes, accessOidcSaasApp.grantTypes) &&
        Objects.equals(this.groupFilterRegex, accessOidcSaasApp.groupFilterRegex) &&
        Objects.equals(this.publicKey, accessOidcSaasApp.publicKey) &&
        Objects.equals(this.redirectUris, accessOidcSaasApp.redirectUris) &&
        Objects.equals(this.scopes, accessOidcSaasApp.scopes) &&
        Objects.equals(this.updatedAt, accessOidcSaasApp.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appLauncherUrl, authType, clientId, clientSecret, createdAt, grantTypes, groupFilterRegex, publicKey, redirectUris, scopes, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccessOidcSaasApp {\n");
    sb.append("    appLauncherUrl: ").append(toIndentedString(appLauncherUrl)).append("\n");
    sb.append("    authType: ").append(toIndentedString(authType)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    grantTypes: ").append(toIndentedString(grantTypes)).append("\n");
    sb.append("    groupFilterRegex: ").append(toIndentedString(groupFilterRegex)).append("\n");
    sb.append("    publicKey: ").append(toIndentedString(publicKey)).append("\n");
    sb.append("    redirectUris: ").append(toIndentedString(redirectUris)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("app_launcher_url");
    openapiFields.add("auth_type");
    openapiFields.add("client_id");
    openapiFields.add("client_secret");
    openapiFields.add("created_at");
    openapiFields.add("grant_types");
    openapiFields.add("group_filter_regex");
    openapiFields.add("public_key");
    openapiFields.add("redirect_uris");
    openapiFields.add("scopes");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AccessOidcSaasApp
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccessOidcSaasApp.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccessOidcSaasApp is not found in the empty JSON string", AccessOidcSaasApp.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccessOidcSaasApp.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccessOidcSaasApp` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("app_launcher_url") != null && !jsonObj.get("app_launcher_url").isJsonNull()) && !jsonObj.get("app_launcher_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_launcher_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_launcher_url").toString()));
      }
      if ((jsonObj.get("auth_type") != null && !jsonObj.get("auth_type").isJsonNull()) && !jsonObj.get("auth_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth_type").toString()));
      }
      // validate the optional field `auth_type`
      if (jsonObj.get("auth_type") != null && !jsonObj.get("auth_type").isJsonNull()) {
        AuthTypeEnum.validateJsonElement(jsonObj.get("auth_type"));
      }
      if ((jsonObj.get("client_id") != null && !jsonObj.get("client_id").isJsonNull()) && !jsonObj.get("client_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_id").toString()));
      }
      if ((jsonObj.get("client_secret") != null && !jsonObj.get("client_secret").isJsonNull()) && !jsonObj.get("client_secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_secret").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("grant_types") != null && !jsonObj.get("grant_types").isJsonNull() && !jsonObj.get("grant_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `grant_types` to be an array in the JSON string but got `%s`", jsonObj.get("grant_types").toString()));
      }
      if ((jsonObj.get("group_filter_regex") != null && !jsonObj.get("group_filter_regex").isJsonNull()) && !jsonObj.get("group_filter_regex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group_filter_regex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group_filter_regex").toString()));
      }
      if ((jsonObj.get("public_key") != null && !jsonObj.get("public_key").isJsonNull()) && !jsonObj.get("public_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `public_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("public_key").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("redirect_uris") != null && !jsonObj.get("redirect_uris").isJsonNull() && !jsonObj.get("redirect_uris").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirect_uris` to be an array in the JSON string but got `%s`", jsonObj.get("redirect_uris").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("scopes") != null && !jsonObj.get("scopes").isJsonNull() && !jsonObj.get("scopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scopes` to be an array in the JSON string but got `%s`", jsonObj.get("scopes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccessOidcSaasApp.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccessOidcSaasApp' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccessOidcSaasApp> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccessOidcSaasApp.class));

       return (TypeAdapter<T>) new TypeAdapter<AccessOidcSaasApp>() {
           @Override
           public void write(JsonWriter out, AccessOidcSaasApp value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccessOidcSaasApp read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AccessOidcSaasApp given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AccessOidcSaasApp
  * @throws IOException if the JSON string is invalid with respect to AccessOidcSaasApp
  */
  public static AccessOidcSaasApp fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccessOidcSaasApp.class);
  }

 /**
  * Convert an instance of AccessOidcSaasApp to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

