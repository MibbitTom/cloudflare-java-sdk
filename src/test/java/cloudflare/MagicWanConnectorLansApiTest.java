/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiException;
import org.openapitools.client.model.MagicApiResponseCommonFailure;
import org.openapitools.client.model.MagicLanDeletedResponse;
import org.openapitools.client.model.MagicLanModifiedResponse;
import org.openapitools.client.model.MagicLanSingleResponse;
import org.openapitools.client.model.MagicLanUpdateRequest;
import org.openapitools.client.model.MagicLansAddSingleRequest;
import org.openapitools.client.model.MagicLansCollectionResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MagicWanConnectorLansApi
 */
@Disabled
public class MagicWanConnectorLansApiTest {

    private final MagicWanConnectorLansApi api = new MagicWanConnectorLansApi();

    /**
     * Create a new LAN
     *
     * Creates a new LAN. If the site is in high availability mode, static_addressing is required along with secondary and virtual address.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void magicWanConnectorsLansCreateLanTest() throws ApiException {
        String accountId = null;
        String siteId = null;
        MagicLansAddSingleRequest magicLansAddSingleRequest = null;
        MagicLansCollectionResponse response = api.magicWanConnectorsLansCreateLan(accountId, siteId, magicLansAddSingleRequest);
        // TODO: test validations
    }

    /**
     * Delete LAN
     *
     * Remove a specific LAN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void magicWanConnectorsLansDeleteLanTest() throws ApiException {
        String siteId = null;
        String accountId = null;
        String lanId = null;
        MagicLanDeletedResponse response = api.magicWanConnectorsLansDeleteLan(siteId, accountId, lanId);
        // TODO: test validations
    }

    /**
     * LAN Details
     *
     * Get a specific LAN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void magicWanConnectorsLansLanDetailsTest() throws ApiException {
        String siteId = null;
        String accountId = null;
        String lanId = null;
        MagicLanSingleResponse response = api.magicWanConnectorsLansLanDetails(siteId, accountId, lanId);
        // TODO: test validations
    }

    /**
     * List LANs
     *
     * Lists LANs associated with an account and site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void magicWanConnectorsLansListLansTest() throws ApiException {
        String accountId = null;
        String siteId = null;
        MagicLansCollectionResponse response = api.magicWanConnectorsLansListLans(accountId, siteId);
        // TODO: test validations
    }

    /**
     * Update LAN
     *
     * Update a specific LAN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void magicWanConnectorsLansUpdateLanTest() throws ApiException {
        String siteId = null;
        String accountId = null;
        String lanId = null;
        MagicLanUpdateRequest magicLanUpdateRequest = null;
        MagicLanModifiedResponse response = api.magicWanConnectorsLansUpdateLan(siteId, accountId, lanId, magicLanUpdateRequest);
        // TODO: test validations
    }

}
