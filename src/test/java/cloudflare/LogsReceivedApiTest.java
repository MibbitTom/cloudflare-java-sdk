/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.DataZoneAnalyticsApiEnd;
import org.openapitools.client.model.DataZoneAnalyticsApiFieldsResponse;
import org.openapitools.client.model.DataZoneAnalyticsApiFlagResponse;
import org.openapitools.client.model.DataZoneAnalyticsApiLogs;
import org.openapitools.client.model.DataZoneAnalyticsApiTimestamps;
import org.openapitools.client.model.LogsReceivedGetLogRetentionFlag4XXResponse;
import org.openapitools.client.model.LogsReceivedGetLogsRayIDs4XXResponse;
import org.openapitools.client.model.LogsReceivedGetLogsReceivedStartParameter;
import org.openapitools.client.model.LogsReceivedListFields4XXResponse;
import org.openapitools.client.model.LogsReceivedUpdateLogRetentionFlagRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LogsReceivedApi
 */
@Disabled
public class LogsReceivedApiTest {

    private final LogsReceivedApi api = new LogsReceivedApi();

    /**
     * Get log retention flag
     *
     * Gets log retention flag for Logpull API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logsReceivedGetLogRetentionFlagTest() throws ApiException {
        String zoneIdentifier = null;
        DataZoneAnalyticsApiFlagResponse response = api.logsReceivedGetLogRetentionFlag(zoneIdentifier);
        // TODO: test validations
    }

    /**
     * Get logs RayIDs
     *
     * The &#x60;/rayids&#x60; api route allows lookups by specific rayid. The rayids route will return zero, one, or more records (ray ids are not unique).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logsReceivedGetLogsRayIDsTest() throws ApiException {
        String rayIdentifier = null;
        String zoneIdentifier = null;
        DataZoneAnalyticsApiTimestamps timestamps = null;
        String fields = null;
        DataZoneAnalyticsApiLogs response = api.logsReceivedGetLogsRayIDs(rayIdentifier, zoneIdentifier, timestamps, fields);
        // TODO: test validations
    }

    /**
     * Get logs received
     *
     * The &#x60;/received&#x60; api route allows customers to retrieve their edge HTTP logs. The basic access pattern is \&quot;give me all the logs for zone Z for minute M\&quot;, where the minute M refers to the time records were received at Cloudflare&#39;s central data center. &#x60;start&#x60; is inclusive, and &#x60;end&#x60; is exclusive. Because of that, to get all data, at minutely cadence, starting at 10AM, the proper values are: &#x60;start&#x3D;2018-05-20T10:00:00Z&amp;end&#x3D;2018-05-20T10:01:00Z&#x60;, then &#x60;start&#x3D;2018-05-20T10:01:00Z&amp;end&#x3D;2018-05-20T10:02:00Z&#x60; and so on; the overlap will be handled properly.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logsReceivedGetLogsReceivedTest() throws ApiException {
        String zoneIdentifier = null;
        DataZoneAnalyticsApiEnd end = null;
        BigDecimal sample = null;
        DataZoneAnalyticsApiTimestamps timestamps = null;
        Integer count = null;
        String fields = null;
        LogsReceivedGetLogsReceivedStartParameter start = null;
        DataZoneAnalyticsApiLogs response = api.logsReceivedGetLogsReceived(zoneIdentifier, end, sample, timestamps, count, fields, start);
        // TODO: test validations
    }

    /**
     * List fields
     *
     * Lists all fields available. The response is json object with key-value pairs, where keys are field names, and values are descriptions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logsReceivedListFieldsTest() throws ApiException {
        String zoneIdentifier = null;
        DataZoneAnalyticsApiFieldsResponse response = api.logsReceivedListFields(zoneIdentifier);
        // TODO: test validations
    }

    /**
     * Update log retention flag
     *
     * Updates log retention flag for Logpull API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logsReceivedUpdateLogRetentionFlagTest() throws ApiException {
        String zoneIdentifier = null;
        LogsReceivedUpdateLogRetentionFlagRequest logsReceivedUpdateLogRetentionFlagRequest = null;
        DataZoneAnalyticsApiFlagResponse response = api.logsReceivedUpdateLogRetentionFlag(zoneIdentifier, logsReceivedUpdateLogRetentionFlagRequest);
        // TODO: test validations
    }

}
