/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiException;
import org.openapitools.client.model.CustomIndicatorFeedsAddPermission4XXResponse;
import org.openapitools.client.model.CustomIndicatorFeedsApiResponseCommonFailure;
import org.openapitools.client.model.CustomIndicatorFeedsCreateFeed;
import org.openapitools.client.model.CustomIndicatorFeedsCreateFeedResponse;
import org.openapitools.client.model.CustomIndicatorFeedsCreateIndicatorFeeds4XXResponse;
import org.openapitools.client.model.CustomIndicatorFeedsGetIndicatorFeedMetadata4XXResponse;
import org.openapitools.client.model.CustomIndicatorFeedsGetIndicatorFeeds4XXResponse;
import org.openapitools.client.model.CustomIndicatorFeedsIndicatorFeedMetadataResponse;
import org.openapitools.client.model.CustomIndicatorFeedsIndicatorFeedResponse;
import org.openapitools.client.model.CustomIndicatorFeedsPermissionListItemResponse;
import org.openapitools.client.model.CustomIndicatorFeedsPermissionsRequest;
import org.openapitools.client.model.CustomIndicatorFeedsPermissionsResponse;
import org.openapitools.client.model.CustomIndicatorFeedsUpdateFeedResponse;
import org.openapitools.client.model.CustomIndicatorFeedsViewPermissions4XXResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CustomIndicatorFeedsApi
 */
@Disabled
public class CustomIndicatorFeedsApiTest {

    private final CustomIndicatorFeedsApi api = new CustomIndicatorFeedsApi();

    /**
     * Grant permission to indicator feed
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void customIndicatorFeedsAddPermissionTest() throws ApiException {
        String accountId = null;
        CustomIndicatorFeedsPermissionsRequest customIndicatorFeedsPermissionsRequest = null;
        CustomIndicatorFeedsPermissionsResponse response = api.customIndicatorFeedsAddPermission(accountId, customIndicatorFeedsPermissionsRequest);
        // TODO: test validations
    }

    /**
     * Create new indicator feed
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void customIndicatorFeedsCreateIndicatorFeedsTest() throws ApiException {
        String accountId = null;
        CustomIndicatorFeedsCreateFeed customIndicatorFeedsCreateFeed = null;
        CustomIndicatorFeedsCreateFeedResponse response = api.customIndicatorFeedsCreateIndicatorFeeds(accountId, customIndicatorFeedsCreateFeed);
        // TODO: test validations
    }

    /**
     * Get indicator feed data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void customIndicatorFeedsGetIndicatorFeedDataTest() throws ApiException {
        String accountId = null;
        Integer feedId = null;
        String response = api.customIndicatorFeedsGetIndicatorFeedData(accountId, feedId);
        // TODO: test validations
    }

    /**
     * Get indicator feed metadata
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void customIndicatorFeedsGetIndicatorFeedMetadataTest() throws ApiException {
        String accountId = null;
        Integer feedId = null;
        CustomIndicatorFeedsIndicatorFeedMetadataResponse response = api.customIndicatorFeedsGetIndicatorFeedMetadata(accountId, feedId);
        // TODO: test validations
    }

    /**
     * Get indicator feeds owned by this account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void customIndicatorFeedsGetIndicatorFeedsTest() throws ApiException {
        String accountId = null;
        CustomIndicatorFeedsIndicatorFeedResponse response = api.customIndicatorFeedsGetIndicatorFeeds(accountId);
        // TODO: test validations
    }

    /**
     * Revoke permission to indicator feed
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void customIndicatorFeedsRemovePermissionTest() throws ApiException {
        String accountId = null;
        CustomIndicatorFeedsPermissionsRequest customIndicatorFeedsPermissionsRequest = null;
        CustomIndicatorFeedsPermissionsResponse response = api.customIndicatorFeedsRemovePermission(accountId, customIndicatorFeedsPermissionsRequest);
        // TODO: test validations
    }

    /**
     * Update indicator feed data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void customIndicatorFeedsUpdateIndicatorFeedDataTest() throws ApiException {
        String accountId = null;
        Integer feedId = null;
        String source = null;
        CustomIndicatorFeedsUpdateFeedResponse response = api.customIndicatorFeedsUpdateIndicatorFeedData(accountId, feedId, source);
        // TODO: test validations
    }

    /**
     * List indicator feed permissions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void customIndicatorFeedsViewPermissionsTest() throws ApiException {
        String accountId = null;
        CustomIndicatorFeedsPermissionListItemResponse response = api.customIndicatorFeedsViewPermissions(accountId);
        // TODO: test validations
    }

}
