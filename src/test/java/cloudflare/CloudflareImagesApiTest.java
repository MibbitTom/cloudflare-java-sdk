/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.CloudflareImagesBaseImage4XXResponse;
import org.openapitools.client.model.CloudflareImagesCreateAuthenticatedDirectUploadUrlV24XXResponse;
import org.openapitools.client.model.CloudflareImagesImagesUsageStatistics4XXResponse;
import org.openapitools.client.model.CloudflareImagesListImages4XXResponse;
import org.openapitools.client.model.CloudflareImagesListImagesV24XXResponse;
import org.openapitools.client.model.CloudflareImagesUploadAnImageViaUrl4XXResponse;
import org.openapitools.client.model.CloudflareImagesVariantsDeleteAVariant4XXResponse;
import java.io.File;
import org.openapitools.client.model.ImagesDeletedResponse;
import org.openapitools.client.model.ImagesImageDirectUploadResponseV2;
import org.openapitools.client.model.ImagesImagePatchRequest;
import org.openapitools.client.model.ImagesImageResponseSingle;
import org.openapitools.client.model.ImagesImagesListResponse;
import org.openapitools.client.model.ImagesImagesListResponseV2;
import org.openapitools.client.model.ImagesImagesStatsResponse;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CloudflareImagesApi
 */
@Disabled
public class CloudflareImagesApiTest {

    private final CloudflareImagesApi api = new CloudflareImagesApi();

    /**
     * Base image
     *
     * Fetch base image. For most images this will be the originally uploaded file. For larger images it can be a near-lossless version of the original.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudflareImagesBaseImageTest() throws ApiException {
        String imageId = null;
        String accountId = null;
        File response = api.cloudflareImagesBaseImage(imageId, accountId);
        // TODO: test validations
    }

    /**
     * Create authenticated direct upload URL V2
     *
     * Direct uploads allow users to upload images without API keys. A common use case are web apps, client-side applications, or mobile devices where users upload content directly to Cloudflare Images. This method creates a draft record for a future image. It returns an upload URL and an image identifier. To verify if the image itself has been uploaded, send an image details request (accounts/:account_identifier/images/v1/:identifier), and check that the &#x60;draft: true&#x60; property is not present.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudflareImagesCreateAuthenticatedDirectUploadUrlV2Test() throws ApiException {
        String accountId = null;
        OffsetDateTime expiry = null;
        String id = null;
        Object metadata = null;
        Boolean requireSignedURLs = null;
        ImagesImageDirectUploadResponseV2 response = api.cloudflareImagesCreateAuthenticatedDirectUploadUrlV2(accountId, expiry, id, metadata, requireSignedURLs);
        // TODO: test validations
    }

    /**
     * Delete image
     *
     * Delete an image on Cloudflare Images. On success, all copies of the image are deleted and purged from cache.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudflareImagesDeleteImageTest() throws ApiException {
        String imageId = null;
        String accountId = null;
        ImagesDeletedResponse response = api.cloudflareImagesDeleteImage(imageId, accountId);
        // TODO: test validations
    }

    /**
     * Image details
     *
     * Fetch details for a single image.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudflareImagesImageDetailsTest() throws ApiException {
        String imageId = null;
        String accountId = null;
        ImagesImageResponseSingle response = api.cloudflareImagesImageDetails(imageId, accountId);
        // TODO: test validations
    }

    /**
     * Images usage statistics
     *
     * Fetch usage statistics details for Cloudflare Images.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudflareImagesImagesUsageStatisticsTest() throws ApiException {
        String accountId = null;
        ImagesImagesStatsResponse response = api.cloudflareImagesImagesUsageStatistics(accountId);
        // TODO: test validations
    }

    /**
     * List images
     *
     * List up to 100 images with one request. Use the optional parameters below to get a specific range of images.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudflareImagesListImagesTest() throws ApiException {
        String accountId = null;
        BigDecimal page = null;
        BigDecimal perPage = null;
        ImagesImagesListResponse response = api.cloudflareImagesListImages(accountId, page, perPage);
        // TODO: test validations
    }

    /**
     * List images V2
     *
     * List up to 10000 images with one request. Use the optional parameters below to get a specific range of images. Endpoint returns continuation_token if more images are present. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudflareImagesListImagesV2Test() throws ApiException {
        String accountId = null;
        String continuationToken = null;
        BigDecimal perPage = null;
        String sortOrder = null;
        ImagesImagesListResponseV2 response = api.cloudflareImagesListImagesV2(accountId, continuationToken, perPage, sortOrder);
        // TODO: test validations
    }

    /**
     * Update image
     *
     * Update image access control. On access control change, all copies of the image are purged from cache.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudflareImagesUpdateImageTest() throws ApiException {
        String imageId = null;
        String accountId = null;
        ImagesImagePatchRequest imagesImagePatchRequest = null;
        ImagesImageResponseSingle response = api.cloudflareImagesUpdateImage(imageId, accountId, imagesImagePatchRequest);
        // TODO: test validations
    }

    /**
     * Upload an image
     *
     * Upload an image with up to 10 Megabytes using a single HTTP POST (multipart/form-data) request. An image can be uploaded by sending an image file or passing an accessible to an API url. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudflareImagesUploadAnImageViaUrlTest() throws ApiException {
        String accountId = null;
        Object _file = null;
        Object metadata = null;
        Boolean requireSignedURLs = null;
        String url = null;
        ImagesImageResponseSingle response = api.cloudflareImagesUploadAnImageViaUrl(accountId, _file, metadata, requireSignedURLs, url);
        // TODO: test validations
    }

}
