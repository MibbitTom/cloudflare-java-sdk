/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.RadarGetAttacksLayer3TimeseriesGroupByIpVersion200Response;
import org.openapitools.client.model.RadarGetDnsAs112TopLocations200Response;
import org.openapitools.client.model.RadarGetDnsAs112TopLocations404Response;
import org.openapitools.client.model.RadarGetEmailRoutingSummaryByIpVersion200Response;
import org.openapitools.client.model.RadarGetHttpSummaryByBotClass200Response;
import org.openapitools.client.model.RadarGetHttpSummaryByDeviceType200Response;
import org.openapitools.client.model.RadarGetHttpSummaryByHttpProtocol200Response;
import org.openapitools.client.model.RadarGetHttpSummaryByHttpVersion200Response;
import org.openapitools.client.model.RadarGetHttpSummaryByOperatingSystem200Response;
import org.openapitools.client.model.RadarGetHttpSummaryByTlsVersion200Response;
import org.openapitools.client.model.RadarGetHttpTimeseriesGroupByBotClass200Response;
import org.openapitools.client.model.RadarGetHttpTimeseriesGroupByBrowsers200Response;
import org.openapitools.client.model.RadarGetHttpTimeseriesGroupByDeviceType200Response;
import org.openapitools.client.model.RadarGetHttpTimeseriesGroupByHttpProtocol200Response;
import org.openapitools.client.model.RadarGetHttpTimeseriesGroupByHttpVersion200Response;
import org.openapitools.client.model.RadarGetHttpTimeseriesGroupByOperatingSystem200Response;
import org.openapitools.client.model.RadarGetHttpTimeseriesGroupByTlsVersion200Response;
import org.openapitools.client.model.RadarGetHttpTopAsesByHttpRequests200Response;
import org.openapitools.client.model.RadarGetHttpTopBrowserFamilies200Response;
import org.openapitools.client.model.WorkersAiListFinetunes400Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RadarHttpApi
 */
@Disabled
public class RadarHttpApiTest {

    private final RadarHttpApi api = new RadarHttpApi();

    /**
     * Get Bot Class Summary
     *
     * Percentage distribution of bot-generated traffic to genuine human traffic, as classified by Cloudflare. Visit https://developers.cloudflare.com/radar/concepts/bot-classes/ for more information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetHttpSummaryByBotClassTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetHttpSummaryByBotClass200Response response = api.radarGetHttpSummaryByBotClass(name, dateRange, dateStart, dateEnd, asn, location, continent, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get Device Type Summary
     *
     * Percentage of Internet traffic generated by mobile, desktop, and other types of devices, over a given time period.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetHttpSummaryByDeviceTypeTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> botClass = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetHttpSummaryByDeviceType200Response response = api.radarGetHttpSummaryByDeviceType(name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get HTTP protocols summary
     *
     * Percentage distribution of traffic per HTTP protocol over a given time period.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetHttpSummaryByHttpProtocolTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetHttpSummaryByHttpProtocol200Response response = api.radarGetHttpSummaryByHttpProtocol(name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpVersion, ipVersion, os, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get HTTP Versions Summary
     *
     * Percentage distribution of traffic per HTTP protocol version over a given time period.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetHttpSummaryByHttpVersionTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetHttpSummaryByHttpVersion200Response response = api.radarGetHttpSummaryByHttpVersion(name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get IP Version Summary
     *
     * Percentage distribution of Internet traffic based on IP protocol versions, such as IPv4 and IPv6, over a given time period.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetHttpSummaryByIpVersionTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetEmailRoutingSummaryByIpVersion200Response response = api.radarGetHttpSummaryByIpVersion(name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get Operating Systems Summary
     *
     * Percentage distribution of Internet traffic generated by different operating systems like Windows, macOS, Android, iOS, and others, over a given time period.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetHttpSummaryByOperatingSystemTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetHttpSummaryByOperatingSystem200Response response = api.radarGetHttpSummaryByOperatingSystem(name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get TLS Versions Summary
     *
     * Percentage distribution of traffic per TLS protocol version, over a given time period.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetHttpSummaryByTlsVersionTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        String format = null;
        RadarGetHttpSummaryByTlsVersion200Response response = api.radarGetHttpSummaryByTlsVersion(name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format);
        // TODO: test validations
    }

    /**
     * Get Bot Classes Time Series
     *
     * Get a time series of the percentage distribution of traffic classified as automated or human. Visit https://developers.cloudflare.com/radar/concepts/bot-classes/ for more information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetHttpTimeseriesGroupByBotClassTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetHttpTimeseriesGroupByBotClass200Response response = api.radarGetHttpTimeseriesGroupByBotClass(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get User Agent Families Time Series
     *
     * Get a time series of the percentage distribution of traffic of the top user agents aggregated in families.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetHttpTimeseriesGroupByBrowserFamiliesTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetHttpTimeseriesGroupByBrowsers200Response response = api.radarGetHttpTimeseriesGroupByBrowserFamilies(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get User Agents Time Series
     *
     * Get a time series of the percentage distribution of traffic of the top user agents.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetHttpTimeseriesGroupByBrowsersTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        Integer limitPerGroup = null;
        String format = null;
        RadarGetHttpTimeseriesGroupByBrowsers200Response response = api.radarGetHttpTimeseriesGroupByBrowsers(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, limitPerGroup, format);
        // TODO: test validations
    }

    /**
     * Get Device Types Time Series
     *
     * Get a time series of the percentage distribution of traffic per device type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetHttpTimeseriesGroupByDeviceTypeTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> botClass = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetHttpTimeseriesGroupByDeviceType200Response response = api.radarGetHttpTimeseriesGroupByDeviceType(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get HTTP protocols Time Series
     *
     * Get a time series of the percentage distribution of traffic per HTTP protocol.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetHttpTimeseriesGroupByHttpProtocolTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetHttpTimeseriesGroupByHttpProtocol200Response response = api.radarGetHttpTimeseriesGroupByHttpProtocol(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpVersion, ipVersion, os, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get HTTP Versions Time Series
     *
     * Get a time series of the percentage distribution of traffic per HTTP protocol version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetHttpTimeseriesGroupByHttpVersionTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetHttpTimeseriesGroupByHttpVersion200Response response = api.radarGetHttpTimeseriesGroupByHttpVersion(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get IP Versions Time Series
     *
     * Get a time series of the percentage distribution of traffic per IP protocol version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetHttpTimeseriesGroupByIpVersionTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetAttacksLayer3TimeseriesGroupByIpVersion200Response response = api.radarGetHttpTimeseriesGroupByIpVersion(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get Operating Systems Time Series
     *
     * Get a time series of the percentage distribution of traffic of the top operating systems.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetHttpTimeseriesGroupByOperatingSystemTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetHttpTimeseriesGroupByOperatingSystem200Response response = api.radarGetHttpTimeseriesGroupByOperatingSystem(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get TLS Versions Time Series
     *
     * Get a time series of the percentage distribution of traffic per TLS protocol version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetHttpTimeseriesGroupByTlsVersionTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        String format = null;
        RadarGetHttpTimeseriesGroupByTlsVersion200Response response = api.radarGetHttpTimeseriesGroupByTlsVersion(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format);
        // TODO: test validations
    }

    /**
     * Get Top Autonomous Systems By Bot Class
     *
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested bot class. These two categories use Cloudflare&#39;s bot score - refer to [Bot Scores](https://developers.cloudflare.com/bots/concepts/bot-score) for more information. Values are a percentage out of the total traffic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetHttpTopAsesByBotClassTest() throws ApiException {
        String botClass = null;
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetHttpTopAsesByHttpRequests200Response response = api.radarGetHttpTopAsesByBotClass(botClass, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get Top Autonomous Systems By Device Type
     *
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested device type. Values are a percentage out of the total traffic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetHttpTopAsesByDeviceTypeTest() throws ApiException {
        String deviceType = null;
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> botClass = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetHttpTopAsesByHttpRequests200Response response = api.radarGetHttpTopAsesByDeviceType(deviceType, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get Top Autonomous Systems By HTTP Protocol
     *
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested HTTP protocol. Values are a percentage out of the total traffic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetHttpTopAsesByHttpProtocolTest() throws ApiException {
        String httpProtocol = null;
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol2 = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetHttpTopAsesByHttpRequests200Response response = api.radarGetHttpTopAsesByHttpProtocol(httpProtocol, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol2, ipVersion, os, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get Top Autonomous Systems By HTTP Requests
     *
     * Get the top autonomous systems by HTTP traffic. Values are a percentage out of the total traffic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetHttpTopAsesByHttpRequestsTest() throws ApiException {
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetHttpTopAsesByHttpRequests200Response response = api.radarGetHttpTopAsesByHttpRequests(limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get Top Autonomous Systems By HTTP Version
     *
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested HTTP protocol version. Values are a percentage out of the total traffic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetHttpTopAsesByHttpVersionTest() throws ApiException {
        String httpVersion = null;
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetHttpTopAsesByHttpRequests200Response response = api.radarGetHttpTopAsesByHttpVersion(httpVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get Top Autonomous Systems By IP Version
     *
     * Get the top autonomous systems, by HTTP traffic, of the requested IP protocol version. Values are a percentage out of the total traffic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetHttpTopAsesByIpVersionTest() throws ApiException {
        String ipVersion = null;
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetHttpTopAsesByHttpRequests200Response response = api.radarGetHttpTopAsesByIpVersion(ipVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get Top Autonomous Systems By Operating System
     *
     * Get the top autonomous systems, by HTTP traffic, of the requested operating systems. Values are a percentage out of the total traffic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetHttpTopAsesByOperatingSystemTest() throws ApiException {
        String os = null;
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetHttpTopAsesByHttpRequests200Response response = api.radarGetHttpTopAsesByOperatingSystem(os, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get Top Autonomous Systems By TLS Version
     *
     * Get the top autonomous systems (AS), by HTTP traffic, of the requested TLS protocol version. Values are a percentage out of the total traffic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetHttpTopAsesByTlsVersionTest() throws ApiException {
        String tlsVersion = null;
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        String format = null;
        RadarGetHttpTopAsesByHttpRequests200Response response = api.radarGetHttpTopAsesByTlsVersion(tlsVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format);
        // TODO: test validations
    }

    /**
     * Get Top User Agents Families by HTTP requests
     *
     * Get the top user agents aggregated in families by HTTP traffic. Values are a percentage out of the total traffic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetHttpTopBrowserFamiliesTest() throws ApiException {
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetHttpTopBrowserFamilies200Response response = api.radarGetHttpTopBrowserFamilies(limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get Top User Agents By HTTP requests
     *
     * Get the top user agents by HTTP traffic. Values are a percentage out of the total traffic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetHttpTopBrowsersTest() throws ApiException {
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetHttpTopBrowserFamilies200Response response = api.radarGetHttpTopBrowsers(limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get Top Locations By Bot Class
     *
     * Get the top locations, by HTTP traffic, of the requested bot class. These two categories use Cloudflare&#39;s bot score - refer to [Bot scores])https://developers.cloudflare.com/bots/concepts/bot-score). Values are a percentage out of the total traffic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetHttpTopLocationsByBotClassTest() throws ApiException {
        String botClass = null;
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetDnsAs112TopLocations200Response response = api.radarGetHttpTopLocationsByBotClass(botClass, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get Top Locations By Device Type
     *
     * Get the top locations, by HTTP traffic, of the requested device type. Values are a percentage out of the total traffic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetHttpTopLocationsByDeviceTypeTest() throws ApiException {
        String deviceType = null;
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> botClass = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetDnsAs112TopLocations200Response response = api.radarGetHttpTopLocationsByDeviceType(deviceType, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get Top Locations By HTTP Protocol
     *
     * Get the top locations, by HTTP traffic, of the requested HTTP protocol. Values are a percentage out of the total traffic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetHttpTopLocationsByHttpProtocolTest() throws ApiException {
        String httpProtocol = null;
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol2 = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetDnsAs112TopLocations200Response response = api.radarGetHttpTopLocationsByHttpProtocol(httpProtocol, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol2, ipVersion, os, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get Top Locations By HTTP requests
     *
     * Get the top locations by HTTP traffic. Values are a percentage out of the total traffic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetHttpTopLocationsByHttpRequestsTest() throws ApiException {
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetDnsAs112TopLocations200Response response = api.radarGetHttpTopLocationsByHttpRequests(limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get Top Locations By HTTP Version
     *
     * Get the top locations, by HTTP traffic, of the requested HTTP protocol. Values are a percentage out of the total traffic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetHttpTopLocationsByHttpVersionTest() throws ApiException {
        String httpVersion = null;
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> ipVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetDnsAs112TopLocations200Response response = api.radarGetHttpTopLocationsByHttpVersion(httpVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, ipVersion, os, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get Top Locations By IP Version
     *
     * Get the top locations, by HTTP traffic, of the requested IP protocol version. Values are a percentage out of the total traffic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetHttpTopLocationsByIpVersionTest() throws ApiException {
        String ipVersion = null;
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> os = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetDnsAs112TopLocations200Response response = api.radarGetHttpTopLocationsByIpVersion(ipVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, os, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get Top Locations By Operating System
     *
     * Get the top locations, by HTTP traffic, of the requested operating systems. Values are a percentage out of the total traffic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetHttpTopLocationsByOperatingSystemTest() throws ApiException {
        String os = null;
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetDnsAs112TopLocations200Response response = api.radarGetHttpTopLocationsByOperatingSystem(os, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get Top Locations By TLS Version
     *
     * Get the top locations, by HTTP traffic, of the requested TLS protocol version. Values are a percentage out of the total traffic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetHttpTopLocationsByTlsVersionTest() throws ApiException {
        String tlsVersion = null;
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> botClass = null;
        List<String> deviceType = null;
        List<String> httpProtocol = null;
        List<String> httpVersion = null;
        List<String> ipVersion = null;
        List<String> os = null;
        String format = null;
        RadarGetDnsAs112TopLocations200Response response = api.radarGetHttpTopLocationsByTlsVersion(tlsVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, botClass, deviceType, httpProtocol, httpVersion, ipVersion, os, format);
        // TODO: test validations
    }

}
