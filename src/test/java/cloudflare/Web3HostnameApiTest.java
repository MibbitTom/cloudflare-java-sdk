/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiException;
import org.openapitools.client.model.DwebConfigApiResponseSingleId;
import org.openapitools.client.model.DwebConfigCollectionResponse;
import org.openapitools.client.model.DwebConfigContentListDetailsResponse;
import org.openapitools.client.model.DwebConfigContentListEntryCollectionResponse;
import org.openapitools.client.model.DwebConfigContentListEntryCreateRequest;
import org.openapitools.client.model.DwebConfigContentListEntrySingleResponse;
import org.openapitools.client.model.DwebConfigContentListUpdateRequest;
import org.openapitools.client.model.DwebConfigCreateRequest;
import org.openapitools.client.model.DwebConfigModifyRequest;
import org.openapitools.client.model.DwebConfigSingleResponse;
import org.openapitools.client.model.Web3HostnameCreateIpfsUniversalPathGatewayContentListEntry5XXResponse;
import org.openapitools.client.model.Web3HostnameCreateWeb3Hostname5XXResponse;
import org.openapitools.client.model.Web3HostnameDeleteWeb3Hostname5XXResponse;
import org.openapitools.client.model.Web3HostnameIpfsUniversalPathGatewayContentListDetails5XXResponse;
import org.openapitools.client.model.Web3HostnameListIpfsUniversalPathGatewayContentListEntries5XXResponse;
import org.openapitools.client.model.Web3HostnameListWeb3Hostnames5XXResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for Web3HostnameApi
 */
@Disabled
public class Web3HostnameApiTest {

    private final Web3HostnameApi api = new Web3HostnameApi();

    /**
     * Create IPFS Universal Path Gateway Content List Entry
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void web3HostnameCreateIpfsUniversalPathGatewayContentListEntryTest() throws ApiException {
        String identifier = null;
        String zoneIdentifier = null;
        DwebConfigContentListEntryCreateRequest dwebConfigContentListEntryCreateRequest = null;
        DwebConfigContentListEntrySingleResponse response = api.web3HostnameCreateIpfsUniversalPathGatewayContentListEntry(identifier, zoneIdentifier, dwebConfigContentListEntryCreateRequest);
        // TODO: test validations
    }

    /**
     * Create Web3 Hostname
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void web3HostnameCreateWeb3HostnameTest() throws ApiException {
        String zoneIdentifier = null;
        DwebConfigCreateRequest dwebConfigCreateRequest = null;
        DwebConfigSingleResponse response = api.web3HostnameCreateWeb3Hostname(zoneIdentifier, dwebConfigCreateRequest);
        // TODO: test validations
    }

    /**
     * Delete IPFS Universal Path Gateway Content List Entry
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void web3HostnameDeleteIpfsUniversalPathGatewayContentListEntryTest() throws ApiException {
        String contentListEntryIdentifier = null;
        String identifier = null;
        String zoneIdentifier = null;
        DwebConfigApiResponseSingleId response = api.web3HostnameDeleteIpfsUniversalPathGatewayContentListEntry(contentListEntryIdentifier, identifier, zoneIdentifier);
        // TODO: test validations
    }

    /**
     * Delete Web3 Hostname
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void web3HostnameDeleteWeb3HostnameTest() throws ApiException {
        String identifier = null;
        String zoneIdentifier = null;
        DwebConfigApiResponseSingleId response = api.web3HostnameDeleteWeb3Hostname(identifier, zoneIdentifier);
        // TODO: test validations
    }

    /**
     * Edit IPFS Universal Path Gateway Content List Entry
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void web3HostnameEditIpfsUniversalPathGatewayContentListEntryTest() throws ApiException {
        String contentListEntryIdentifier = null;
        String identifier = null;
        String zoneIdentifier = null;
        DwebConfigContentListEntryCreateRequest dwebConfigContentListEntryCreateRequest = null;
        DwebConfigContentListEntrySingleResponse response = api.web3HostnameEditIpfsUniversalPathGatewayContentListEntry(contentListEntryIdentifier, identifier, zoneIdentifier, dwebConfigContentListEntryCreateRequest);
        // TODO: test validations
    }

    /**
     * Edit Web3 Hostname
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void web3HostnameEditWeb3HostnameTest() throws ApiException {
        String identifier = null;
        String zoneIdentifier = null;
        DwebConfigModifyRequest dwebConfigModifyRequest = null;
        DwebConfigSingleResponse response = api.web3HostnameEditWeb3Hostname(identifier, zoneIdentifier, dwebConfigModifyRequest);
        // TODO: test validations
    }

    /**
     * IPFS Universal Path Gateway Content List Details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void web3HostnameIpfsUniversalPathGatewayContentListDetailsTest() throws ApiException {
        String identifier = null;
        String zoneIdentifier = null;
        DwebConfigContentListDetailsResponse response = api.web3HostnameIpfsUniversalPathGatewayContentListDetails(identifier, zoneIdentifier);
        // TODO: test validations
    }

    /**
     * IPFS Universal Path Gateway Content List Entry Details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void web3HostnameIpfsUniversalPathGatewayContentListEntryDetailsTest() throws ApiException {
        String contentListEntryIdentifier = null;
        String identifier = null;
        String zoneIdentifier = null;
        DwebConfigContentListEntrySingleResponse response = api.web3HostnameIpfsUniversalPathGatewayContentListEntryDetails(contentListEntryIdentifier, identifier, zoneIdentifier);
        // TODO: test validations
    }

    /**
     * List IPFS Universal Path Gateway Content List Entries
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void web3HostnameListIpfsUniversalPathGatewayContentListEntriesTest() throws ApiException {
        String identifier = null;
        String zoneIdentifier = null;
        DwebConfigContentListEntryCollectionResponse response = api.web3HostnameListIpfsUniversalPathGatewayContentListEntries(identifier, zoneIdentifier);
        // TODO: test validations
    }

    /**
     * List Web3 Hostnames
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void web3HostnameListWeb3HostnamesTest() throws ApiException {
        String zoneIdentifier = null;
        DwebConfigCollectionResponse response = api.web3HostnameListWeb3Hostnames(zoneIdentifier);
        // TODO: test validations
    }

    /**
     * Update IPFS Universal Path Gateway Content List
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void web3HostnameUpdateIpfsUniversalPathGatewayContentListTest() throws ApiException {
        String identifier = null;
        String zoneIdentifier = null;
        DwebConfigContentListUpdateRequest dwebConfigContentListUpdateRequest = null;
        DwebConfigContentListDetailsResponse response = api.web3HostnameUpdateIpfsUniversalPathGatewayContentList(identifier, zoneIdentifier, dwebConfigContentListUpdateRequest);
        // TODO: test validations
    }

    /**
     * Web3 Hostname Details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void web3HostnameWeb3HostnameDetailsTest() throws ApiException {
        String identifier = null;
        String zoneIdentifier = null;
        DwebConfigSingleResponse response = api.web3HostnameWeb3HostnameDetails(identifier, zoneIdentifier);
        // TODO: test validations
    }

}
