/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiException;
import org.openapitools.client.model.AccessActiveSessionResponse;
import org.openapitools.client.model.AccessActiveSessionsResponse;
import org.openapitools.client.model.AccessApiResponseCommonFailure;
import org.openapitools.client.model.AccessFailedLoginResponse;
import org.openapitools.client.model.AccessLastSeenIdentityResponse;
import org.openapitools.client.model.AccessUsersComponentsSchemasResponseCollection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ZeroTrustUsersApi
 */
@Disabled
public class ZeroTrustUsersApiTest {

    private final ZeroTrustUsersApi api = new ZeroTrustUsersApi();

    /**
     * Get single active session
     *
     * Get an active session for a single user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zeroTrustUsersGetActiveSessionTest() throws ApiException {
        String id = null;
        String identifier = null;
        String nonce = null;
        AccessActiveSessionResponse response = api.zeroTrustUsersGetActiveSession(id, identifier, nonce);
        // TODO: test validations
    }

    /**
     * Get active sessions
     *
     * Get active sessions for a single user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zeroTrustUsersGetActiveSessionsTest() throws ApiException {
        String id = null;
        String identifier = null;
        AccessActiveSessionsResponse response = api.zeroTrustUsersGetActiveSessions(id, identifier);
        // TODO: test validations
    }

    /**
     * Get failed logins
     *
     * Get all failed login attempts for a single user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zeroTrustUsersGetFailedLoginsTest() throws ApiException {
        String id = null;
        String identifier = null;
        AccessFailedLoginResponse response = api.zeroTrustUsersGetFailedLogins(id, identifier);
        // TODO: test validations
    }

    /**
     * Get last seen identity
     *
     * Get last seen identity for a single user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zeroTrustUsersGetLastSeenIdentityTest() throws ApiException {
        String id = null;
        String identifier = null;
        AccessLastSeenIdentityResponse response = api.zeroTrustUsersGetLastSeenIdentity(id, identifier);
        // TODO: test validations
    }

    /**
     * Get users
     *
     * Gets a list of users for an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zeroTrustUsersGetUsersTest() throws ApiException {
        String identifier = null;
        AccessUsersComponentsSchemasResponseCollection response = api.zeroTrustUsersGetUsers(identifier);
        // TODO: test validations
    }

}
