/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiException;
import org.openapitools.client.model.CertificatePacksDeleteAdvancedCertificateManagerCertificatePack4XXResponse;
import org.openapitools.client.model.CertificatePacksGetCertificatePack4XXResponse;
import org.openapitools.client.model.CertificatePacksGetCertificatePackQuotas4XXResponse;
import org.openapitools.client.model.CertificatePacksListCertificatePacks4XXResponse;
import org.openapitools.client.model.CertificatePacksOrderAdvancedCertificateManagerCertificatePack4XXResponse;
import org.openapitools.client.model.CertificatePacksOrderAdvancedCertificateManagerCertificatePackRequest;
import org.openapitools.client.model.TlsCertificatesAndHostnamesAdvancedCertificatePackResponseSingle;
import org.openapitools.client.model.TlsCertificatesAndHostnamesCertificatePackQuotaResponse;
import org.openapitools.client.model.TlsCertificatesAndHostnamesCertificatePackResponseCollection;
import org.openapitools.client.model.TlsCertificatesAndHostnamesCertificatePackResponseSingle;
import org.openapitools.client.model.TlsCertificatesAndHostnamesDeleteAdvancedCertificatePackResponseSingle;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CertificatePacksApi
 */
@Disabled
public class CertificatePacksApiTest {

    private final CertificatePacksApi api = new CertificatePacksApi();

    /**
     * Delete Advanced Certificate Manager Certificate Pack
     *
     * For a given zone, delete an advanced certificate pack.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatePacksDeleteAdvancedCertificateManagerCertificatePackTest() throws ApiException {
        String certificatePackId = null;
        String zoneId = null;
        TlsCertificatesAndHostnamesDeleteAdvancedCertificatePackResponseSingle response = api.certificatePacksDeleteAdvancedCertificateManagerCertificatePack(certificatePackId, zoneId);
        // TODO: test validations
    }

    /**
     * Get Certificate Pack
     *
     * For a given zone, get a certificate pack.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatePacksGetCertificatePackTest() throws ApiException {
        String certificatePackId = null;
        String zoneId = null;
        TlsCertificatesAndHostnamesCertificatePackResponseSingle response = api.certificatePacksGetCertificatePack(certificatePackId, zoneId);
        // TODO: test validations
    }

    /**
     * Get Certificate Pack Quotas
     *
     * For a given zone, list certificate pack quotas.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatePacksGetCertificatePackQuotasTest() throws ApiException {
        String zoneId = null;
        TlsCertificatesAndHostnamesCertificatePackQuotaResponse response = api.certificatePacksGetCertificatePackQuotas(zoneId);
        // TODO: test validations
    }

    /**
     * List Certificate Packs
     *
     * For a given zone, list all active certificate packs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatePacksListCertificatePacksTest() throws ApiException {
        String zoneId = null;
        String status = null;
        TlsCertificatesAndHostnamesCertificatePackResponseCollection response = api.certificatePacksListCertificatePacks(zoneId, status);
        // TODO: test validations
    }

    /**
     * Order Advanced Certificate Manager Certificate Pack
     *
     * For a given zone, order an advanced certificate pack.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatePacksOrderAdvancedCertificateManagerCertificatePackTest() throws ApiException {
        String zoneId = null;
        CertificatePacksOrderAdvancedCertificateManagerCertificatePackRequest certificatePacksOrderAdvancedCertificateManagerCertificatePackRequest = null;
        TlsCertificatesAndHostnamesAdvancedCertificatePackResponseSingle response = api.certificatePacksOrderAdvancedCertificateManagerCertificatePack(zoneId, certificatePacksOrderAdvancedCertificateManagerCertificatePackRequest);
        // TODO: test validations
    }

    /**
     * Restart Validation for Advanced Certificate Manager Certificate Pack
     *
     * For a given zone, restart validation for an advanced certificate pack.  This is only a validation operation for a Certificate Pack in a validation_timed_out status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatePacksRestartValidationForAdvancedCertificateManagerCertificatePackTest() throws ApiException {
        String certificatePackId = null;
        String zoneId = null;
        TlsCertificatesAndHostnamesAdvancedCertificatePackResponseSingle response = api.certificatePacksRestartValidationForAdvancedCertificateManagerCertificatePack(certificatePackId, zoneId);
        // TODO: test validations
    }

}
