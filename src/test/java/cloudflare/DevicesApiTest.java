/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiException;
import org.openapitools.client.model.DevicesCreateDeviceSettingsPolicy4XXResponse;
import org.openapitools.client.model.DevicesCreateDeviceSettingsPolicyRequest;
import org.openapitools.client.model.DevicesDeviceDetails4XXResponse;
import org.openapitools.client.model.DevicesGetDefaultDeviceSettingsPolicy4XXResponse;
import org.openapitools.client.model.DevicesGetLocalDomainFallbackList4XXResponse;
import org.openapitools.client.model.DevicesGetSplitTunnelExcludeList4XXResponse;
import org.openapitools.client.model.DevicesGetSplitTunnelIncludeList4XXResponse;
import org.openapitools.client.model.DevicesListAdminOverrideCodeForDevice4XXResponse;
import org.openapitools.client.model.DevicesListDeviceSettingsPolicies4XXResponse;
import org.openapitools.client.model.DevicesListDevices4XXResponse;
import org.openapitools.client.model.DevicesRevokeDevices4XXResponse;
import org.openapitools.client.model.DevicesUpdateDefaultDeviceSettingsPolicyRequest;
import org.openapitools.client.model.DevicesUpdateDeviceSettingsPolicyRequest;
import org.openapitools.client.model.TeamsDevicesApiResponseSingle;
import org.openapitools.client.model.TeamsDevicesDefaultDeviceSettingsResponse;
import org.openapitools.client.model.TeamsDevicesDeviceResponse;
import org.openapitools.client.model.TeamsDevicesDeviceSettingsResponse;
import org.openapitools.client.model.TeamsDevicesDeviceSettingsResponseCollection;
import org.openapitools.client.model.TeamsDevicesDevicesResponse;
import org.openapitools.client.model.TeamsDevicesFallbackDomain;
import org.openapitools.client.model.TeamsDevicesFallbackDomainResponseCollection;
import org.openapitools.client.model.TeamsDevicesOverrideCodesResponse;
import org.openapitools.client.model.TeamsDevicesSplitTunnel;
import org.openapitools.client.model.TeamsDevicesSplitTunnelInclude;
import org.openapitools.client.model.TeamsDevicesSplitTunnelIncludeResponseCollection;
import org.openapitools.client.model.TeamsDevicesSplitTunnelResponseCollection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DevicesApi
 */
@Disabled
public class DevicesApiTest {

    private final DevicesApi api = new DevicesApi();

    /**
     * Create a device settings profile
     *
     * Creates a device settings profile to be applied to certain devices matching the criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesCreateDeviceSettingsPolicyTest() throws ApiException {
        Object accountId = null;
        DevicesCreateDeviceSettingsPolicyRequest devicesCreateDeviceSettingsPolicyRequest = null;
        TeamsDevicesDeviceSettingsResponse response = api.devicesCreateDeviceSettingsPolicy(accountId, devicesCreateDeviceSettingsPolicyRequest);
        // TODO: test validations
    }

    /**
     * Delete a device settings profile
     *
     * Deletes a device settings profile and fetches a list of the remaining profiles for an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesDeleteDeviceSettingsPolicyTest() throws ApiException {
        String policyId = null;
        Object accountId = null;
        TeamsDevicesDeviceSettingsResponseCollection response = api.devicesDeleteDeviceSettingsPolicy(policyId, accountId);
        // TODO: test validations
    }

    /**
     * Get device details
     *
     * Fetches details for a single device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesDeviceDetailsTest() throws ApiException {
        String deviceId = null;
        Object accountId = null;
        TeamsDevicesDeviceResponse response = api.devicesDeviceDetails(deviceId, accountId);
        // TODO: test validations
    }

    /**
     * Get the default device settings profile
     *
     * Fetches the default device settings profile for an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesGetDefaultDeviceSettingsPolicyTest() throws ApiException {
        Object accountId = null;
        TeamsDevicesDefaultDeviceSettingsResponse response = api.devicesGetDefaultDeviceSettingsPolicy(accountId);
        // TODO: test validations
    }

    /**
     * Get device settings profile by ID
     *
     * Fetches a device settings profile by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesGetDeviceSettingsPolicyByIdTest() throws ApiException {
        String policyId = null;
        Object accountId = null;
        TeamsDevicesDeviceSettingsResponse response = api.devicesGetDeviceSettingsPolicyById(policyId, accountId);
        // TODO: test validations
    }

    /**
     * Get your Local Domain Fallback list
     *
     * Fetches a list of domains to bypass Gateway DNS resolution. These domains will use the specified local DNS resolver instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesGetLocalDomainFallbackListTest() throws ApiException {
        Object accountId = null;
        TeamsDevicesFallbackDomainResponseCollection response = api.devicesGetLocalDomainFallbackList(accountId);
        // TODO: test validations
    }

    /**
     * Get the Local Domain Fallback list for a device settings profile
     *
     * Fetches the list of domains to bypass Gateway DNS resolution from a specified device settings profile. These domains will use the specified local DNS resolver instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesGetLocalDomainFallbackListForADeviceSettingsPolicyTest() throws ApiException {
        String policyId = null;
        Object accountId = null;
        TeamsDevicesFallbackDomainResponseCollection response = api.devicesGetLocalDomainFallbackListForADeviceSettingsPolicy(policyId, accountId);
        // TODO: test validations
    }

    /**
     * Get the Split Tunnel exclude list
     *
     * Fetches the list of routes excluded from the WARP client&#39;s tunnel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesGetSplitTunnelExcludeListTest() throws ApiException {
        Object accountId = null;
        TeamsDevicesSplitTunnelResponseCollection response = api.devicesGetSplitTunnelExcludeList(accountId);
        // TODO: test validations
    }

    /**
     * Get the Split Tunnel exclude list for a device settings profile
     *
     * Fetches the list of routes excluded from the WARP client&#39;s tunnel for a specific device settings profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesGetSplitTunnelExcludeListForADeviceSettingsPolicyTest() throws ApiException {
        String policyId = null;
        Object accountId = null;
        TeamsDevicesSplitTunnelResponseCollection response = api.devicesGetSplitTunnelExcludeListForADeviceSettingsPolicy(policyId, accountId);
        // TODO: test validations
    }

    /**
     * Get the Split Tunnel include list
     *
     * Fetches the list of routes included in the WARP client&#39;s tunnel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesGetSplitTunnelIncludeListTest() throws ApiException {
        Object accountId = null;
        TeamsDevicesSplitTunnelIncludeResponseCollection response = api.devicesGetSplitTunnelIncludeList(accountId);
        // TODO: test validations
    }

    /**
     * Get the Split Tunnel include list for a device settings profile
     *
     * Fetches the list of routes included in the WARP client&#39;s tunnel for a specific device settings profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesGetSplitTunnelIncludeListForADeviceSettingsPolicyTest() throws ApiException {
        String policyId = null;
        Object accountId = null;
        TeamsDevicesSplitTunnelIncludeResponseCollection response = api.devicesGetSplitTunnelIncludeListForADeviceSettingsPolicy(policyId, accountId);
        // TODO: test validations
    }

    /**
     * Get an admin override code for a device
     *
     * Fetches a one-time use admin override code for a device. This relies on the **Admin Override** setting being enabled in your device configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesListAdminOverrideCodeForDeviceTest() throws ApiException {
        String deviceId = null;
        Object accountId = null;
        TeamsDevicesOverrideCodesResponse response = api.devicesListAdminOverrideCodeForDevice(deviceId, accountId);
        // TODO: test validations
    }

    /**
     * List device settings profiles
     *
     * Fetches a list of the device settings profiles for an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesListDeviceSettingsPoliciesTest() throws ApiException {
        Object accountId = null;
        TeamsDevicesDeviceSettingsResponseCollection response = api.devicesListDeviceSettingsPolicies(accountId);
        // TODO: test validations
    }

    /**
     * List devices
     *
     * Fetches a list of enrolled devices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesListDevicesTest() throws ApiException {
        Object accountId = null;
        TeamsDevicesDevicesResponse response = api.devicesListDevices(accountId);
        // TODO: test validations
    }

    /**
     * Revoke devices
     *
     * Revokes a list of devices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesRevokeDevicesTest() throws ApiException {
        Object accountId = null;
        List<String> requestBody = null;
        TeamsDevicesApiResponseSingle response = api.devicesRevokeDevices(accountId, requestBody);
        // TODO: test validations
    }

    /**
     * Set your Local Domain Fallback list
     *
     * Sets the list of domains to bypass Gateway DNS resolution. These domains will use the specified local DNS resolver instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesSetLocalDomainFallbackListTest() throws ApiException {
        Object accountId = null;
        List<TeamsDevicesFallbackDomain> teamsDevicesFallbackDomain = null;
        TeamsDevicesFallbackDomainResponseCollection response = api.devicesSetLocalDomainFallbackList(accountId, teamsDevicesFallbackDomain);
        // TODO: test validations
    }

    /**
     * Set the Local Domain Fallback list for a device settings profile
     *
     * Sets the list of domains to bypass Gateway DNS resolution. These domains will use the specified local DNS resolver instead. This will only apply to the specified device settings profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesSetLocalDomainFallbackListForADeviceSettingsPolicyTest() throws ApiException {
        String policyId = null;
        Object accountId = null;
        List<TeamsDevicesFallbackDomain> teamsDevicesFallbackDomain = null;
        TeamsDevicesFallbackDomainResponseCollection response = api.devicesSetLocalDomainFallbackListForADeviceSettingsPolicy(policyId, accountId, teamsDevicesFallbackDomain);
        // TODO: test validations
    }

    /**
     * Set the Split Tunnel exclude list
     *
     * Sets the list of routes excluded from the WARP client&#39;s tunnel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesSetSplitTunnelExcludeListTest() throws ApiException {
        Object accountId = null;
        List<TeamsDevicesSplitTunnel> teamsDevicesSplitTunnel = null;
        TeamsDevicesSplitTunnelResponseCollection response = api.devicesSetSplitTunnelExcludeList(accountId, teamsDevicesSplitTunnel);
        // TODO: test validations
    }

    /**
     * Set the Split Tunnel exclude list for a device settings profile
     *
     * Sets the list of routes excluded from the WARP client&#39;s tunnel for a specific device settings profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesSetSplitTunnelExcludeListForADeviceSettingsPolicyTest() throws ApiException {
        String policyId = null;
        Object accountId = null;
        List<TeamsDevicesSplitTunnel> teamsDevicesSplitTunnel = null;
        TeamsDevicesSplitTunnelResponseCollection response = api.devicesSetSplitTunnelExcludeListForADeviceSettingsPolicy(policyId, accountId, teamsDevicesSplitTunnel);
        // TODO: test validations
    }

    /**
     * Set the Split Tunnel include list
     *
     * Sets the list of routes included in the WARP client&#39;s tunnel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesSetSplitTunnelIncludeListTest() throws ApiException {
        Object accountId = null;
        List<TeamsDevicesSplitTunnelInclude> teamsDevicesSplitTunnelInclude = null;
        TeamsDevicesSplitTunnelIncludeResponseCollection response = api.devicesSetSplitTunnelIncludeList(accountId, teamsDevicesSplitTunnelInclude);
        // TODO: test validations
    }

    /**
     * Set the Split Tunnel include list for a device settings profile
     *
     * Sets the list of routes included in the WARP client&#39;s tunnel for a specific device settings profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesSetSplitTunnelIncludeListForADeviceSettingsPolicyTest() throws ApiException {
        String policyId = null;
        Object accountId = null;
        List<TeamsDevicesSplitTunnelInclude> teamsDevicesSplitTunnelInclude = null;
        TeamsDevicesSplitTunnelIncludeResponseCollection response = api.devicesSetSplitTunnelIncludeListForADeviceSettingsPolicy(policyId, accountId, teamsDevicesSplitTunnelInclude);
        // TODO: test validations
    }

    /**
     * Unrevoke devices
     *
     * Unrevokes a list of devices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesUnrevokeDevicesTest() throws ApiException {
        Object accountId = null;
        List<String> requestBody = null;
        TeamsDevicesApiResponseSingle response = api.devicesUnrevokeDevices(accountId, requestBody);
        // TODO: test validations
    }

    /**
     * Update the default device settings profile
     *
     * Updates the default device settings profile for an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesUpdateDefaultDeviceSettingsPolicyTest() throws ApiException {
        Object accountId = null;
        DevicesUpdateDefaultDeviceSettingsPolicyRequest devicesUpdateDefaultDeviceSettingsPolicyRequest = null;
        TeamsDevicesDefaultDeviceSettingsResponse response = api.devicesUpdateDefaultDeviceSettingsPolicy(accountId, devicesUpdateDefaultDeviceSettingsPolicyRequest);
        // TODO: test validations
    }

    /**
     * Update a device settings profile
     *
     * Updates a configured device settings profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesUpdateDeviceSettingsPolicyTest() throws ApiException {
        String policyId = null;
        Object accountId = null;
        DevicesUpdateDeviceSettingsPolicyRequest devicesUpdateDeviceSettingsPolicyRequest = null;
        TeamsDevicesDeviceSettingsResponse response = api.devicesUpdateDeviceSettingsPolicy(policyId, accountId, devicesUpdateDeviceSettingsPolicyRequest);
        // TODO: test validations
    }

}
