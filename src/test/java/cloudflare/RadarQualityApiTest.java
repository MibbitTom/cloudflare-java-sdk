/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.RadarGetDnsAs112TopLocations404Response;
import org.openapitools.client.model.RadarGetQualityIndexSummary200Response;
import org.openapitools.client.model.RadarGetQualityIndexTimeseriesGroup200Response;
import org.openapitools.client.model.RadarGetQualitySpeedHistogram200Response;
import org.openapitools.client.model.RadarGetQualitySpeedSummary200Response;
import org.openapitools.client.model.RadarGetQualitySpeedTopAses200Response;
import org.openapitools.client.model.RadarGetQualitySpeedTopLocations200Response;
import org.openapitools.client.model.WorkersAiListFinetunes400Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RadarQualityApi
 */
@Disabled
public class RadarQualityApiTest {

    private final RadarQualityApi api = new RadarQualityApi();

    /**
     * Get IQI Summary
     *
     * Get a summary (percentiles) of bandwidth, latency or DNS response time from the Radar Internet Quality Index (IQI).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetQualityIndexSummaryTest() throws ApiException {
        String metric = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        String format = null;
        RadarGetQualityIndexSummary200Response response = api.radarGetQualityIndexSummary(metric, name, dateRange, dateStart, dateEnd, asn, location, continent, format);
        // TODO: test validations
    }

    /**
     * Get IQI Time Series
     *
     * Get a time series (percentiles) of bandwidth, latency or DNS response time from the Radar Internet Quality Index (IQI).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetQualityIndexTimeseriesGroupTest() throws ApiException {
        String metric = null;
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        Boolean interpolation = null;
        String format = null;
        RadarGetQualityIndexTimeseriesGroup200Response response = api.radarGetQualityIndexTimeseriesGroup(metric, aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, interpolation, format);
        // TODO: test validations
    }

    /**
     * Get Speed Tests Histogram
     *
     * Get an histogram from the previous 90 days of Cloudflare Speed Test data, split into fixed bandwidth (Mbps), latency (ms) or jitter (ms) buckets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetQualitySpeedHistogramTest() throws ApiException {
        List<String> name = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        Integer bucketSize = null;
        String metricGroup = null;
        String format = null;
        RadarGetQualitySpeedHistogram200Response response = api.radarGetQualitySpeedHistogram(name, dateEnd, asn, location, continent, bucketSize, metricGroup, format);
        // TODO: test validations
    }

    /**
     * Get Speed Tests Summary
     *
     * Get a summary of bandwidth, latency, jitter and packet loss, from the previous 90 days of Cloudflare Speed Test data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetQualitySpeedSummaryTest() throws ApiException {
        List<String> name = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        String format = null;
        RadarGetQualitySpeedSummary200Response response = api.radarGetQualitySpeedSummary(name, dateEnd, asn, location, continent, format);
        // TODO: test validations
    }

    /**
     * Get Top Speed Test Autonomous Systems
     *
     * Get the top autonomous systems by bandwidth, latency, jitter or packet loss, from the previous 90 days of Cloudflare Speed Test data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetQualitySpeedTopAsesTest() throws ApiException {
        Integer limit = null;
        List<String> name = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        String orderBy = null;
        Boolean reverse = null;
        String format = null;
        RadarGetQualitySpeedTopAses200Response response = api.radarGetQualitySpeedTopAses(limit, name, dateEnd, asn, location, continent, orderBy, reverse, format);
        // TODO: test validations
    }

    /**
     * Get Top Speed Test Locations
     *
     * Get the top locations by bandwidth, latency, jitter or packet loss, from the previous 90 days of Cloudflare Speed Test data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetQualitySpeedTopLocationsTest() throws ApiException {
        Integer limit = null;
        List<String> name = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        String orderBy = null;
        Boolean reverse = null;
        String format = null;
        RadarGetQualitySpeedTopLocations200Response response = api.radarGetQualitySpeedTopLocations(limit, name, dateEnd, asn, location, continent, orderBy, reverse, format);
        // TODO: test validations
    }

}
