/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.RadarGetDnsAs112Timeseries200Response;
import org.openapitools.client.model.RadarGetDnsAs112TimeseriesByDnssec200Response;
import org.openapitools.client.model.RadarGetDnsAs112TimeseriesByEdns200Response;
import org.openapitools.client.model.RadarGetDnsAs112TimeseriesByIpVersion200Response;
import org.openapitools.client.model.RadarGetDnsAs112TimeseriesByProtocol200Response;
import org.openapitools.client.model.RadarGetDnsAs112TimeseriesByQueryType200Response;
import org.openapitools.client.model.RadarGetDnsAs112TimeseriesByResponseCodes200Response;
import org.openapitools.client.model.RadarGetDnsAs112TimeseriesGroupByDnssec200Response;
import org.openapitools.client.model.RadarGetDnsAs112TimeseriesGroupByEdns200Response;
import org.openapitools.client.model.RadarGetDnsAs112TimeseriesGroupByIpVersion200Response;
import org.openapitools.client.model.RadarGetDnsAs112TimeseriesGroupByProtocol200Response;
import org.openapitools.client.model.RadarGetDnsAs112TimeseriesGroupByQueryType200Response;
import org.openapitools.client.model.RadarGetDnsAs112TimeseriesGroupByResponseCodes200Response;
import org.openapitools.client.model.RadarGetDnsAs112TopLocations200Response;
import org.openapitools.client.model.RadarGetDnsAs112TopLocations404Response;
import org.openapitools.client.model.WorkersAiListFinetunes400Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RadarAs112Api
 */
@Disabled
public class RadarAs112ApiTest {

    private final RadarAs112Api api = new RadarAs112Api();

    /**
     * Get AS112 DNS Queries Time Series
     *
     * Get AS112 queries change over time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetDnsAs112TimeseriesTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        String format = null;
        RadarGetDnsAs112Timeseries200Response response = api.radarGetDnsAs112Timeseries(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, format);
        // TODO: test validations
    }

    /**
     * Get AS112 DNSSEC Summary
     *
     * Percentage distribution of DNS queries to AS112 by DNSSEC support.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetDnsAs112TimeseriesByDnssecTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        String format = null;
        RadarGetDnsAs112TimeseriesByDnssec200Response response = api.radarGetDnsAs112TimeseriesByDnssec(name, dateRange, dateStart, dateEnd, asn, location, continent, format);
        // TODO: test validations
    }

    /**
     * Get AS112 EDNS Summary
     *
     * Percentage distribution of DNS queries, to AS112, by EDNS support.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetDnsAs112TimeseriesByEdnsTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        String format = null;
        RadarGetDnsAs112TimeseriesByEdns200Response response = api.radarGetDnsAs112TimeseriesByEdns(name, dateRange, dateStart, dateEnd, asn, location, continent, format);
        // TODO: test validations
    }

    /**
     * Get AS112 IP Version Summary
     *
     * Percentage distribution of DNS queries to AS112 per IP Version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetDnsAs112TimeseriesByIpVersionTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        String format = null;
        RadarGetDnsAs112TimeseriesByIpVersion200Response response = api.radarGetDnsAs112TimeseriesByIpVersion(name, dateRange, dateStart, dateEnd, asn, location, continent, format);
        // TODO: test validations
    }

    /**
     * Get AS112 DNS Protocol Summary
     *
     * Percentage distribution of DNS queries to AS112 per protocol.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetDnsAs112TimeseriesByProtocolTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        String format = null;
        RadarGetDnsAs112TimeseriesByProtocol200Response response = api.radarGetDnsAs112TimeseriesByProtocol(name, dateRange, dateStart, dateEnd, asn, location, continent, format);
        // TODO: test validations
    }

    /**
     * Get AS112 Query Types Summary
     *
     * Percentage distribution of DNS queries to AS112 by Query Type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetDnsAs112TimeseriesByQueryTypeTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        String format = null;
        RadarGetDnsAs112TimeseriesByQueryType200Response response = api.radarGetDnsAs112TimeseriesByQueryType(name, dateRange, dateStart, dateEnd, asn, location, continent, format);
        // TODO: test validations
    }

    /**
     * Get a summary of AS112 Response Codes
     *
     * Percentage distribution of AS112 dns requests classified per Response Codes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetDnsAs112TimeseriesByResponseCodesTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        String format = null;
        RadarGetDnsAs112TimeseriesByResponseCodes200Response response = api.radarGetDnsAs112TimeseriesByResponseCodes(name, dateRange, dateStart, dateEnd, asn, location, continent, format);
        // TODO: test validations
    }

    /**
     * Get AS112 DNSSEC Support Time Series
     *
     * Percentage distribution of DNS AS112 queries by DNSSEC support over time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetDnsAs112TimeseriesGroupByDnssecTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        String format = null;
        RadarGetDnsAs112TimeseriesGroupByDnssec200Response response = api.radarGetDnsAs112TimeseriesGroupByDnssec(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, format);
        // TODO: test validations
    }

    /**
     * Get AS112 EDNS Support Summary
     *
     * Percentage distribution of AS112 DNS queries by EDNS support over time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetDnsAs112TimeseriesGroupByEdnsTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        String format = null;
        RadarGetDnsAs112TimeseriesGroupByEdns200Response response = api.radarGetDnsAs112TimeseriesGroupByEdns(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, format);
        // TODO: test validations
    }

    /**
     * Get AS112 IP Version Time Series
     *
     * Percentage distribution of AS112 DNS queries by IP Version over time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetDnsAs112TimeseriesGroupByIpVersionTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        String format = null;
        RadarGetDnsAs112TimeseriesGroupByIpVersion200Response response = api.radarGetDnsAs112TimeseriesGroupByIpVersion(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, format);
        // TODO: test validations
    }

    /**
     * Get AS112 DNS Protocol Time Series
     *
     * Percentage distribution of AS112 dns requests classified per Protocol over time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetDnsAs112TimeseriesGroupByProtocolTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        String format = null;
        RadarGetDnsAs112TimeseriesGroupByProtocol200Response response = api.radarGetDnsAs112TimeseriesGroupByProtocol(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, format);
        // TODO: test validations
    }

    /**
     * Get AS112 Query Types Time Series
     *
     * Percentage distribution of AS112 DNS queries by Query Type over time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetDnsAs112TimeseriesGroupByQueryTypeTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        String format = null;
        RadarGetDnsAs112TimeseriesGroupByQueryType200Response response = api.radarGetDnsAs112TimeseriesGroupByQueryType(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, format);
        // TODO: test validations
    }

    /**
     * Get a time series of AS112 Response Codes
     *
     * Percentage distribution of AS112 dns requests classified per Response Codes over time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetDnsAs112TimeseriesGroupByResponseCodesTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        String format = null;
        RadarGetDnsAs112TimeseriesGroupByResponseCodes200Response response = api.radarGetDnsAs112TimeseriesGroupByResponseCodes(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, format);
        // TODO: test validations
    }

    /**
     * Get top autonomous systems by AS112 DNS queries
     *
     * Get the top locations by AS112 DNS queries. Values are a percentage out of the total queries.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetDnsAs112TopLocationsTest() throws ApiException {
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        String format = null;
        RadarGetDnsAs112TopLocations200Response response = api.radarGetDnsAs112TopLocations(limit, name, dateRange, dateStart, dateEnd, asn, location, continent, format);
        // TODO: test validations
    }

    /**
     * Get Top Locations By DNS Queries DNSSEC Support
     *
     * Get the top locations by DNS queries DNSSEC support to AS112.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetDnsAs112TopLocationsByDnssecTest() throws ApiException {
        String dnssec = null;
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        String format = null;
        RadarGetDnsAs112TopLocations200Response response = api.radarGetDnsAs112TopLocationsByDnssec(dnssec, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, format);
        // TODO: test validations
    }

    /**
     * Get Top Locations By EDNS Support
     *
     * Get the top locations, by DNS queries EDNS support to AS112.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetDnsAs112TopLocationsByEdnsTest() throws ApiException {
        String edns = null;
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        String format = null;
        RadarGetDnsAs112TopLocations200Response response = api.radarGetDnsAs112TopLocationsByEdns(edns, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, format);
        // TODO: test validations
    }

    /**
     * Get Top Locations by DNS Queries IP version
     *
     * Get the top locations by DNS queries IP version to AS112.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetDnsAs112TopLocationsByIpVersionTest() throws ApiException {
        String ipVersion = null;
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        String format = null;
        RadarGetDnsAs112TopLocations200Response response = api.radarGetDnsAs112TopLocationsByIpVersion(ipVersion, limit, name, dateRange, dateStart, dateEnd, asn, location, continent, format);
        // TODO: test validations
    }

}
