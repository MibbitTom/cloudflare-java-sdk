/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiException;
import org.openapitools.client.model.DlpAccountRiskSummaryResponse;
import org.openapitools.client.model.DlpApiResponseCommonFailure;
import org.openapitools.client.model.DlpGetBehaviorsResponse;
import org.openapitools.client.model.DlpResetUserResponse;
import org.openapitools.client.model.DlpUpdateBehaviorsRequest;
import org.openapitools.client.model.DlpUserId;
import org.openapitools.client.model.DlpUserRiskSummaryResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ZeroTrustRiskScoringApi
 */
@Disabled
public class ZeroTrustRiskScoringApiTest {

    private final ZeroTrustRiskScoringApi api = new ZeroTrustRiskScoringApi();

    /**
     * Risky user summary
     *
     * Get risk score info for all users in the account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpZtRiskScoreAccountSummaryTest() throws ApiException {
        String accountIdentifier = null;
        Integer page = null;
        Integer perPage = null;
        String orderBy = null;
        String direction = null;
        DlpAccountRiskSummaryResponse response = api.dlpZtRiskScoreAccountSummary(accountIdentifier, page, perPage, orderBy, direction);
        // TODO: test validations
    }

    /**
     * Get behaviors
     *
     * Get all behaviors and associated configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpZtRiskScoreGetBehaviorsTest() throws ApiException {
        String accountIdentifier = null;
        DlpGetBehaviorsResponse response = api.dlpZtRiskScoreGetBehaviors(accountIdentifier);
        // TODO: test validations
    }

    /**
     * Update behaviors
     *
     * Update configuration for risk behaviors
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpZtRiskScorePutBehaviorsTest() throws ApiException {
        String accountIdentifier = null;
        DlpUpdateBehaviorsRequest dlpUpdateBehaviorsRequest = null;
        DlpGetBehaviorsResponse response = api.dlpZtRiskScorePutBehaviors(accountIdentifier, dlpUpdateBehaviorsRequest);
        // TODO: test validations
    }

    /**
     * Reset user risk score
     *
     * Clear the risk score for a particular user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpZtRiskScoreResetUserTest() throws ApiException {
        String accountIdentifier = null;
        DlpUserId userId = null;
        DlpResetUserResponse response = api.dlpZtRiskScoreResetUser(accountIdentifier, userId);
        // TODO: test validations
    }

    /**
     * User risk details
     *
     * Get risk event/score information for a specific user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpZtRiskScoreUserDetailsTest() throws ApiException {
        String accountIdentifier = null;
        DlpUserId userId = null;
        Integer page = null;
        Integer perPage = null;
        String orderBy = null;
        String direction = null;
        DlpUserRiskSummaryResponse response = api.dlpZtRiskScoreUserDetails(accountIdentifier, userId, page, perPage, orderBy, direction);
        // TODO: test validations
    }

}
