/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.StreamApiResponseCommonFailure;
import org.openapitools.client.model.StreamDirectUploadRequest;
import org.openapitools.client.model.StreamDirectUploadResponse;
import org.openapitools.client.model.StreamMediaState;
import org.openapitools.client.model.StreamSignedTokenRequest;
import org.openapitools.client.model.StreamSignedTokenResponse;
import org.openapitools.client.model.StreamStorageUseResponse;
import org.openapitools.client.model.StreamTusResumable;
import org.openapitools.client.model.StreamVideoCopyRequest;
import org.openapitools.client.model.StreamVideoResponseCollection;
import org.openapitools.client.model.StreamVideoResponseSingle;
import org.openapitools.client.model.StreamVideoUpdate;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StreamVideosApi
 */
@Disabled
public class StreamVideosApiTest {

    private final StreamVideosApi api = new StreamVideosApi();

    /**
     * Create signed URL tokens for videos
     *
     * Creates a signed URL token for a video. If a body is not provided in the request, a token is created with default values.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamVideosCreateSignedUrlTokensForVideosTest() throws ApiException {
        String identifier = null;
        String accountId = null;
        StreamSignedTokenRequest streamSignedTokenRequest = null;
        StreamSignedTokenResponse response = api.streamVideosCreateSignedUrlTokensForVideos(identifier, accountId, streamSignedTokenRequest);
        // TODO: test validations
    }

    /**
     * Delete video
     *
     * Deletes a video and its copies from Cloudflare Stream.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamVideosDeleteVideoTest() throws ApiException {
        String identifier = null;
        String accountId = null;
        api.streamVideosDeleteVideo(identifier, accountId);
        // TODO: test validations
    }

    /**
     * Initiate video uploads using TUS
     *
     * Initiates a video upload using the TUS protocol. On success, the server responds with a status code 201 (created) and includes a &#x60;location&#x60; header to indicate where the content should be uploaded. Refer to https://tus.io for protocol details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamVideosInitiateVideoUploadsUsingTusTest() throws ApiException {
        StreamTusResumable tusResumable = null;
        Integer uploadLength = null;
        String accountId = null;
        String uploadCreator = null;
        String uploadMetadata = null;
        api.streamVideosInitiateVideoUploadsUsingTus(tusResumable, uploadLength, accountId, uploadCreator, uploadMetadata);
        // TODO: test validations
    }

    /**
     * List videos
     *
     * Lists up to 1000 videos from a single request. For a specific range, refer to the optional parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamVideosListVideosTest() throws ApiException {
        String accountId = null;
        StreamMediaState status = null;
        String creator = null;
        String type = null;
        Boolean asc = null;
        String search = null;
        OffsetDateTime start = null;
        OffsetDateTime end = null;
        Boolean includeCounts = null;
        StreamVideoResponseCollection response = api.streamVideosListVideos(accountId, status, creator, type, asc, search, start, end, includeCounts);
        // TODO: test validations
    }

    /**
     * Retrieve embed Code HTML
     *
     * Fetches an HTML code snippet to embed a video in a web page delivered through Cloudflare. On success, returns an HTML fragment for use on web pages to display a video. On failure, returns a JSON response body.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamVideosRetreieveEmbedCodeHtmlTest() throws ApiException {
        String identifier = null;
        String accountId = null;
        Object response = api.streamVideosRetreieveEmbedCodeHtml(identifier, accountId);
        // TODO: test validations
    }

    /**
     * Retrieve video details
     *
     * Fetches details for a single video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamVideosRetrieveVideoDetailsTest() throws ApiException {
        String identifier = null;
        String accountId = null;
        StreamVideoResponseSingle response = api.streamVideosRetrieveVideoDetails(identifier, accountId);
        // TODO: test validations
    }

    /**
     * Storage use
     *
     * Returns information about an account&#39;s storage use.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamVideosStorageUsageTest() throws ApiException {
        String accountId = null;
        String creator = null;
        StreamStorageUseResponse response = api.streamVideosStorageUsage(accountId, creator);
        // TODO: test validations
    }

    /**
     * Edit video details
     *
     * Edit details for a single video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamVideosUpdateVideoDetailsTest() throws ApiException {
        String identifier = null;
        String accountId = null;
        StreamVideoUpdate streamVideoUpdate = null;
        StreamVideoResponseSingle response = api.streamVideosUpdateVideoDetails(identifier, accountId, streamVideoUpdate);
        // TODO: test validations
    }

    /**
     * Upload videos from a URL
     *
     * Uploads a video to Stream from a provided URL.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamVideosUploadVideosFromAUrlTest() throws ApiException {
        String accountId = null;
        StreamVideoCopyRequest streamVideoCopyRequest = null;
        String uploadCreator = null;
        String uploadMetadata = null;
        StreamVideoResponseSingle response = api.streamVideosUploadVideosFromAUrl(accountId, streamVideoCopyRequest, uploadCreator, uploadMetadata);
        // TODO: test validations
    }

    /**
     * Upload videos via direct upload URLs
     *
     * Creates a direct upload that allows video uploads without an API key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamVideosUploadVideosViaDirectUploadUrLsTest() throws ApiException {
        String accountId = null;
        StreamDirectUploadRequest streamDirectUploadRequest = null;
        String uploadCreator = null;
        StreamDirectUploadResponse response = api.streamVideosUploadVideosViaDirectUploadUrLs(accountId, streamDirectUploadRequest, uploadCreator);
        // TODO: test validations
    }

}
