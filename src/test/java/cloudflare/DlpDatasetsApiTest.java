/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiException;
import org.openapitools.client.model.DlpDatasetArrayResponse;
import org.openapitools.client.model.DlpDatasetCreationResponse;
import org.openapitools.client.model.DlpDatasetNewVersionResponse;
import org.openapitools.client.model.DlpDatasetResponse;
import org.openapitools.client.model.DlpDatasetUpdate;
import org.openapitools.client.model.DlpNewDataset;
import org.openapitools.client.model.DlpV4ResponseError;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DlpDatasetsApi
 */
@Disabled
public class DlpDatasetsApiTest {

    private final DlpDatasetsApi api = new DlpDatasetsApi();

    /**
     * Create a new dataset.
     *
     * Create a new dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpDatasetsCreateTest() throws ApiException {
        String accountId = null;
        DlpNewDataset dlpNewDataset = null;
        DlpDatasetCreationResponse response = api.dlpDatasetsCreate(accountId, dlpNewDataset);
        // TODO: test validations
    }

    /**
     * Prepare to upload a new version of a dataset.
     *
     * Prepare to upload a new version of a dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpDatasetsCreateVersionTest() throws ApiException {
        String accountId = null;
        UUID datasetId = null;
        DlpDatasetNewVersionResponse response = api.dlpDatasetsCreateVersion(accountId, datasetId);
        // TODO: test validations
    }

    /**
     * Delete a dataset.
     *
     * Delete a dataset.  This deletes all versions of the dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpDatasetsDeleteTest() throws ApiException {
        String accountId = null;
        UUID datasetId = null;
        api.dlpDatasetsDelete(accountId, datasetId);
        // TODO: test validations
    }

    /**
     * Fetch a specific dataset with information about available versions.
     *
     * Fetch a specific dataset with information about available versions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpDatasetsReadTest() throws ApiException {
        String accountId = null;
        UUID datasetId = null;
        DlpDatasetResponse response = api.dlpDatasetsRead(accountId, datasetId);
        // TODO: test validations
    }

    /**
     * Fetch all datasets with information about available versions.
     *
     * Fetch all datasets with information about available versions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpDatasetsReadAllTest() throws ApiException {
        String accountId = null;
        DlpDatasetArrayResponse response = api.dlpDatasetsReadAll(accountId);
        // TODO: test validations
    }

    /**
     * Update details about a dataset.
     *
     * Update details about a dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpDatasetsUpdateTest() throws ApiException {
        String accountId = null;
        UUID datasetId = null;
        DlpDatasetUpdate dlpDatasetUpdate = null;
        DlpDatasetResponse response = api.dlpDatasetsUpdate(accountId, datasetId, dlpDatasetUpdate);
        // TODO: test validations
    }

    /**
     * Upload a new version of a dataset.
     *
     * Upload a new version of a dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpDatasetsUploadVersionTest() throws ApiException {
        String accountId = null;
        UUID datasetId = null;
        Long version = null;
        String body = null;
        DlpDatasetResponse response = api.dlpDatasetsUploadVersion(accountId, datasetId, version, body);
        // TODO: test validations
    }

}
