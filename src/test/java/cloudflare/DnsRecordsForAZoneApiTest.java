/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.DnsRecordsApiResponseCommonFailure;
import org.openapitools.client.model.DnsRecordsDirection;
import org.openapitools.client.model.DnsRecordsDnsRecord;
import org.openapitools.client.model.DnsRecordsDnsResponseCollection;
import org.openapitools.client.model.DnsRecordsDnsResponseImportScan;
import org.openapitools.client.model.DnsRecordsDnsResponseSingle;
import org.openapitools.client.model.DnsRecordsForAZoneCreateDnsRecord4xxResponse;
import org.openapitools.client.model.DnsRecordsForAZoneDeleteDnsRecord200Response;
import org.openapitools.client.model.DnsRecordsForAZoneDeleteDnsRecord4xxResponse;
import org.openapitools.client.model.DnsRecordsForAZoneImportDnsRecords4XXResponse;
import org.openapitools.client.model.DnsRecordsForAZoneListDnsRecords4xxResponse;
import org.openapitools.client.model.DnsRecordsMatch;
import org.openapitools.client.model.DnsRecordsOrder;
import org.openapitools.client.model.DnsRecordsTagMatch;
import org.openapitools.client.model.DnsRecordsType;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DnsRecordsForAZoneApi
 */
@Disabled
public class DnsRecordsForAZoneApiTest {

    private final DnsRecordsForAZoneApi api = new DnsRecordsForAZoneApi();

    /**
     * Create DNS Record
     *
     * Create a new DNS record for a zone.  Notes: - A/AAAA records cannot exist on the same name as CNAME records. - NS records cannot exist on the same name as any other record type. - Domain names are always represented in Punycode, even if Unicode   characters were used when creating the record. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dnsRecordsForAZoneCreateDnsRecordTest() throws ApiException {
        String zoneId = null;
        DnsRecordsDnsRecord dnsRecordsDnsRecord = null;
        DnsRecordsDnsResponseSingle response = api.dnsRecordsForAZoneCreateDnsRecord(zoneId, dnsRecordsDnsRecord);
        // TODO: test validations
    }

    /**
     * Delete DNS Record
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dnsRecordsForAZoneDeleteDnsRecordTest() throws ApiException {
        String dnsRecordId = null;
        String zoneId = null;
        DnsRecordsForAZoneDeleteDnsRecord200Response response = api.dnsRecordsForAZoneDeleteDnsRecord(dnsRecordId, zoneId);
        // TODO: test validations
    }

    /**
     * DNS Record Details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dnsRecordsForAZoneDnsRecordDetailsTest() throws ApiException {
        String dnsRecordId = null;
        String zoneId = null;
        DnsRecordsDnsResponseSingle response = api.dnsRecordsForAZoneDnsRecordDetails(dnsRecordId, zoneId);
        // TODO: test validations
    }

    /**
     * Export DNS Records
     *
     * You can export your [BIND config](https://en.wikipedia.org/wiki/Zone_file \&quot;Zone file\&quot;) through this endpoint.  See [the documentation](https://developers.cloudflare.com/dns/manage-dns-records/how-to/import-and-export/ \&quot;Import and export records\&quot;) for more information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dnsRecordsForAZoneExportDnsRecordsTest() throws ApiException {
        String zoneId = null;
        String response = api.dnsRecordsForAZoneExportDnsRecords(zoneId);
        // TODO: test validations
    }

    /**
     * Import DNS Records
     *
     * You can upload your [BIND config](https://en.wikipedia.org/wiki/Zone_file \&quot;Zone file\&quot;) through this endpoint. It assumes that cURL is called from a location with bind_config.txt (valid BIND config) present.  See [the documentation](https://developers.cloudflare.com/dns/manage-dns-records/how-to/import-and-export/ \&quot;Import and export records\&quot;) for more information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dnsRecordsForAZoneImportDnsRecordsTest() throws ApiException {
        String zoneId = null;
        String _file = null;
        String proxied = null;
        DnsRecordsDnsResponseImportScan response = api.dnsRecordsForAZoneImportDnsRecords(zoneId, _file, proxied);
        // TODO: test validations
    }

    /**
     * List DNS Records
     *
     * List, search, sort, and filter a zones&#39; DNS records.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dnsRecordsForAZoneListDnsRecordsTest() throws ApiException {
        String zoneId = null;
        String name = null;
        DnsRecordsType type = null;
        String content = null;
        Boolean proxied = null;
        DnsRecordsMatch match = null;
        String comment = null;
        String commentPresent = null;
        String commentAbsent = null;
        String commentExact = null;
        String commentContains = null;
        String commentStartswith = null;
        String commentEndswith = null;
        String tag = null;
        String tagPresent = null;
        String tagAbsent = null;
        String tagExact = null;
        String tagContains = null;
        String tagStartswith = null;
        String tagEndswith = null;
        String search = null;
        DnsRecordsTagMatch tagMatch = null;
        BigDecimal page = null;
        BigDecimal perPage = null;
        DnsRecordsOrder order = null;
        DnsRecordsDirection direction = null;
        DnsRecordsDnsResponseCollection response = api.dnsRecordsForAZoneListDnsRecords(zoneId, name, type, content, proxied, match, comment, commentPresent, commentAbsent, commentExact, commentContains, commentStartswith, commentEndswith, tag, tagPresent, tagAbsent, tagExact, tagContains, tagStartswith, tagEndswith, search, tagMatch, page, perPage, order, direction);
        // TODO: test validations
    }

    /**
     * Update DNS Record
     *
     * Update an existing DNS record. Notes: - A/AAAA records cannot exist on the same name as CNAME records. - NS records cannot exist on the same name as any other record type. - Domain names are always represented in Punycode, even if Unicode   characters were used when creating the record. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dnsRecordsForAZonePatchDnsRecordTest() throws ApiException {
        String dnsRecordId = null;
        String zoneId = null;
        DnsRecordsDnsRecord dnsRecordsDnsRecord = null;
        DnsRecordsDnsResponseSingle response = api.dnsRecordsForAZonePatchDnsRecord(dnsRecordId, zoneId, dnsRecordsDnsRecord);
        // TODO: test validations
    }

    /**
     * Scan DNS Records
     *
     * Scan for common DNS records on your domain and automatically add them to your zone. Useful if you haven&#39;t updated your nameservers yet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dnsRecordsForAZoneScanDnsRecordsTest() throws ApiException {
        String zoneId = null;
        DnsRecordsDnsResponseImportScan response = api.dnsRecordsForAZoneScanDnsRecords(zoneId);
        // TODO: test validations
    }

    /**
     * Overwrite DNS Record
     *
     * Overwrite an existing DNS record. Notes: - A/AAAA records cannot exist on the same name as CNAME records. - NS records cannot exist on the same name as any other record type. - Domain names are always represented in Punycode, even if Unicode   characters were used when creating the record. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dnsRecordsForAZoneUpdateDnsRecordTest() throws ApiException {
        String dnsRecordId = null;
        String zoneId = null;
        DnsRecordsDnsRecord dnsRecordsDnsRecord = null;
        DnsRecordsDnsResponseSingle response = api.dnsRecordsForAZoneUpdateDnsRecord(dnsRecordId, zoneId, dnsRecordsDnsRecord);
        // TODO: test validations
    }

}
