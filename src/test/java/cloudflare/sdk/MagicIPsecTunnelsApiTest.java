/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiException;
import cloudflare.sdk.models.MagicIpsecTunnelsDeleteIpsecTunnel4XXResponse;
import cloudflare.sdk.models.MagicIpsecTunnelsGeneratePreSharedKeyPskForIpsecTunnels4xxResponse;
import cloudflare.sdk.models.MagicIpsecTunnelsListIpsecTunnelDetails4XXResponse;
import cloudflare.sdk.models.MagicIpsecTunnelsListIpsecTunnels4XXResponse;
import cloudflare.sdk.models.MagicIpsecTunnelsUpdateIpsecTunnel4XXResponse;
import cloudflare.sdk.models.MagicIpsecTunnelsUpdateMultipleIpsecTunnels4XXResponse;
import cloudflare.sdk.models.MagicPskGenerationResponse;
import cloudflare.sdk.models.MagicSchemasModifiedTunnelsCollectionResponse;
import cloudflare.sdk.models.MagicSchemasTunnelAddRequest;
import cloudflare.sdk.models.MagicSchemasTunnelDeletedResponse;
import cloudflare.sdk.models.MagicSchemasTunnelModifiedResponse;
import cloudflare.sdk.models.MagicSchemasTunnelSingleResponse;
import cloudflare.sdk.models.MagicSchemasTunnelUpdateRequest;
import cloudflare.sdk.models.MagicSchemasTunnelsCollectionResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MagicIPsecTunnelsApi
 */
@Disabled
public class MagicIPsecTunnelsApiTest {

    private final MagicIPsecTunnelsApi api = new MagicIPsecTunnelsApi();

    /**
     * Create IPsec tunnels
     *
     * Creates new IPsec tunnels associated with an account. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void magicIpsecTunnelsCreateIpsecTunnelsTest() throws ApiException {
        String accountId = null;
        MagicSchemasTunnelAddRequest magicSchemasTunnelAddRequest = null;
        MagicSchemasTunnelsCollectionResponse response = api.magicIpsecTunnelsCreateIpsecTunnels(accountId, magicSchemasTunnelAddRequest);
        // TODO: test validations
    }

    /**
     * Delete IPsec Tunnel
     *
     * Disables and removes a specific static IPsec Tunnel associated with an account. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void magicIpsecTunnelsDeleteIpsecTunnelTest() throws ApiException {
        String tunnelIdentifier = null;
        String accountId = null;
        MagicSchemasTunnelDeletedResponse response = api.magicIpsecTunnelsDeleteIpsecTunnel(tunnelIdentifier, accountId);
        // TODO: test validations
    }

    /**
     * Generate Pre Shared Key (PSK) for IPsec tunnels
     *
     * Generates a Pre Shared Key for a specific IPsec tunnel used in the IKE session. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes. After a PSK is generated, the PSK is immediately persisted to Cloudflare&#39;s edge and cannot be retrieved later. Note the PSK in a safe place.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void magicIpsecTunnelsGeneratePreSharedKeyPskForIpsecTunnelsTest() throws ApiException {
        String tunnelIdentifier = null;
        String accountId = null;
        MagicPskGenerationResponse response = api.magicIpsecTunnelsGeneratePreSharedKeyPskForIpsecTunnels(tunnelIdentifier, accountId);
        // TODO: test validations
    }

    /**
     * List IPsec tunnel details
     *
     * Lists details for a specific IPsec tunnel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void magicIpsecTunnelsListIpsecTunnelDetailsTest() throws ApiException {
        String tunnelIdentifier = null;
        String accountId = null;
        MagicSchemasTunnelSingleResponse response = api.magicIpsecTunnelsListIpsecTunnelDetails(tunnelIdentifier, accountId);
        // TODO: test validations
    }

    /**
     * List IPsec tunnels
     *
     * Lists IPsec tunnels associated with an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void magicIpsecTunnelsListIpsecTunnelsTest() throws ApiException {
        String accountId = null;
        MagicSchemasTunnelsCollectionResponse response = api.magicIpsecTunnelsListIpsecTunnels(accountId);
        // TODO: test validations
    }

    /**
     * Update IPsec Tunnel
     *
     * Updates a specific IPsec tunnel associated with an account. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void magicIpsecTunnelsUpdateIpsecTunnelTest() throws ApiException {
        String tunnelIdentifier = null;
        String accountId = null;
        MagicSchemasTunnelUpdateRequest magicSchemasTunnelUpdateRequest = null;
        MagicSchemasTunnelModifiedResponse response = api.magicIpsecTunnelsUpdateIpsecTunnel(tunnelIdentifier, accountId, magicSchemasTunnelUpdateRequest);
        // TODO: test validations
    }

    /**
     * Update multiple IPsec tunnels
     *
     * Update multiple IPsec tunnels associated with an account. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void magicIpsecTunnelsUpdateMultipleIpsecTunnelsTest() throws ApiException {
        String accountId = null;
        Object body = null;
        MagicSchemasModifiedTunnelsCollectionResponse response = api.magicIpsecTunnelsUpdateMultipleIpsecTunnels(accountId, body);
        // TODO: test validations
    }

}
