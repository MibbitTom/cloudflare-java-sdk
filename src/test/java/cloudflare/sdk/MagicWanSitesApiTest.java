/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiException;
import cloudflare.sdk.models.MagicApiResponseCommonFailure;
import cloudflare.sdk.models.MagicSiteDeletedResponse;
import cloudflare.sdk.models.MagicSiteModifiedResponse;
import cloudflare.sdk.models.MagicSiteSingleResponse;
import cloudflare.sdk.models.MagicSiteUpdateRequest;
import cloudflare.sdk.models.MagicSitesAddSingleRequest;
import cloudflare.sdk.models.MagicSitesCollectionResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MagicWanSitesApi
 */
@Disabled
public class MagicWanSitesApiTest {

    private final MagicWanSitesApi api = new MagicWanSitesApi();

    /**
     * Create a new Site
     *
     * Creates a new Site
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void magicSitesCreateSiteTest() throws ApiException {
        String accountId = null;
        MagicSitesAddSingleRequest magicSitesAddSingleRequest = null;
        MagicSiteSingleResponse response = api.magicSitesCreateSite(accountId, magicSitesAddSingleRequest);
        // TODO: test validations
    }

    /**
     * Delete Site
     *
     * Remove a specific Site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void magicSitesDeleteSiteTest() throws ApiException {
        String siteId = null;
        String accountId = null;
        MagicSiteDeletedResponse response = api.magicSitesDeleteSite(siteId, accountId);
        // TODO: test validations
    }

    /**
     * Site Details
     *
     * Get a specific Site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void magicSitesSiteDetailsTest() throws ApiException {
        String siteId = null;
        String accountId = null;
        MagicSiteSingleResponse response = api.magicSitesSiteDetails(siteId, accountId);
        // TODO: test validations
    }

    /**
     * Update Site
     *
     * Update a specific Site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void magicSitesUpdateSiteTest() throws ApiException {
        String siteId = null;
        String accountId = null;
        MagicSiteUpdateRequest magicSiteUpdateRequest = null;
        MagicSiteModifiedResponse response = api.magicSitesUpdateSite(siteId, accountId, magicSiteUpdateRequest);
        // TODO: test validations
    }

    /**
     * List Sites
     *
     * Lists Sites associated with an account. Use connector_identifier query param to return sites where connector_identifier matches either site.ConnectorID or site.SecondaryConnectorID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void magicWanSitesListSitesTest() throws ApiException {
        String accountId = null;
        String connectorIdentifier = null;
        MagicSitesCollectionResponse response = api.magicWanSitesListSites(accountId, connectorIdentifier);
        // TODO: test validations
    }

}
