/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiException;
import cloudflare.sdk.models.MagicApiResponseCommonFailure;
import cloudflare.sdk.models.MagicWanDeletedResponse;
import cloudflare.sdk.models.MagicWanModifiedResponse;
import cloudflare.sdk.models.MagicWanSingleResponse;
import cloudflare.sdk.models.MagicWanUpdateRequest;
import cloudflare.sdk.models.MagicWansAddSingleRequest;
import cloudflare.sdk.models.MagicWansCollectionResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MagicWanConnectorWansApi
 */
@Disabled
public class MagicWanConnectorWansApiTest {

    private final MagicWanConnectorWansApi api = new MagicWanConnectorWansApi();

    /**
     * Create a new WAN
     *
     * Creates a new WAN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void magicWanConnectorsCreateWanTest() throws ApiException {
        String accountId = null;
        String siteId = null;
        MagicWansAddSingleRequest magicWansAddSingleRequest = null;
        MagicWansCollectionResponse response = api.magicWanConnectorsCreateWan(accountId, siteId, magicWansAddSingleRequest);
        // TODO: test validations
    }

    /**
     * Delete WAN
     *
     * Remove a specific WAN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void magicWanConnectorsDeleteWanTest() throws ApiException {
        String siteId = null;
        String accountId = null;
        String wanId = null;
        MagicWanDeletedResponse response = api.magicWanConnectorsDeleteWan(siteId, accountId, wanId);
        // TODO: test validations
    }

    /**
     * List WANs
     *
     * Lists WANs associated with an account and site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void magicWanConnectorsListWansTest() throws ApiException {
        String accountId = null;
        String siteId = null;
        MagicWansCollectionResponse response = api.magicWanConnectorsListWans(accountId, siteId);
        // TODO: test validations
    }

    /**
     * Update WAN
     *
     * Update a specific WAN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void magicWanConnectorsUpdateWanTest() throws ApiException {
        String siteId = null;
        String accountId = null;
        String wanId = null;
        MagicWanUpdateRequest magicWanUpdateRequest = null;
        MagicWanModifiedResponse response = api.magicWanConnectorsUpdateWan(siteId, accountId, wanId, magicWanUpdateRequest);
        // TODO: test validations
    }

    /**
     * WAN Details
     *
     * Get a specific WAN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void magicWanConnectorsWanDetailsTest() throws ApiException {
        String siteId = null;
        String accountId = null;
        String wanId = null;
        MagicWanSingleResponse response = api.magicWanConnectorsWanDetails(siteId, accountId, wanId);
        // TODO: test validations
    }

}
