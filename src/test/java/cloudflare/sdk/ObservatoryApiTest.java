/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiException;
import cloudflare.sdk.models.ObservatoryApiResponseCommonFailure;
import cloudflare.sdk.models.ObservatoryAvailabilitiesResponse;
import cloudflare.sdk.models.ObservatoryCountResponse;
import cloudflare.sdk.models.ObservatoryCreateScheduleResponse;
import cloudflare.sdk.models.ObservatoryDeviceType;
import cloudflare.sdk.models.ObservatoryPageTestResponseCollection;
import cloudflare.sdk.models.ObservatoryPageTestResponseSingle;
import cloudflare.sdk.models.ObservatoryPagesResponseCollection;
import cloudflare.sdk.models.ObservatoryRegion;
import cloudflare.sdk.models.ObservatoryScheduleResponseSingle;
import cloudflare.sdk.models.ObservatoryTrendResponse;
import java.time.OffsetDateTime;
import cloudflare.sdk.models.SpeedCreateTestRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ObservatoryApi
 */
@Disabled
public class ObservatoryApiTest {

    private final ObservatoryApi api = new ObservatoryApi();

    /**
     * Create scheduled page test
     *
     * Creates a scheduled test for a page.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void speedCreateScheduledTestTest() throws ApiException {
        String zoneId = null;
        String url = null;
        ObservatoryRegion region = null;
        ObservatoryCreateScheduleResponse response = api.speedCreateScheduledTest(zoneId, url, region);
        // TODO: test validations
    }

    /**
     * Start page test
     *
     * Starts a test for a specific webpage, in a specific region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void speedCreateTestTest() throws ApiException {
        String zoneId = null;
        String url = null;
        SpeedCreateTestRequest speedCreateTestRequest = null;
        ObservatoryPageTestResponseSingle response = api.speedCreateTest(zoneId, url, speedCreateTestRequest);
        // TODO: test validations
    }

    /**
     * Delete scheduled page test
     *
     * Deletes a scheduled test for a page.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void speedDeleteTestScheduleTest() throws ApiException {
        String zoneId = null;
        String url = null;
        ObservatoryRegion region = null;
        ObservatoryCountResponse response = api.speedDeleteTestSchedule(zoneId, url, region);
        // TODO: test validations
    }

    /**
     * Delete all page tests
     *
     * Deletes all tests for a specific webpage from a specific region. Deleted tests are still counted as part of the quota.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void speedDeleteTestsTest() throws ApiException {
        String zoneId = null;
        String url = null;
        ObservatoryRegion region = null;
        ObservatoryCountResponse response = api.speedDeleteTests(zoneId, url, region);
        // TODO: test validations
    }

    /**
     * Get quota and availability
     *
     * Retrieves quota for all plans, as well as the current zone quota.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void speedGetAvailabilitiesTest() throws ApiException {
        String zoneId = null;
        ObservatoryAvailabilitiesResponse response = api.speedGetAvailabilities(zoneId);
        // TODO: test validations
    }

    /**
     * Get a page test schedule
     *
     * Retrieves the test schedule for a page in a specific region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void speedGetScheduledTestTest() throws ApiException {
        String zoneId = null;
        String url = null;
        ObservatoryRegion region = null;
        ObservatoryScheduleResponseSingle response = api.speedGetScheduledTest(zoneId, url, region);
        // TODO: test validations
    }

    /**
     * Get a page test result
     *
     * Retrieves the result of a specific test.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void speedGetTestTest() throws ApiException {
        String zoneId = null;
        String url = null;
        String testId = null;
        ObservatoryPageTestResponseSingle response = api.speedGetTest(zoneId, url, testId);
        // TODO: test validations
    }

    /**
     * List core web vital metrics trend
     *
     * Lists the core web vital metrics trend over time for a specific page.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void speedListPageTrendTest() throws ApiException {
        String zoneId = null;
        String url = null;
        ObservatoryRegion region = null;
        ObservatoryDeviceType deviceType = null;
        OffsetDateTime start = null;
        String tz = null;
        String metrics = null;
        OffsetDateTime end = null;
        ObservatoryTrendResponse response = api.speedListPageTrend(zoneId, url, region, deviceType, start, tz, metrics, end);
        // TODO: test validations
    }

    /**
     * List tested webpages
     *
     * Lists all webpages which have been tested.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void speedListPagesTest() throws ApiException {
        String zoneId = null;
        ObservatoryPagesResponseCollection response = api.speedListPages(zoneId);
        // TODO: test validations
    }

    /**
     * List page test history
     *
     * Test history (list of tests) for a specific webpage.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void speedListTestHistoryTest() throws ApiException {
        String zoneId = null;
        String url = null;
        Integer page = null;
        Integer perPage = null;
        ObservatoryRegion region = null;
        ObservatoryPageTestResponseCollection response = api.speedListTestHistory(zoneId, url, page, perPage, region);
        // TODO: test validations
    }

}
