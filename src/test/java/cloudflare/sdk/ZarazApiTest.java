/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiException;
import cloudflare.sdk.models.PostZonesZoneIdentifierZarazPublish200Response;
import cloudflare.sdk.models.ZarazApiResponseCommonFailure;
import cloudflare.sdk.models.ZarazZarazConfigBody;
import cloudflare.sdk.models.ZarazZarazConfigHistoryResponse;
import cloudflare.sdk.models.ZarazZarazConfigResponse;
import cloudflare.sdk.models.ZarazZarazConfigReturn;
import cloudflare.sdk.models.ZarazZarazHistoryResponse;
import cloudflare.sdk.models.ZarazZarazWorkflow;
import cloudflare.sdk.models.ZarazZarazWorkflowResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ZarazApi
 */
@Disabled
public class ZarazApiTest {

    private final ZarazApi api = new ZarazApi();

    /**
     * Get Zaraz configuration
     *
     * Gets latest Zaraz configuration for a zone. It can be preview or published configuration, whichever was the last updated. Secret variables values will not be included.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getZonesZoneIdentifierZarazConfigTest() throws ApiException {
        String zoneId = null;
        ZarazZarazConfigResponse response = api.getZonesZoneIdentifierZarazConfig(zoneId);
        // TODO: test validations
    }

    /**
     * Get Zaraz historical configurations by ID(s)
     *
     * Gets a history of published Zaraz configurations by ID(s) for a zone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getZonesZoneIdentifierZarazConfigHistoryTest() throws ApiException {
        String zoneId = null;
        List<Integer> ids = null;
        ZarazZarazConfigHistoryResponse response = api.getZonesZoneIdentifierZarazConfigHistory(zoneId, ids);
        // TODO: test validations
    }

    /**
     * Get default Zaraz configuration
     *
     * Gets default Zaraz configuration for a zone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getZonesZoneIdentifierZarazDefaultTest() throws ApiException {
        String zoneId = null;
        ZarazZarazConfigResponse response = api.getZonesZoneIdentifierZarazDefault(zoneId);
        // TODO: test validations
    }

    /**
     * Export Zaraz configuration
     *
     * Exports full current published Zaraz configuration for a zone, secret variables included.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getZonesZoneIdentifierZarazExportTest() throws ApiException {
        String zoneId = null;
        ZarazZarazConfigReturn response = api.getZonesZoneIdentifierZarazExport(zoneId);
        // TODO: test validations
    }

    /**
     * List Zaraz historical configuration records
     *
     * Lists a history of published Zaraz configuration records for a zone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getZonesZoneIdentifierZarazHistoryTest() throws ApiException {
        String zoneId = null;
        Integer offset = null;
        Integer limit = null;
        String sortField = null;
        String sortOrder = null;
        ZarazZarazHistoryResponse response = api.getZonesZoneIdentifierZarazHistory(zoneId, offset, limit, sortField, sortOrder);
        // TODO: test validations
    }

    /**
     * Get Zaraz workflow
     *
     * Gets Zaraz workflow for a zone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getZonesZoneIdentifierZarazWorkflowTest() throws ApiException {
        String zoneId = null;
        ZarazZarazWorkflowResponse response = api.getZonesZoneIdentifierZarazWorkflow(zoneId);
        // TODO: test validations
    }

    /**
     * Publish Zaraz preview configuration
     *
     * Publish current Zaraz preview configuration for a zone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postZonesZoneIdentifierZarazPublishTest() throws ApiException {
        String zoneId = null;
        String body = null;
        PostZonesZoneIdentifierZarazPublish200Response response = api.postZonesZoneIdentifierZarazPublish(zoneId, body);
        // TODO: test validations
    }

    /**
     * Update Zaraz configuration
     *
     * Updates Zaraz configuration for a zone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putZonesZoneIdentifierZarazConfigTest() throws ApiException {
        String zoneId = null;
        ZarazZarazConfigBody zarazZarazConfigBody = null;
        ZarazZarazConfigResponse response = api.putZonesZoneIdentifierZarazConfig(zoneId, zarazZarazConfigBody);
        // TODO: test validations
    }

    /**
     * Restore Zaraz historical configuration by ID
     *
     * Restores a historical published Zaraz configuration by ID for a zone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putZonesZoneIdentifierZarazHistoryTest() throws ApiException {
        String zoneId = null;
        Integer body = null;
        ZarazZarazConfigResponse response = api.putZonesZoneIdentifierZarazHistory(zoneId, body);
        // TODO: test validations
    }

    /**
     * Update Zaraz workflow
     *
     * Updates Zaraz workflow for a zone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putZonesZoneIdentifierZarazWorkflowTest() throws ApiException {
        String zoneId = null;
        String body = null;
        ZarazZarazWorkflowResponse response = api.putZonesZoneIdentifierZarazWorkflow(zoneId, body);
        // TODO: test validations
    }

}
