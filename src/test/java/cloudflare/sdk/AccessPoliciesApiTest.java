/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiException;
import cloudflare.sdk.models.AccessApiResponseCommonFailure;
import cloudflare.sdk.models.AccessIdResponse;
import cloudflare.sdk.models.AccessPoliciesComponentsSchemasResponseCollection;
import cloudflare.sdk.models.AccessPoliciesComponentsSchemasSingleResponse;
import cloudflare.sdk.models.AccessPoliciesUpdateAnAccessPolicyRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccessPoliciesApi
 */
@Disabled
public class AccessPoliciesApiTest {

    private final AccessPoliciesApi api = new AccessPoliciesApi();

    /**
     * Create an Access policy
     *
     * Create a new Access policy for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accessPoliciesCreateAnAccessPolicyTest() throws ApiException {
        String uuid = null;
        String identifier = null;
        AccessPoliciesUpdateAnAccessPolicyRequest accessPoliciesUpdateAnAccessPolicyRequest = null;
        AccessPoliciesComponentsSchemasSingleResponse response = api.accessPoliciesCreateAnAccessPolicy(uuid, identifier, accessPoliciesUpdateAnAccessPolicyRequest);
        // TODO: test validations
    }

    /**
     * Delete an Access policy
     *
     * Delete an Access policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accessPoliciesDeleteAnAccessPolicyTest() throws ApiException {
        String uuid = null;
        String uuid1 = null;
        String identifier = null;
        AccessIdResponse response = api.accessPoliciesDeleteAnAccessPolicy(uuid, uuid1, identifier);
        // TODO: test validations
    }

    /**
     * Get an Access policy
     *
     * Fetches a single Access policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accessPoliciesGetAnAccessPolicyTest() throws ApiException {
        String uuid = null;
        String uuid1 = null;
        String identifier = null;
        AccessPoliciesComponentsSchemasSingleResponse response = api.accessPoliciesGetAnAccessPolicy(uuid, uuid1, identifier);
        // TODO: test validations
    }

    /**
     * List Access policies
     *
     * Lists Access policies configured for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accessPoliciesListAccessPoliciesTest() throws ApiException {
        String uuid = null;
        String identifier = null;
        AccessPoliciesComponentsSchemasResponseCollection response = api.accessPoliciesListAccessPolicies(uuid, identifier);
        // TODO: test validations
    }

    /**
     * Update an Access policy
     *
     * Update a configured Access policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accessPoliciesUpdateAnAccessPolicyTest() throws ApiException {
        String uuid = null;
        String uuid1 = null;
        String identifier = null;
        AccessPoliciesUpdateAnAccessPolicyRequest accessPoliciesUpdateAnAccessPolicyRequest = null;
        AccessPoliciesComponentsSchemasSingleResponse response = api.accessPoliciesUpdateAnAccessPolicy(uuid, uuid1, identifier, accessPoliciesUpdateAnAccessPolicyRequest);
        // TODO: test validations
    }

}
