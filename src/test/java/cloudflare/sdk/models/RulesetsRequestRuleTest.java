/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk.models;

import cloudflare.sdk.models.Logging;
import cloudflare.sdk.models.RulesetsBlockRule;
import cloudflare.sdk.models.RulesetsChallengeRule;
import cloudflare.sdk.models.RulesetsCompressResponseRule;
import cloudflare.sdk.models.RulesetsExecuteRule;
import cloudflare.sdk.models.RulesetsJsChallengeRule;
import cloudflare.sdk.models.RulesetsLogRule;
import cloudflare.sdk.models.RulesetsManagedChallengeRule;
import cloudflare.sdk.models.RulesetsRedirectRule;
import cloudflare.sdk.models.RulesetsRewriteRule;
import cloudflare.sdk.models.RulesetsRouteRule;
import cloudflare.sdk.models.RulesetsScoreRule;
import cloudflare.sdk.models.RulesetsServeErrorRule;
import cloudflare.sdk.models.RulesetsSetCacheSettingsRule;
import cloudflare.sdk.models.RulesetsSetConfigRule;
import cloudflare.sdk.models.RulesetsSkipRule;
import cloudflare.sdk.models.SetCacheSettingsRuleActionParameters;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for RulesetsRequestRule
 */
public class RulesetsRequestRuleTest {
    private final RulesetsRequestRule model = new RulesetsRequestRule();

    /**
     * Model tests for RulesetsRequestRule
     */
    @Test
    public void testRulesetsRequestRule() {
        // TODO: test RulesetsRequestRule
    }

    /**
     * Test the property 'action'
     */
    @Test
    public void actionTest() {
        // TODO: test action
    }

    /**
     * Test the property 'actionParameters'
     */
    @Test
    public void actionParametersTest() {
        // TODO: test actionParameters
    }

    /**
     * Test the property 'categories'
     */
    @Test
    public void categoriesTest() {
        // TODO: test categories
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'enabled'
     */
    @Test
    public void enabledTest() {
        // TODO: test enabled
    }

    /**
     * Test the property 'expression'
     */
    @Test
    public void expressionTest() {
        // TODO: test expression
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'lastUpdated'
     */
    @Test
    public void lastUpdatedTest() {
        // TODO: test lastUpdated
    }

    /**
     * Test the property 'logging'
     */
    @Test
    public void loggingTest() {
        // TODO: test logging
    }

    /**
     * Test the property 'ref'
     */
    @Test
    public void refTest() {
        // TODO: test ref
    }

    /**
     * Test the property 'version'
     */
    @Test
    public void versionTest() {
        // TODO: test version
    }

}
