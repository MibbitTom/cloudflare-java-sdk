/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiException;
import cloudflare.sdk.models.MagicGreTunnelsDeleteGreTunnel4XXResponse;
import cloudflare.sdk.models.MagicGreTunnelsListGreTunnelDetails4XXResponse;
import cloudflare.sdk.models.MagicGreTunnelsListGreTunnels4XXResponse;
import cloudflare.sdk.models.MagicGreTunnelsUpdateGreTunnel4XXResponse;
import cloudflare.sdk.models.MagicGreTunnelsUpdateMultipleGreTunnels4XXResponse;
import cloudflare.sdk.models.MagicModifiedTunnelsCollectionResponse;
import cloudflare.sdk.models.MagicTunnelDeletedResponse;
import cloudflare.sdk.models.MagicTunnelModifiedResponse;
import cloudflare.sdk.models.MagicTunnelSingleResponse;
import cloudflare.sdk.models.MagicTunnelUpdateRequest;
import cloudflare.sdk.models.MagicTunnelsCollectionResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MagicGreTunnelsApi
 */
@Disabled
public class MagicGreTunnelsApiTest {

    private final MagicGreTunnelsApi api = new MagicGreTunnelsApi();

    /**
     * Create GRE tunnels
     *
     * Creates new GRE tunnels. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void magicGreTunnelsCreateGreTunnelsTest() throws ApiException {
        String accountId = null;
        Object body = null;
        MagicTunnelsCollectionResponse response = api.magicGreTunnelsCreateGreTunnels(accountId, body);
        // TODO: test validations
    }

    /**
     * Delete GRE Tunnel
     *
     * Disables and removes a specific static GRE tunnel. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void magicGreTunnelsDeleteGreTunnelTest() throws ApiException {
        String tunnelIdentifier = null;
        String accountId = null;
        MagicTunnelDeletedResponse response = api.magicGreTunnelsDeleteGreTunnel(tunnelIdentifier, accountId);
        // TODO: test validations
    }

    /**
     * List GRE Tunnel Details
     *
     * Lists informtion for a specific GRE tunnel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void magicGreTunnelsListGreTunnelDetailsTest() throws ApiException {
        String tunnelIdentifier = null;
        String accountId = null;
        MagicTunnelSingleResponse response = api.magicGreTunnelsListGreTunnelDetails(tunnelIdentifier, accountId);
        // TODO: test validations
    }

    /**
     * List GRE tunnels
     *
     * Lists GRE tunnels associated with an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void magicGreTunnelsListGreTunnelsTest() throws ApiException {
        String accountId = null;
        MagicTunnelsCollectionResponse response = api.magicGreTunnelsListGreTunnels(accountId);
        // TODO: test validations
    }

    /**
     * Update GRE Tunnel
     *
     * Updates a specific GRE tunnel. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void magicGreTunnelsUpdateGreTunnelTest() throws ApiException {
        String tunnelIdentifier = null;
        String accountId = null;
        MagicTunnelUpdateRequest magicTunnelUpdateRequest = null;
        MagicTunnelModifiedResponse response = api.magicGreTunnelsUpdateGreTunnel(tunnelIdentifier, accountId, magicTunnelUpdateRequest);
        // TODO: test validations
    }

    /**
     * Update multiple GRE tunnels
     *
     * Updates multiple GRE tunnels. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void magicGreTunnelsUpdateMultipleGreTunnelsTest() throws ApiException {
        String accountId = null;
        Object body = null;
        MagicModifiedTunnelsCollectionResponse response = api.magicGreTunnelsUpdateMultipleGreTunnels(accountId, body);
        // TODO: test validations
    }

}
