/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiException;
import java.math.BigDecimal;
import cloudflare.sdk.models.CloudflareTunnelCleanUpCloudflareTunnelConnections4XXResponse;
import cloudflare.sdk.models.CloudflareTunnelCreateACloudflareTunnel4XXResponse;
import cloudflare.sdk.models.CloudflareTunnelCreateACloudflareTunnelRequest;
import cloudflare.sdk.models.CloudflareTunnelCreateAWarpConnectorTunnelRequest;
import cloudflare.sdk.models.CloudflareTunnelGetACloudflareTunnelManagementToken4XXResponse;
import cloudflare.sdk.models.CloudflareTunnelGetACloudflareTunnelManagementTokenRequest;
import cloudflare.sdk.models.CloudflareTunnelGetCloudflareTunnelConnector4XXResponse;
import cloudflare.sdk.models.CloudflareTunnelListCloudflareTunnelConnections4XXResponse;
import cloudflare.sdk.models.CloudflareTunnelListCloudflareTunnels4XXResponse;
import cloudflare.sdk.models.CloudflareTunnelUpdateACloudflareTunnelRequest;
import java.time.OffsetDateTime;
import cloudflare.sdk.models.TunnelEmptyResponse;
import cloudflare.sdk.models.TunnelTunnelClientResponse;
import cloudflare.sdk.models.TunnelTunnelConnectionsResponse;
import cloudflare.sdk.models.TunnelTunnelResponseCollection;
import cloudflare.sdk.models.TunnelTunnelResponseSingle;
import cloudflare.sdk.models.TunnelTunnelResponseToken;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CloudflareTunnelApi
 */
@Disabled
public class CloudflareTunnelApiTest {

    private final CloudflareTunnelApi api = new CloudflareTunnelApi();

    /**
     * Clean up Cloudflare Tunnel connections
     *
     * Removes a connection (aka Cloudflare Tunnel Connector) from a Cloudflare Tunnel independently of its current state. If no connector id (client_id) is provided all connectors will be removed. We recommend running this command after rotating tokens.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudflareTunnelCleanUpCloudflareTunnelConnectionsTest() throws ApiException {
        String accountId = null;
        String tunnelId = null;
        Object body = null;
        String clientId = null;
        TunnelEmptyResponse response = api.cloudflareTunnelCleanUpCloudflareTunnelConnections(accountId, tunnelId, body, clientId);
        // TODO: test validations
    }

    /**
     * Create a Cloudflare Tunnel
     *
     * Creates a new Cloudflare Tunnel in an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudflareTunnelCreateACloudflareTunnelTest() throws ApiException {
        String accountId = null;
        CloudflareTunnelCreateACloudflareTunnelRequest cloudflareTunnelCreateACloudflareTunnelRequest = null;
        TunnelTunnelResponseSingle response = api.cloudflareTunnelCreateACloudflareTunnel(accountId, cloudflareTunnelCreateACloudflareTunnelRequest);
        // TODO: test validations
    }

    /**
     * Create a Warp Connector Tunnel
     *
     * Creates a new Warp Connector Tunnel in an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudflareTunnelCreateAWarpConnectorTunnelTest() throws ApiException {
        String accountId = null;
        CloudflareTunnelCreateAWarpConnectorTunnelRequest cloudflareTunnelCreateAWarpConnectorTunnelRequest = null;
        TunnelTunnelResponseSingle response = api.cloudflareTunnelCreateAWarpConnectorTunnel(accountId, cloudflareTunnelCreateAWarpConnectorTunnelRequest);
        // TODO: test validations
    }

    /**
     * Delete a Cloudflare Tunnel
     *
     * Deletes a Cloudflare Tunnel from an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudflareTunnelDeleteACloudflareTunnelTest() throws ApiException {
        String tunnelId = null;
        String accountId = null;
        Object body = null;
        TunnelTunnelResponseSingle response = api.cloudflareTunnelDeleteACloudflareTunnel(tunnelId, accountId, body);
        // TODO: test validations
    }

    /**
     * Delete a Warp Connector Tunnel
     *
     * Deletes a Warp Connector Tunnel from an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudflareTunnelDeleteAWarpConnectorTunnelTest() throws ApiException {
        String tunnelId = null;
        String accountId = null;
        Object body = null;
        TunnelTunnelResponseSingle response = api.cloudflareTunnelDeleteAWarpConnectorTunnel(tunnelId, accountId, body);
        // TODO: test validations
    }

    /**
     * Get a Cloudflare Tunnel
     *
     * Fetches a single Cloudflare Tunnel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudflareTunnelGetACloudflareTunnelTest() throws ApiException {
        String tunnelId = null;
        String accountId = null;
        TunnelTunnelResponseSingle response = api.cloudflareTunnelGetACloudflareTunnel(tunnelId, accountId);
        // TODO: test validations
    }

    /**
     * Get a Cloudflare Tunnel management token
     *
     * Gets a management token used to access the management resources (i.e. Streaming Logs) of a tunnel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudflareTunnelGetACloudflareTunnelManagementTokenTest() throws ApiException {
        String tunnelId = null;
        String accountId = null;
        CloudflareTunnelGetACloudflareTunnelManagementTokenRequest cloudflareTunnelGetACloudflareTunnelManagementTokenRequest = null;
        TunnelTunnelResponseToken response = api.cloudflareTunnelGetACloudflareTunnelManagementToken(tunnelId, accountId, cloudflareTunnelGetACloudflareTunnelManagementTokenRequest);
        // TODO: test validations
    }

    /**
     * Get a Cloudflare Tunnel token
     *
     * Gets the token used to associate cloudflared with a specific tunnel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudflareTunnelGetACloudflareTunnelTokenTest() throws ApiException {
        String tunnelId = null;
        String accountId = null;
        TunnelTunnelResponseToken response = api.cloudflareTunnelGetACloudflareTunnelToken(tunnelId, accountId);
        // TODO: test validations
    }

    /**
     * Get a Warp Connector Tunnel
     *
     * Fetches a single Warp Connector Tunnel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudflareTunnelGetAWarpConnectorTunnelTest() throws ApiException {
        String tunnelId = null;
        String accountId = null;
        TunnelTunnelResponseSingle response = api.cloudflareTunnelGetAWarpConnectorTunnel(tunnelId, accountId);
        // TODO: test validations
    }

    /**
     * Get a Warp Connector Tunnel token
     *
     * Gets the token used to associate warp device with a specific Warp Connector tunnel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudflareTunnelGetAWarpConnectorTunnelTokenTest() throws ApiException {
        String tunnelId = null;
        String accountId = null;
        TunnelTunnelResponseToken response = api.cloudflareTunnelGetAWarpConnectorTunnelToken(tunnelId, accountId);
        // TODO: test validations
    }

    /**
     * Get Cloudflare Tunnel connector
     *
     * Fetches connector and connection details for a Cloudflare Tunnel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudflareTunnelGetCloudflareTunnelConnectorTest() throws ApiException {
        String accountId = null;
        String tunnelId = null;
        String connectorId = null;
        TunnelTunnelClientResponse response = api.cloudflareTunnelGetCloudflareTunnelConnector(accountId, tunnelId, connectorId);
        // TODO: test validations
    }

    /**
     * List All Tunnels
     *
     * Lists and filters all types of Tunnels in an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudflareTunnelListAllTunnelsTest() throws ApiException {
        String accountId = null;
        String name = null;
        Boolean isDeleted = null;
        OffsetDateTime existedAt = null;
        String uuid = null;
        OffsetDateTime wasActiveAt = null;
        OffsetDateTime wasInactiveAt = null;
        String includePrefix = null;
        String excludePrefix = null;
        String tunTypes = null;
        BigDecimal perPage = null;
        BigDecimal page = null;
        TunnelTunnelResponseCollection response = api.cloudflareTunnelListAllTunnels(accountId, name, isDeleted, existedAt, uuid, wasActiveAt, wasInactiveAt, includePrefix, excludePrefix, tunTypes, perPage, page);
        // TODO: test validations
    }

    /**
     * List Cloudflare Tunnel connections
     *
     * Fetches connection details for a Cloudflare Tunnel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudflareTunnelListCloudflareTunnelConnectionsTest() throws ApiException {
        String accountId = null;
        String tunnelId = null;
        TunnelTunnelConnectionsResponse response = api.cloudflareTunnelListCloudflareTunnelConnections(accountId, tunnelId);
        // TODO: test validations
    }

    /**
     * List Cloudflare Tunnels
     *
     * Lists and filters Cloudflare Tunnels in an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudflareTunnelListCloudflareTunnelsTest() throws ApiException {
        String accountId = null;
        String name = null;
        Boolean isDeleted = null;
        OffsetDateTime existedAt = null;
        String uuid = null;
        OffsetDateTime wasActiveAt = null;
        OffsetDateTime wasInactiveAt = null;
        String includePrefix = null;
        String excludePrefix = null;
        BigDecimal perPage = null;
        BigDecimal page = null;
        TunnelTunnelResponseCollection response = api.cloudflareTunnelListCloudflareTunnels(accountId, name, isDeleted, existedAt, uuid, wasActiveAt, wasInactiveAt, includePrefix, excludePrefix, perPage, page);
        // TODO: test validations
    }

    /**
     * List Warp Connector Tunnels
     *
     * Lists and filters Warp Connector Tunnels in an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudflareTunnelListWarpConnectorTunnelsTest() throws ApiException {
        String accountId = null;
        String name = null;
        Boolean isDeleted = null;
        OffsetDateTime existedAt = null;
        String uuid = null;
        OffsetDateTime wasActiveAt = null;
        OffsetDateTime wasInactiveAt = null;
        String includePrefix = null;
        String excludePrefix = null;
        BigDecimal perPage = null;
        BigDecimal page = null;
        TunnelTunnelResponseCollection response = api.cloudflareTunnelListWarpConnectorTunnels(accountId, name, isDeleted, existedAt, uuid, wasActiveAt, wasInactiveAt, includePrefix, excludePrefix, perPage, page);
        // TODO: test validations
    }

    /**
     * Update a Cloudflare Tunnel
     *
     * Updates an existing Cloudflare Tunnel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudflareTunnelUpdateACloudflareTunnelTest() throws ApiException {
        String tunnelId = null;
        String accountId = null;
        CloudflareTunnelUpdateACloudflareTunnelRequest cloudflareTunnelUpdateACloudflareTunnelRequest = null;
        TunnelTunnelResponseSingle response = api.cloudflareTunnelUpdateACloudflareTunnel(tunnelId, accountId, cloudflareTunnelUpdateACloudflareTunnelRequest);
        // TODO: test validations
    }

    /**
     * Update a Warp Connector Tunnel
     *
     * Updates an existing Warp Connector Tunnel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloudflareTunnelUpdateAWarpConnectorTunnelTest() throws ApiException {
        String tunnelId = null;
        String accountId = null;
        CloudflareTunnelUpdateACloudflareTunnelRequest cloudflareTunnelUpdateACloudflareTunnelRequest = null;
        TunnelTunnelResponseSingle response = api.cloudflareTunnelUpdateAWarpConnectorTunnel(tunnelId, accountId, cloudflareTunnelUpdateACloudflareTunnelRequest);
        // TODO: test validations
    }

}
