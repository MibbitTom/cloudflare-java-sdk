/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiException;
import java.time.OffsetDateTime;
import cloudflare.sdk.models.RadarGetAttacksLayer3Summary200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer3SummaryByBitrate200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer3SummaryByDuration200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer3SummaryByIpVersion200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer3SummaryByProtocol200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer3SummaryByVector200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer3TimeseriesByBytes200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer3TimeseriesGroupByBitrate200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer3TimeseriesGroupByDuration200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer3TimeseriesGroupByIndustry200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer3TimeseriesGroupByIpVersion200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer3TimeseriesGroupByProtocol200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer3TimeseriesGroupByVector200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer3TimeseriesGroupByVertical200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer3TimeseriesGroups200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer3TopAttacks200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer3TopIndustries200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer3TopOriginLocations200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer3TopTargetLocations200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer3TopVerticals200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer7Summary200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer7SummaryByHttpMethod200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer7SummaryByHttpVersion200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer7SummaryByIpVersion200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer7SummaryByManagedRules200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer7SummaryByMitigationProduct200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer7TimeseriesGroup200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer7TimeseriesGroupByHttpMethod200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer7TimeseriesGroupByHttpVersion200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer7TimeseriesGroupByIpVersion200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer7TimeseriesGroupByManagedRules200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer7TimeseriesGroupByMitigationProduct200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer7TopAttacks200Response;
import cloudflare.sdk.models.RadarGetAttacksLayer7TopOriginAs200Response;
import cloudflare.sdk.models.RadarGetDnsAs112Timeseries200Response;
import cloudflare.sdk.models.RadarGetDnsAs112TopLocations404Response;
import cloudflare.sdk.models.WorkersAiListFinetunes400Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RadarAttacksApi
 */
@Disabled
public class RadarAttacksApiTest {

    private final RadarAttacksApi api = new RadarAttacksApi();

    /**
     * Get Layer 3 Attacks Summary
     *
     * Percentage distribution of network protocols in layer 3/4 attacks over a given time period.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer3SummaryTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        String format = null;
        RadarGetAttacksLayer3Summary200Response response = api.radarGetAttacksLayer3Summary(name, dateRange, dateStart, dateEnd, asn, location, continent, format);
        // TODO: test validations
    }

    /**
     * Get Attack Bitrate Summary
     *
     * Percentage distribution of attacks by bitrate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer3SummaryByBitrateTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> ipVersion = null;
        List<String> protocol = null;
        String direction = null;
        String format = null;
        RadarGetAttacksLayer3SummaryByBitrate200Response response = api.radarGetAttacksLayer3SummaryByBitrate(name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, direction, format);
        // TODO: test validations
    }

    /**
     * Get Attack Durations Summary
     *
     * Percentage distribution of attacks by duration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer3SummaryByDurationTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> ipVersion = null;
        List<String> protocol = null;
        String direction = null;
        String format = null;
        RadarGetAttacksLayer3SummaryByDuration200Response response = api.radarGetAttacksLayer3SummaryByDuration(name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, direction, format);
        // TODO: test validations
    }

    /**
     * Get IP Versions Summary
     *
     * Percentage distribution of attacks by ip version used.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer3SummaryByIpVersionTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> protocol = null;
        String direction = null;
        String format = null;
        RadarGetAttacksLayer3SummaryByIpVersion200Response response = api.radarGetAttacksLayer3SummaryByIpVersion(name, dateRange, dateStart, dateEnd, location, continent, protocol, direction, format);
        // TODO: test validations
    }

    /**
     * Get Layer 3 Protocols Summary
     *
     * Percentage distribution of attacks by protocol used.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer3SummaryByProtocolTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> ipVersion = null;
        String direction = null;
        String format = null;
        RadarGetAttacksLayer3SummaryByProtocol200Response response = api.radarGetAttacksLayer3SummaryByProtocol(name, dateRange, dateStart, dateEnd, location, continent, ipVersion, direction, format);
        // TODO: test validations
    }

    /**
     * Get Attack Vector Summary
     *
     * Percentage distribution of attacks by vector.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer3SummaryByVectorTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> ipVersion = null;
        List<String> protocol = null;
        String direction = null;
        String format = null;
        RadarGetAttacksLayer3SummaryByVector200Response response = api.radarGetAttacksLayer3SummaryByVector(name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, direction, format);
        // TODO: test validations
    }

    /**
     * Get Attacks By Bytes Summary
     *
     * Get attacks change over time by bytes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer3TimeseriesByBytesTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> ipVersion = null;
        List<String> protocol = null;
        String normalization = null;
        String metric = null;
        String direction = null;
        String format = null;
        RadarGetAttacksLayer3TimeseriesByBytes200Response response = api.radarGetAttacksLayer3TimeseriesByBytes(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, protocol, normalization, metric, direction, format);
        // TODO: test validations
    }

    /**
     * Get Attacks By Bitrate Time Series
     *
     * Percentage distribution of attacks by bitrate over time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer3TimeseriesGroupByBitrateTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> ipVersion = null;
        List<String> protocol = null;
        String normalization = null;
        String direction = null;
        String format = null;
        RadarGetAttacksLayer3TimeseriesGroupByBitrate200Response response = api.radarGetAttacksLayer3TimeseriesGroupByBitrate(aggInterval, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, normalization, direction, format);
        // TODO: test validations
    }

    /**
     * Get Layer 3 Attack By Duration Time Series
     *
     * Percentage distribution of attacks by duration over time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer3TimeseriesGroupByDurationTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> ipVersion = null;
        List<String> protocol = null;
        String normalization = null;
        String direction = null;
        String format = null;
        RadarGetAttacksLayer3TimeseriesGroupByDuration200Response response = api.radarGetAttacksLayer3TimeseriesGroupByDuration(aggInterval, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, normalization, direction, format);
        // TODO: test validations
    }

    /**
     * Get Layer 3 Attacks By Target Industries Time Series
     *
     * Percentage distribution of attacks by industry used over time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer3TimeseriesGroupByIndustryTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> ipVersion = null;
        String normalization = null;
        String direction = null;
        Integer limitPerGroup = null;
        String format = null;
        RadarGetAttacksLayer3TimeseriesGroupByIndustry200Response response = api.radarGetAttacksLayer3TimeseriesGroupByIndustry(aggInterval, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, normalization, direction, limitPerGroup, format);
        // TODO: test validations
    }

    /**
     * Get Layer 3 Attacks By IP Version Time Series
     *
     * Percentage distribution of attacks by ip version used over time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer3TimeseriesGroupByIpVersionTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> protocol = null;
        String normalization = null;
        String direction = null;
        String format = null;
        RadarGetAttacksLayer3TimeseriesGroupByIpVersion200Response response = api.radarGetAttacksLayer3TimeseriesGroupByIpVersion(aggInterval, name, dateRange, dateStart, dateEnd, location, continent, protocol, normalization, direction, format);
        // TODO: test validations
    }

    /**
     * Get Layer 3 Attacks By Protocol Timeseries
     *
     * Percentage distribution of attacks by protocol used over time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer3TimeseriesGroupByProtocolTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> ipVersion = null;
        String normalization = null;
        String direction = null;
        String format = null;
        RadarGetAttacksLayer3TimeseriesGroupByProtocol200Response response = api.radarGetAttacksLayer3TimeseriesGroupByProtocol(aggInterval, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, normalization, direction, format);
        // TODO: test validations
    }

    /**
     * Get Layer 3 Attacks By Vector
     *
     * Percentage distribution of attacks by vector used over time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer3TimeseriesGroupByVectorTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> ipVersion = null;
        List<String> protocol = null;
        String normalization = null;
        String direction = null;
        Integer limitPerGroup = null;
        String format = null;
        RadarGetAttacksLayer3TimeseriesGroupByVector200Response response = api.radarGetAttacksLayer3TimeseriesGroupByVector(aggInterval, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, normalization, direction, limitPerGroup, format);
        // TODO: test validations
    }

    /**
     * Get Layer 3 Attacks By Vertical Time Series
     *
     * Percentage distribution of attacks by vertical used over time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer3TimeseriesGroupByVerticalTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> ipVersion = null;
        String normalization = null;
        String direction = null;
        Integer limitPerGroup = null;
        String format = null;
        RadarGetAttacksLayer3TimeseriesGroupByVertical200Response response = api.radarGetAttacksLayer3TimeseriesGroupByVertical(aggInterval, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, normalization, direction, limitPerGroup, format);
        // TODO: test validations
    }

    /**
     * Get Layer 3 Attacks By Network Protocol Time Series
     *
     * Get a timeseries of the percentage distribution of network protocols in Layer 3/4 attacks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer3TimeseriesGroupsTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        String format = null;
        RadarGetAttacksLayer3TimeseriesGroups200Response response = api.radarGetAttacksLayer3TimeseriesGroups(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, format);
        // TODO: test validations
    }

    /**
     * Get top attack pairs (origin and target locations) of Layer 3 attacks
     *
     * Get the top attacks from origin to target location. Values are a percentage out of the total layer 3 attacks (with billing country). You can optionally limit the number of attacks per origin/target location (useful if all the top attacks are from or to the same location).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer3TopAttacksTest() throws ApiException {
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> ipVersion = null;
        List<String> protocol = null;
        String limitDirection = null;
        Integer limitPerLocation = null;
        String format = null;
        RadarGetAttacksLayer3TopAttacks200Response response = api.radarGetAttacksLayer3TopAttacks(limit, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, limitDirection, limitPerLocation, format);
        // TODO: test validations
    }

    /**
     * Get top Industry of attack
     *
     * Get the Industry of attacks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer3TopIndustriesTest() throws ApiException {
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> ipVersion = null;
        List<String> protocol = null;
        String format = null;
        RadarGetAttacksLayer3TopIndustries200Response response = api.radarGetAttacksLayer3TopIndustries(limit, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, format);
        // TODO: test validations
    }

    /**
     * Get top origin locations of attack
     *
     * Get the origin locations of attacks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer3TopOriginLocationsTest() throws ApiException {
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> ipVersion = null;
        List<String> protocol = null;
        String format = null;
        RadarGetAttacksLayer3TopOriginLocations200Response response = api.radarGetAttacksLayer3TopOriginLocations(limit, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, format);
        // TODO: test validations
    }

    /**
     * Get top target locations of attack
     *
     * Get the target locations of attacks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer3TopTargetLocationsTest() throws ApiException {
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> ipVersion = null;
        List<String> protocol = null;
        String format = null;
        RadarGetAttacksLayer3TopTargetLocations200Response response = api.radarGetAttacksLayer3TopTargetLocations(limit, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, format);
        // TODO: test validations
    }

    /**
     * Get top Verticals of attack
     *
     * Get the Verticals of attacks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer3TopVerticalsTest() throws ApiException {
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> ipVersion = null;
        List<String> protocol = null;
        String format = null;
        RadarGetAttacksLayer3TopVerticals200Response response = api.radarGetAttacksLayer3TopVerticals(limit, name, dateRange, dateStart, dateEnd, location, continent, ipVersion, protocol, format);
        // TODO: test validations
    }

    /**
     * Get Layer 7 Attacks Summary
     *
     * Percentage distribution of mitigation techniques in Layer 7 attacks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer7SummaryTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        String format = null;
        RadarGetAttacksLayer7Summary200Response response = api.radarGetAttacksLayer7Summary(name, dateRange, dateStart, dateEnd, asn, location, continent, format);
        // TODO: test validations
    }

    /**
     * Get HTTP Method Summary
     *
     * Percentage distribution of attacks by http method used.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer7SummaryByHttpMethodTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> ipVersion = null;
        List<String> httpVersion = null;
        List<String> mitigationProduct = null;
        String format = null;
        RadarGetAttacksLayer7SummaryByHttpMethod200Response response = api.radarGetAttacksLayer7SummaryByHttpMethod(name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, mitigationProduct, format);
        // TODO: test validations
    }

    /**
     * Get HTTP Version Summary
     *
     * Percentage distribution of attacks by http version used.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer7SummaryByHttpVersionTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> ipVersion = null;
        List<String> httpMethod = null;
        List<String> mitigationProduct = null;
        String format = null;
        RadarGetAttacksLayer7SummaryByHttpVersion200Response response = api.radarGetAttacksLayer7SummaryByHttpVersion(name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpMethod, mitigationProduct, format);
        // TODO: test validations
    }

    /**
     * Get Ip Version Summary
     *
     * Percentage distribution of attacks by ip version used.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer7SummaryByIpVersionTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> httpVersion = null;
        List<String> httpMethod = null;
        List<String> mitigationProduct = null;
        String format = null;
        RadarGetAttacksLayer7SummaryByIpVersion200Response response = api.radarGetAttacksLayer7SummaryByIpVersion(name, dateRange, dateStart, dateEnd, asn, location, continent, httpVersion, httpMethod, mitigationProduct, format);
        // TODO: test validations
    }

    /**
     * Get Managed Rules Summary
     *
     * Percentage distribution of attacks by managed rules used.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer7SummaryByManagedRulesTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> ipVersion = null;
        List<String> httpVersion = null;
        List<String> httpMethod = null;
        List<String> mitigationProduct = null;
        String format = null;
        RadarGetAttacksLayer7SummaryByManagedRules200Response response = api.radarGetAttacksLayer7SummaryByManagedRules(name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, httpMethod, mitigationProduct, format);
        // TODO: test validations
    }

    /**
     * Get Mitigation Product Summary
     *
     * Percentage distribution of attacks by mitigation product used.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer7SummaryByMitigationProductTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> ipVersion = null;
        List<String> httpVersion = null;
        List<String> httpMethod = null;
        String format = null;
        RadarGetAttacksLayer7SummaryByMitigationProduct200Response response = api.radarGetAttacksLayer7SummaryByMitigationProduct(name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, httpMethod, format);
        // TODO: test validations
    }

    /**
     * Get Layer 7 Attacks Time Series
     *
     * Get a timeseries of Layer 7 attacks. Values represent HTTP requests and are normalized using min-max by default.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer7TimeseriesTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> attack = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        String normalization = null;
        String format = null;
        RadarGetDnsAs112Timeseries200Response response = api.radarGetAttacksLayer7Timeseries(aggInterval, name, dateRange, dateStart, dateEnd, attack, asn, location, continent, normalization, format);
        // TODO: test validations
    }

    /**
     * Get Layer 7 Attacks By Mitigation Technique Time Series
     *
     * Get a time series of the percentual distribution of mitigation techniques, over time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer7TimeseriesGroupTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        String format = null;
        RadarGetAttacksLayer7TimeseriesGroup200Response response = api.radarGetAttacksLayer7TimeseriesGroup(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, format);
        // TODO: test validations
    }

    /**
     * Get Layer 7 Attacks By HTTP Method Time Series
     *
     * Percentage distribution of attacks by http method used over time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer7TimeseriesGroupByHttpMethodTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> ipVersion = null;
        List<String> httpVersion = null;
        List<String> mitigationProduct = null;
        String normalization = null;
        String format = null;
        RadarGetAttacksLayer7TimeseriesGroupByHttpMethod200Response response = api.radarGetAttacksLayer7TimeseriesGroupByHttpMethod(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, mitigationProduct, normalization, format);
        // TODO: test validations
    }

    /**
     * Get Layer 7 Attacks By HTTP Version Time Series
     *
     * Percentage distribution of attacks by http version used over time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer7TimeseriesGroupByHttpVersionTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> ipVersion = null;
        List<String> httpMethod = null;
        List<String> mitigationProduct = null;
        String normalization = null;
        String format = null;
        RadarGetAttacksLayer7TimeseriesGroupByHttpVersion200Response response = api.radarGetAttacksLayer7TimeseriesGroupByHttpVersion(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpMethod, mitigationProduct, normalization, format);
        // TODO: test validations
    }

    /**
     * Get Layer 7 Attacks By Target Industries Time Series
     *
     * Percentage distribution of attacks by industry used over time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer7TimeseriesGroupByIndustryTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> ipVersion = null;
        List<String> httpVersion = null;
        List<String> httpMethod = null;
        List<String> mitigationProduct = null;
        String normalization = null;
        Integer limitPerGroup = null;
        String format = null;
        RadarGetAttacksLayer3TimeseriesGroupByIndustry200Response response = api.radarGetAttacksLayer7TimeseriesGroupByIndustry(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, httpMethod, mitigationProduct, normalization, limitPerGroup, format);
        // TODO: test validations
    }

    /**
     * Get Layer 7 Attacks By IP Version Time Series
     *
     * Percentage distribution of attacks by ip version used over time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer7TimeseriesGroupByIpVersionTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> httpVersion = null;
        List<String> httpMethod = null;
        List<String> mitigationProduct = null;
        String normalization = null;
        String format = null;
        RadarGetAttacksLayer7TimeseriesGroupByIpVersion200Response response = api.radarGetAttacksLayer7TimeseriesGroupByIpVersion(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, httpVersion, httpMethod, mitigationProduct, normalization, format);
        // TODO: test validations
    }

    /**
     * Get Layer 7 Attacks By Managed Rules Time Series
     *
     * Percentage distribution of attacks by managed rules used over time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer7TimeseriesGroupByManagedRulesTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> ipVersion = null;
        List<String> httpVersion = null;
        List<String> httpMethod = null;
        List<String> mitigationProduct = null;
        String normalization = null;
        String format = null;
        RadarGetAttacksLayer7TimeseriesGroupByManagedRules200Response response = api.radarGetAttacksLayer7TimeseriesGroupByManagedRules(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, httpMethod, mitigationProduct, normalization, format);
        // TODO: test validations
    }

    /**
     * Get Layer 7 Attacks By Mitigation Product Time Series
     *
     * Percentage distribution of attacks by mitigation product used over time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer7TimeseriesGroupByMitigationProductTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> ipVersion = null;
        List<String> httpVersion = null;
        List<String> httpMethod = null;
        String normalization = null;
        String format = null;
        RadarGetAttacksLayer7TimeseriesGroupByMitigationProduct200Response response = api.radarGetAttacksLayer7TimeseriesGroupByMitigationProduct(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, httpMethod, normalization, format);
        // TODO: test validations
    }

    /**
     * Get Layer 7 Attacks By Vertical Time Series
     *
     * Percentage distribution of attacks by vertical used over time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer7TimeseriesGroupByVerticalTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        List<String> ipVersion = null;
        List<String> httpVersion = null;
        List<String> httpMethod = null;
        List<String> mitigationProduct = null;
        String normalization = null;
        Integer limitPerGroup = null;
        String format = null;
        RadarGetAttacksLayer3TimeseriesGroupByVertical200Response response = api.radarGetAttacksLayer7TimeseriesGroupByVertical(aggInterval, name, dateRange, dateStart, dateEnd, asn, location, continent, ipVersion, httpVersion, httpMethod, mitigationProduct, normalization, limitPerGroup, format);
        // TODO: test validations
    }

    /**
     * Get Top Attack Pairs (origin and target locations) By Layer 7 Attacks
     *
     * Get the top attacks from origin to target location. Values are a percentage out of the total layer 7 attacks (with billing country). The attack magnitude can be defined by the number of mitigated requests or by the number of zones affected. You can optionally limit the number of attacks per origin/target location (useful if all the top attacks are from or to the same location).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer7TopAttacksTest() throws ApiException {
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        String limitDirection = null;
        Integer limitPerLocation = null;
        String magnitude = null;
        String format = null;
        RadarGetAttacksLayer7TopAttacks200Response response = api.radarGetAttacksLayer7TopAttacks(limit, name, dateRange, dateStart, dateEnd, asn, location, continent, limitDirection, limitPerLocation, magnitude, format);
        // TODO: test validations
    }

    /**
     * Get top Industry of attack
     *
     * Get the Industry of attacks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer7TopIndustriesTest() throws ApiException {
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        String format = null;
        RadarGetAttacksLayer3TopIndustries200Response response = api.radarGetAttacksLayer7TopIndustries(limit, name, dateRange, dateStart, dateEnd, asn, location, continent, format);
        // TODO: test validations
    }

    /**
     * Get Top Origin Autonomous Systems By Layer 7 Attacks
     *
     * Get the top origin Autonomous Systems of and by layer 7 attacks. Values are a percentage out of the total layer 7 attacks. The origin Autonomous Systems is determined by the client IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer7TopOriginAsTest() throws ApiException {
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> location = null;
        List<String> continent = null;
        String format = null;
        RadarGetAttacksLayer7TopOriginAs200Response response = api.radarGetAttacksLayer7TopOriginAs(limit, name, dateRange, dateStart, dateEnd, location, continent, format);
        // TODO: test validations
    }

    /**
     * Get Top Origin Locations By Layer 7 Attacks
     *
     * Get the top origin locations of and by layer 7 attacks. Values are a percentage out of the total layer 7 attacks. The origin location is determined by the client IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer7TopOriginLocationTest() throws ApiException {
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> continent = null;
        String format = null;
        RadarGetAttacksLayer3TopOriginLocations200Response response = api.radarGetAttacksLayer7TopOriginLocation(limit, name, dateRange, dateStart, dateEnd, asn, continent, format);
        // TODO: test validations
    }

    /**
     * Get layer 7 top target locations
     *
     * Get the top target locations of and by layer 7 attacks. Values are a percentage out of the total layer 7 attacks. The target location is determined by the attacked zone&#39;s billing country, when available.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer7TopTargetLocationTest() throws ApiException {
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> continent = null;
        String format = null;
        RadarGetAttacksLayer3TopTargetLocations200Response response = api.radarGetAttacksLayer7TopTargetLocation(limit, name, dateRange, dateStart, dateEnd, continent, format);
        // TODO: test validations
    }

    /**
     * Get top Verticals of attack
     *
     * Get the Verticals of attacks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetAttacksLayer7TopVerticalsTest() throws ApiException {
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> location = null;
        List<String> continent = null;
        String format = null;
        RadarGetAttacksLayer3TopVerticals200Response response = api.radarGetAttacksLayer7TopVerticals(limit, name, dateRange, dateStart, dateEnd, asn, location, continent, format);
        // TODO: test validations
    }

}
