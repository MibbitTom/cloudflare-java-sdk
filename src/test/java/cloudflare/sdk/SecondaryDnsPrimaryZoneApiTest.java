/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiException;
import cloudflare.sdk.models.SecondaryDnsDisableTransferResponse;
import cloudflare.sdk.models.SecondaryDnsEnableTransferResponse;
import cloudflare.sdk.models.SecondaryDnsIdResponse;
import cloudflare.sdk.models.SecondaryDnsPrimaryZoneDisableOutgoingZoneTransfers4XXResponse;
import cloudflare.sdk.models.SecondaryDnsPrimaryZoneEnableOutgoingZoneTransfers4XXResponse;
import cloudflare.sdk.models.SecondaryDnsPrimaryZoneForceDnsNotify4XXResponse;
import cloudflare.sdk.models.SecondaryDnsPrimaryZonePrimaryZoneConfigurationDetails4XXResponse;
import cloudflare.sdk.models.SecondaryDnsSchemasForceResponse;
import cloudflare.sdk.models.SecondaryDnsSecondaryZoneDeleteSecondaryZoneConfiguration4XXResponse;
import cloudflare.sdk.models.SecondaryDnsSingleRequestOutgoing;
import cloudflare.sdk.models.SecondaryDnsSingleResponseOutgoing;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SecondaryDnsPrimaryZoneApi
 */
@Disabled
public class SecondaryDnsPrimaryZoneApiTest {

    private final SecondaryDnsPrimaryZoneApi api = new SecondaryDnsPrimaryZoneApi();

    /**
     * Create Primary Zone Configuration
     *
     * Create primary zone configuration for outgoing zone transfers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void secondaryDnsPrimaryZoneCreatePrimaryZoneConfigurationTest() throws ApiException {
        Object zoneId = null;
        SecondaryDnsSingleRequestOutgoing secondaryDnsSingleRequestOutgoing = null;
        SecondaryDnsSingleResponseOutgoing response = api.secondaryDnsPrimaryZoneCreatePrimaryZoneConfiguration(zoneId, secondaryDnsSingleRequestOutgoing);
        // TODO: test validations
    }

    /**
     * Delete Primary Zone Configuration
     *
     * Delete primary zone configuration for outgoing zone transfers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void secondaryDnsPrimaryZoneDeletePrimaryZoneConfigurationTest() throws ApiException {
        Object zoneId = null;
        SecondaryDnsIdResponse response = api.secondaryDnsPrimaryZoneDeletePrimaryZoneConfiguration(zoneId);
        // TODO: test validations
    }

    /**
     * Disable Outgoing Zone Transfers
     *
     * Disable outgoing zone transfers for primary zone and clears IXFR backlog of primary zone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void secondaryDnsPrimaryZoneDisableOutgoingZoneTransfersTest() throws ApiException {
        Object zoneId = null;
        SecondaryDnsDisableTransferResponse response = api.secondaryDnsPrimaryZoneDisableOutgoingZoneTransfers(zoneId);
        // TODO: test validations
    }

    /**
     * Enable Outgoing Zone Transfers
     *
     * Enable outgoing zone transfers for primary zone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void secondaryDnsPrimaryZoneEnableOutgoingZoneTransfersTest() throws ApiException {
        Object zoneId = null;
        SecondaryDnsEnableTransferResponse response = api.secondaryDnsPrimaryZoneEnableOutgoingZoneTransfers(zoneId);
        // TODO: test validations
    }

    /**
     * Force DNS NOTIFY
     *
     * Notifies the secondary nameserver(s) and clears IXFR backlog of primary zone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void secondaryDnsPrimaryZoneForceDnsNotifyTest() throws ApiException {
        Object zoneId = null;
        SecondaryDnsSchemasForceResponse response = api.secondaryDnsPrimaryZoneForceDnsNotify(zoneId);
        // TODO: test validations
    }

    /**
     * Get Outgoing Zone Transfer Status
     *
     * Get primary zone transfer status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void secondaryDnsPrimaryZoneGetOutgoingZoneTransferStatusTest() throws ApiException {
        Object zoneId = null;
        SecondaryDnsEnableTransferResponse response = api.secondaryDnsPrimaryZoneGetOutgoingZoneTransferStatus(zoneId);
        // TODO: test validations
    }

    /**
     * Primary Zone Configuration Details
     *
     * Get primary zone configuration for outgoing zone transfers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void secondaryDnsPrimaryZonePrimaryZoneConfigurationDetailsTest() throws ApiException {
        Object zoneId = null;
        SecondaryDnsSingleResponseOutgoing response = api.secondaryDnsPrimaryZonePrimaryZoneConfigurationDetails(zoneId);
        // TODO: test validations
    }

    /**
     * Update Primary Zone Configuration
     *
     * Update primary zone configuration for outgoing zone transfers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void secondaryDnsPrimaryZoneUpdatePrimaryZoneConfigurationTest() throws ApiException {
        Object zoneId = null;
        SecondaryDnsSingleRequestOutgoing secondaryDnsSingleRequestOutgoing = null;
        SecondaryDnsSingleResponseOutgoing response = api.secondaryDnsPrimaryZoneUpdatePrimaryZoneConfiguration(zoneId, secondaryDnsSingleRequestOutgoing);
        // TODO: test validations
    }

}
