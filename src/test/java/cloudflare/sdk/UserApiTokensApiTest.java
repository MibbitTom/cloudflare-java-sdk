/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiException;
import cloudflare.sdk.models.AccountMembersRemoveMember4XXResponse;
import cloudflare.sdk.models.AccountsAccountDetails4XXResponse;
import cloudflare.sdk.models.AccountsListAccounts4XXResponse;
import java.math.BigDecimal;
import cloudflare.sdk.models.IamApiResponseSingleId;
import cloudflare.sdk.models.IamCreatePayload;
import cloudflare.sdk.models.IamResponseCollection;
import cloudflare.sdk.models.IamResponseCreate;
import cloudflare.sdk.models.IamResponseSingle;
import cloudflare.sdk.models.IamResponseSingleSegment;
import cloudflare.sdk.models.IamResponseSingleValue;
import cloudflare.sdk.models.IamSchemasToken;
import cloudflare.sdk.models.UserApiTokensCreateToken4XXResponse;
import cloudflare.sdk.models.UserApiTokensRollToken4XXResponse;
import cloudflare.sdk.models.UserApiTokensVerifyToken4XXResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApiTokensApi
 */
@Disabled
public class UserApiTokensApiTest {

    private final UserApiTokensApi api = new UserApiTokensApi();

    /**
     * Create Token
     *
     * Create a new access token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userApiTokensCreateTokenTest() throws ApiException {
        IamCreatePayload iamCreatePayload = null;
        IamResponseCreate response = api.userApiTokensCreateToken(iamCreatePayload);
        // TODO: test validations
    }

    /**
     * Delete Token
     *
     * Destroy a token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userApiTokensDeleteTokenTest() throws ApiException {
        Object tokenId = null;
        IamApiResponseSingleId response = api.userApiTokensDeleteToken(tokenId);
        // TODO: test validations
    }

    /**
     * List Tokens
     *
     * List all access tokens you created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userApiTokensListTokensTest() throws ApiException {
        BigDecimal page = null;
        BigDecimal perPage = null;
        String direction = null;
        IamResponseCollection response = api.userApiTokensListTokens(page, perPage, direction);
        // TODO: test validations
    }

    /**
     * Roll Token
     *
     * Roll the token secret.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userApiTokensRollTokenTest() throws ApiException {
        Object tokenId = null;
        Object body = null;
        IamResponseSingleValue response = api.userApiTokensRollToken(tokenId, body);
        // TODO: test validations
    }

    /**
     * Token Details
     *
     * Get information about a specific token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userApiTokensTokenDetailsTest() throws ApiException {
        Object tokenId = null;
        IamResponseSingle response = api.userApiTokensTokenDetails(tokenId);
        // TODO: test validations
    }

    /**
     * Update Token
     *
     * Update an existing token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userApiTokensUpdateTokenTest() throws ApiException {
        Object tokenId = null;
        IamSchemasToken iamSchemasToken = null;
        IamResponseSingle response = api.userApiTokensUpdateToken(tokenId, iamSchemasToken);
        // TODO: test validations
    }

    /**
     * Verify Token
     *
     * Test whether a token works.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userApiTokensVerifyTokenTest() throws ApiException {
        IamResponseSingleSegment response = api.userApiTokensVerifyToken();
        // TODO: test validations
    }

}
