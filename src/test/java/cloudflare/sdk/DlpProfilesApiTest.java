/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiException;
import cloudflare.sdk.models.DlpApiResponseSingle;
import cloudflare.sdk.models.DlpCreateCustomProfileResponse;
import cloudflare.sdk.models.DlpCreateCustomProfiles;
import cloudflare.sdk.models.DlpCustomProfile;
import cloudflare.sdk.models.DlpCustomProfileResponse;
import cloudflare.sdk.models.DlpEitherProfileResponse;
import cloudflare.sdk.models.DlpPredefinedProfile;
import cloudflare.sdk.models.DlpPredefinedProfileResponse;
import cloudflare.sdk.models.DlpProfileId;
import cloudflare.sdk.models.DlpProfilesCreateCustomProfiles4XXResponse;
import cloudflare.sdk.models.DlpProfilesDeleteCustomProfile4XXResponse;
import cloudflare.sdk.models.DlpProfilesGetCustomProfile4XXResponse;
import cloudflare.sdk.models.DlpProfilesGetDlpProfile4XXResponse;
import cloudflare.sdk.models.DlpProfilesGetPredefinedProfile4XXResponse;
import cloudflare.sdk.models.DlpProfilesListAllProfiles4XXResponse;
import cloudflare.sdk.models.DlpProfilesUpdateCustomProfile4XXResponse;
import cloudflare.sdk.models.DlpProfilesUpdatePredefinedProfile4XXResponse;
import cloudflare.sdk.models.DlpResponseCollection;
import cloudflare.sdk.models.DlpUpdateCustomProfile;
import cloudflare.sdk.models.DlpUpdatePredefinedProfile;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DlpProfilesApi
 */
@Disabled
public class DlpProfilesApiTest {

    private final DlpProfilesApi api = new DlpProfilesApi();

    /**
     * Create custom profiles
     *
     * Creates a set of DLP custom profiles.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpProfilesCreateCustomProfilesTest() throws ApiException {
        String accountId = null;
        DlpCreateCustomProfiles dlpCreateCustomProfiles = null;
        DlpCreateCustomProfileResponse response = api.dlpProfilesCreateCustomProfiles(accountId, dlpCreateCustomProfiles);
        // TODO: test validations
    }

    /**
     * Delete custom profile
     *
     * Deletes a DLP custom profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpProfilesDeleteCustomProfileTest() throws ApiException {
        DlpProfileId profileId = null;
        String accountId = null;
        DlpApiResponseSingle response = api.dlpProfilesDeleteCustomProfile(profileId, accountId);
        // TODO: test validations
    }

    /**
     * Get custom profile
     *
     * Fetches a custom DLP profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpProfilesGetCustomProfileTest() throws ApiException {
        DlpProfileId profileId = null;
        String accountId = null;
        DlpCustomProfileResponse response = api.dlpProfilesGetCustomProfile(profileId, accountId);
        // TODO: test validations
    }

    /**
     * Get DLP Profile
     *
     * Fetches a DLP profile by ID. Supports both predefined and custom profiles
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpProfilesGetDlpProfileTest() throws ApiException {
        DlpProfileId profileId = null;
        String accountId = null;
        DlpEitherProfileResponse response = api.dlpProfilesGetDlpProfile(profileId, accountId);
        // TODO: test validations
    }

    /**
     * Get predefined profile
     *
     * Fetches a predefined DLP profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpProfilesGetPredefinedProfileTest() throws ApiException {
        DlpProfileId profileId = null;
        String accountId = null;
        DlpPredefinedProfileResponse response = api.dlpProfilesGetPredefinedProfile(profileId, accountId);
        // TODO: test validations
    }

    /**
     * List all profiles
     *
     * Lists all DLP profiles in an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpProfilesListAllProfilesTest() throws ApiException {
        String accountId = null;
        DlpResponseCollection response = api.dlpProfilesListAllProfiles(accountId);
        // TODO: test validations
    }

    /**
     * Update custom profile
     *
     * Updates a DLP custom profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpProfilesUpdateCustomProfileTest() throws ApiException {
        DlpProfileId profileId = null;
        String accountId = null;
        DlpUpdateCustomProfile dlpUpdateCustomProfile = null;
        DlpCustomProfile response = api.dlpProfilesUpdateCustomProfile(profileId, accountId, dlpUpdateCustomProfile);
        // TODO: test validations
    }

    /**
     * Update predefined profile
     *
     * Updates a DLP predefined profile. Only supports enabling/disabling entries.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dlpProfilesUpdatePredefinedProfileTest() throws ApiException {
        DlpProfileId profileId = null;
        String accountId = null;
        DlpUpdatePredefinedProfile dlpUpdatePredefinedProfile = null;
        DlpPredefinedProfile response = api.dlpProfilesUpdatePredefinedProfile(profileId, accountId, dlpUpdatePredefinedProfile);
        // TODO: test validations
    }

}
