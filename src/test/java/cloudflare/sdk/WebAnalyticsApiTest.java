/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiException;
import java.math.BigDecimal;
import cloudflare.sdk.models.RumApiResponseCommonFailure;
import cloudflare.sdk.models.RumCreateRuleRequest;
import cloudflare.sdk.models.RumCreateSiteRequest;
import cloudflare.sdk.models.RumModifyRulesRequest;
import cloudflare.sdk.models.RumOrderBy;
import cloudflare.sdk.models.RumRuleIdResponseSingle;
import cloudflare.sdk.models.RumRuleResponseSingle;
import cloudflare.sdk.models.RumRulesResponseCollection;
import cloudflare.sdk.models.RumSiteResponseSingle;
import cloudflare.sdk.models.RumSiteTagResponseSingle;
import cloudflare.sdk.models.RumSitesResponseCollection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WebAnalyticsApi
 */
@Disabled
public class WebAnalyticsApiTest {

    private final WebAnalyticsApi api = new WebAnalyticsApi();

    /**
     * Create a Web Analytics rule
     *
     * Creates a new rule in a Web Analytics ruleset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAnalyticsCreateRuleTest() throws ApiException {
        String accountId = null;
        String rulesetId = null;
        RumCreateRuleRequest rumCreateRuleRequest = null;
        RumRuleResponseSingle response = api.webAnalyticsCreateRule(accountId, rulesetId, rumCreateRuleRequest);
        // TODO: test validations
    }

    /**
     * Create a Web Analytics site
     *
     * Creates a new Web Analytics site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAnalyticsCreateSiteTest() throws ApiException {
        String accountId = null;
        RumCreateSiteRequest rumCreateSiteRequest = null;
        RumSiteResponseSingle response = api.webAnalyticsCreateSite(accountId, rumCreateSiteRequest);
        // TODO: test validations
    }

    /**
     * Delete a Web Analytics rule
     *
     * Deletes an existing rule from a Web Analytics ruleset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAnalyticsDeleteRuleTest() throws ApiException {
        String accountId = null;
        String rulesetId = null;
        String ruleId = null;
        RumRuleIdResponseSingle response = api.webAnalyticsDeleteRule(accountId, rulesetId, ruleId);
        // TODO: test validations
    }

    /**
     * Delete a Web Analytics site
     *
     * Deletes an existing Web Analytics site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAnalyticsDeleteSiteTest() throws ApiException {
        String accountId = null;
        String siteId = null;
        RumSiteTagResponseSingle response = api.webAnalyticsDeleteSite(accountId, siteId);
        // TODO: test validations
    }

    /**
     * Get a Web Analytics site
     *
     * Retrieves a Web Analytics site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAnalyticsGetSiteTest() throws ApiException {
        String accountId = null;
        String siteId = null;
        RumSiteResponseSingle response = api.webAnalyticsGetSite(accountId, siteId);
        // TODO: test validations
    }

    /**
     * List rules in Web Analytics ruleset
     *
     * Lists all the rules in a Web Analytics ruleset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAnalyticsListRulesTest() throws ApiException {
        String accountId = null;
        String rulesetId = null;
        RumRulesResponseCollection response = api.webAnalyticsListRules(accountId, rulesetId);
        // TODO: test validations
    }

    /**
     * List Web Analytics sites
     *
     * Lists all Web Analytics sites of an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAnalyticsListSitesTest() throws ApiException {
        String accountId = null;
        BigDecimal perPage = null;
        BigDecimal page = null;
        RumOrderBy orderBy = null;
        RumSitesResponseCollection response = api.webAnalyticsListSites(accountId, perPage, page, orderBy);
        // TODO: test validations
    }

    /**
     * Update Web Analytics rules
     *
     * Modifies one or more rules in a Web Analytics ruleset with a single request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAnalyticsModifyRulesTest() throws ApiException {
        String accountId = null;
        String rulesetId = null;
        RumModifyRulesRequest rumModifyRulesRequest = null;
        RumRulesResponseCollection response = api.webAnalyticsModifyRules(accountId, rulesetId, rumModifyRulesRequest);
        // TODO: test validations
    }

    /**
     * Update a Web Analytics rule
     *
     * Updates a rule in a Web Analytics ruleset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAnalyticsUpdateRuleTest() throws ApiException {
        String accountId = null;
        String rulesetId = null;
        String ruleId = null;
        RumCreateRuleRequest rumCreateRuleRequest = null;
        RumRuleResponseSingle response = api.webAnalyticsUpdateRule(accountId, rulesetId, ruleId, rumCreateRuleRequest);
        // TODO: test validations
    }

    /**
     * Update a Web Analytics site
     *
     * Updates an existing Web Analytics site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webAnalyticsUpdateSiteTest() throws ApiException {
        String accountId = null;
        String siteId = null;
        RumCreateSiteRequest rumCreateSiteRequest = null;
        RumSiteResponseSingle response = api.webAnalyticsUpdateSite(accountId, siteId, rumCreateSiteRequest);
        // TODO: test validations
    }

}
