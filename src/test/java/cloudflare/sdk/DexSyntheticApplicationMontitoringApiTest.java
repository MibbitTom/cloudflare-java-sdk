/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare.sdk;

import cloudflare.ApiException;
import java.math.BigDecimal;
import cloudflare.sdk.models.DexEndpointsHttpTestDetails200Response;
import cloudflare.sdk.models.DexEndpointsHttpTestPercentiles200Response;
import cloudflare.sdk.models.DexEndpointsListColos200Response;
import cloudflare.sdk.models.DexEndpointsListTests200Response;
import cloudflare.sdk.models.DexEndpointsTestsUniqueDevices200Response;
import cloudflare.sdk.models.DexEndpointsTracerouteTestDetails200Response;
import cloudflare.sdk.models.DexEndpointsTracerouteTestNetworkPath200Response;
import cloudflare.sdk.models.DexEndpointsTracerouteTestPercentiles200Response;
import cloudflare.sdk.models.DexEndpointsTracerouteTestResultNetworkPath200Response;
import cloudflare.sdk.models.DexFleetStatusDevices4xxResponse;
import cloudflare.sdk.models.DigitalExperienceMonitoringApiResponseCommonFailure;
import cloudflare.sdk.models.DigitalExperienceMonitoringFleetStatusDevicesResponse;
import cloudflare.sdk.models.DigitalExperienceMonitoringFleetStatusLiveResponse;
import cloudflare.sdk.models.DigitalExperienceMonitoringSortBy;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DexSyntheticApplicationMontitoringApi
 */
@Disabled
public class DexSyntheticApplicationMontitoringApiTest {

    private final DexSyntheticApplicationMontitoringApi api = new DexSyntheticApplicationMontitoringApi();

    /**
     * Get details and aggregate metrics for an http test
     *
     * Get test details and aggregate performance metrics for an http test for a given time period between 1 hour and 7 days.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dexEndpointsHttpTestDetailsTest() throws ApiException {
        String accountId = null;
        String testId = null;
        String timeStart = null;
        String timeEnd = null;
        String interval = null;
        List<String> deviceId = null;
        String colo = null;
        DexEndpointsHttpTestDetails200Response response = api.dexEndpointsHttpTestDetails(accountId, testId, timeStart, timeEnd, interval, deviceId, colo);
        // TODO: test validations
    }

    /**
     * Get percentiles for an http test
     *
     * Get percentiles for an http test for a given time period between 1 hour and 7 days.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dexEndpointsHttpTestPercentilesTest() throws ApiException {
        String accountId = null;
        String testId = null;
        String timeStart = null;
        String timeEnd = null;
        List<String> deviceId = null;
        String colo = null;
        DexEndpointsHttpTestPercentiles200Response response = api.dexEndpointsHttpTestPercentiles(accountId, testId, timeStart, timeEnd, deviceId, colo);
        // TODO: test validations
    }

    /**
     * List Cloudflare colos
     *
     * List Cloudflare colos that account&#39;s devices were connected to during a time period, sorted by usage starting from the most used colo. Colos without traffic are also returned and sorted alphabetically.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dexEndpointsListColosTest() throws ApiException {
        String accountId = null;
        String timeStart = null;
        String timeEnd = null;
        String sortBy = null;
        DexEndpointsListColos200Response response = api.dexEndpointsListColos(accountId, timeStart, timeEnd, sortBy);
        // TODO: test validations
    }

    /**
     * List DEX test analytics
     *
     * List DEX tests
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dexEndpointsListTestsTest() throws ApiException {
        String accountId = null;
        String colo = null;
        String testName = null;
        List<String> deviceId = null;
        BigDecimal page = null;
        BigDecimal perPage = null;
        DexEndpointsListTests200Response response = api.dexEndpointsListTests(accountId, colo, testName, deviceId, page, perPage);
        // TODO: test validations
    }

    /**
     * Get count of devices targeted
     *
     * Returns unique count of devices that have run synthetic application monitoring tests in the past 7 days.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dexEndpointsTestsUniqueDevicesTest() throws ApiException {
        String accountId = null;
        String testName = null;
        List<String> deviceId = null;
        DexEndpointsTestsUniqueDevices200Response response = api.dexEndpointsTestsUniqueDevices(accountId, testName, deviceId);
        // TODO: test validations
    }

    /**
     * Get details and aggregate metrics for a traceroute test
     *
     * Get test details and aggregate performance metrics for an traceroute test for a given time period between 1 hour and 7 days.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dexEndpointsTracerouteTestDetailsTest() throws ApiException {
        String accountId = null;
        String testId = null;
        String timeStart = null;
        String timeEnd = null;
        String interval = null;
        List<String> deviceId = null;
        String colo = null;
        DexEndpointsTracerouteTestDetails200Response response = api.dexEndpointsTracerouteTestDetails(accountId, testId, timeStart, timeEnd, interval, deviceId, colo);
        // TODO: test validations
    }

    /**
     * Get network path breakdown for a traceroute test
     *
     * Get a breakdown of metrics by hop for individual traceroute test runs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dexEndpointsTracerouteTestNetworkPathTest() throws ApiException {
        String accountId = null;
        String testId = null;
        String deviceId = null;
        String timeStart = null;
        String timeEnd = null;
        String interval = null;
        DexEndpointsTracerouteTestNetworkPath200Response response = api.dexEndpointsTracerouteTestNetworkPath(accountId, testId, deviceId, timeStart, timeEnd, interval);
        // TODO: test validations
    }

    /**
     * Get percentiles for a traceroute test
     *
     * Get percentiles for a traceroute test for a given time period between 1 hour and 7 days.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dexEndpointsTracerouteTestPercentilesTest() throws ApiException {
        String accountId = null;
        String testId = null;
        String timeStart = null;
        String timeEnd = null;
        List<String> deviceId = null;
        String colo = null;
        DexEndpointsTracerouteTestPercentiles200Response response = api.dexEndpointsTracerouteTestPercentiles(accountId, testId, timeStart, timeEnd, deviceId, colo);
        // TODO: test validations
    }

    /**
     * Get details for a specific traceroute test run
     *
     * Get a breakdown of hops and performance metrics for a specific traceroute test run
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dexEndpointsTracerouteTestResultNetworkPathTest() throws ApiException {
        String accountId = null;
        String testResultId = null;
        DexEndpointsTracerouteTestResultNetworkPath200Response response = api.dexEndpointsTracerouteTestResultNetworkPath(accountId, testResultId);
        // TODO: test validations
    }

    /**
     * List fleet status devices
     *
     * List details for devices using WARP
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dexFleetStatusDevicesTest() throws ApiException {
        String accountId = null;
        String timeEnd = null;
        String timeStart = null;
        BigDecimal page = null;
        BigDecimal perPage = null;
        DigitalExperienceMonitoringSortBy sortBy = null;
        String colo = null;
        String deviceId = null;
        String mode = null;
        String status = null;
        String platform = null;
        String version = null;
        DigitalExperienceMonitoringFleetStatusDevicesResponse response = api.dexFleetStatusDevices(accountId, timeEnd, timeStart, page, perPage, sortBy, colo, deviceId, mode, status, platform, version);
        // TODO: test validations
    }

    /**
     * List fleet status details by dimension
     *
     * List details for live (up to 60 minutes) devices using WARP
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dexFleetStatusLiveTest() throws ApiException {
        String accountId = null;
        BigDecimal sinceMinutes = null;
        DigitalExperienceMonitoringFleetStatusLiveResponse response = api.dexFleetStatusLive(accountId, sinceMinutes);
        // TODO: test validations
    }

    /**
     * List fleet status aggregate details by dimension
     *
     * List details for devices using WARP, up to 7 days
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dexFleetStatusOverTimeTest() throws ApiException {
        String accountId = null;
        String timeEnd = null;
        String timeStart = null;
        String colo = null;
        String deviceId = null;
        api.dexFleetStatusOverTime(accountId, timeEnd, timeStart, colo, deviceId);
        // TODO: test validations
    }

}
