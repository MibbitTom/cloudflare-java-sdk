/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiException;
import org.openapitools.client.model.AccountLoadBalancerMonitorsCreateMonitor4XXResponse;
import org.openapitools.client.model.AccountLoadBalancerMonitorsCreateMonitorRequest;
import org.openapitools.client.model.AccountLoadBalancerMonitorsDeleteMonitor4XXResponse;
import org.openapitools.client.model.AccountLoadBalancerMonitorsListMonitorReferences4XXResponse;
import org.openapitools.client.model.AccountLoadBalancerMonitorsListMonitors4XXResponse;
import org.openapitools.client.model.AccountLoadBalancerMonitorsPreviewMonitor4XXResponse;
import org.openapitools.client.model.AccountLoadBalancerMonitorsPreviewResult4XXResponse;
import org.openapitools.client.model.LoadBalancingIdResponse;
import org.openapitools.client.model.LoadBalancingMonitorResponseCollection;
import org.openapitools.client.model.LoadBalancingMonitorResponseSingle;
import org.openapitools.client.model.LoadBalancingPreviewResponse;
import org.openapitools.client.model.LoadBalancingPreviewResultResponse;
import org.openapitools.client.model.LoadBalancingReferencesResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountLoadBalancerMonitorsApi
 */
@Disabled
public class AccountLoadBalancerMonitorsApiTest {

    private final AccountLoadBalancerMonitorsApi api = new AccountLoadBalancerMonitorsApi();

    /**
     * Create Monitor
     *
     * Create a configured monitor.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountLoadBalancerMonitorsCreateMonitorTest() throws ApiException {
        String accountId = null;
        AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest = null;
        LoadBalancingMonitorResponseSingle response = api.accountLoadBalancerMonitorsCreateMonitor(accountId, accountLoadBalancerMonitorsCreateMonitorRequest);
        // TODO: test validations
    }

    /**
     * Delete Monitor
     *
     * Delete a configured monitor.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountLoadBalancerMonitorsDeleteMonitorTest() throws ApiException {
        String monitorId = null;
        String accountId = null;
        LoadBalancingIdResponse response = api.accountLoadBalancerMonitorsDeleteMonitor(monitorId, accountId);
        // TODO: test validations
    }

    /**
     * List Monitor References
     *
     * Get the list of resources that reference the provided monitor.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountLoadBalancerMonitorsListMonitorReferencesTest() throws ApiException {
        String monitorId = null;
        String accountId = null;
        LoadBalancingReferencesResponse response = api.accountLoadBalancerMonitorsListMonitorReferences(monitorId, accountId);
        // TODO: test validations
    }

    /**
     * List Monitors
     *
     * List configured monitors for an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountLoadBalancerMonitorsListMonitorsTest() throws ApiException {
        String accountId = null;
        LoadBalancingMonitorResponseCollection response = api.accountLoadBalancerMonitorsListMonitors(accountId);
        // TODO: test validations
    }

    /**
     * Monitor Details
     *
     * List a single configured monitor for an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountLoadBalancerMonitorsMonitorDetailsTest() throws ApiException {
        String monitorId = null;
        String accountId = null;
        LoadBalancingMonitorResponseSingle response = api.accountLoadBalancerMonitorsMonitorDetails(monitorId, accountId);
        // TODO: test validations
    }

    /**
     * Patch Monitor
     *
     * Apply changes to an existing monitor, overwriting the supplied properties.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountLoadBalancerMonitorsPatchMonitorTest() throws ApiException {
        String monitorId = null;
        String accountId = null;
        AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest = null;
        LoadBalancingMonitorResponseSingle response = api.accountLoadBalancerMonitorsPatchMonitor(monitorId, accountId, accountLoadBalancerMonitorsCreateMonitorRequest);
        // TODO: test validations
    }

    /**
     * Preview Monitor
     *
     * Preview pools using the specified monitor with provided monitor details. The returned preview_id can be used in the preview endpoint to retrieve the results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountLoadBalancerMonitorsPreviewMonitorTest() throws ApiException {
        String monitorId = null;
        String accountId = null;
        AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest = null;
        LoadBalancingPreviewResponse response = api.accountLoadBalancerMonitorsPreviewMonitor(monitorId, accountId, accountLoadBalancerMonitorsCreateMonitorRequest);
        // TODO: test validations
    }

    /**
     * Preview Result
     *
     * Get the result of a previous preview operation using the provided preview_id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountLoadBalancerMonitorsPreviewResultTest() throws ApiException {
        Object previewId = null;
        String accountId = null;
        LoadBalancingPreviewResultResponse response = api.accountLoadBalancerMonitorsPreviewResult(previewId, accountId);
        // TODO: test validations
    }

    /**
     * Update Monitor
     *
     * Modify a configured monitor.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountLoadBalancerMonitorsUpdateMonitorTest() throws ApiException {
        String monitorId = null;
        String accountId = null;
        AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest = null;
        LoadBalancingMonitorResponseSingle response = api.accountLoadBalancerMonitorsUpdateMonitor(monitorId, accountId, accountLoadBalancerMonitorsCreateMonitorRequest);
        // TODO: test validations
    }

}
