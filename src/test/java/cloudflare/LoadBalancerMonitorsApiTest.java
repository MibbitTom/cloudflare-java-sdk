/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiException;
import org.openapitools.client.model.AccountLoadBalancerMonitorsCreateMonitor4XXResponse;
import org.openapitools.client.model.AccountLoadBalancerMonitorsCreateMonitorRequest;
import org.openapitools.client.model.AccountLoadBalancerMonitorsDeleteMonitor4XXResponse;
import org.openapitools.client.model.AccountLoadBalancerMonitorsListMonitorReferences4XXResponse;
import org.openapitools.client.model.AccountLoadBalancerMonitorsListMonitors4XXResponse;
import org.openapitools.client.model.AccountLoadBalancerMonitorsPreviewMonitor4XXResponse;
import org.openapitools.client.model.AccountLoadBalancerMonitorsPreviewResult4XXResponse;
import org.openapitools.client.model.LoadBalancingIdResponse;
import org.openapitools.client.model.LoadBalancingMonitorResponseCollection;
import org.openapitools.client.model.LoadBalancingMonitorResponseSingle;
import org.openapitools.client.model.LoadBalancingPreviewResponse;
import org.openapitools.client.model.LoadBalancingPreviewResultResponse;
import org.openapitools.client.model.LoadBalancingReferencesResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LoadBalancerMonitorsApi
 */
@Disabled
public class LoadBalancerMonitorsApiTest {

    private final LoadBalancerMonitorsApi api = new LoadBalancerMonitorsApi();

    /**
     * Create Monitor
     *
     * Create a configured monitor.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loadBalancerMonitorsCreateMonitorTest() throws ApiException {
        AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest = null;
        LoadBalancingMonitorResponseSingle response = api.loadBalancerMonitorsCreateMonitor(accountLoadBalancerMonitorsCreateMonitorRequest);
        // TODO: test validations
    }

    /**
     * Delete Monitor
     *
     * Delete a configured monitor.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loadBalancerMonitorsDeleteMonitorTest() throws ApiException {
        String monitorId = null;
        LoadBalancingIdResponse response = api.loadBalancerMonitorsDeleteMonitor(monitorId);
        // TODO: test validations
    }

    /**
     * List Monitor References
     *
     * Get the list of resources that reference the provided monitor.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loadBalancerMonitorsListMonitorReferencesTest() throws ApiException {
        String monitorId = null;
        LoadBalancingReferencesResponse response = api.loadBalancerMonitorsListMonitorReferences(monitorId);
        // TODO: test validations
    }

    /**
     * List Monitors
     *
     * List configured monitors for a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loadBalancerMonitorsListMonitorsTest() throws ApiException {
        LoadBalancingMonitorResponseCollection response = api.loadBalancerMonitorsListMonitors();
        // TODO: test validations
    }

    /**
     * Monitor Details
     *
     * List a single configured monitor for a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loadBalancerMonitorsMonitorDetailsTest() throws ApiException {
        String monitorId = null;
        LoadBalancingMonitorResponseSingle response = api.loadBalancerMonitorsMonitorDetails(monitorId);
        // TODO: test validations
    }

    /**
     * Patch Monitor
     *
     * Apply changes to an existing monitor, overwriting the supplied properties.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loadBalancerMonitorsPatchMonitorTest() throws ApiException {
        String monitorId = null;
        AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest = null;
        LoadBalancingMonitorResponseSingle response = api.loadBalancerMonitorsPatchMonitor(monitorId, accountLoadBalancerMonitorsCreateMonitorRequest);
        // TODO: test validations
    }

    /**
     * Preview Monitor
     *
     * Preview pools using the specified monitor with provided monitor details. The returned preview_id can be used in the preview endpoint to retrieve the results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loadBalancerMonitorsPreviewMonitorTest() throws ApiException {
        String monitorId = null;
        AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest = null;
        LoadBalancingPreviewResponse response = api.loadBalancerMonitorsPreviewMonitor(monitorId, accountLoadBalancerMonitorsCreateMonitorRequest);
        // TODO: test validations
    }

    /**
     * Preview Result
     *
     * Get the result of a previous preview operation using the provided preview_id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loadBalancerMonitorsPreviewResultTest() throws ApiException {
        Object previewId = null;
        LoadBalancingPreviewResultResponse response = api.loadBalancerMonitorsPreviewResult(previewId);
        // TODO: test validations
    }

    /**
     * Update Monitor
     *
     * Modify a configured monitor.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loadBalancerMonitorsUpdateMonitorTest() throws ApiException {
        String monitorId = null;
        AccountLoadBalancerMonitorsCreateMonitorRequest accountLoadBalancerMonitorsCreateMonitorRequest = null;
        LoadBalancingMonitorResponseSingle response = api.loadBalancerMonitorsUpdateMonitor(monitorId, accountLoadBalancerMonitorsCreateMonitorRequest);
        // TODO: test validations
    }

}
