/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.R2CreateBucket200Response;
import org.openapitools.client.model.R2CreateBucketRequest;
import org.openapitools.client.model.R2DeleteBucketSippyConfig200Response;
import org.openapitools.client.model.R2GetBucketSippyConfig200Response;
import org.openapitools.client.model.R2ListBuckets200Response;
import org.openapitools.client.model.R2PutBucketSippyConfigRequest;
import org.openapitools.client.model.R2V4Response;
import org.openapitools.client.model.R2V4ResponseFailure;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for R2BucketApi
 */
@Disabled
public class R2BucketApiTest {

    private final R2BucketApi api = new R2BucketApi();

    /**
     * Create Bucket
     *
     * Creates a new R2 bucket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void r2CreateBucketTest() throws ApiException {
        String accountId = null;
        R2CreateBucketRequest r2CreateBucketRequest = null;
        R2CreateBucket200Response response = api.r2CreateBucket(accountId, r2CreateBucketRequest);
        // TODO: test validations
    }

    /**
     * Delete Bucket
     *
     * Deletes an existing R2 bucket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void r2DeleteBucketTest() throws ApiException {
        String bucketName = null;
        String accountId = null;
        R2V4Response response = api.r2DeleteBucket(bucketName, accountId);
        // TODO: test validations
    }

    /**
     * Disable Sippy
     *
     * Disables Sippy on this bucket
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void r2DeleteBucketSippyConfigTest() throws ApiException {
        String bucketName = null;
        String accountId = null;
        R2DeleteBucketSippyConfig200Response response = api.r2DeleteBucketSippyConfig(bucketName, accountId);
        // TODO: test validations
    }

    /**
     * Get Bucket
     *
     * Gets metadata for an existing R2 bucket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void r2GetBucketTest() throws ApiException {
        String accountId = null;
        String bucketName = null;
        R2CreateBucket200Response response = api.r2GetBucket(accountId, bucketName);
        // TODO: test validations
    }

    /**
     * Get Sippy Configuration
     *
     * Gets configuration for Sippy for an existing R2 bucket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void r2GetBucketSippyConfigTest() throws ApiException {
        String accountId = null;
        String bucketName = null;
        R2GetBucketSippyConfig200Response response = api.r2GetBucketSippyConfig(accountId, bucketName);
        // TODO: test validations
    }

    /**
     * List Buckets
     *
     * Lists all R2 buckets on your account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void r2ListBucketsTest() throws ApiException {
        String accountId = null;
        String nameContains = null;
        String startAfter = null;
        BigDecimal perPage = null;
        String order = null;
        String direction = null;
        String cursor = null;
        R2ListBuckets200Response response = api.r2ListBuckets(accountId, nameContains, startAfter, perPage, order, direction, cursor);
        // TODO: test validations
    }

    /**
     * Enable Sippy
     *
     * Sets configuration for Sippy for an existing R2 bucket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void r2PutBucketSippyConfigTest() throws ApiException {
        String accountId = null;
        String bucketName = null;
        R2PutBucketSippyConfigRequest r2PutBucketSippyConfigRequest = null;
        R2GetBucketSippyConfig200Response response = api.r2PutBucketSippyConfig(accountId, bucketName, r2PutBucketSippyConfigRequest);
        // TODO: test validations
    }

}
