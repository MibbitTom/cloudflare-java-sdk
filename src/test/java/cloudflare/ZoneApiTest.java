/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.CachePurgeApiResponseSingleId;
import org.openapitools.client.model.PutZonesZoneIdActivationCheck200Response;
import org.openapitools.client.model.ZoneActivationApiResponseCommonFailure;
import org.openapitools.client.model.ZonePurge4xxResponse;
import org.openapitools.client.model.ZonePurgeRequest;
import org.openapitools.client.model.Zones0PatchRequest;
import org.openapitools.client.model.ZonesApiResponseCommonFailure;
import org.openapitools.client.model.ZonesApiResponseSingleId;
import org.openapitools.client.model.ZonesGet200Response;
import org.openapitools.client.model.ZonesPost200Response;
import org.openapitools.client.model.ZonesPostRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ZoneApi
 */
@Disabled
public class ZoneApiTest {

    private final ZoneApi api = new ZoneApi();

    /**
     * Rerun the Activation Check
     *
     * Triggeres a new activation check for a PENDING Zone. This can be triggered every 5 min for paygo/ent customers, every hour for FREE Zones.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putZonesZoneIdActivationCheckTest() throws ApiException {
        String zoneId = null;
        PutZonesZoneIdActivationCheck200Response response = api.putZonesZoneIdActivationCheck(zoneId);
        // TODO: test validations
    }

    /**
     * Purge Cached Content
     *
     * ### Purge All Cached Content Removes ALL files from Cloudflare&#39;s cache. All tiers can purge everything.  ### Purge Cached Content by URL Granularly removes one or more files from Cloudflare&#39;s cache by specifying URLs. All tiers can purge by URL.  To purge files with custom cache keys, include the headers used to compute the cache key as in the example. If you have a device type or geo in your cache key, you will need to include the CF-Device-Type or CF-IPCountry headers. If you have lang in your cache key, you will need to include the Accept-Language header.  **NB:** When including the Origin header, be sure to include the **scheme** and **hostname**. The port number can be omitted if it is the default port (80 for http, 443 for https), but must be included otherwise. **NB:** For Zones on Free/Pro/Business plan, you may purge up to 30 URLs in one API call. For Zones on Enterprise plan, you may purge up to 500 URLs in one API call.  ### Purge Cached Content by Tag, Host or Prefix Granularly removes one or more files from Cloudflare&#39;s cache either by specifying the host, the associated Cache-Tag, or a Prefix. Only Enterprise customers are permitted to purge by Tag, Host or Prefix.  **NB:** Cache-Tag, host, and prefix purging each have a rate limit of 30,000 purge API calls in every 24 hour period. You may purge up to 30 tags, hosts, or prefixes in one API call. This rate limit can be raised for customers who need to purge at higher volume. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zonePurgeTest() throws ApiException {
        String zoneId = null;
        ZonePurgeRequest zonePurgeRequest = null;
        CachePurgeApiResponseSingleId response = api.zonePurge(zoneId, zonePurgeRequest);
        // TODO: test validations
    }

    /**
     * Delete Zone
     *
     * Deletes an existing zone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zones0DeleteTest() throws ApiException {
        String zoneId = null;
        ZonesApiResponseSingleId response = api.zones0Delete(zoneId);
        // TODO: test validations
    }

    /**
     * Zone Details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zones0GetTest() throws ApiException {
        String zoneId = null;
        ZonesPost200Response response = api.zones0Get(zoneId);
        // TODO: test validations
    }

    /**
     * Edit Zone
     *
     * Edits a zone. Only one zone property can be changed at a time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zones0PatchTest() throws ApiException {
        String zoneId = null;
        Zones0PatchRequest zones0PatchRequest = null;
        ZonesPost200Response response = api.zones0Patch(zoneId, zones0PatchRequest);
        // TODO: test validations
    }

    /**
     * List Zones
     *
     * Lists, searches, sorts, and filters your zones.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zonesGetTest() throws ApiException {
        String name = null;
        String status = null;
        String accountId = null;
        String accountName = null;
        BigDecimal page = null;
        BigDecimal perPage = null;
        String order = null;
        String direction = null;
        String match = null;
        ZonesGet200Response response = api.zonesGet(name, status, accountId, accountName, page, perPage, order, direction, match);
        // TODO: test validations
    }

    /**
     * Create Zone
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zonesPostTest() throws ApiException {
        ZonesPostRequest zonesPostRequest = null;
        ZonesPost200Response response = api.zonesPost(zonesPostRequest);
        // TODO: test validations
    }

}
