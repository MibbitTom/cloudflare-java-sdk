/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiException;
import org.openapitools.client.model.SpeedApiResponseCommonFailure;
import org.openapitools.client.model.ZoneSettingsChange0RttSessionResumptionSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeAlwaysOnlineSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeAlwaysUseHttpsSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeAutomaticHttpsRewritesSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeAutomaticPlatformOptimizationSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeBrotliSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeBrowserCacheTtlSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeBrowserCheckSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeCacheLevelSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeChallengeTtlSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeCiphersSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeDevelopmentModeSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeEarlyHintsSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeEmailObfuscationSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeEnableErrorPagesOnSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeEnableQueryStringSortSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeFontsSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeH2PrioritizationSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeHTTP2SettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeHTTP3SettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeHotlinkProtectionSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeIPv6SettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeImageResizingSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeIpGeolocationSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeMinifySettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeMinimumTlsVersionSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeMobileRedirectSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeNelSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeOpportunisticEncryptionSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeOpportunisticOnionSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeOrangeToOrangeSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangePolishSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangePrefetchPreloadSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeProxyReadTimeoutSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangePseudoIPv4SettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeResponseBufferingSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeRocketLoaderSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeSecurityHeaderHstsSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeSecurityLevelSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeServerSideExcludeSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeSslRecommenderSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeSslSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeTls13SettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeTlsClientAuthSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeTrueClientIpSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeWebApplicationFirewallWafSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeWebMirageSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeWebPSettingRequest;
import org.openapitools.client.model.ZoneSettingsChangeWebSocketsSettingRequest;
import org.openapitools.client.model.ZoneSettingsEditZoneSettingsInfoRequest;
import org.openapitools.client.model.ZoneSettingsGet0RttSessionResumptionSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetAdvancedDdosSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetAlwaysOnlineSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetAlwaysUseHttpsSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetAutomaticHttpsRewritesSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetAutomaticPlatformOptimizationSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetBrotliSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetBrowserCacheTtlSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetBrowserCheckSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetCacheLevelSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetChallengeTtlSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetCiphersSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetDevelopmentModeSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetEarlyHintsSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetEmailObfuscationSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetEnableErrorPagesOnSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetEnableQueryStringSortSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetFontsSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetH2PrioritizationSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetHTTP2Setting200Response;
import org.openapitools.client.model.ZoneSettingsGetHTTP3Setting200Response;
import org.openapitools.client.model.ZoneSettingsGetHotlinkProtectionSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetIPv6Setting200Response;
import org.openapitools.client.model.ZoneSettingsGetImageResizingSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetIpGeolocationSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetMinifySetting200Response;
import org.openapitools.client.model.ZoneSettingsGetMinimumTlsVersionSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetMirageSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetMobileRedirectSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetNelSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetOpportunisticEncryptionSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetOpportunisticOnionSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetOrangeToOrangeSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetPolishSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetPrefetchPreloadSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetProxyReadTimeoutSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetPseudoIPv4Setting200Response;
import org.openapitools.client.model.ZoneSettingsGetResponseBufferingSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetRocketLoaderSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetSecurityHeaderHstsSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetSecurityLevelSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetServerSideExcludeSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetSslRecommenderSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetSslSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetTls13SettingEnabledForAZone200Response;
import org.openapitools.client.model.ZoneSettingsGetTlsClientAuthSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetTrueClientIpSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetWebApplicationFirewallWafSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetWebPSetting200Response;
import org.openapitools.client.model.ZoneSettingsGetWebSocketsSetting200Response;
import org.openapitools.client.model.ZonesApiResponseCommonFailure;
import org.openapitools.client.model.ZonesZoneSettingsResponseCollection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ZoneSettingsApi
 */
@Disabled
public class ZoneSettingsApiTest {

    private final ZoneSettingsApi api = new ZoneSettingsApi();

    /**
     * Change 0-RTT session resumption setting
     *
     * Changes the 0-RTT session resumption setting.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChange0RttSessionResumptionSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChange0RttSessionResumptionSettingRequest zoneSettingsChange0RttSessionResumptionSettingRequest = null;
        ZoneSettingsGet0RttSessionResumptionSetting200Response response = api.zoneSettingsChange0RttSessionResumptionSetting(zoneId, zoneSettingsChange0RttSessionResumptionSettingRequest);
        // TODO: test validations
    }

    /**
     * Change Always Online setting
     *
     * When enabled, Cloudflare serves limited copies of web pages available from the [Internet Archive&#39;s Wayback Machine](https://archive.org/web/) if your server is offline. Refer to [Always Online](https://developers.cloudflare.com/cache/about/always-online) for more information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeAlwaysOnlineSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeAlwaysOnlineSettingRequest zoneSettingsChangeAlwaysOnlineSettingRequest = null;
        ZoneSettingsGetAlwaysOnlineSetting200Response response = api.zoneSettingsChangeAlwaysOnlineSetting(zoneId, zoneSettingsChangeAlwaysOnlineSettingRequest);
        // TODO: test validations
    }

    /**
     * Change Always Use HTTPS setting
     *
     * Reply to all requests for URLs that use \&quot;http\&quot; with a 301 redirect to the equivalent \&quot;https\&quot; URL. If you only want to redirect for a subset of requests, consider creating an \&quot;Always use HTTPS\&quot; page rule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeAlwaysUseHttpsSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeAlwaysUseHttpsSettingRequest zoneSettingsChangeAlwaysUseHttpsSettingRequest = null;
        ZoneSettingsGetAlwaysUseHttpsSetting200Response response = api.zoneSettingsChangeAlwaysUseHttpsSetting(zoneId, zoneSettingsChangeAlwaysUseHttpsSettingRequest);
        // TODO: test validations
    }

    /**
     * Change Automatic HTTPS Rewrites setting
     *
     * Enable the Automatic HTTPS Rewrites feature for this zone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeAutomaticHttpsRewritesSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeAutomaticHttpsRewritesSettingRequest zoneSettingsChangeAutomaticHttpsRewritesSettingRequest = null;
        ZoneSettingsGetAutomaticHttpsRewritesSetting200Response response = api.zoneSettingsChangeAutomaticHttpsRewritesSetting(zoneId, zoneSettingsChangeAutomaticHttpsRewritesSettingRequest);
        // TODO: test validations
    }

    /**
     * Change Automatic Platform Optimization for WordPress setting
     *
     * [Automatic Platform Optimization for WordPress](https://developers.cloudflare.com/automatic-platform-optimization/) serves your WordPress site from Cloudflare&#39;s edge network and caches third-party fonts. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeAutomaticPlatformOptimizationSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeAutomaticPlatformOptimizationSettingRequest zoneSettingsChangeAutomaticPlatformOptimizationSettingRequest = null;
        ZoneSettingsGetAutomaticPlatformOptimizationSetting200Response response = api.zoneSettingsChangeAutomaticPlatformOptimizationSetting(zoneId, zoneSettingsChangeAutomaticPlatformOptimizationSettingRequest);
        // TODO: test validations
    }

    /**
     * Change Brotli setting
     *
     * When the client requesting an asset supports the Brotli compression algorithm, Cloudflare will serve a Brotli compressed version of the asset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeBrotliSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeBrotliSettingRequest zoneSettingsChangeBrotliSettingRequest = null;
        ZoneSettingsGetBrotliSetting200Response response = api.zoneSettingsChangeBrotliSetting(zoneId, zoneSettingsChangeBrotliSettingRequest);
        // TODO: test validations
    }

    /**
     * Change Browser Cache TTL setting
     *
     * Browser Cache TTL (in seconds) specifies how long Cloudflare-cached resources will remain on your visitors&#39; computers. Cloudflare will honor any larger times specified by your server. (https://support.cloudflare.com/hc/en-us/articles/200168276).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeBrowserCacheTtlSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeBrowserCacheTtlSettingRequest zoneSettingsChangeBrowserCacheTtlSettingRequest = null;
        ZoneSettingsGetBrowserCacheTtlSetting200Response response = api.zoneSettingsChangeBrowserCacheTtlSetting(zoneId, zoneSettingsChangeBrowserCacheTtlSettingRequest);
        // TODO: test validations
    }

    /**
     * Change Browser Check setting
     *
     * Browser Integrity Check is similar to Bad Behavior and looks for common HTTP headers abused most commonly by spammers and denies access to your page.  It will also challenge visitors that do not have a user agent or a non standard user agent (also commonly used by abuse bots, crawlers or visitors). (https://support.cloudflare.com/hc/en-us/articles/200170086).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeBrowserCheckSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeBrowserCheckSettingRequest zoneSettingsChangeBrowserCheckSettingRequest = null;
        ZoneSettingsGetBrowserCheckSetting200Response response = api.zoneSettingsChangeBrowserCheckSetting(zoneId, zoneSettingsChangeBrowserCheckSettingRequest);
        // TODO: test validations
    }

    /**
     * Change Cache Level setting
     *
     * Cache Level functions based off the setting level. The basic setting will cache most static resources (i.e., css, images, and JavaScript). The simplified setting will ignore the query string when delivering a cached resource. The aggressive setting will cache all static resources, including ones with a query string. (https://support.cloudflare.com/hc/en-us/articles/200168256).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeCacheLevelSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeCacheLevelSettingRequest zoneSettingsChangeCacheLevelSettingRequest = null;
        ZoneSettingsGetCacheLevelSetting200Response response = api.zoneSettingsChangeCacheLevelSetting(zoneId, zoneSettingsChangeCacheLevelSettingRequest);
        // TODO: test validations
    }

    /**
     * Change Challenge TTL setting
     *
     * Specify how long a visitor is allowed access to your site after successfully completing a challenge (such as a CAPTCHA). After the TTL has expired the visitor will have to complete a new challenge. We recommend a 15 - 45 minute setting and will attempt to honor any setting above 45 minutes. (https://support.cloudflare.com/hc/en-us/articles/200170136).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeChallengeTtlSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeChallengeTtlSettingRequest zoneSettingsChangeChallengeTtlSettingRequest = null;
        ZoneSettingsGetChallengeTtlSetting200Response response = api.zoneSettingsChangeChallengeTtlSetting(zoneId, zoneSettingsChangeChallengeTtlSettingRequest);
        // TODO: test validations
    }

    /**
     * Change ciphers setting
     *
     * Changes ciphers setting.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeCiphersSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeCiphersSettingRequest zoneSettingsChangeCiphersSettingRequest = null;
        ZoneSettingsGetCiphersSetting200Response response = api.zoneSettingsChangeCiphersSetting(zoneId, zoneSettingsChangeCiphersSettingRequest);
        // TODO: test validations
    }

    /**
     * Change Development Mode setting
     *
     * Development Mode temporarily allows you to enter development mode for your websites if you need to make changes to your site. This will bypass Cloudflare&#39;s accelerated cache and slow down your site, but is useful if you are making changes to cacheable content (like images, css, or JavaScript) and would like to see those changes right away. Once entered, development mode will last for 3 hours and then automatically toggle off.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeDevelopmentModeSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeDevelopmentModeSettingRequest zoneSettingsChangeDevelopmentModeSettingRequest = null;
        ZoneSettingsGetDevelopmentModeSetting200Response response = api.zoneSettingsChangeDevelopmentModeSetting(zoneId, zoneSettingsChangeDevelopmentModeSettingRequest);
        // TODO: test validations
    }

    /**
     * Change Early Hints setting
     *
     * When enabled, Cloudflare will attempt to speed up overall page loads by serving &#x60;103&#x60; responses with &#x60;Link&#x60; headers from the final response. Refer to [Early Hints](https://developers.cloudflare.com/cache/about/early-hints) for more information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeEarlyHintsSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeEarlyHintsSettingRequest zoneSettingsChangeEarlyHintsSettingRequest = null;
        ZoneSettingsGetEarlyHintsSetting200Response response = api.zoneSettingsChangeEarlyHintsSetting(zoneId, zoneSettingsChangeEarlyHintsSettingRequest);
        // TODO: test validations
    }

    /**
     * Change Email Obfuscation setting
     *
     * Encrypt email adresses on your web page from bots, while keeping them visible to humans. (https://support.cloudflare.com/hc/en-us/articles/200170016).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeEmailObfuscationSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeEmailObfuscationSettingRequest zoneSettingsChangeEmailObfuscationSettingRequest = null;
        ZoneSettingsGetEmailObfuscationSetting200Response response = api.zoneSettingsChangeEmailObfuscationSetting(zoneId, zoneSettingsChangeEmailObfuscationSettingRequest);
        // TODO: test validations
    }

    /**
     * Change Enable Error Pages On setting
     *
     * Cloudflare will proxy customer error pages on any 502,504 errors on origin server instead of showing a default Cloudflare error page. This does not apply to 522 errors and is limited to Enterprise Zones.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeEnableErrorPagesOnSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeEnableErrorPagesOnSettingRequest zoneSettingsChangeEnableErrorPagesOnSettingRequest = null;
        ZoneSettingsGetEnableErrorPagesOnSetting200Response response = api.zoneSettingsChangeEnableErrorPagesOnSetting(zoneId, zoneSettingsChangeEnableErrorPagesOnSettingRequest);
        // TODO: test validations
    }

    /**
     * Change Enable Query String Sort setting
     *
     * Cloudflare will treat files with the same query strings as the same file in cache, regardless of the order of the query strings. This is limited to Enterprise Zones.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeEnableQueryStringSortSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeEnableQueryStringSortSettingRequest zoneSettingsChangeEnableQueryStringSortSettingRequest = null;
        ZoneSettingsGetEnableQueryStringSortSetting200Response response = api.zoneSettingsChangeEnableQueryStringSortSetting(zoneId, zoneSettingsChangeEnableQueryStringSortSettingRequest);
        // TODO: test validations
    }

    /**
     * Change Cloudflare Fonts setting
     *
     * Enhance your website&#39;s font delivery with Cloudflare Fonts. Deliver Google Hosted fonts from your own domain, boost performance, and enhance user privacy. Refer to the Cloudflare Fonts documentation for more information. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeFontsSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeFontsSettingRequest zoneSettingsChangeFontsSettingRequest = null;
        ZoneSettingsGetFontsSetting200Response response = api.zoneSettingsChangeFontsSetting(zoneId, zoneSettingsChangeFontsSettingRequest);
        // TODO: test validations
    }

    /**
     * Change HTTP/2 Edge Prioritization setting
     *
     * Gets HTTP/2 Edge Prioritization setting. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeH2PrioritizationSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeH2PrioritizationSettingRequest zoneSettingsChangeH2PrioritizationSettingRequest = null;
        ZoneSettingsGetH2PrioritizationSetting200Response response = api.zoneSettingsChangeH2PrioritizationSetting(zoneId, zoneSettingsChangeH2PrioritizationSettingRequest);
        // TODO: test validations
    }

    /**
     * Change HTTP2 setting
     *
     * Value of the HTTP2 setting.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeHTTP2SettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeHTTP2SettingRequest zoneSettingsChangeHTTP2SettingRequest = null;
        ZoneSettingsGetHTTP2Setting200Response response = api.zoneSettingsChangeHTTP2Setting(zoneId, zoneSettingsChangeHTTP2SettingRequest);
        // TODO: test validations
    }

    /**
     * Change HTTP3 setting
     *
     * Value of the HTTP3 setting.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeHTTP3SettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeHTTP3SettingRequest zoneSettingsChangeHTTP3SettingRequest = null;
        ZoneSettingsGetHTTP3Setting200Response response = api.zoneSettingsChangeHTTP3Setting(zoneId, zoneSettingsChangeHTTP3SettingRequest);
        // TODO: test validations
    }

    /**
     * Change Hotlink Protection setting
     *
     * When enabled, the Hotlink Protection option ensures that other sites cannot suck up your bandwidth by building pages that use images hosted on your site. Anytime a request for an image on your site hits Cloudflare, we check to ensure that it&#39;s not another site requesting them. People will still be able to download and view images from your page, but other sites won&#39;t be able to steal them for use on their own pages. (https://support.cloudflare.com/hc/en-us/articles/200170026).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeHotlinkProtectionSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeHotlinkProtectionSettingRequest zoneSettingsChangeHotlinkProtectionSettingRequest = null;
        ZoneSettingsGetHotlinkProtectionSetting200Response response = api.zoneSettingsChangeHotlinkProtectionSetting(zoneId, zoneSettingsChangeHotlinkProtectionSettingRequest);
        // TODO: test validations
    }

    /**
     * Change IPv6 setting
     *
     * Enable IPv6 on all subdomains that are Cloudflare enabled.  (https://support.cloudflare.com/hc/en-us/articles/200168586).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeIPv6SettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeIPv6SettingRequest zoneSettingsChangeIPv6SettingRequest = null;
        ZoneSettingsGetIPv6Setting200Response response = api.zoneSettingsChangeIPv6Setting(zoneId, zoneSettingsChangeIPv6SettingRequest);
        // TODO: test validations
    }

    /**
     * Change Image Resizing setting
     *
     * Image Resizing provides on-demand resizing, conversion and optimisation for images served through Cloudflare&#39;s network. Refer to the [Image Resizing documentation](https://developers.cloudflare.com/images/) for more information. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeImageResizingSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeImageResizingSettingRequest zoneSettingsChangeImageResizingSettingRequest = null;
        ZoneSettingsGetImageResizingSetting200Response response = api.zoneSettingsChangeImageResizingSetting(zoneId, zoneSettingsChangeImageResizingSettingRequest);
        // TODO: test validations
    }

    /**
     * Change IP Geolocation setting
     *
     * Enable IP Geolocation to have Cloudflare geolocate visitors to your website and pass the country code to you. (https://support.cloudflare.com/hc/en-us/articles/200168236).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeIpGeolocationSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeIpGeolocationSettingRequest zoneSettingsChangeIpGeolocationSettingRequest = null;
        ZoneSettingsGetIpGeolocationSetting200Response response = api.zoneSettingsChangeIpGeolocationSetting(zoneId, zoneSettingsChangeIpGeolocationSettingRequest);
        // TODO: test validations
    }

    /**
     * Change Minify setting
     *
     * Automatically minify certain assets for your website. Refer to [Using Cloudflare Auto Minify](https://support.cloudflare.com/hc/en-us/articles/200168196) for more information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeMinifySettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeMinifySettingRequest zoneSettingsChangeMinifySettingRequest = null;
        ZoneSettingsGetMinifySetting200Response response = api.zoneSettingsChangeMinifySetting(zoneId, zoneSettingsChangeMinifySettingRequest);
        // TODO: test validations
    }

    /**
     * Change Minimum TLS Version setting
     *
     * Changes Minimum TLS Version setting.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeMinimumTlsVersionSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeMinimumTlsVersionSettingRequest zoneSettingsChangeMinimumTlsVersionSettingRequest = null;
        ZoneSettingsGetMinimumTlsVersionSetting200Response response = api.zoneSettingsChangeMinimumTlsVersionSetting(zoneId, zoneSettingsChangeMinimumTlsVersionSettingRequest);
        // TODO: test validations
    }

    /**
     * Change Mobile Redirect setting
     *
     * Automatically redirect visitors on mobile devices to a mobile-optimized subdomain. Refer to [Understanding Cloudflare Mobile Redirect](https://support.cloudflare.com/hc/articles/200168336) for more information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeMobileRedirectSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeMobileRedirectSettingRequest zoneSettingsChangeMobileRedirectSettingRequest = null;
        ZoneSettingsGetMobileRedirectSetting200Response response = api.zoneSettingsChangeMobileRedirectSetting(zoneId, zoneSettingsChangeMobileRedirectSettingRequest);
        // TODO: test validations
    }

    /**
     * Change Network Error Logging setting
     *
     * Automatically optimize image loading for website visitors on mobile devices. Refer to our [blog post](http://blog.cloudflare.com/nel-solving-mobile-speed) for more information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeNelSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeNelSettingRequest zoneSettingsChangeNelSettingRequest = null;
        ZoneSettingsGetNelSetting200Response response = api.zoneSettingsChangeNelSetting(zoneId, zoneSettingsChangeNelSettingRequest);
        // TODO: test validations
    }

    /**
     * Change Opportunistic Encryption setting
     *
     * Changes Opportunistic Encryption setting.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeOpportunisticEncryptionSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeOpportunisticEncryptionSettingRequest zoneSettingsChangeOpportunisticEncryptionSettingRequest = null;
        ZoneSettingsGetOpportunisticEncryptionSetting200Response response = api.zoneSettingsChangeOpportunisticEncryptionSetting(zoneId, zoneSettingsChangeOpportunisticEncryptionSettingRequest);
        // TODO: test validations
    }

    /**
     * Change Opportunistic Onion setting
     *
     * Add an Alt-Svc header to all legitimate requests from Tor, allowing the connection to use our onion services instead of exit nodes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeOpportunisticOnionSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeOpportunisticOnionSettingRequest zoneSettingsChangeOpportunisticOnionSettingRequest = null;
        ZoneSettingsGetOpportunisticOnionSetting200Response response = api.zoneSettingsChangeOpportunisticOnionSetting(zoneId, zoneSettingsChangeOpportunisticOnionSettingRequest);
        // TODO: test validations
    }

    /**
     * Change Orange to Orange (O2O) setting
     *
     * Orange to Orange (O2O) allows zones on Cloudflare to CNAME to other zones also on Cloudflare. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeOrangeToOrangeSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeOrangeToOrangeSettingRequest zoneSettingsChangeOrangeToOrangeSettingRequest = null;
        ZoneSettingsGetOrangeToOrangeSetting200Response response = api.zoneSettingsChangeOrangeToOrangeSetting(zoneId, zoneSettingsChangeOrangeToOrangeSettingRequest);
        // TODO: test validations
    }

    /**
     * Change Polish setting
     *
     * Automatically optimize image loading for website visitors on mobile devices. Refer to our [blog post](http://blog.cloudflare.com/polish-solving-mobile-speed) for more information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangePolishSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangePolishSettingRequest zoneSettingsChangePolishSettingRequest = null;
        ZoneSettingsGetPolishSetting200Response response = api.zoneSettingsChangePolishSetting(zoneId, zoneSettingsChangePolishSettingRequest);
        // TODO: test validations
    }

    /**
     * Change prefetch preload setting
     *
     * Cloudflare will prefetch any URLs that are included in the response headers. This is limited to Enterprise Zones.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangePrefetchPreloadSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangePrefetchPreloadSettingRequest zoneSettingsChangePrefetchPreloadSettingRequest = null;
        ZoneSettingsGetPrefetchPreloadSetting200Response response = api.zoneSettingsChangePrefetchPreloadSetting(zoneId, zoneSettingsChangePrefetchPreloadSettingRequest);
        // TODO: test validations
    }

    /**
     * Change Proxy Read Timeout setting
     *
     * Maximum time between two read operations from origin. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeProxyReadTimeoutSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeProxyReadTimeoutSettingRequest zoneSettingsChangeProxyReadTimeoutSettingRequest = null;
        ZoneSettingsGetProxyReadTimeoutSetting200Response response = api.zoneSettingsChangeProxyReadTimeoutSetting(zoneId, zoneSettingsChangeProxyReadTimeoutSettingRequest);
        // TODO: test validations
    }

    /**
     * Change Pseudo IPv4 setting
     *
     * Value of the Pseudo IPv4 setting.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangePseudoIPv4SettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangePseudoIPv4SettingRequest zoneSettingsChangePseudoIPv4SettingRequest = null;
        ZoneSettingsGetPseudoIPv4Setting200Response response = api.zoneSettingsChangePseudoIPv4Setting(zoneId, zoneSettingsChangePseudoIPv4SettingRequest);
        // TODO: test validations
    }

    /**
     * Change Response Buffering setting
     *
     * Enables or disables buffering of responses from the proxied server. Cloudflare may buffer the whole payload to deliver it at once to the client versus allowing it to be delivered in chunks. By default, the proxied server streams directly and is not buffered by Cloudflare. This is limited to Enterprise Zones.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeResponseBufferingSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeResponseBufferingSettingRequest zoneSettingsChangeResponseBufferingSettingRequest = null;
        ZoneSettingsGetResponseBufferingSetting200Response response = api.zoneSettingsChangeResponseBufferingSetting(zoneId, zoneSettingsChangeResponseBufferingSettingRequest);
        // TODO: test validations
    }

    /**
     * Change Rocket Loader setting
     *
     * Rocket Loader is a general-purpose asynchronous JavaScript optimisation that prioritises rendering your content while loading your site&#39;s Javascript asynchronously. Turning on Rocket Loader will immediately improve a web page&#39;s rendering time sometimes measured as Time to First Paint (TTFP), and also the &#x60;window.onload&#x60; time (assuming there is JavaScript on the page). This can have a positive impact on your Google search ranking. When turned on, Rocket Loader will automatically defer the loading of all Javascript referenced in your HTML, with no configuration required. Refer to [Understanding Rocket Loader](https://support.cloudflare.com/hc/articles/200168056) for more information. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeRocketLoaderSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeRocketLoaderSettingRequest zoneSettingsChangeRocketLoaderSettingRequest = null;
        ZoneSettingsGetRocketLoaderSetting200Response response = api.zoneSettingsChangeRocketLoaderSetting(zoneId, zoneSettingsChangeRocketLoaderSettingRequest);
        // TODO: test validations
    }

    /**
     * Change Security Header (HSTS) setting
     *
     * Cloudflare security header for a zone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeSecurityHeaderHstsSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeSecurityHeaderHstsSettingRequest zoneSettingsChangeSecurityHeaderHstsSettingRequest = null;
        ZoneSettingsGetSecurityHeaderHstsSetting200Response response = api.zoneSettingsChangeSecurityHeaderHstsSetting(zoneId, zoneSettingsChangeSecurityHeaderHstsSettingRequest);
        // TODO: test validations
    }

    /**
     * Change Security Level setting
     *
     * Choose the appropriate security profile for your website, which will automatically adjust each of the security settings. If you choose to customize an individual security setting, the profile will become Custom. (https://support.cloudflare.com/hc/en-us/articles/200170056).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeSecurityLevelSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeSecurityLevelSettingRequest zoneSettingsChangeSecurityLevelSettingRequest = null;
        ZoneSettingsGetSecurityLevelSetting200Response response = api.zoneSettingsChangeSecurityLevelSetting(zoneId, zoneSettingsChangeSecurityLevelSettingRequest);
        // TODO: test validations
    }

    /**
     * Change Server Side Exclude setting
     *
     * If there is sensitive content on your website that you want visible to real visitors, but that you want to hide from suspicious visitors, all you have to do is wrap the content with Cloudflare SSE tags. Wrap any content that you want to be excluded from suspicious visitors in the following SSE tags: &lt;!--sse--&gt;&lt;!--/sse--&gt;. For example: &lt;!--sse--&gt;  Bad visitors won&#39;t see my phone number, 555-555-5555 &lt;!--/sse--&gt;. Note: SSE only will work with HTML. If you have HTML minification enabled, you won&#39;t see the SSE tags in your HTML source when it&#39;s served through Cloudflare. SSE will still function in this case, as Cloudflare&#39;s HTML minification and SSE functionality occur on-the-fly as the resource moves through our network to the visitor&#39;s computer. (https://support.cloudflare.com/hc/en-us/articles/200170036).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeServerSideExcludeSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeServerSideExcludeSettingRequest zoneSettingsChangeServerSideExcludeSettingRequest = null;
        ZoneSettingsGetServerSideExcludeSetting200Response response = api.zoneSettingsChangeServerSideExcludeSetting(zoneId, zoneSettingsChangeServerSideExcludeSettingRequest);
        // TODO: test validations
    }

    /**
     * Change SSL/TLS Recommender enrollment setting
     *
     * Enrollment in the SSL/TLS Recommender service which tries to detect and recommend (by sending periodic emails) the most secure SSL/TLS setting your origin servers support. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeSslRecommenderSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeSslRecommenderSettingRequest zoneSettingsChangeSslRecommenderSettingRequest = null;
        ZoneSettingsGetSslRecommenderSetting200Response response = api.zoneSettingsChangeSslRecommenderSetting(zoneId, zoneSettingsChangeSslRecommenderSettingRequest);
        // TODO: test validations
    }

    /**
     * Change SSL setting
     *
     * SSL encrypts your visitor&#39;s connection and safeguards credit card numbers and other personal data to and from your website. SSL can take up to 5 minutes to fully activate. Requires Cloudflare active on your root domain or www domain. Off: no SSL between the visitor and Cloudflare, and no SSL between Cloudflare and your web server  (all HTTP traffic). Flexible: SSL between the visitor and Cloudflare -- visitor sees HTTPS on your site, but no SSL between Cloudflare and your web server. You don&#39;t need to have an SSL cert on your web server, but your vistors will still see the site as being HTTPS enabled. Full:  SSL between the visitor and Cloudflare -- visitor sees HTTPS on your site, and SSL between Cloudflare and your web server. You&#39;ll need to have your own SSL cert or self-signed cert at the very least. Full (Strict): SSL between the visitor and Cloudflare -- visitor sees HTTPS on your site, and SSL between Cloudflare and your web server. You&#39;ll need to have a valid SSL certificate installed on your web server. This certificate must be signed by a certificate authority, have an expiration date in the future, and respond for the request domain name (hostname). (https://support.cloudflare.com/hc/en-us/articles/200170416).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeSslSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeSslSettingRequest zoneSettingsChangeSslSettingRequest = null;
        ZoneSettingsGetSslSetting200Response response = api.zoneSettingsChangeSslSetting(zoneId, zoneSettingsChangeSslSettingRequest);
        // TODO: test validations
    }

    /**
     * Change TLS 1.3 setting
     *
     * Changes TLS 1.3 setting.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeTls13SettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeTls13SettingRequest zoneSettingsChangeTls13SettingRequest = null;
        ZoneSettingsGetTls13SettingEnabledForAZone200Response response = api.zoneSettingsChangeTls13Setting(zoneId, zoneSettingsChangeTls13SettingRequest);
        // TODO: test validations
    }

    /**
     * Change TLS Client Auth setting
     *
     * TLS Client Auth requires Cloudflare to connect to your origin server using a client certificate (Enterprise Only).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeTlsClientAuthSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeTlsClientAuthSettingRequest zoneSettingsChangeTlsClientAuthSettingRequest = null;
        ZoneSettingsGetTlsClientAuthSetting200Response response = api.zoneSettingsChangeTlsClientAuthSetting(zoneId, zoneSettingsChangeTlsClientAuthSettingRequest);
        // TODO: test validations
    }

    /**
     * Change True Client IP setting
     *
     * Allows customer to continue to use True Client IP (Akamai feature) in the headers we send to the origin. This is limited to Enterprise Zones.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeTrueClientIpSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeTrueClientIpSettingRequest zoneSettingsChangeTrueClientIpSettingRequest = null;
        ZoneSettingsGetTrueClientIpSetting200Response response = api.zoneSettingsChangeTrueClientIpSetting(zoneId, zoneSettingsChangeTrueClientIpSettingRequest);
        // TODO: test validations
    }

    /**
     * Change Web Application Firewall (WAF) setting
     *
     * The WAF examines HTTP requests to your website.  It inspects both GET and POST requests and applies rules to help filter out illegitimate traffic from legitimate website visitors. The Cloudflare WAF inspects website addresses or URLs to detect anything out of the ordinary. If the Cloudflare WAF determines suspicious user behavior, then the WAF will &#39;challenge&#39; the web visitor with a page that asks them to submit a CAPTCHA successfully  to continue their action. If the challenge is failed, the action will be stopped. What this means is that Cloudflare&#39;s WAF will block any traffic identified as illegitimate before it reaches your origin web server. (https://support.cloudflare.com/hc/en-us/articles/200172016).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeWebApplicationFirewallWafSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeWebApplicationFirewallWafSettingRequest zoneSettingsChangeWebApplicationFirewallWafSettingRequest = null;
        ZoneSettingsGetWebApplicationFirewallWafSetting200Response response = api.zoneSettingsChangeWebApplicationFirewallWafSetting(zoneId, zoneSettingsChangeWebApplicationFirewallWafSettingRequest);
        // TODO: test validations
    }

    /**
     * Change Mirage setting
     *
     * Automatically optimize image loading for website visitors on mobile devices. Refer to our [blog post](http://blog.cloudflare.com/mirage2-solving-mobile-speed) for more information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeWebMirageSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeWebMirageSettingRequest zoneSettingsChangeWebMirageSettingRequest = null;
        ZoneSettingsGetMirageSetting200Response response = api.zoneSettingsChangeWebMirageSetting(zoneId, zoneSettingsChangeWebMirageSettingRequest);
        // TODO: test validations
    }

    /**
     * Change WebP setting
     *
     * When the client requesting the image supports the WebP image codec, and WebP offers a performance advantage over the original image format, Cloudflare will serve a WebP version of the original image.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeWebPSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeWebPSettingRequest zoneSettingsChangeWebPSettingRequest = null;
        ZoneSettingsGetWebPSetting200Response response = api.zoneSettingsChangeWebPSetting(zoneId, zoneSettingsChangeWebPSettingRequest);
        // TODO: test validations
    }

    /**
     * Change WebSockets setting
     *
     * Changes Websockets setting. For more information about Websockets, please refer to [Using Cloudflare with WebSockets](https://support.cloudflare.com/hc/en-us/articles/200169466-Using-Cloudflare-with-WebSockets).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsChangeWebSocketsSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsChangeWebSocketsSettingRequest zoneSettingsChangeWebSocketsSettingRequest = null;
        ZoneSettingsGetWebSocketsSetting200Response response = api.zoneSettingsChangeWebSocketsSetting(zoneId, zoneSettingsChangeWebSocketsSettingRequest);
        // TODO: test validations
    }

    /**
     * Edit zone settings info
     *
     * Edit settings for a zone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsEditZoneSettingsInfoTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsEditZoneSettingsInfoRequest zoneSettingsEditZoneSettingsInfoRequest = null;
        ZonesZoneSettingsResponseCollection response = api.zoneSettingsEditZoneSettingsInfo(zoneId, zoneSettingsEditZoneSettingsInfoRequest);
        // TODO: test validations
    }

    /**
     * Get 0-RTT session resumption setting
     *
     * Gets 0-RTT session resumption setting.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGet0RttSessionResumptionSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGet0RttSessionResumptionSetting200Response response = api.zoneSettingsGet0RttSessionResumptionSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get Advanced DDOS setting
     *
     * Advanced protection from Distributed Denial of Service (DDoS) attacks on your website. This is an uneditable value that is &#39;on&#39; in the case of Business and Enterprise zones.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetAdvancedDdosSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetAdvancedDdosSetting200Response response = api.zoneSettingsGetAdvancedDdosSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get all Zone settings
     *
     * Available settings for your user in relation to a zone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetAllZoneSettingsTest() throws ApiException {
        String zoneId = null;
        ZonesZoneSettingsResponseCollection response = api.zoneSettingsGetAllZoneSettings(zoneId);
        // TODO: test validations
    }

    /**
     * Get Always Online setting
     *
     * When enabled, Cloudflare serves limited copies of web pages available from the [Internet Archive&#39;s Wayback Machine](https://archive.org/web/) if your server is offline. Refer to [Always Online](https://developers.cloudflare.com/cache/about/always-online) for more information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetAlwaysOnlineSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetAlwaysOnlineSetting200Response response = api.zoneSettingsGetAlwaysOnlineSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get Always Use HTTPS setting
     *
     * Reply to all requests for URLs that use \&quot;http\&quot; with a 301 redirect to the equivalent \&quot;https\&quot; URL. If you only want to redirect for a subset of requests, consider creating an \&quot;Always use HTTPS\&quot; page rule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetAlwaysUseHttpsSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetAlwaysUseHttpsSetting200Response response = api.zoneSettingsGetAlwaysUseHttpsSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get Automatic HTTPS Rewrites setting
     *
     * Enable the Automatic HTTPS Rewrites feature for this zone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetAutomaticHttpsRewritesSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetAutomaticHttpsRewritesSetting200Response response = api.zoneSettingsGetAutomaticHttpsRewritesSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get Automatic Platform Optimization for WordPress setting
     *
     * [Automatic Platform Optimization for WordPress](https://developers.cloudflare.com/automatic-platform-optimization/) serves your WordPress site from Cloudflare&#39;s edge network and caches third-party fonts. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetAutomaticPlatformOptimizationSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetAutomaticPlatformOptimizationSetting200Response response = api.zoneSettingsGetAutomaticPlatformOptimizationSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get Brotli setting
     *
     * When the client requesting an asset supports the Brotli compression algorithm, Cloudflare will serve a Brotli compressed version of the asset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetBrotliSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetBrotliSetting200Response response = api.zoneSettingsGetBrotliSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get Browser Cache TTL setting
     *
     * Browser Cache TTL (in seconds) specifies how long Cloudflare-cached resources will remain on your visitors&#39; computers. Cloudflare will honor any larger times specified by your server. (https://support.cloudflare.com/hc/en-us/articles/200168276).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetBrowserCacheTtlSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetBrowserCacheTtlSetting200Response response = api.zoneSettingsGetBrowserCacheTtlSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get Browser Check setting
     *
     * Browser Integrity Check is similar to Bad Behavior and looks for common HTTP headers abused most commonly by spammers and denies access to your page.  It will also challenge visitors that do not have a user agent or a non standard user agent (also commonly used by abuse bots, crawlers or visitors). (https://support.cloudflare.com/hc/en-us/articles/200170086).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetBrowserCheckSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetBrowserCheckSetting200Response response = api.zoneSettingsGetBrowserCheckSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get Cache Level setting
     *
     * Cache Level functions based off the setting level. The basic setting will cache most static resources (i.e., css, images, and JavaScript). The simplified setting will ignore the query string when delivering a cached resource. The aggressive setting will cache all static resources, including ones with a query string. (https://support.cloudflare.com/hc/en-us/articles/200168256).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetCacheLevelSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetCacheLevelSetting200Response response = api.zoneSettingsGetCacheLevelSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get Challenge TTL setting
     *
     * Specify how long a visitor is allowed access to your site after successfully completing a challenge (such as a CAPTCHA). After the TTL has expired the visitor will have to complete a new challenge. We recommend a 15 - 45 minute setting and will attempt to honor any setting above 45 minutes. (https://support.cloudflare.com/hc/en-us/articles/200170136).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetChallengeTtlSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetChallengeTtlSetting200Response response = api.zoneSettingsGetChallengeTtlSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get ciphers setting
     *
     * Gets ciphers setting.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetCiphersSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetCiphersSetting200Response response = api.zoneSettingsGetCiphersSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get Development Mode setting
     *
     * Development Mode temporarily allows you to enter development mode for your websites if you need to make changes to your site. This will bypass Cloudflare&#39;s accelerated cache and slow down your site, but is useful if you are making changes to cacheable content (like images, css, or JavaScript) and would like to see those changes right away. Once entered, development mode will last for 3 hours and then automatically toggle off.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetDevelopmentModeSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetDevelopmentModeSetting200Response response = api.zoneSettingsGetDevelopmentModeSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get Early Hints setting
     *
     * When enabled, Cloudflare will attempt to speed up overall page loads by serving &#x60;103&#x60; responses with &#x60;Link&#x60; headers from the final response. Refer to [Early Hints](https://developers.cloudflare.com/cache/about/early-hints) for more information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetEarlyHintsSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetEarlyHintsSetting200Response response = api.zoneSettingsGetEarlyHintsSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get Email Obfuscation setting
     *
     * Encrypt email adresses on your web page from bots, while keeping them visible to humans. (https://support.cloudflare.com/hc/en-us/articles/200170016).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetEmailObfuscationSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetEmailObfuscationSetting200Response response = api.zoneSettingsGetEmailObfuscationSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get Enable Error Pages On setting
     *
     * Cloudflare will proxy customer error pages on any 502,504 errors on origin server instead of showing a default Cloudflare error page. This does not apply to 522 errors and is limited to Enterprise Zones.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetEnableErrorPagesOnSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetEnableErrorPagesOnSetting200Response response = api.zoneSettingsGetEnableErrorPagesOnSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get Enable Query String Sort setting
     *
     * Cloudflare will treat files with the same query strings as the same file in cache, regardless of the order of the query strings. This is limited to Enterprise Zones.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetEnableQueryStringSortSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetEnableQueryStringSortSetting200Response response = api.zoneSettingsGetEnableQueryStringSortSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get Cloudflare Fonts setting
     *
     * Enhance your website&#39;s font delivery with Cloudflare Fonts. Deliver Google Hosted fonts from your own domain, boost performance, and enhance user privacy. Refer to the Cloudflare Fonts documentation for more information. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetFontsSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetFontsSetting200Response response = api.zoneSettingsGetFontsSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get HTTP/2 Edge Prioritization setting
     *
     * Gets HTTP/2 Edge Prioritization setting. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetH2PrioritizationSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetH2PrioritizationSetting200Response response = api.zoneSettingsGetH2PrioritizationSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get HTTP2 setting
     *
     * Value of the HTTP2 setting.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetHTTP2SettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetHTTP2Setting200Response response = api.zoneSettingsGetHTTP2Setting(zoneId);
        // TODO: test validations
    }

    /**
     * Get HTTP3 setting
     *
     * Value of the HTTP3 setting.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetHTTP3SettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetHTTP3Setting200Response response = api.zoneSettingsGetHTTP3Setting(zoneId);
        // TODO: test validations
    }

    /**
     * Get Hotlink Protection setting
     *
     * When enabled, the Hotlink Protection option ensures that other sites cannot suck up your bandwidth by building pages that use images hosted on your site. Anytime a request for an image on your site hits Cloudflare, we check to ensure that it&#39;s not another site requesting them. People will still be able to download and view images from your page, but other sites won&#39;t be able to steal them for use on their own pages. (https://support.cloudflare.com/hc/en-us/articles/200170026).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetHotlinkProtectionSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetHotlinkProtectionSetting200Response response = api.zoneSettingsGetHotlinkProtectionSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get IPv6 setting
     *
     * Enable IPv6 on all subdomains that are Cloudflare enabled.  (https://support.cloudflare.com/hc/en-us/articles/200168586).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetIPv6SettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetIPv6Setting200Response response = api.zoneSettingsGetIPv6Setting(zoneId);
        // TODO: test validations
    }

    /**
     * Get Image Resizing setting
     *
     * Image Resizing provides on-demand resizing, conversion and optimisation for images served through Cloudflare&#39;s network. Refer to the [Image Resizing documentation](https://developers.cloudflare.com/images/) for more information. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetImageResizingSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetImageResizingSetting200Response response = api.zoneSettingsGetImageResizingSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get IP Geolocation setting
     *
     * Enable IP Geolocation to have Cloudflare geolocate visitors to your website and pass the country code to you. (https://support.cloudflare.com/hc/en-us/articles/200168236).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetIpGeolocationSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetIpGeolocationSetting200Response response = api.zoneSettingsGetIpGeolocationSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get Minify setting
     *
     * Automatically minify certain assets for your website. Refer to [Using Cloudflare Auto Minify](https://support.cloudflare.com/hc/en-us/articles/200168196) for more information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetMinifySettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetMinifySetting200Response response = api.zoneSettingsGetMinifySetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get Minimum TLS Version setting
     *
     * Gets Minimum TLS Version setting.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetMinimumTlsVersionSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetMinimumTlsVersionSetting200Response response = api.zoneSettingsGetMinimumTlsVersionSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get Mirage setting
     *
     * Automatically optimize image loading for website visitors on mobile devices. Refer to our [blog post](http://blog.cloudflare.com/mirage2-solving-mobile-speed) for more information. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetMirageSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetMirageSetting200Response response = api.zoneSettingsGetMirageSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get Mobile Redirect setting
     *
     * Automatically redirect visitors on mobile devices to a mobile-optimized subdomain. Refer to [Understanding Cloudflare Mobile Redirect](https://support.cloudflare.com/hc/articles/200168336) for more information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetMobileRedirectSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetMobileRedirectSetting200Response response = api.zoneSettingsGetMobileRedirectSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get Network Error Logging setting
     *
     * Enable Network Error Logging reporting on your zone. (Beta) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetNelSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetNelSetting200Response response = api.zoneSettingsGetNelSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get Opportunistic Encryption setting
     *
     * Gets Opportunistic Encryption setting.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetOpportunisticEncryptionSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetOpportunisticEncryptionSetting200Response response = api.zoneSettingsGetOpportunisticEncryptionSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get Opportunistic Onion setting
     *
     * Add an Alt-Svc header to all legitimate requests from Tor, allowing the connection to use our onion services instead of exit nodes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetOpportunisticOnionSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetOpportunisticOnionSetting200Response response = api.zoneSettingsGetOpportunisticOnionSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get Orange to Orange (O2O) setting
     *
     * Orange to Orange (O2O) allows zones on Cloudflare to CNAME to other zones also on Cloudflare. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetOrangeToOrangeSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetOrangeToOrangeSetting200Response response = api.zoneSettingsGetOrangeToOrangeSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get Polish setting
     *
     * Automatically optimize image loading for website visitors on mobile devices. Refer to our [blog post](http://blog.cloudflare.com/polish-solving-mobile-speed) for more information. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetPolishSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetPolishSetting200Response response = api.zoneSettingsGetPolishSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get prefetch preload setting
     *
     * Cloudflare will prefetch any URLs that are included in the response headers. This is limited to Enterprise Zones.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetPrefetchPreloadSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetPrefetchPreloadSetting200Response response = api.zoneSettingsGetPrefetchPreloadSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get Proxy Read Timeout setting
     *
     * Maximum time between two read operations from origin. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetProxyReadTimeoutSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetProxyReadTimeoutSetting200Response response = api.zoneSettingsGetProxyReadTimeoutSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get Pseudo IPv4 setting
     *
     * Value of the Pseudo IPv4 setting.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetPseudoIPv4SettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetPseudoIPv4Setting200Response response = api.zoneSettingsGetPseudoIPv4Setting(zoneId);
        // TODO: test validations
    }

    /**
     * Get Response Buffering setting
     *
     * Enables or disables buffering of responses from the proxied server. Cloudflare may buffer the whole payload to deliver it at once to the client versus allowing it to be delivered in chunks. By default, the proxied server streams directly and is not buffered by Cloudflare. This is limited to Enterprise Zones.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetResponseBufferingSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetResponseBufferingSetting200Response response = api.zoneSettingsGetResponseBufferingSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get Rocket Loader setting
     *
     * Rocket Loader is a general-purpose asynchronous JavaScript optimisation that prioritises rendering your content while loading your site&#39;s Javascript asynchronously. Turning on Rocket Loader will immediately improve a web page&#39;s rendering time sometimes measured as Time to First Paint (TTFP), and also the &#x60;window.onload&#x60; time (assuming there is JavaScript on the page). This can have a positive impact on your Google search ranking. When turned on, Rocket Loader will automatically defer the loading of all Javascript referenced in your HTML, with no configuration required. Refer to [Understanding Rocket Loader](https://support.cloudflare.com/hc/articles/200168056) for more information. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetRocketLoaderSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetRocketLoaderSetting200Response response = api.zoneSettingsGetRocketLoaderSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get Security Header (HSTS) setting
     *
     * Cloudflare security header for a zone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetSecurityHeaderHstsSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetSecurityHeaderHstsSetting200Response response = api.zoneSettingsGetSecurityHeaderHstsSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get Security Level setting
     *
     * Choose the appropriate security profile for your website, which will automatically adjust each of the security settings. If you choose to customize an individual security setting, the profile will become Custom. (https://support.cloudflare.com/hc/en-us/articles/200170056).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetSecurityLevelSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetSecurityLevelSetting200Response response = api.zoneSettingsGetSecurityLevelSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get Server Side Exclude setting
     *
     * If there is sensitive content on your website that you want visible to real visitors, but that you want to hide from suspicious visitors, all you have to do is wrap the content with Cloudflare SSE tags. Wrap any content that you want to be excluded from suspicious visitors in the following SSE tags: &lt;!--sse--&gt;&lt;!--/sse--&gt;. For example: &lt;!--sse--&gt;  Bad visitors won&#39;t see my phone number, 555-555-5555 &lt;!--/sse--&gt;. Note: SSE only will work with HTML. If you have HTML minification enabled, you won&#39;t see the SSE tags in your HTML source when it&#39;s served through Cloudflare. SSE will still function in this case, as Cloudflare&#39;s HTML minification and SSE functionality occur on-the-fly as the resource moves through our network to the visitor&#39;s computer. (https://support.cloudflare.com/hc/en-us/articles/200170036).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetServerSideExcludeSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetServerSideExcludeSetting200Response response = api.zoneSettingsGetServerSideExcludeSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get SSL/TLS Recommender enrollment setting
     *
     * Enrollment in the SSL/TLS Recommender service which tries to detect and recommend (by sending periodic emails) the most secure SSL/TLS setting your origin servers support. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetSslRecommenderSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetSslRecommenderSetting200Response response = api.zoneSettingsGetSslRecommenderSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get SSL setting
     *
     * SSL encrypts your visitor&#39;s connection and safeguards credit card numbers and other personal data to and from your website. SSL can take up to 5 minutes to fully activate. Requires Cloudflare active on your root domain or www domain. Off: no SSL between the visitor and Cloudflare, and no SSL between Cloudflare and your web server  (all HTTP traffic). Flexible: SSL between the visitor and Cloudflare -- visitor sees HTTPS on your site, but no SSL between Cloudflare and your web server. You don&#39;t need to have an SSL cert on your web server, but your vistors will still see the site as being HTTPS enabled. Full:  SSL between the visitor and Cloudflare -- visitor sees HTTPS on your site, and SSL between Cloudflare and your web server. You&#39;ll need to have your own SSL cert or self-signed cert at the very least. Full (Strict): SSL between the visitor and Cloudflare -- visitor sees HTTPS on your site, and SSL between Cloudflare and your web server. You&#39;ll need to have a valid SSL certificate installed on your web server. This certificate must be signed by a certificate authority, have an expiration date in the future, and respond for the request domain name (hostname). (https://support.cloudflare.com/hc/en-us/articles/200170416).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetSslSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetSslSetting200Response response = api.zoneSettingsGetSslSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get TLS 1.3 setting enabled for a zone
     *
     * Gets TLS 1.3 setting enabled for a zone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetTls13SettingEnabledForAZoneTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetTls13SettingEnabledForAZone200Response response = api.zoneSettingsGetTls13SettingEnabledForAZone(zoneId);
        // TODO: test validations
    }

    /**
     * Get TLS Client Auth setting
     *
     * TLS Client Auth requires Cloudflare to connect to your origin server using a client certificate (Enterprise Only).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetTlsClientAuthSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetTlsClientAuthSetting200Response response = api.zoneSettingsGetTlsClientAuthSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get True Client IP setting
     *
     * Allows customer to continue to use True Client IP (Akamai feature) in the headers we send to the origin. This is limited to Enterprise Zones.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetTrueClientIpSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetTrueClientIpSetting200Response response = api.zoneSettingsGetTrueClientIpSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get Web Application Firewall (WAF) setting
     *
     * The WAF examines HTTP requests to your website.  It inspects both GET and POST requests and applies rules to help filter out illegitimate traffic from legitimate website visitors. The Cloudflare WAF inspects website addresses or URLs to detect anything out of the ordinary. If the Cloudflare WAF determines suspicious user behavior, then the WAF will &#39;challenge&#39; the web visitor with a page that asks them to submit a CAPTCHA successfully  to continue their action. If the challenge is failed, the action will be stopped. What this means is that Cloudflare&#39;s WAF will block any traffic identified as illegitimate before it reaches your origin web server. (https://support.cloudflare.com/hc/en-us/articles/200172016).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetWebApplicationFirewallWafSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetWebApplicationFirewallWafSetting200Response response = api.zoneSettingsGetWebApplicationFirewallWafSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get WebP setting
     *
     * When the client requesting the image supports the WebP image codec, and WebP offers a performance advantage over the original image format, Cloudflare will serve a WebP version of the original image.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetWebPSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetWebPSetting200Response response = api.zoneSettingsGetWebPSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get WebSockets setting
     *
     * Gets Websockets setting. For more information about Websockets, please refer to [Using Cloudflare with WebSockets](https://support.cloudflare.com/hc/en-us/articles/200169466-Using-Cloudflare-with-WebSockets).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneSettingsGetWebSocketsSettingTest() throws ApiException {
        String zoneId = null;
        ZoneSettingsGetWebSocketsSetting200Response response = api.zoneSettingsGetWebSocketsSetting(zoneId);
        // TODO: test validations
    }

}
