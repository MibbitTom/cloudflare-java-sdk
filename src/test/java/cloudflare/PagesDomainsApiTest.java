/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiException;
import org.openapitools.client.model.PagesDomainResponseCollection;
import org.openapitools.client.model.PagesDomainResponseSingle;
import org.openapitools.client.model.PagesDomainsAddDomain4XXResponse;
import org.openapitools.client.model.PagesDomainsGetDomains4XXResponse;
import org.openapitools.client.model.PagesProjectDeleteProject4XXResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PagesDomainsApi
 */
@Disabled
public class PagesDomainsApiTest {

    private final PagesDomainsApi api = new PagesDomainsApi();

    /**
     * Add domain
     *
     * Add a new domain for the Pages project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pagesDomainsAddDomainTest() throws ApiException {
        String projectName = null;
        String accountId = null;
        Object body = null;
        PagesDomainResponseSingle response = api.pagesDomainsAddDomain(projectName, accountId, body);
        // TODO: test validations
    }

    /**
     * Delete domain
     *
     * Delete a Pages project&#39;s domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pagesDomainsDeleteDomainTest() throws ApiException {
        String domainName = null;
        String projectName = null;
        String accountId = null;
        Object response = api.pagesDomainsDeleteDomain(domainName, projectName, accountId);
        // TODO: test validations
    }

    /**
     * Get domain
     *
     * Fetch a single domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pagesDomainsGetDomainTest() throws ApiException {
        String domainName = null;
        String projectName = null;
        String accountId = null;
        PagesDomainResponseSingle response = api.pagesDomainsGetDomain(domainName, projectName, accountId);
        // TODO: test validations
    }

    /**
     * Get domains
     *
     * Fetch a list of all domains associated with a Pages project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pagesDomainsGetDomainsTest() throws ApiException {
        String projectName = null;
        String accountId = null;
        PagesDomainResponseCollection response = api.pagesDomainsGetDomains(projectName, accountId);
        // TODO: test validations
    }

    /**
     * Patch domain
     *
     * Retry the validation status of a single domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pagesDomainsPatchDomainTest() throws ApiException {
        String domainName = null;
        String projectName = null;
        String accountId = null;
        PagesDomainResponseSingle response = api.pagesDomainsPatchDomain(domainName, projectName, accountId);
        // TODO: test validations
    }

}
