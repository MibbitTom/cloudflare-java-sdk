/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiException;
import org.openapitools.client.model.AccessApiResponseCommonFailure;
import org.openapitools.client.model.AccessIdResponse;
import org.openapitools.client.model.AccessIdentityProviders;
import org.openapitools.client.model.AccessResponseCollection;
import org.openapitools.client.model.AccessSchemasSingleResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccessIdentityProvidersApi
 */
@Disabled
public class AccessIdentityProvidersApiTest {

    private final AccessIdentityProvidersApi api = new AccessIdentityProvidersApi();

    /**
     * Add an Access identity provider
     *
     * Adds a new identity provider to Access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accessIdentityProvidersAddAnAccessIdentityProviderTest() throws ApiException {
        String identifier = null;
        AccessIdentityProviders accessIdentityProviders = null;
        AccessSchemasSingleResponse response = api.accessIdentityProvidersAddAnAccessIdentityProvider(identifier, accessIdentityProviders);
        // TODO: test validations
    }

    /**
     * Delete an Access identity provider
     *
     * Deletes an identity provider from Access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accessIdentityProvidersDeleteAnAccessIdentityProviderTest() throws ApiException {
        String uuid = null;
        String identifier = null;
        AccessIdResponse response = api.accessIdentityProvidersDeleteAnAccessIdentityProvider(uuid, identifier);
        // TODO: test validations
    }

    /**
     * Get an Access identity provider
     *
     * Fetches a configured identity provider.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accessIdentityProvidersGetAnAccessIdentityProviderTest() throws ApiException {
        String uuid = null;
        String identifier = null;
        AccessSchemasSingleResponse response = api.accessIdentityProvidersGetAnAccessIdentityProvider(uuid, identifier);
        // TODO: test validations
    }

    /**
     * List Access identity providers
     *
     * Lists all configured identity providers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accessIdentityProvidersListAccessIdentityProvidersTest() throws ApiException {
        String identifier = null;
        AccessResponseCollection response = api.accessIdentityProvidersListAccessIdentityProviders(identifier);
        // TODO: test validations
    }

    /**
     * Update an Access identity provider
     *
     * Updates a configured identity provider.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accessIdentityProvidersUpdateAnAccessIdentityProviderTest() throws ApiException {
        String uuid = null;
        String identifier = null;
        AccessIdentityProviders accessIdentityProviders = null;
        AccessSchemasSingleResponse response = api.accessIdentityProvidersUpdateAnAccessIdentityProvider(uuid, identifier, accessIdentityProviders);
        // TODO: test validations
    }

}
