/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.RadarGetBgpHijacksEvents200Response;
import org.openapitools.client.model.RadarGetBgpIpSpaceTimeseries200Response;
import org.openapitools.client.model.RadarGetBgpPfx2as200Response;
import org.openapitools.client.model.RadarGetBgpPfx2asMoas200Response;
import org.openapitools.client.model.RadarGetBgpRouteLeakEvents200Response;
import org.openapitools.client.model.RadarGetBgpRoutesStats200Response;
import org.openapitools.client.model.RadarGetBgpTopAses200Response;
import org.openapitools.client.model.RadarGetBgpTopAsnsByPrefixes200Response;
import org.openapitools.client.model.RadarGetBgpTopPrefixes200Response;
import org.openapitools.client.model.RadarGetDnsAs112Timeseries200Response;
import org.openapitools.client.model.RadarGetDnsAs112TopLocations404Response;
import org.openapitools.client.model.WorkersAiListFinetunes400Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RadarBgpApi
 */
@Disabled
public class RadarBgpApiTest {

    private final RadarBgpApi api = new RadarBgpApi();

    /**
     * Get BGP hijack events
     *
     * Get the BGP hijack events. (Beta)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetBgpHijacksEventsTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        Integer eventId = null;
        Integer hijackerAsn = null;
        Integer victimAsn = null;
        Integer involvedAsn = null;
        String involvedCountry = null;
        String prefix = null;
        Integer minConfidence = null;
        Integer maxConfidence = null;
        String dateRange = null;
        OffsetDateTime dateStart = null;
        OffsetDateTime dateEnd = null;
        String sortBy = null;
        String sortOrder = null;
        String format = null;
        RadarGetBgpHijacksEvents200Response response = api.radarGetBgpHijacksEvents(page, perPage, eventId, hijackerAsn, victimAsn, involvedAsn, involvedCountry, prefix, minConfidence, maxConfidence, dateRange, dateStart, dateEnd, sortBy, sortOrder, format);
        // TODO: test validations
    }

    /**
     * Get BGP IP space time series
     *
     * Gets time-series data for the announced IP space count, represented as the number of IPv4 /24s and IPv6 /48s, for a given ASN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetBgpIpSpaceTimeseriesTest() throws ApiException {
        String dateRange = null;
        OffsetDateTime dateStart = null;
        OffsetDateTime dateEnd = null;
        Integer asn = null;
        String location = null;
        Boolean includeDelay = null;
        String format = null;
        RadarGetBgpIpSpaceTimeseries200Response response = api.radarGetBgpIpSpaceTimeseries(dateRange, dateStart, dateEnd, asn, location, includeDelay, format);
        // TODO: test validations
    }

    /**
     * Get prefix-to-ASN mapping
     *
     * Lookup prefix-to-ASN mapping on global routing tables.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetBgpPfx2asTest() throws ApiException {
        Integer origin = null;
        String prefix = null;
        String rpkiStatus = null;
        Boolean longestPrefixMatch = null;
        String format = null;
        RadarGetBgpPfx2as200Response response = api.radarGetBgpPfx2as(origin, prefix, rpkiStatus, longestPrefixMatch, format);
        // TODO: test validations
    }

    /**
     * Get MOASes
     *
     * List all Multi-origin AS (MOAS) prefixes on the global routing tables.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetBgpPfx2asMoasTest() throws ApiException {
        Integer origin = null;
        String prefix = null;
        Boolean invalidOnly = null;
        String format = null;
        RadarGetBgpPfx2asMoas200Response response = api.radarGetBgpPfx2asMoas(origin, prefix, invalidOnly, format);
        // TODO: test validations
    }

    /**
     * Get BGP route leak events
     *
     * Get the BGP route leak events (Beta).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetBgpRouteLeakEventsTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        Integer eventId = null;
        Integer leakAsn = null;
        Integer involvedAsn = null;
        String involvedCountry = null;
        String dateRange = null;
        OffsetDateTime dateStart = null;
        OffsetDateTime dateEnd = null;
        String sortBy = null;
        String sortOrder = null;
        String format = null;
        RadarGetBgpRouteLeakEvents200Response response = api.radarGetBgpRouteLeakEvents(page, perPage, eventId, leakAsn, involvedAsn, involvedCountry, dateRange, dateStart, dateEnd, sortBy, sortOrder, format);
        // TODO: test validations
    }

    /**
     * Get BGP routing table stats 
     *
     * Get the BGP routing table stats (Beta).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetBgpRoutesStatsTest() throws ApiException {
        Integer asn = null;
        String location = null;
        String format = null;
        RadarGetBgpRoutesStats200Response response = api.radarGetBgpRoutesStats(asn, location, format);
        // TODO: test validations
    }

    /**
     * Get BGP time series
     *
     * Gets BGP updates change over time. Raw values are returned. When requesting updates of an autonomous system (AS), only BGP updates of type announcement are returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetBgpTimeseriesTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> prefix = null;
        List<String> updateType = null;
        List<String> asn = null;
        String format = null;
        RadarGetDnsAs112Timeseries200Response response = api.radarGetBgpTimeseries(aggInterval, name, dateRange, dateStart, dateEnd, prefix, updateType, asn, format);
        // TODO: test validations
    }

    /**
     * Get top autonomous systems
     *
     * Get the top autonomous systems (AS) by BGP updates (announcements only). Values are a percentage out of the total updates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetBgpTopAsesTest() throws ApiException {
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> prefix = null;
        List<String> updateType = null;
        String format = null;
        RadarGetBgpTopAses200Response response = api.radarGetBgpTopAses(limit, name, dateRange, dateStart, dateEnd, asn, prefix, updateType, format);
        // TODO: test validations
    }

    /**
     * Get list of ASNs ordered by prefix count
     *
     * Get the full list of autonomous systems on the global routing table ordered by announced prefixes count. The data comes from public BGP MRT data archives and updates every 2 hours.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetBgpTopAsnsByPrefixesTest() throws ApiException {
        String country = null;
        Integer limit = null;
        String format = null;
        RadarGetBgpTopAsnsByPrefixes200Response response = api.radarGetBgpTopAsnsByPrefixes(country, limit, format);
        // TODO: test validations
    }

    /**
     * Get top prefixes
     *
     * Get the top network prefixes by BGP updates. Values are a percentage out of the total BGP updates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetBgpTopPrefixesTest() throws ApiException {
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> asn = null;
        List<String> updateType = null;
        String format = null;
        RadarGetBgpTopPrefixes200Response response = api.radarGetBgpTopPrefixes(limit, name, dateRange, dateStart, dateEnd, asn, updateType, format);
        // TODO: test validations
    }

}
