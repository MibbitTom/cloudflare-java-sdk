/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiException;
import org.openapitools.client.model.AccessApiResponseCommonFailure;
import org.openapitools.client.model.AccessCertificatesComponentsSchemasResponseCollection2;
import org.openapitools.client.model.AccessCertificatesComponentsSchemasSingleResponse2;
import org.openapitools.client.model.AccessComponentsSchemasIdResponse;
import org.openapitools.client.model.AccessMtlsAuthenticationAddAnMtlsCertificateRequest;
import org.openapitools.client.model.AccessMtlsAuthenticationUpdateAnMtlsCertificateRequest;
import org.openapitools.client.model.AccessMtlsAuthenticationUpdateAnMtlsCertificateSettingsRequest;
import org.openapitools.client.model.AccessResponseCollectionHostnames;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ZoneLevelAccessMTlsAuthenticationApi
 */
@Disabled
public class ZoneLevelAccessMTlsAuthenticationApiTest {

    private final ZoneLevelAccessMTlsAuthenticationApi api = new ZoneLevelAccessMTlsAuthenticationApi();

    /**
     * Add an mTLS certificate
     *
     * Adds a new mTLS root certificate to Access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneLevelAccessMtlsAuthenticationAddAnMtlsCertificateTest() throws ApiException {
        String identifier = null;
        AccessMtlsAuthenticationAddAnMtlsCertificateRequest accessMtlsAuthenticationAddAnMtlsCertificateRequest = null;
        AccessCertificatesComponentsSchemasSingleResponse2 response = api.zoneLevelAccessMtlsAuthenticationAddAnMtlsCertificate(identifier, accessMtlsAuthenticationAddAnMtlsCertificateRequest);
        // TODO: test validations
    }

    /**
     * Delete an mTLS certificate
     *
     * Deletes an mTLS certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneLevelAccessMtlsAuthenticationDeleteAnMtlsCertificateTest() throws ApiException {
        String uuid = null;
        String identifier = null;
        AccessComponentsSchemasIdResponse response = api.zoneLevelAccessMtlsAuthenticationDeleteAnMtlsCertificate(uuid, identifier);
        // TODO: test validations
    }

    /**
     * Get an mTLS certificate
     *
     * Fetches a single mTLS certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneLevelAccessMtlsAuthenticationGetAnMtlsCertificateTest() throws ApiException {
        String uuid = null;
        String identifier = null;
        AccessCertificatesComponentsSchemasSingleResponse2 response = api.zoneLevelAccessMtlsAuthenticationGetAnMtlsCertificate(uuid, identifier);
        // TODO: test validations
    }

    /**
     * List mTLS certificates
     *
     * Lists all mTLS certificates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneLevelAccessMtlsAuthenticationListMtlsCertificatesTest() throws ApiException {
        String identifier = null;
        AccessCertificatesComponentsSchemasResponseCollection2 response = api.zoneLevelAccessMtlsAuthenticationListMtlsCertificates(identifier);
        // TODO: test validations
    }

    /**
     * List all mTLS hostname settings
     *
     * List all mTLS hostname settings for this zone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneLevelAccessMtlsAuthenticationListMtlsCertificatesHostnameSettingsTest() throws ApiException {
        String identifier = null;
        AccessResponseCollectionHostnames response = api.zoneLevelAccessMtlsAuthenticationListMtlsCertificatesHostnameSettings(identifier);
        // TODO: test validations
    }

    /**
     * Update an mTLS certificate
     *
     * Updates a configured mTLS certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneLevelAccessMtlsAuthenticationUpdateAnMtlsCertificateTest() throws ApiException {
        String uuid = null;
        String identifier = null;
        AccessMtlsAuthenticationUpdateAnMtlsCertificateRequest accessMtlsAuthenticationUpdateAnMtlsCertificateRequest = null;
        AccessCertificatesComponentsSchemasSingleResponse2 response = api.zoneLevelAccessMtlsAuthenticationUpdateAnMtlsCertificate(uuid, identifier, accessMtlsAuthenticationUpdateAnMtlsCertificateRequest);
        // TODO: test validations
    }

    /**
     * Update an mTLS certificate&#39;s hostname settings
     *
     * Updates an mTLS certificate&#39;s hostname settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneLevelAccessMtlsAuthenticationUpdateAnMtlsCertificateSettingsTest() throws ApiException {
        String identifier = null;
        AccessMtlsAuthenticationUpdateAnMtlsCertificateSettingsRequest accessMtlsAuthenticationUpdateAnMtlsCertificateSettingsRequest = null;
        AccessResponseCollectionHostnames response = api.zoneLevelAccessMtlsAuthenticationUpdateAnMtlsCertificateSettings(identifier, accessMtlsAuthenticationUpdateAnMtlsCertificateSettingsRequest);
        // TODO: test validations
    }

}
