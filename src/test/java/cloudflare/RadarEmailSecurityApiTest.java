/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cloudflare;

import invalidPackageName.ApiException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.RadarGetDnsAs112TopLocations404Response;
import org.openapitools.client.model.RadarGetEmailRoutingSummaryByArc200Response;
import org.openapitools.client.model.RadarGetEmailRoutingTimeseriesGroupByArc200Response;
import org.openapitools.client.model.RadarGetEmailSecuritySummaryByMalicious200Response;
import org.openapitools.client.model.RadarGetEmailSecuritySummaryBySpam200Response;
import org.openapitools.client.model.RadarGetEmailSecuritySummaryBySpoof200Response;
import org.openapitools.client.model.RadarGetEmailSecuritySummaryByThreatCategory200Response;
import org.openapitools.client.model.RadarGetEmailSecuritySummaryByTlsVersion200Response;
import org.openapitools.client.model.RadarGetEmailSecurityTimeseriesGroupByMalicious200Response;
import org.openapitools.client.model.RadarGetEmailSecurityTimeseriesGroupBySpam200Response;
import org.openapitools.client.model.RadarGetEmailSecurityTimeseriesGroupBySpoof200Response;
import org.openapitools.client.model.RadarGetEmailSecurityTimeseriesGroupByThreatCategory200Response;
import org.openapitools.client.model.RadarGetEmailSecurityTimeseriesGroupByTlsVersion200Response;
import org.openapitools.client.model.RadarGetEmailSecurityTopTldsByMessages200Response;
import org.openapitools.client.model.WorkersAiListFinetunes400Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RadarEmailSecurityApi
 */
@Disabled
public class RadarEmailSecurityApiTest {

    private final RadarEmailSecurityApi api = new RadarEmailSecurityApi();

    /**
     * Get ARC Validations Summary
     *
     * Percentage distribution of emails classified per ARC validation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetEmailSecuritySummaryByArcTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> dkim = null;
        List<String> dmarc = null;
        List<String> spf = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetEmailRoutingSummaryByArc200Response response = api.radarGetEmailSecuritySummaryByArc(name, dateRange, dateStart, dateEnd, dkim, dmarc, spf, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get DKIM Validations Summary
     *
     * Percentage distribution of emails classified per DKIM validation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetEmailSecuritySummaryByDkimTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> arc = null;
        List<String> dmarc = null;
        List<String> spf = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetEmailRoutingSummaryByArc200Response response = api.radarGetEmailSecuritySummaryByDkim(name, dateRange, dateStart, dateEnd, arc, dmarc, spf, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get DMARC Validations Summary
     *
     * Percentage distribution of emails classified per DMARC validation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetEmailSecuritySummaryByDmarcTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> arc = null;
        List<String> dkim = null;
        List<String> spf = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetEmailRoutingSummaryByArc200Response response = api.radarGetEmailSecuritySummaryByDmarc(name, dateRange, dateStart, dateEnd, arc, dkim, spf, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get MALICIOUS Validations Summary
     *
     * Percentage distribution of emails classified as MALICIOUS.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetEmailSecuritySummaryByMaliciousTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> arc = null;
        List<String> dkim = null;
        List<String> dmarc = null;
        List<String> spf = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetEmailSecuritySummaryByMalicious200Response response = api.radarGetEmailSecuritySummaryByMalicious(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get SPAM Summary
     *
     * Proportion of emails categorized as either spam or legitimate (non-spam).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetEmailSecuritySummaryBySpamTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> arc = null;
        List<String> dkim = null;
        List<String> dmarc = null;
        List<String> spf = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetEmailSecuritySummaryBySpam200Response response = api.radarGetEmailSecuritySummaryBySpam(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get SPF Validations Summary
     *
     * Percentage distribution of emails classified per SPF validation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetEmailSecuritySummaryBySpfTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> arc = null;
        List<String> dkim = null;
        List<String> dmarc = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetEmailRoutingSummaryByArc200Response response = api.radarGetEmailSecuritySummaryBySpf(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get SPOOF Summary
     *
     * Proportion of emails categorized as either spoof or legitimate (non-spoof).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetEmailSecuritySummaryBySpoofTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> arc = null;
        List<String> dkim = null;
        List<String> dmarc = null;
        List<String> spf = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetEmailSecuritySummaryBySpoof200Response response = api.radarGetEmailSecuritySummaryBySpoof(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get Threat Categories Summary
     *
     * Percentage distribution of emails classified in Threat Categories.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetEmailSecuritySummaryByThreatCategoryTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> arc = null;
        List<String> dkim = null;
        List<String> dmarc = null;
        List<String> spf = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetEmailSecuritySummaryByThreatCategory200Response response = api.radarGetEmailSecuritySummaryByThreatCategory(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get TLS Version Summary
     *
     * Percentage distribution of emails classified per TLS Version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetEmailSecuritySummaryByTlsVersionTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> arc = null;
        List<String> dkim = null;
        List<String> dmarc = null;
        List<String> spf = null;
        String format = null;
        RadarGetEmailSecuritySummaryByTlsVersion200Response response = api.radarGetEmailSecuritySummaryByTlsVersion(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, format);
        // TODO: test validations
    }

    /**
     * Get ARC Validations Time Series
     *
     * Percentage distribution of emails classified per Arc validation over time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetEmailSecurityTimeseriesGroupByArcTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> dkim = null;
        List<String> dmarc = null;
        List<String> spf = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetEmailRoutingTimeseriesGroupByArc200Response response = api.radarGetEmailSecurityTimeseriesGroupByArc(aggInterval, name, dateRange, dateStart, dateEnd, dkim, dmarc, spf, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get DKIM Validations Time Series
     *
     * Percentage distribution of emails classified per DKIM validation over time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetEmailSecurityTimeseriesGroupByDkimTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> arc = null;
        List<String> dmarc = null;
        List<String> spf = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetEmailRoutingTimeseriesGroupByArc200Response response = api.radarGetEmailSecurityTimeseriesGroupByDkim(aggInterval, name, dateRange, dateStart, dateEnd, arc, dmarc, spf, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get DMARC Validations Time Series
     *
     * Percentage distribution of emails classified per DMARC validation over time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetEmailSecurityTimeseriesGroupByDmarcTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> arc = null;
        List<String> dkim = null;
        List<String> spf = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetEmailRoutingTimeseriesGroupByArc200Response response = api.radarGetEmailSecurityTimeseriesGroupByDmarc(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, spf, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get MALICIOUS Validations Time Series
     *
     * Percentage distribution of emails classified as MALICIOUS over time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetEmailSecurityTimeseriesGroupByMaliciousTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> arc = null;
        List<String> dkim = null;
        List<String> dmarc = null;
        List<String> spf = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetEmailSecurityTimeseriesGroupByMalicious200Response response = api.radarGetEmailSecurityTimeseriesGroupByMalicious(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get SPAM Validations Time Series
     *
     * Percentage distribution of emails classified as SPAM over time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetEmailSecurityTimeseriesGroupBySpamTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> arc = null;
        List<String> dkim = null;
        List<String> dmarc = null;
        List<String> spf = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetEmailSecurityTimeseriesGroupBySpam200Response response = api.radarGetEmailSecurityTimeseriesGroupBySpam(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get SPF Validations Time Series
     *
     * Percentage distribution of emails classified per SPF validation over time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetEmailSecurityTimeseriesGroupBySpfTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> arc = null;
        List<String> dkim = null;
        List<String> dmarc = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetEmailRoutingTimeseriesGroupByArc200Response response = api.radarGetEmailSecurityTimeseriesGroupBySpf(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get SPOOF Validations Time Series
     *
     * Percentage distribution of emails classified as SPOOF over time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetEmailSecurityTimeseriesGroupBySpoofTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> arc = null;
        List<String> dkim = null;
        List<String> dmarc = null;
        List<String> spf = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetEmailSecurityTimeseriesGroupBySpoof200Response response = api.radarGetEmailSecurityTimeseriesGroupBySpoof(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get Threat Categories Time Series
     *
     * Percentage distribution of emails classified in Threat Categories over time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetEmailSecurityTimeseriesGroupByThreatCategoryTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> arc = null;
        List<String> dkim = null;
        List<String> dmarc = null;
        List<String> spf = null;
        List<String> tlsVersion = null;
        String format = null;
        RadarGetEmailSecurityTimeseriesGroupByThreatCategory200Response response = api.radarGetEmailSecurityTimeseriesGroupByThreatCategory(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, format);
        // TODO: test validations
    }

    /**
     * Get TLS Version Time Series
     *
     * Percentage distribution of emails classified per TLS Version over time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetEmailSecurityTimeseriesGroupByTlsVersionTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> arc = null;
        List<String> dkim = null;
        List<String> dmarc = null;
        List<String> spf = null;
        String format = null;
        RadarGetEmailSecurityTimeseriesGroupByTlsVersion200Response response = api.radarGetEmailSecurityTimeseriesGroupByTlsVersion(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, format);
        // TODO: test validations
    }

    /**
     * Get Top TLDs By Malicious Classification
     *
     * Get the TLDs by emails classified as malicious or not.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetEmailSecurityTopTldsByMaliciousTest() throws ApiException {
        String malicious = null;
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> arc = null;
        List<String> dkim = null;
        List<String> dmarc = null;
        List<String> spf = null;
        List<String> tlsVersion = null;
        String tldCategory = null;
        String format = null;
        RadarGetEmailSecurityTopTldsByMessages200Response response = api.radarGetEmailSecurityTopTldsByMalicious(malicious, limit, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, tldCategory, format);
        // TODO: test validations
    }

    /**
     * Get Top TLDs By Email Messages
     *
     * Get the top TLDs by email messages. Values are a percentage out of the total emails.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetEmailSecurityTopTldsByMessagesTest() throws ApiException {
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> arc = null;
        List<String> dkim = null;
        List<String> dmarc = null;
        List<String> spf = null;
        List<String> tlsVersion = null;
        String tldCategory = null;
        String format = null;
        RadarGetEmailSecurityTopTldsByMessages200Response response = api.radarGetEmailSecurityTopTldsByMessages(limit, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, tldCategory, format);
        // TODO: test validations
    }

    /**
     * Get Top TLDs By Spam Classification
     *
     * Get the top TLDs by emails classified as Spam or not.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetEmailSecurityTopTldsBySpamTest() throws ApiException {
        String spam = null;
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> arc = null;
        List<String> dkim = null;
        List<String> dmarc = null;
        List<String> spf = null;
        List<String> tlsVersion = null;
        String tldCategory = null;
        String format = null;
        RadarGetEmailSecurityTopTldsByMessages200Response response = api.radarGetEmailSecurityTopTldsBySpam(spam, limit, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, tldCategory, format);
        // TODO: test validations
    }

    /**
     * Get Top TLDs By Spoof Classification
     *
     * Get the TLDs by emails classified as spoof or not.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetEmailSecurityTopTldsBySpoofTest() throws ApiException {
        String spoof = null;
        Integer limit = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> arc = null;
        List<String> dkim = null;
        List<String> dmarc = null;
        List<String> spf = null;
        List<String> tlsVersion = null;
        String tldCategory = null;
        String format = null;
        RadarGetEmailSecurityTopTldsByMessages200Response response = api.radarGetEmailSecurityTopTldsBySpoof(spoof, limit, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, tlsVersion, tldCategory, format);
        // TODO: test validations
    }

}
