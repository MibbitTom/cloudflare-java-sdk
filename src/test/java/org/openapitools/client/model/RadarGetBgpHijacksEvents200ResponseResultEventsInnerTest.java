/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RadarGetBgpHijacksEvents200ResponseResultEventsInnerTagsInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for RadarGetBgpHijacksEvents200ResponseResultEventsInner
 */
public class RadarGetBgpHijacksEvents200ResponseResultEventsInnerTest {
    private final RadarGetBgpHijacksEvents200ResponseResultEventsInner model = new RadarGetBgpHijacksEvents200ResponseResultEventsInner();

    /**
     * Model tests for RadarGetBgpHijacksEvents200ResponseResultEventsInner
     */
    @Test
    public void testRadarGetBgpHijacksEvents200ResponseResultEventsInner() {
        // TODO: test RadarGetBgpHijacksEvents200ResponseResultEventsInner
    }

    /**
     * Test the property 'confidenceScore'
     */
    @Test
    public void confidenceScoreTest() {
        // TODO: test confidenceScore
    }

    /**
     * Test the property 'duration'
     */
    @Test
    public void durationTest() {
        // TODO: test duration
    }

    /**
     * Test the property 'eventType'
     */
    @Test
    public void eventTypeTest() {
        // TODO: test eventType
    }

    /**
     * Test the property 'hijackMsgsCount'
     */
    @Test
    public void hijackMsgsCountTest() {
        // TODO: test hijackMsgsCount
    }

    /**
     * Test the property 'hijackerAsn'
     */
    @Test
    public void hijackerAsnTest() {
        // TODO: test hijackerAsn
    }

    /**
     * Test the property 'hijackerCountry'
     */
    @Test
    public void hijackerCountryTest() {
        // TODO: test hijackerCountry
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'isStale'
     */
    @Test
    public void isStaleTest() {
        // TODO: test isStale
    }

    /**
     * Test the property 'maxHijackTs'
     */
    @Test
    public void maxHijackTsTest() {
        // TODO: test maxHijackTs
    }

    /**
     * Test the property 'maxMsgTs'
     */
    @Test
    public void maxMsgTsTest() {
        // TODO: test maxMsgTs
    }

    /**
     * Test the property 'minHijackTs'
     */
    @Test
    public void minHijackTsTest() {
        // TODO: test minHijackTs
    }

    /**
     * Test the property 'onGoingCount'
     */
    @Test
    public void onGoingCountTest() {
        // TODO: test onGoingCount
    }

    /**
     * Test the property 'peerAsns'
     */
    @Test
    public void peerAsnsTest() {
        // TODO: test peerAsns
    }

    /**
     * Test the property 'peerIpCount'
     */
    @Test
    public void peerIpCountTest() {
        // TODO: test peerIpCount
    }

    /**
     * Test the property 'prefixes'
     */
    @Test
    public void prefixesTest() {
        // TODO: test prefixes
    }

    /**
     * Test the property 'tags'
     */
    @Test
    public void tagsTest() {
        // TODO: test tags
    }

    /**
     * Test the property 'victimAsns'
     */
    @Test
    public void victimAsnsTest() {
        // TODO: test victimAsns
    }

    /**
     * Test the property 'victimCountries'
     */
    @Test
    public void victimCountriesTest() {
        // TODO: test victimCountries
    }

}
