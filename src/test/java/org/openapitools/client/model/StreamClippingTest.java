/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.StreamMediaState;
import org.openapitools.client.model.StreamPlayback;
import org.openapitools.client.model.StreamWatermarkAtUpload;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for StreamClipping
 */
public class StreamClippingTest {
    private final StreamClipping model = new StreamClipping();

    /**
     * Model tests for StreamClipping
     */
    @Test
    public void testStreamClipping() {
        // TODO: test StreamClipping
    }

    /**
     * Test the property 'allowedOrigins'
     */
    @Test
    public void allowedOriginsTest() {
        // TODO: test allowedOrigins
    }

    /**
     * Test the property 'clippedFromVideoUID'
     */
    @Test
    public void clippedFromVideoUIDTest() {
        // TODO: test clippedFromVideoUID
    }

    /**
     * Test the property 'created'
     */
    @Test
    public void createdTest() {
        // TODO: test created
    }

    /**
     * Test the property 'creator'
     */
    @Test
    public void creatorTest() {
        // TODO: test creator
    }

    /**
     * Test the property 'endTimeSeconds'
     */
    @Test
    public void endTimeSecondsTest() {
        // TODO: test endTimeSeconds
    }

    /**
     * Test the property 'maxDurationSeconds'
     */
    @Test
    public void maxDurationSecondsTest() {
        // TODO: test maxDurationSeconds
    }

    /**
     * Test the property 'meta'
     */
    @Test
    public void metaTest() {
        // TODO: test meta
    }

    /**
     * Test the property 'modified'
     */
    @Test
    public void modifiedTest() {
        // TODO: test modified
    }

    /**
     * Test the property 'playback'
     */
    @Test
    public void playbackTest() {
        // TODO: test playback
    }

    /**
     * Test the property 'preview'
     */
    @Test
    public void previewTest() {
        // TODO: test preview
    }

    /**
     * Test the property 'requireSignedURLs'
     */
    @Test
    public void requireSignedURLsTest() {
        // TODO: test requireSignedURLs
    }

    /**
     * Test the property 'startTimeSeconds'
     */
    @Test
    public void startTimeSecondsTest() {
        // TODO: test startTimeSeconds
    }

    /**
     * Test the property 'status'
     */
    @Test
    public void statusTest() {
        // TODO: test status
    }

    /**
     * Test the property 'thumbnailTimestampPct'
     */
    @Test
    public void thumbnailTimestampPctTest() {
        // TODO: test thumbnailTimestampPct
    }

    /**
     * Test the property 'watermark'
     */
    @Test
    public void watermarkTest() {
        // TODO: test watermark
    }

}
