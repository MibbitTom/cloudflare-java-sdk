/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ZarazZarazConfigBaseConsentButtonTextTranslations;
import org.openapitools.client.model.ZarazZarazConfigBaseConsentPurposesValue;
import org.openapitools.client.model.ZarazZarazConfigBaseConsentPurposesWithTranslationsValue;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ZarazZarazConfigBaseConsent
 */
public class ZarazZarazConfigBaseConsentTest {
    private final ZarazZarazConfigBaseConsent model = new ZarazZarazConfigBaseConsent();

    /**
     * Model tests for ZarazZarazConfigBaseConsent
     */
    @Test
    public void testZarazZarazConfigBaseConsent() {
        // TODO: test ZarazZarazConfigBaseConsent
    }

    /**
     * Test the property 'buttonTextTranslations'
     */
    @Test
    public void buttonTextTranslationsTest() {
        // TODO: test buttonTextTranslations
    }

    /**
     * Test the property 'companyEmail'
     */
    @Test
    public void companyEmailTest() {
        // TODO: test companyEmail
    }

    /**
     * Test the property 'companyName'
     */
    @Test
    public void companyNameTest() {
        // TODO: test companyName
    }

    /**
     * Test the property 'companyStreetAddress'
     */
    @Test
    public void companyStreetAddressTest() {
        // TODO: test companyStreetAddress
    }

    /**
     * Test the property 'consentModalIntroHTML'
     */
    @Test
    public void consentModalIntroHTMLTest() {
        // TODO: test consentModalIntroHTML
    }

    /**
     * Test the property 'consentModalIntroHTMLWithTranslations'
     */
    @Test
    public void consentModalIntroHTMLWithTranslationsTest() {
        // TODO: test consentModalIntroHTMLWithTranslations
    }

    /**
     * Test the property 'cookieName'
     */
    @Test
    public void cookieNameTest() {
        // TODO: test cookieName
    }

    /**
     * Test the property 'customCSS'
     */
    @Test
    public void customCSSTest() {
        // TODO: test customCSS
    }

    /**
     * Test the property 'customIntroDisclaimerDismissed'
     */
    @Test
    public void customIntroDisclaimerDismissedTest() {
        // TODO: test customIntroDisclaimerDismissed
    }

    /**
     * Test the property 'defaultLanguage'
     */
    @Test
    public void defaultLanguageTest() {
        // TODO: test defaultLanguage
    }

    /**
     * Test the property 'enabled'
     */
    @Test
    public void enabledTest() {
        // TODO: test enabled
    }

    /**
     * Test the property 'hideModal'
     */
    @Test
    public void hideModalTest() {
        // TODO: test hideModal
    }

    /**
     * Test the property 'purposes'
     */
    @Test
    public void purposesTest() {
        // TODO: test purposes
    }

    /**
     * Test the property 'purposesWithTranslations'
     */
    @Test
    public void purposesWithTranslationsTest() {
        // TODO: test purposesWithTranslations
    }

    /**
     * Test the property 'tcfCompliant'
     */
    @Test
    public void tcfCompliantTest() {
        // TODO: test tcfCompliant
    }

}
