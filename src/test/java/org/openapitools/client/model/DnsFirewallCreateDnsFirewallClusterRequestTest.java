/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DnsFirewallAttackMitigation;
import org.openapitools.client.model.DnsFirewallUpstreamIpsInner;
import org.openapitools.jackson.nullable.JsonNullable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for DnsFirewallCreateDnsFirewallClusterRequest
 */
public class DnsFirewallCreateDnsFirewallClusterRequestTest {
    private final DnsFirewallCreateDnsFirewallClusterRequest model = new DnsFirewallCreateDnsFirewallClusterRequest();

    /**
     * Model tests for DnsFirewallCreateDnsFirewallClusterRequest
     */
    @Test
    public void testDnsFirewallCreateDnsFirewallClusterRequest() {
        // TODO: test DnsFirewallCreateDnsFirewallClusterRequest
    }

    /**
     * Test the property 'attackMitigation'
     */
    @Test
    public void attackMitigationTest() {
        // TODO: test attackMitigation
    }

    /**
     * Test the property 'deprecateAnyRequests'
     */
    @Test
    public void deprecateAnyRequestsTest() {
        // TODO: test deprecateAnyRequests
    }

    /**
     * Test the property 'ecsFallback'
     */
    @Test
    public void ecsFallbackTest() {
        // TODO: test ecsFallback
    }

    /**
     * Test the property 'maximumCacheTtl'
     */
    @Test
    public void maximumCacheTtlTest() {
        // TODO: test maximumCacheTtl
    }

    /**
     * Test the property 'minimumCacheTtl'
     */
    @Test
    public void minimumCacheTtlTest() {
        // TODO: test minimumCacheTtl
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'negativeCacheTtl'
     */
    @Test
    public void negativeCacheTtlTest() {
        // TODO: test negativeCacheTtl
    }

    /**
     * Test the property 'ratelimit'
     */
    @Test
    public void ratelimitTest() {
        // TODO: test ratelimit
    }

    /**
     * Test the property 'retries'
     */
    @Test
    public void retriesTest() {
        // TODO: test retries
    }

    /**
     * Test the property 'upstreamIps'
     */
    @Test
    public void upstreamIpsTest() {
        // TODO: test upstreamIps
    }

}
