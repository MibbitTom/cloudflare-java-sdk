/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ZeroTrustGatewayRuleSettingsAuditSsh;
import org.openapitools.client.model.ZeroTrustGatewayRuleSettingsBisoAdminControls;
import org.openapitools.client.model.ZeroTrustGatewayRuleSettingsCheckSession;
import org.openapitools.client.model.ZeroTrustGatewayRuleSettingsDnsResolvers;
import org.openapitools.client.model.ZeroTrustGatewayRuleSettingsEgress;
import org.openapitools.client.model.ZeroTrustGatewayRuleSettingsL4override;
import org.openapitools.client.model.ZeroTrustGatewayRuleSettingsNotificationSettings;
import org.openapitools.client.model.ZeroTrustGatewayRuleSettingsPayloadLog;
import org.openapitools.client.model.ZeroTrustGatewayRuleSettingsUntrustedCert;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ZeroTrustGatewayRuleSettings
 */
public class ZeroTrustGatewayRuleSettingsTest {
    private final ZeroTrustGatewayRuleSettings model = new ZeroTrustGatewayRuleSettings();

    /**
     * Model tests for ZeroTrustGatewayRuleSettings
     */
    @Test
    public void testZeroTrustGatewayRuleSettings() {
        // TODO: test ZeroTrustGatewayRuleSettings
    }

    /**
     * Test the property 'addHeaders'
     */
    @Test
    public void addHeadersTest() {
        // TODO: test addHeaders
    }

    /**
     * Test the property 'allowChildBypass'
     */
    @Test
    public void allowChildBypassTest() {
        // TODO: test allowChildBypass
    }

    /**
     * Test the property 'auditSsh'
     */
    @Test
    public void auditSshTest() {
        // TODO: test auditSsh
    }

    /**
     * Test the property 'bisoAdminControls'
     */
    @Test
    public void bisoAdminControlsTest() {
        // TODO: test bisoAdminControls
    }

    /**
     * Test the property 'blockPageEnabled'
     */
    @Test
    public void blockPageEnabledTest() {
        // TODO: test blockPageEnabled
    }

    /**
     * Test the property 'blockReason'
     */
    @Test
    public void blockReasonTest() {
        // TODO: test blockReason
    }

    /**
     * Test the property 'bypassParentRule'
     */
    @Test
    public void bypassParentRuleTest() {
        // TODO: test bypassParentRule
    }

    /**
     * Test the property 'checkSession'
     */
    @Test
    public void checkSessionTest() {
        // TODO: test checkSession
    }

    /**
     * Test the property 'dnsResolvers'
     */
    @Test
    public void dnsResolversTest() {
        // TODO: test dnsResolvers
    }

    /**
     * Test the property 'egress'
     */
    @Test
    public void egressTest() {
        // TODO: test egress
    }

    /**
     * Test the property 'insecureDisableDnssecValidation'
     */
    @Test
    public void insecureDisableDnssecValidationTest() {
        // TODO: test insecureDisableDnssecValidation
    }

    /**
     * Test the property 'ipCategories'
     */
    @Test
    public void ipCategoriesTest() {
        // TODO: test ipCategories
    }

    /**
     * Test the property 'ipIndicatorFeeds'
     */
    @Test
    public void ipIndicatorFeedsTest() {
        // TODO: test ipIndicatorFeeds
    }

    /**
     * Test the property 'l4override'
     */
    @Test
    public void l4overrideTest() {
        // TODO: test l4override
    }

    /**
     * Test the property 'notificationSettings'
     */
    @Test
    public void notificationSettingsTest() {
        // TODO: test notificationSettings
    }

    /**
     * Test the property 'overrideHost'
     */
    @Test
    public void overrideHostTest() {
        // TODO: test overrideHost
    }

    /**
     * Test the property 'overrideIps'
     */
    @Test
    public void overrideIpsTest() {
        // TODO: test overrideIps
    }

    /**
     * Test the property 'payloadLog'
     */
    @Test
    public void payloadLogTest() {
        // TODO: test payloadLog
    }

    /**
     * Test the property 'resolveDnsThroughCloudflare'
     */
    @Test
    public void resolveDnsThroughCloudflareTest() {
        // TODO: test resolveDnsThroughCloudflare
    }

    /**
     * Test the property 'untrustedCert'
     */
    @Test
    public void untrustedCertTest() {
        // TODO: test untrustedCert
    }

}
