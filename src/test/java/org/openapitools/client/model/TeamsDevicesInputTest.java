/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TeamsDevicesApplicationInputRequest;
import org.openapitools.client.model.TeamsDevicesCarbonblackInputRequest;
import org.openapitools.client.model.TeamsDevicesClientCertificateInputRequest;
import org.openapitools.client.model.TeamsDevicesCrowdstrikeInputRequest;
import org.openapitools.client.model.TeamsDevicesDiskEncryptionInputRequest;
import org.openapitools.client.model.TeamsDevicesDomainJoinedInputRequest;
import org.openapitools.client.model.TeamsDevicesFileInputRequest;
import org.openapitools.client.model.TeamsDevicesFirewallInputRequest;
import org.openapitools.client.model.TeamsDevicesIntuneInputRequest;
import org.openapitools.client.model.TeamsDevicesKolideInputRequest;
import org.openapitools.client.model.TeamsDevicesOsVersionInputRequest;
import org.openapitools.client.model.TeamsDevicesSentineloneInputRequest;
import org.openapitools.client.model.TeamsDevicesSentineloneS2sInputRequest;
import org.openapitools.client.model.TeamsDevicesTaniumInputRequest;
import org.openapitools.client.model.TeamsDevicesUniqueClientIdInputRequest;
import org.openapitools.client.model.TeamsDevicesWorkspaceOneInputRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for TeamsDevicesInput
 */
public class TeamsDevicesInputTest {
    private final TeamsDevicesInput model = new TeamsDevicesInput();

    /**
     * Model tests for TeamsDevicesInput
     */
    @Test
    public void testTeamsDevicesInput() {
        // TODO: test TeamsDevicesInput
    }

    /**
     * Test the property 'exists'
     */
    @Test
    public void existsTest() {
        // TODO: test exists
    }

    /**
     * Test the property 'operatingSystem'
     */
    @Test
    public void operatingSystemTest() {
        // TODO: test operatingSystem
    }

    /**
     * Test the property 'path'
     */
    @Test
    public void pathTest() {
        // TODO: test path
    }

    /**
     * Test the property 'sha256'
     */
    @Test
    public void sha256Test() {
        // TODO: test sha256
    }

    /**
     * Test the property 'thumbprint'
     */
    @Test
    public void thumbprintTest() {
        // TODO: test thumbprint
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'domain'
     */
    @Test
    public void domainTest() {
        // TODO: test domain
    }

    /**
     * Test the property 'operator'
     */
    @Test
    public void operatorTest() {
        // TODO: test operator
    }

    /**
     * Test the property 'osDistroName'
     */
    @Test
    public void osDistroNameTest() {
        // TODO: test osDistroName
    }

    /**
     * Test the property 'osDistroRevision'
     */
    @Test
    public void osDistroRevisionTest() {
        // TODO: test osDistroRevision
    }

    /**
     * Test the property 'osVersionExtra'
     */
    @Test
    public void osVersionExtraTest() {
        // TODO: test osVersionExtra
    }

    /**
     * Test the property 'version'
     */
    @Test
    public void versionTest() {
        // TODO: test version
    }

    /**
     * Test the property 'enabled'
     */
    @Test
    public void enabledTest() {
        // TODO: test enabled
    }

    /**
     * Test the property 'checkDisks'
     */
    @Test
    public void checkDisksTest() {
        // TODO: test checkDisks
    }

    /**
     * Test the property 'requireAll'
     */
    @Test
    public void requireAllTest() {
        // TODO: test requireAll
    }

    /**
     * Test the property 'certificateId'
     */
    @Test
    public void certificateIdTest() {
        // TODO: test certificateId
    }

    /**
     * Test the property 'cn'
     */
    @Test
    public void cnTest() {
        // TODO: test cn
    }

    /**
     * Test the property 'complianceStatus'
     */
    @Test
    public void complianceStatusTest() {
        // TODO: test complianceStatus
    }

    /**
     * Test the property 'connectionId'
     */
    @Test
    public void connectionIdTest() {
        // TODO: test connectionId
    }

    /**
     * Test the property 'lastSeen'
     */
    @Test
    public void lastSeenTest() {
        // TODO: test lastSeen
    }

    /**
     * Test the property 'os'
     */
    @Test
    public void osTest() {
        // TODO: test os
    }

    /**
     * Test the property 'overall'
     */
    @Test
    public void overallTest() {
        // TODO: test overall
    }

    /**
     * Test the property 'sensorConfig'
     */
    @Test
    public void sensorConfigTest() {
        // TODO: test sensorConfig
    }

    /**
     * Test the property 'state'
     */
    @Test
    public void stateTest() {
        // TODO: test state
    }

    /**
     * Test the property 'versionOperator'
     */
    @Test
    public void versionOperatorTest() {
        // TODO: test versionOperator
    }

    /**
     * Test the property 'countOperator'
     */
    @Test
    public void countOperatorTest() {
        // TODO: test countOperator
    }

    /**
     * Test the property 'issueCount'
     */
    @Test
    public void issueCountTest() {
        // TODO: test issueCount
    }

    /**
     * Test the property 'eidLastSeen'
     */
    @Test
    public void eidLastSeenTest() {
        // TODO: test eidLastSeen
    }

    /**
     * Test the property 'riskLevel'
     */
    @Test
    public void riskLevelTest() {
        // TODO: test riskLevel
    }

    /**
     * Test the property 'scoreOperator'
     */
    @Test
    public void scoreOperatorTest() {
        // TODO: test scoreOperator
    }

    /**
     * Test the property 'totalScore'
     */
    @Test
    public void totalScoreTest() {
        // TODO: test totalScore
    }

    /**
     * Test the property 'activeThreats'
     */
    @Test
    public void activeThreatsTest() {
        // TODO: test activeThreats
    }

    /**
     * Test the property 'infected'
     */
    @Test
    public void infectedTest() {
        // TODO: test infected
    }

    /**
     * Test the property 'isActive'
     */
    @Test
    public void isActiveTest() {
        // TODO: test isActive
    }

    /**
     * Test the property 'networkStatus'
     */
    @Test
    public void networkStatusTest() {
        // TODO: test networkStatus
    }

}
