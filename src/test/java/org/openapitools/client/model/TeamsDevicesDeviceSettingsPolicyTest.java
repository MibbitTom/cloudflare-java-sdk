/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TeamsDevicesFallbackDomain;
import org.openapitools.client.model.TeamsDevicesServiceModeV2;
import org.openapitools.client.model.TeamsDevicesSplitTunnel;
import org.openapitools.client.model.TeamsDevicesSplitTunnelInclude;
import org.openapitools.client.model.TeamsDevicesTargetDexTest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for TeamsDevicesDeviceSettingsPolicy
 */
public class TeamsDevicesDeviceSettingsPolicyTest {
    private final TeamsDevicesDeviceSettingsPolicy model = new TeamsDevicesDeviceSettingsPolicy();

    /**
     * Model tests for TeamsDevicesDeviceSettingsPolicy
     */
    @Test
    public void testTeamsDevicesDeviceSettingsPolicy() {
        // TODO: test TeamsDevicesDeviceSettingsPolicy
    }

    /**
     * Test the property 'allowModeSwitch'
     */
    @Test
    public void allowModeSwitchTest() {
        // TODO: test allowModeSwitch
    }

    /**
     * Test the property 'allowUpdates'
     */
    @Test
    public void allowUpdatesTest() {
        // TODO: test allowUpdates
    }

    /**
     * Test the property 'allowedToLeave'
     */
    @Test
    public void allowedToLeaveTest() {
        // TODO: test allowedToLeave
    }

    /**
     * Test the property 'autoConnect'
     */
    @Test
    public void autoConnectTest() {
        // TODO: test autoConnect
    }

    /**
     * Test the property 'captivePortal'
     */
    @Test
    public void captivePortalTest() {
        // TODO: test captivePortal
    }

    /**
     * Test the property '_default'
     */
    @Test
    public void _defaultTest() {
        // TODO: test _default
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'disableAutoFallback'
     */
    @Test
    public void disableAutoFallbackTest() {
        // TODO: test disableAutoFallback
    }

    /**
     * Test the property 'enabled'
     */
    @Test
    public void enabledTest() {
        // TODO: test enabled
    }

    /**
     * Test the property 'exclude'
     */
    @Test
    public void excludeTest() {
        // TODO: test exclude
    }

    /**
     * Test the property 'excludeOfficeIps'
     */
    @Test
    public void excludeOfficeIpsTest() {
        // TODO: test excludeOfficeIps
    }

    /**
     * Test the property 'fallbackDomains'
     */
    @Test
    public void fallbackDomainsTest() {
        // TODO: test fallbackDomains
    }

    /**
     * Test the property 'gatewayUniqueId'
     */
    @Test
    public void gatewayUniqueIdTest() {
        // TODO: test gatewayUniqueId
    }

    /**
     * Test the property 'include'
     */
    @Test
    public void includeTest() {
        // TODO: test include
    }

    /**
     * Test the property 'lanAllowMinutes'
     */
    @Test
    public void lanAllowMinutesTest() {
        // TODO: test lanAllowMinutes
    }

    /**
     * Test the property 'lanAllowSubnetSize'
     */
    @Test
    public void lanAllowSubnetSizeTest() {
        // TODO: test lanAllowSubnetSize
    }

    /**
     * Test the property 'match'
     */
    @Test
    public void matchTest() {
        // TODO: test match
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'policyId'
     */
    @Test
    public void policyIdTest() {
        // TODO: test policyId
    }

    /**
     * Test the property 'precedence'
     */
    @Test
    public void precedenceTest() {
        // TODO: test precedence
    }

    /**
     * Test the property 'serviceModeV2'
     */
    @Test
    public void serviceModeV2Test() {
        // TODO: test serviceModeV2
    }

    /**
     * Test the property 'supportUrl'
     */
    @Test
    public void supportUrlTest() {
        // TODO: test supportUrl
    }

    /**
     * Test the property 'switchLocked'
     */
    @Test
    public void switchLockedTest() {
        // TODO: test switchLocked
    }

    /**
     * Test the property 'targetTests'
     */
    @Test
    public void targetTestsTest() {
        // TODO: test targetTests
    }

}
