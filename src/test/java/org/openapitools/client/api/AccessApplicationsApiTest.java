/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccessApiResponseCommonFailure;
import org.openapitools.client.model.AccessAppId;
import org.openapitools.client.model.AccessApplicationsAddAnApplication201Response;
import org.openapitools.client.model.AccessApps;
import org.openapitools.client.model.AccessAppsComponentsSchemasResponseCollection;
import org.openapitools.client.model.AccessAppsComponentsSchemasSingleResponse;
import org.openapitools.client.model.AccessIdResponse;
import org.openapitools.client.model.AccessPolicyCheckResponse;
import org.openapitools.client.model.AccessSchemasEmptyResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccessApplicationsApi
 */
@Disabled
public class AccessApplicationsApiTest {

    private final AccessApplicationsApi api = new AccessApplicationsApi();

    /**
     * Add an Access Application
     *
     * Adds a new application to Access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accessApplicationsAddAnApplicationTest() throws ApiException {
        String identifier = null;
        AccessApps accessApps = null;
        AccessApplicationsAddAnApplication201Response response = api.accessApplicationsAddAnApplication(identifier, accessApps);
        // TODO: test validations
    }

    /**
     * Delete an Access application
     *
     * Deletes an application from Access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accessApplicationsDeleteAnAccessApplicationTest() throws ApiException {
        AccessAppId appId = null;
        String identifier = null;
        AccessIdResponse response = api.accessApplicationsDeleteAnAccessApplication(appId, identifier);
        // TODO: test validations
    }

    /**
     * Get an Access application
     *
     * Fetches information about an Access application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accessApplicationsGetAnAccessApplicationTest() throws ApiException {
        AccessAppId appId = null;
        String identifier = null;
        AccessAppsComponentsSchemasSingleResponse response = api.accessApplicationsGetAnAccessApplication(appId, identifier);
        // TODO: test validations
    }

    /**
     * List Access applications
     *
     * Lists all Access applications in an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accessApplicationsListAccessApplicationsTest() throws ApiException {
        String identifier = null;
        AccessAppsComponentsSchemasResponseCollection response = api.accessApplicationsListAccessApplications(identifier);
        // TODO: test validations
    }

    /**
     * Revoke application tokens
     *
     * Revokes all tokens issued for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accessApplicationsRevokeServiceTokensTest() throws ApiException {
        AccessAppId appId = null;
        String identifier = null;
        AccessSchemasEmptyResponse response = api.accessApplicationsRevokeServiceTokens(appId, identifier);
        // TODO: test validations
    }

    /**
     * Test Access policies
     *
     * Tests if a specific user has permission to access an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accessApplicationsTestAccessPoliciesTest() throws ApiException {
        AccessAppId appId = null;
        String identifier = null;
        AccessPolicyCheckResponse response = api.accessApplicationsTestAccessPolicies(appId, identifier);
        // TODO: test validations
    }

    /**
     * Update an Access application
     *
     * Updates an Access application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accessApplicationsUpdateABookmarkApplicationTest() throws ApiException {
        AccessAppId appId = null;
        String identifier = null;
        AccessApps accessApps = null;
        AccessApplicationsAddAnApplication201Response response = api.accessApplicationsUpdateABookmarkApplication(appId, identifier, accessApps);
        // TODO: test validations
    }

}
