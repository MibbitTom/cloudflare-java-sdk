/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.MagicComponentsSchemasModifiedTunnelsCollectionResponse;
import org.openapitools.client.model.MagicComponentsSchemasTunnelModifiedResponse;
import org.openapitools.client.model.MagicComponentsSchemasTunnelSingleResponse;
import org.openapitools.client.model.MagicComponentsSchemasTunnelUpdateRequest;
import org.openapitools.client.model.MagicComponentsSchemasTunnelsCollectionResponse;
import org.openapitools.client.model.MagicInterconnectsListInterconnectDetails4xxResponse;
import org.openapitools.client.model.MagicInterconnectsListInterconnects4xxResponse;
import org.openapitools.client.model.MagicInterconnectsUpdateInterconnect4xxResponse;
import org.openapitools.client.model.MagicInterconnectsUpdateMultipleInterconnects4xxResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MagicInterconnectsApi
 */
@Disabled
public class MagicInterconnectsApiTest {

    private final MagicInterconnectsApi api = new MagicInterconnectsApi();

    /**
     * List interconnect Details
     *
     * Lists details for a specific interconnect.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void magicInterconnectsListInterconnectDetailsTest() throws ApiException {
        String tunnelIdentifier = null;
        String accountId = null;
        MagicComponentsSchemasTunnelSingleResponse response = api.magicInterconnectsListInterconnectDetails(tunnelIdentifier, accountId);
        // TODO: test validations
    }

    /**
     * List interconnects
     *
     * Lists interconnects associated with an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void magicInterconnectsListInterconnectsTest() throws ApiException {
        String accountId = null;
        MagicComponentsSchemasTunnelsCollectionResponse response = api.magicInterconnectsListInterconnects(accountId);
        // TODO: test validations
    }

    /**
     * Update interconnect
     *
     * Updates a specific interconnect associated with an account. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void magicInterconnectsUpdateInterconnectTest() throws ApiException {
        String tunnelIdentifier = null;
        String accountId = null;
        MagicComponentsSchemasTunnelUpdateRequest magicComponentsSchemasTunnelUpdateRequest = null;
        MagicComponentsSchemasTunnelModifiedResponse response = api.magicInterconnectsUpdateInterconnect(tunnelIdentifier, accountId, magicComponentsSchemasTunnelUpdateRequest);
        // TODO: test validations
    }

    /**
     * Update multiple interconnects
     *
     * Updates multiple interconnects associated with an account. Use &#x60;?validate_only&#x3D;true&#x60; as an optional query parameter to only run validation without persisting changes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void magicInterconnectsUpdateMultipleInterconnectsTest() throws ApiException {
        String accountId = null;
        Object body = null;
        MagicComponentsSchemasModifiedTunnelsCollectionResponse response = api.magicInterconnectsUpdateMultipleInterconnects(accountId, body);
        // TODO: test validations
    }

}
