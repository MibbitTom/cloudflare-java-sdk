/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.RadarGetEmailRoutingSummaryByArc200Response;
import org.openapitools.client.model.RadarGetEmailRoutingSummaryByEncrypted200Response;
import org.openapitools.client.model.RadarGetEmailRoutingSummaryByIpVersion200Response;
import org.openapitools.client.model.RadarGetEmailRoutingTimeseriesGroupByArc200Response;
import org.openapitools.client.model.RadarGetEmailRoutingTimeseriesGroupByEncrypted200Response;
import org.openapitools.client.model.RadarGetEmailRoutingTimeseriesGroupByIpVersion200Response;
import org.openapitools.client.model.WorkersAiListFinetunes400Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RadarEmailRoutingApi
 */
@Disabled
public class RadarEmailRoutingApiTest {

    private final RadarEmailRoutingApi api = new RadarEmailRoutingApi();

    /**
     * Get ARC Validations Summary
     *
     * Percentage distribution of emails classified per ARC validation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetEmailRoutingSummaryByArcTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> dkim = null;
        List<String> dmarc = null;
        List<String> spf = null;
        List<String> ipVersion = null;
        List<String> encrypted = null;
        String format = null;
        RadarGetEmailRoutingSummaryByArc200Response response = api.radarGetEmailRoutingSummaryByArc(name, dateRange, dateStart, dateEnd, dkim, dmarc, spf, ipVersion, encrypted, format);
        // TODO: test validations
    }

    /**
     * Get DKIM Validations Summary
     *
     * Percentage distribution of emails classified per DKIM validation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetEmailRoutingSummaryByDkimTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> arc = null;
        List<String> dmarc = null;
        List<String> spf = null;
        List<String> ipVersion = null;
        List<String> encrypted = null;
        String format = null;
        RadarGetEmailRoutingSummaryByArc200Response response = api.radarGetEmailRoutingSummaryByDkim(name, dateRange, dateStart, dateEnd, arc, dmarc, spf, ipVersion, encrypted, format);
        // TODO: test validations
    }

    /**
     * Get DMARC Validations Summary
     *
     * Percentage distribution of emails classified per DMARC validation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetEmailRoutingSummaryByDmarcTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> arc = null;
        List<String> dkim = null;
        List<String> spf = null;
        List<String> ipVersion = null;
        List<String> encrypted = null;
        String format = null;
        RadarGetEmailRoutingSummaryByArc200Response response = api.radarGetEmailRoutingSummaryByDmarc(name, dateRange, dateStart, dateEnd, arc, dkim, spf, ipVersion, encrypted, format);
        // TODO: test validations
    }

    /**
     * Get Encrypted Summary
     *
     * Percentage distribution of emails by Encrypted
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetEmailRoutingSummaryByEncryptedTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> arc = null;
        List<String> dkim = null;
        List<String> dmarc = null;
        List<String> spf = null;
        List<String> ipVersion = null;
        String format = null;
        RadarGetEmailRoutingSummaryByEncrypted200Response response = api.radarGetEmailRoutingSummaryByEncrypted(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, ipVersion, format);
        // TODO: test validations
    }

    /**
     * Get Ip Version Summary
     *
     * Percentage distribution of emails by Ip Version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetEmailRoutingSummaryByIpVersionTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> arc = null;
        List<String> dkim = null;
        List<String> dmarc = null;
        List<String> spf = null;
        List<String> encrypted = null;
        String format = null;
        RadarGetEmailRoutingSummaryByIpVersion200Response response = api.radarGetEmailRoutingSummaryByIpVersion(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, encrypted, format);
        // TODO: test validations
    }

    /**
     * Get SPF Validations Summary
     *
     * Percentage distribution of emails classified per SPF validation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetEmailRoutingSummaryBySpfTest() throws ApiException {
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> arc = null;
        List<String> dkim = null;
        List<String> dmarc = null;
        List<String> ipVersion = null;
        List<String> encrypted = null;
        String format = null;
        RadarGetEmailRoutingSummaryByArc200Response response = api.radarGetEmailRoutingSummaryBySpf(name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, ipVersion, encrypted, format);
        // TODO: test validations
    }

    /**
     * Get ARC Validations Time Series
     *
     * Percentage distribution of emails classified per Arc validation over time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetEmailRoutingTimeseriesGroupByArcTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> dkim = null;
        List<String> dmarc = null;
        List<String> spf = null;
        List<String> ipVersion = null;
        List<String> encrypted = null;
        String format = null;
        RadarGetEmailRoutingTimeseriesGroupByArc200Response response = api.radarGetEmailRoutingTimeseriesGroupByArc(aggInterval, name, dateRange, dateStart, dateEnd, dkim, dmarc, spf, ipVersion, encrypted, format);
        // TODO: test validations
    }

    /**
     * Get DKIM Validations Time Series
     *
     * Percentage distribution of emails classified per DKIM validation over time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetEmailRoutingTimeseriesGroupByDkimTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> arc = null;
        List<String> dmarc = null;
        List<String> spf = null;
        List<String> ipVersion = null;
        List<String> encrypted = null;
        String format = null;
        RadarGetEmailRoutingTimeseriesGroupByArc200Response response = api.radarGetEmailRoutingTimeseriesGroupByDkim(aggInterval, name, dateRange, dateStart, dateEnd, arc, dmarc, spf, ipVersion, encrypted, format);
        // TODO: test validations
    }

    /**
     * Get DMARC Validations Time Series
     *
     * Percentage distribution of emails classified per DMARC validation over time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetEmailRoutingTimeseriesGroupByDmarcTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> arc = null;
        List<String> dkim = null;
        List<String> spf = null;
        List<String> ipVersion = null;
        List<String> encrypted = null;
        String format = null;
        RadarGetEmailRoutingTimeseriesGroupByArc200Response response = api.radarGetEmailRoutingTimeseriesGroupByDmarc(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, spf, ipVersion, encrypted, format);
        // TODO: test validations
    }

    /**
     * Get Encrypted Time Series
     *
     * Percentage distribution of emails by Encrypted over time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetEmailRoutingTimeseriesGroupByEncryptedTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> arc = null;
        List<String> dkim = null;
        List<String> dmarc = null;
        List<String> spf = null;
        List<String> ipVersion = null;
        String format = null;
        RadarGetEmailRoutingTimeseriesGroupByEncrypted200Response response = api.radarGetEmailRoutingTimeseriesGroupByEncrypted(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, ipVersion, format);
        // TODO: test validations
    }

    /**
     * Get Ip Version Time Series
     *
     * Percentage distribution of emails by Ip Version over time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetEmailRoutingTimeseriesGroupByIpVersionTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> arc = null;
        List<String> dkim = null;
        List<String> dmarc = null;
        List<String> spf = null;
        List<String> encrypted = null;
        String format = null;
        RadarGetEmailRoutingTimeseriesGroupByIpVersion200Response response = api.radarGetEmailRoutingTimeseriesGroupByIpVersion(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, spf, encrypted, format);
        // TODO: test validations
    }

    /**
     * Get SPF Validations Time Series
     *
     * Percentage distribution of emails classified per SPF validation over time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void radarGetEmailRoutingTimeseriesGroupBySpfTest() throws ApiException {
        String aggInterval = null;
        List<String> name = null;
        List<String> dateRange = null;
        List<OffsetDateTime> dateStart = null;
        List<OffsetDateTime> dateEnd = null;
        List<String> arc = null;
        List<String> dkim = null;
        List<String> dmarc = null;
        List<String> ipVersion = null;
        List<String> encrypted = null;
        String format = null;
        RadarGetEmailRoutingTimeseriesGroupByArc200Response response = api.radarGetEmailRoutingTimeseriesGroupBySpf(aggInterval, name, dateRange, dateStart, dateEnd, arc, dkim, dmarc, ipVersion, encrypted, format);
        // TODO: test validations
    }

}
