/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.PageShieldCreateAPageShieldPolicy4XXResponse;
import org.openapitools.client.model.PageShieldCreateAPageShieldPolicyRequest;
import org.openapitools.client.model.PageShieldGetAPageShieldConnection4XXResponse;
import org.openapitools.client.model.PageShieldGetAPageShieldScript4XXResponse;
import org.openapitools.client.model.PageShieldGetPageShieldSettings200Response;
import org.openapitools.client.model.PageShieldGetPageShieldSettings4XXResponse;
import org.openapitools.client.model.PageShieldGetZoneConnectionResponse;
import org.openapitools.client.model.PageShieldGetZonePolicyResponse;
import org.openapitools.client.model.PageShieldGetZoneScriptResponse;
import org.openapitools.client.model.PageShieldListPageShieldConnections4XXResponse;
import org.openapitools.client.model.PageShieldListPageShieldPolicies4XXResponse;
import org.openapitools.client.model.PageShieldListPageShieldScripts4XXResponse;
import org.openapitools.client.model.PageShieldListZoneConnectionsResponse;
import org.openapitools.client.model.PageShieldListZonePoliciesResponse;
import org.openapitools.client.model.PageShieldListZoneScriptsResponse;
import org.openapitools.client.model.PageShieldUpdatePageShieldSettings200Response;
import org.openapitools.client.model.PageShieldUpdatePageShieldSettings4XXResponse;
import org.openapitools.client.model.PageShieldUpdatePageShieldSettingsRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PageShieldApi
 */
@Disabled
public class PageShieldApiTest {

    private final PageShieldApi api = new PageShieldApi();

    /**
     * Create a Page Shield policy
     *
     * Create a Page Shield policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pageShieldCreateAPageShieldPolicyTest() throws ApiException {
        String zoneId = null;
        PageShieldCreateAPageShieldPolicyRequest pageShieldCreateAPageShieldPolicyRequest = null;
        PageShieldGetZonePolicyResponse response = api.pageShieldCreateAPageShieldPolicy(zoneId, pageShieldCreateAPageShieldPolicyRequest);
        // TODO: test validations
    }

    /**
     * Delete a Page Shield policy
     *
     * Delete a Page Shield policy by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pageShieldDeleteAPageShieldPolicyTest() throws ApiException {
        String zoneId = null;
        String policyId = null;
        api.pageShieldDeleteAPageShieldPolicy(zoneId, policyId);
        // TODO: test validations
    }

    /**
     * Get a Page Shield connection
     *
     * Fetches a connection detected by Page Shield by connection ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pageShieldGetAPageShieldConnectionTest() throws ApiException {
        String zoneId = null;
        String connectionId = null;
        PageShieldGetZoneConnectionResponse response = api.pageShieldGetAPageShieldConnection(zoneId, connectionId);
        // TODO: test validations
    }

    /**
     * Get a Page Shield policy
     *
     * Fetches a Page Shield policy by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pageShieldGetAPageShieldPolicyTest() throws ApiException {
        String zoneId = null;
        String policyId = null;
        PageShieldGetZonePolicyResponse response = api.pageShieldGetAPageShieldPolicy(zoneId, policyId);
        // TODO: test validations
    }

    /**
     * Get a Page Shield script
     *
     * Fetches a script detected by Page Shield by script ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pageShieldGetAPageShieldScriptTest() throws ApiException {
        String zoneId = null;
        String scriptId = null;
        PageShieldGetZoneScriptResponse response = api.pageShieldGetAPageShieldScript(zoneId, scriptId);
        // TODO: test validations
    }

    /**
     * Get Page Shield settings
     *
     * Fetches the Page Shield settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pageShieldGetPageShieldSettingsTest() throws ApiException {
        String zoneId = null;
        PageShieldGetPageShieldSettings200Response response = api.pageShieldGetPageShieldSettings(zoneId);
        // TODO: test validations
    }

    /**
     * List Page Shield connections
     *
     * Lists all connections detected by Page Shield.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pageShieldListPageShieldConnectionsTest() throws ApiException {
        String zoneId = null;
        String excludeUrls = null;
        String urls = null;
        String hosts = null;
        String page = null;
        BigDecimal perPage = null;
        String orderBy = null;
        String direction = null;
        Boolean prioritizeMalicious = null;
        Boolean excludeCdnCgi = null;
        String status = null;
        String pageUrl = null;
        String export = null;
        PageShieldListZoneConnectionsResponse response = api.pageShieldListPageShieldConnections(zoneId, excludeUrls, urls, hosts, page, perPage, orderBy, direction, prioritizeMalicious, excludeCdnCgi, status, pageUrl, export);
        // TODO: test validations
    }

    /**
     * List Page Shield policies
     *
     * Lists all Page Shield policies.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pageShieldListPageShieldPoliciesTest() throws ApiException {
        String zoneId = null;
        PageShieldListZonePoliciesResponse response = api.pageShieldListPageShieldPolicies(zoneId);
        // TODO: test validations
    }

    /**
     * List Page Shield scripts
     *
     * Lists all scripts detected by Page Shield.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pageShieldListPageShieldScriptsTest() throws ApiException {
        String zoneId = null;
        String excludeUrls = null;
        String urls = null;
        String hosts = null;
        String page = null;
        BigDecimal perPage = null;
        String orderBy = null;
        String direction = null;
        Boolean prioritizeMalicious = null;
        Boolean excludeCdnCgi = null;
        Boolean excludeDuplicates = null;
        String status = null;
        String pageUrl = null;
        String export = null;
        PageShieldListZoneScriptsResponse response = api.pageShieldListPageShieldScripts(zoneId, excludeUrls, urls, hosts, page, perPage, orderBy, direction, prioritizeMalicious, excludeCdnCgi, excludeDuplicates, status, pageUrl, export);
        // TODO: test validations
    }

    /**
     * Update a Page Shield policy
     *
     * Update a Page Shield policy by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pageShieldUpdateAPageShieldPolicyTest() throws ApiException {
        String zoneId = null;
        String policyId = null;
        PageShieldCreateAPageShieldPolicyRequest pageShieldCreateAPageShieldPolicyRequest = null;
        PageShieldGetZonePolicyResponse response = api.pageShieldUpdateAPageShieldPolicy(zoneId, policyId, pageShieldCreateAPageShieldPolicyRequest);
        // TODO: test validations
    }

    /**
     * Update Page Shield settings
     *
     * Updates Page Shield settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pageShieldUpdatePageShieldSettingsTest() throws ApiException {
        String zoneId = null;
        PageShieldUpdatePageShieldSettingsRequest pageShieldUpdatePageShieldSettingsRequest = null;
        PageShieldUpdatePageShieldSettings200Response response = api.pageShieldUpdatePageShieldSettings(zoneId, pageShieldUpdatePageShieldSettingsRequest);
        // TODO: test validations
    }

}
