/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiShieldApiResponseCommonFailure;
import org.openapitools.client.model.ApiShieldApiResponseSingle;
import org.openapitools.client.model.ApiShieldKind;
import org.openapitools.client.model.ApiShieldOperationSchemaValidationSettings;
import org.openapitools.client.model.ApiShieldOperationSchemaValidationSettingsMultipleRequestEntry;
import org.openapitools.client.model.ApiShieldSchemaUploadFailure;
import org.openapitools.client.model.ApiShieldSchemaValidationEnableValidationForASchemaRequest;
import org.openapitools.client.model.ApiShieldSchemaValidationExtractOperationsFromSchema200Response;
import org.openapitools.client.model.ApiShieldSchemaValidationPostSchema200Response;
import org.openapitools.client.model.ApiShieldSchemaValidationRetrieveInformationAboutAllSchemas200Response;
import org.openapitools.client.model.ApiShieldSchemaValidationRetrieveInformationAboutSpecificSchema200Response;
import org.openapitools.client.model.ApiShieldSchemaValidationUpdateMultipleOperationLevelSettings200Response;
import org.openapitools.client.model.ApiShieldZoneSchemaValidationSettings;
import org.openapitools.client.model.ApiShieldZoneSchemaValidationSettingsPatch;
import org.openapitools.client.model.ApiShieldZoneSchemaValidationSettingsPut;
import java.io.File;
import java.util.Set;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApiShieldSchemaValidation20Api
 */
@Disabled
public class ApiShieldSchemaValidation20ApiTest {

    private final ApiShieldSchemaValidation20Api api = new ApiShieldSchemaValidation20Api();

    /**
     * Delete a schema
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiShieldSchemaDeleteASchemaTest() throws ApiException {
        String zoneId = null;
        UUID schemaId = null;
        ApiShieldApiResponseSingle response = api.apiShieldSchemaDeleteASchema(zoneId, schemaId);
        // TODO: test validations
    }

    /**
     * Enable validation for a schema
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiShieldSchemaValidationEnableValidationForASchemaTest() throws ApiException {
        String zoneId = null;
        UUID schemaId = null;
        ApiShieldSchemaValidationEnableValidationForASchemaRequest apiShieldSchemaValidationEnableValidationForASchemaRequest = null;
        ApiShieldSchemaValidationRetrieveInformationAboutSpecificSchema200Response response = api.apiShieldSchemaValidationEnableValidationForASchema(zoneId, schemaId, apiShieldSchemaValidationEnableValidationForASchemaRequest);
        // TODO: test validations
    }

    /**
     * Retrieve all operations from a schema.
     *
     * Retrieves all operations from the schema. Operations that already exist in API Shield Endpoint Management will be returned as full operations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiShieldSchemaValidationExtractOperationsFromSchemaTest() throws ApiException {
        UUID schemaId = null;
        String zoneId = null;
        Set<String> feature = null;
        Set<String> host = null;
        Set<String> method = null;
        String endpoint = null;
        Object page = null;
        Object perPage = null;
        String operationStatus = null;
        ApiShieldSchemaValidationExtractOperationsFromSchema200Response response = api.apiShieldSchemaValidationExtractOperationsFromSchema(schemaId, zoneId, feature, host, method, endpoint, page, perPage, operationStatus);
        // TODO: test validations
    }

    /**
     * Update zone level schema validation settings
     *
     * Updates zone level schema validation settings on the zone
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiShieldSchemaValidationPatchZoneLevelSettingsTest() throws ApiException {
        String zoneId = null;
        ApiShieldZoneSchemaValidationSettingsPatch apiShieldZoneSchemaValidationSettingsPatch = null;
        ApiShieldZoneSchemaValidationSettings response = api.apiShieldSchemaValidationPatchZoneLevelSettings(zoneId, apiShieldZoneSchemaValidationSettingsPatch);
        // TODO: test validations
    }

    /**
     * Upload a schema to a zone
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiShieldSchemaValidationPostSchemaTest() throws ApiException {
        String zoneId = null;
        File _file = null;
        ApiShieldKind kind = null;
        String name = null;
        String validationEnabled = null;
        ApiShieldSchemaValidationPostSchema200Response response = api.apiShieldSchemaValidationPostSchema(zoneId, _file, kind, name, validationEnabled);
        // TODO: test validations
    }

    /**
     * Retrieve information about all schemas on a zone
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiShieldSchemaValidationRetrieveInformationAboutAllSchemasTest() throws ApiException {
        String zoneId = null;
        Object page = null;
        Object perPage = null;
        Boolean omitSource = null;
        Boolean validationEnabled = null;
        ApiShieldSchemaValidationRetrieveInformationAboutAllSchemas200Response response = api.apiShieldSchemaValidationRetrieveInformationAboutAllSchemas(zoneId, page, perPage, omitSource, validationEnabled);
        // TODO: test validations
    }

    /**
     * Retrieve information about a specific schema on a zone
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiShieldSchemaValidationRetrieveInformationAboutSpecificSchemaTest() throws ApiException {
        String zoneId = null;
        UUID schemaId = null;
        Boolean omitSource = null;
        ApiShieldSchemaValidationRetrieveInformationAboutSpecificSchema200Response response = api.apiShieldSchemaValidationRetrieveInformationAboutSpecificSchema(zoneId, schemaId, omitSource);
        // TODO: test validations
    }

    /**
     * Retrieve operation-level schema validation settings
     *
     * Retrieves operation-level schema validation settings on the zone
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiShieldSchemaValidationRetrieveOperationLevelSettingsTest() throws ApiException {
        String zoneId = null;
        UUID operationId = null;
        ApiShieldOperationSchemaValidationSettings response = api.apiShieldSchemaValidationRetrieveOperationLevelSettings(zoneId, operationId);
        // TODO: test validations
    }

    /**
     * Retrieve zone level schema validation settings
     *
     * Retrieves zone level schema validation settings currently set on the zone
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiShieldSchemaValidationRetrieveZoneLevelSettingsTest() throws ApiException {
        String zoneId = null;
        ApiShieldZoneSchemaValidationSettings response = api.apiShieldSchemaValidationRetrieveZoneLevelSettings(zoneId);
        // TODO: test validations
    }

    /**
     * Update multiple operation-level schema validation settings
     *
     * Updates multiple operation-level schema validation settings on the zone
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiShieldSchemaValidationUpdateMultipleOperationLevelSettingsTest() throws ApiException {
        String zoneId = null;
        Map<String, ApiShieldOperationSchemaValidationSettingsMultipleRequestEntry> requestBody = null;
        ApiShieldSchemaValidationUpdateMultipleOperationLevelSettings200Response response = api.apiShieldSchemaValidationUpdateMultipleOperationLevelSettings(zoneId, requestBody);
        // TODO: test validations
    }

    /**
     * Update operation-level schema validation settings
     *
     * Updates operation-level schema validation settings on the zone
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiShieldSchemaValidationUpdateOperationLevelSettingsTest() throws ApiException {
        String zoneId = null;
        UUID operationId = null;
        ApiShieldOperationSchemaValidationSettings apiShieldOperationSchemaValidationSettings = null;
        ApiShieldOperationSchemaValidationSettings response = api.apiShieldSchemaValidationUpdateOperationLevelSettings(zoneId, operationId, apiShieldOperationSchemaValidationSettings);
        // TODO: test validations
    }

    /**
     * Update zone level schema validation settings
     *
     * Updates zone level schema validation settings on the zone
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiShieldSchemaValidationUpdateZoneLevelSettingsTest() throws ApiException {
        String zoneId = null;
        ApiShieldZoneSchemaValidationSettingsPut apiShieldZoneSchemaValidationSettingsPut = null;
        ApiShieldZoneSchemaValidationSettings response = api.apiShieldSchemaValidationUpdateZoneLevelSettings(zoneId, apiShieldZoneSchemaValidationSettingsPut);
        // TODO: test validations
    }

}
