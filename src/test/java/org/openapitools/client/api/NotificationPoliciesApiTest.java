/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AaaApiResponseCollection;
import org.openapitools.client.model.AaaIdResponse;
import org.openapitools.client.model.AaaPoliciesComponentsSchemasResponseCollection;
import org.openapitools.client.model.AaaSingleResponse;
import org.openapitools.client.model.NotificationDestinationsWithPagerDutyConnectPagerDuty4XXResponse;
import org.openapitools.client.model.NotificationDestinationsWithPagerDutyDeletePagerDutyServices4XXResponse;
import org.openapitools.client.model.NotificationPoliciesCreateANotificationPolicyRequest;
import org.openapitools.client.model.NotificationPoliciesGetANotificationPolicy4XXResponse;
import org.openapitools.client.model.NotificationPoliciesListNotificationPolicies4XXResponse;
import org.openapitools.client.model.NotificationPoliciesUpdateANotificationPolicyRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NotificationPoliciesApi
 */
@Disabled
public class NotificationPoliciesApiTest {

    private final NotificationPoliciesApi api = new NotificationPoliciesApi();

    /**
     * Create a Notification policy
     *
     * Creates a new Notification policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationPoliciesCreateANotificationPolicyTest() throws ApiException {
        String accountId = null;
        NotificationPoliciesCreateANotificationPolicyRequest notificationPoliciesCreateANotificationPolicyRequest = null;
        AaaIdResponse response = api.notificationPoliciesCreateANotificationPolicy(accountId, notificationPoliciesCreateANotificationPolicyRequest);
        // TODO: test validations
    }

    /**
     * Delete a Notification policy
     *
     * Delete a Notification policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationPoliciesDeleteANotificationPolicyTest() throws ApiException {
        String accountId = null;
        String policyId = null;
        AaaApiResponseCollection response = api.notificationPoliciesDeleteANotificationPolicy(accountId, policyId);
        // TODO: test validations
    }

    /**
     * Get a Notification policy
     *
     * Get details for a single policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationPoliciesGetANotificationPolicyTest() throws ApiException {
        String accountId = null;
        String policyId = null;
        AaaSingleResponse response = api.notificationPoliciesGetANotificationPolicy(accountId, policyId);
        // TODO: test validations
    }

    /**
     * List Notification policies
     *
     * Get a list of all Notification policies.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationPoliciesListNotificationPoliciesTest() throws ApiException {
        String accountId = null;
        AaaPoliciesComponentsSchemasResponseCollection response = api.notificationPoliciesListNotificationPolicies(accountId);
        // TODO: test validations
    }

    /**
     * Update a Notification policy
     *
     * Update a Notification policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationPoliciesUpdateANotificationPolicyTest() throws ApiException {
        String accountId = null;
        String policyId = null;
        NotificationPoliciesUpdateANotificationPolicyRequest notificationPoliciesUpdateANotificationPolicyRequest = null;
        AaaIdResponse response = api.notificationPoliciesUpdateANotificationPolicy(accountId, policyId, notificationPoliciesUpdateANotificationPolicyRequest);
        // TODO: test validations
    }

}
