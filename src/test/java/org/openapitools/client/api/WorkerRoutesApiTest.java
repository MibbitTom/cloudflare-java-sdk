/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.WorkerRoutesCreateRoute4XXResponse;
import org.openapitools.client.model.WorkerRoutesGetRoute4XXResponse;
import org.openapitools.client.model.WorkerRoutesListRoutes4XXResponse;
import org.openapitools.client.model.WorkersApiResponseSingle;
import org.openapitools.client.model.WorkersRouteNoId;
import org.openapitools.client.model.WorkersRouteResponseCollection;
import org.openapitools.client.model.WorkersRouteResponseSingle;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WorkerRoutesApi
 */
@Disabled
public class WorkerRoutesApiTest {

    private final WorkerRoutesApi api = new WorkerRoutesApi();

    /**
     * Create Route
     *
     * Creates a route that maps a URL pattern to a Worker.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workerRoutesCreateRouteTest() throws ApiException {
        String zoneId = null;
        WorkersRouteNoId workersRouteNoId = null;
        WorkersApiResponseSingle response = api.workerRoutesCreateRoute(zoneId, workersRouteNoId);
        // TODO: test validations
    }

    /**
     * Delete Route
     *
     * Deletes a route.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workerRoutesDeleteRouteTest() throws ApiException {
        String routeId = null;
        String zoneId = null;
        WorkersApiResponseSingle response = api.workerRoutesDeleteRoute(routeId, zoneId);
        // TODO: test validations
    }

    /**
     * Get Route
     *
     * Returns information about a route, including URL pattern and Worker.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workerRoutesGetRouteTest() throws ApiException {
        String routeId = null;
        String zoneId = null;
        WorkersRouteResponseSingle response = api.workerRoutesGetRoute(routeId, zoneId);
        // TODO: test validations
    }

    /**
     * List Routes
     *
     * Returns routes for a zone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workerRoutesListRoutesTest() throws ApiException {
        String zoneId = null;
        WorkersRouteResponseCollection response = api.workerRoutesListRoutes(zoneId);
        // TODO: test validations
    }

    /**
     * Update Route
     *
     * Updates the URL pattern or Worker associated with a route.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workerRoutesUpdateRouteTest() throws ApiException {
        String routeId = null;
        String zoneId = null;
        WorkersRouteNoId workersRouteNoId = null;
        WorkersRouteResponseSingle response = api.workerRoutesUpdateRoute(routeId, zoneId, workersRouteNoId);
        // TODO: test validations
    }

}
