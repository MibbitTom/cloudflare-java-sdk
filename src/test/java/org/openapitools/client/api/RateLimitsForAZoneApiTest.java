/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.FirewallRatelimitResponseCollection;
import org.openapitools.client.model.FirewallRatelimitResponseSingle;
import org.openapitools.client.model.RateLimitsForAZoneCreateARateLimit4XXResponse;
import org.openapitools.client.model.RateLimitsForAZoneDeleteARateLimit200Response;
import org.openapitools.client.model.RateLimitsForAZoneDeleteARateLimit4XXResponse;
import org.openapitools.client.model.RateLimitsForAZoneListRateLimits4XXResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RateLimitsForAZoneApi
 */
@Disabled
public class RateLimitsForAZoneApiTest {

    private final RateLimitsForAZoneApi api = new RateLimitsForAZoneApi();

    /**
     * Create a rate limit
     *
     * Creates a new rate limit for a zone. Refer to the object definition for a list of required attributes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rateLimitsForAZoneCreateARateLimitTest() throws ApiException {
        String zoneIdentifier = null;
        Object body = null;
        FirewallRatelimitResponseSingle response = api.rateLimitsForAZoneCreateARateLimit(zoneIdentifier, body);
        // TODO: test validations
    }

    /**
     * Delete a rate limit
     *
     * Deletes an existing rate limit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rateLimitsForAZoneDeleteARateLimitTest() throws ApiException {
        String id = null;
        String zoneIdentifier = null;
        RateLimitsForAZoneDeleteARateLimit200Response response = api.rateLimitsForAZoneDeleteARateLimit(id, zoneIdentifier);
        // TODO: test validations
    }

    /**
     * Get a rate limit
     *
     * Fetches the details of a rate limit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rateLimitsForAZoneGetARateLimitTest() throws ApiException {
        String id = null;
        String zoneIdentifier = null;
        FirewallRatelimitResponseSingle response = api.rateLimitsForAZoneGetARateLimit(id, zoneIdentifier);
        // TODO: test validations
    }

    /**
     * List rate limits
     *
     * Fetches the rate limits for a zone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rateLimitsForAZoneListRateLimitsTest() throws ApiException {
        String zoneIdentifier = null;
        BigDecimal page = null;
        BigDecimal perPage = null;
        FirewallRatelimitResponseCollection response = api.rateLimitsForAZoneListRateLimits(zoneIdentifier, page, perPage);
        // TODO: test validations
    }

    /**
     * Update a rate limit
     *
     * Updates an existing rate limit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rateLimitsForAZoneUpdateARateLimitTest() throws ApiException {
        String id = null;
        String zoneIdentifier = null;
        Object body = null;
        FirewallRatelimitResponseSingle response = api.rateLimitsForAZoneUpdateARateLimit(id, zoneIdentifier, body);
        // TODO: test validations
    }

}
