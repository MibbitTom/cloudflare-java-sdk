/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccountsTurnstileWidgetCreate200Response;
import org.openapitools.client.model.AccountsTurnstileWidgetCreateRequest;
import org.openapitools.client.model.AccountsTurnstileWidgetGet200Response;
import org.openapitools.client.model.AccountsTurnstileWidgetRotateSecretRequest;
import org.openapitools.client.model.AccountsTurnstileWidgetUpdateRequest;
import org.openapitools.client.model.AccountsTurnstileWidgetsList200Response;
import java.math.BigDecimal;
import org.openapitools.client.model.TurnstileApiResponseCommonFailure;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TurnstileApi
 */
@Disabled
public class TurnstileApiTest {

    private final TurnstileApi api = new TurnstileApi();

    /**
     * Create a Turnstile Widget
     *
     * Lists challenge widgets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsTurnstileWidgetCreateTest() throws ApiException {
        String accountId = null;
        AccountsTurnstileWidgetCreateRequest accountsTurnstileWidgetCreateRequest = null;
        BigDecimal page = null;
        BigDecimal perPage = null;
        String order = null;
        String direction = null;
        AccountsTurnstileWidgetCreate200Response response = api.accountsTurnstileWidgetCreate(accountId, accountsTurnstileWidgetCreateRequest, page, perPage, order, direction);
        // TODO: test validations
    }

    /**
     * Delete a Turnstile Widget
     *
     * Destroy a Turnstile Widget.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsTurnstileWidgetDeleteTest() throws ApiException {
        String accountId = null;
        String sitekey = null;
        AccountsTurnstileWidgetGet200Response response = api.accountsTurnstileWidgetDelete(accountId, sitekey);
        // TODO: test validations
    }

    /**
     * Turnstile Widget Details
     *
     * Show a single challenge widget configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsTurnstileWidgetGetTest() throws ApiException {
        String accountId = null;
        String sitekey = null;
        AccountsTurnstileWidgetGet200Response response = api.accountsTurnstileWidgetGet(accountId, sitekey);
        // TODO: test validations
    }

    /**
     * Rotate Secret for a Turnstile Widget
     *
     * Generate a new secret key for this widget. If &#x60;invalidate_immediately&#x60; is set to &#x60;false&#x60;, the previous secret remains valid for 2 hours.  Note that secrets cannot be rotated again during the grace period. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsTurnstileWidgetRotateSecretTest() throws ApiException {
        String accountId = null;
        String sitekey = null;
        AccountsTurnstileWidgetRotateSecretRequest accountsTurnstileWidgetRotateSecretRequest = null;
        AccountsTurnstileWidgetGet200Response response = api.accountsTurnstileWidgetRotateSecret(accountId, sitekey, accountsTurnstileWidgetRotateSecretRequest);
        // TODO: test validations
    }

    /**
     * Update a Turnstile Widget
     *
     * Update the configuration of a widget.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsTurnstileWidgetUpdateTest() throws ApiException {
        String accountId = null;
        String sitekey = null;
        AccountsTurnstileWidgetUpdateRequest accountsTurnstileWidgetUpdateRequest = null;
        AccountsTurnstileWidgetGet200Response response = api.accountsTurnstileWidgetUpdate(accountId, sitekey, accountsTurnstileWidgetUpdateRequest);
        // TODO: test validations
    }

    /**
     * List Turnstile Widgets
     *
     * Lists all turnstile widgets of an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsTurnstileWidgetsListTest() throws ApiException {
        String accountId = null;
        BigDecimal page = null;
        BigDecimal perPage = null;
        String order = null;
        String direction = null;
        AccountsTurnstileWidgetsList200Response response = api.accountsTurnstileWidgetsList(accountId, page, perPage, order, direction);
        // TODO: test validations
    }

}
