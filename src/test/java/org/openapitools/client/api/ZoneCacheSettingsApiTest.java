/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ZoneCacheSettingsChangeCacheReserveSettingRequest;
import org.openapitools.client.model.ZoneCacheSettingsChangeOriginMaxHttpVersionSettingRequest;
import org.openapitools.client.model.ZoneCacheSettingsChangeRegionalTieredCacheSettingRequest;
import org.openapitools.client.model.ZoneCacheSettingsChangeVariantsSettingRequest;
import org.openapitools.client.model.ZoneCacheSettingsDeleteVariantsSetting200Response;
import org.openapitools.client.model.ZoneCacheSettingsDeleteVariantsSetting4XXResponse;
import org.openapitools.client.model.ZoneCacheSettingsGetCacheReserveClear200Response;
import org.openapitools.client.model.ZoneCacheSettingsGetCacheReserveClear4XXResponse;
import org.openapitools.client.model.ZoneCacheSettingsGetCacheReserveSetting200Response;
import org.openapitools.client.model.ZoneCacheSettingsGetCacheReserveSetting4XXResponse;
import org.openapitools.client.model.ZoneCacheSettingsGetOriginMaxHttpVersionSetting200Response;
import org.openapitools.client.model.ZoneCacheSettingsGetOriginMaxHttpVersionSetting4XXResponse;
import org.openapitools.client.model.ZoneCacheSettingsGetRegionalTieredCacheSetting200Response;
import org.openapitools.client.model.ZoneCacheSettingsGetRegionalTieredCacheSetting4XXResponse;
import org.openapitools.client.model.ZoneCacheSettingsGetVariantsSetting200Response;
import org.openapitools.client.model.ZoneCacheSettingsGetVariantsSetting4XXResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ZoneCacheSettingsApi
 */
@Disabled
public class ZoneCacheSettingsApiTest {

    private final ZoneCacheSettingsApi api = new ZoneCacheSettingsApi();

    /**
     * Change Cache Reserve setting
     *
     * Increase cache lifetimes by automatically storing all cacheable files into Cloudflare&#39;s persistent object storage buckets. Requires Cache Reserve subscription. Note: using Tiered Cache with Cache Reserve is highly recommended to reduce Reserve operations costs. See the [developer docs](https://developers.cloudflare.com/cache/about/cache-reserve) for more information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneCacheSettingsChangeCacheReserveSettingTest() throws ApiException {
        String zoneId = null;
        ZoneCacheSettingsChangeCacheReserveSettingRequest zoneCacheSettingsChangeCacheReserveSettingRequest = null;
        ZoneCacheSettingsGetCacheReserveSetting200Response response = api.zoneCacheSettingsChangeCacheReserveSetting(zoneId, zoneCacheSettingsChangeCacheReserveSettingRequest);
        // TODO: test validations
    }

    /**
     * Change Origin Max HTTP Version Setting
     *
     * Origin Max HTTP Setting Version sets the highest HTTP version Cloudflare will attempt to use with your origin. This setting allows Cloudflare to make HTTP/2 requests to your origin. (Refer to [Enable HTTP/2 to Origin](https://developers.cloudflare.com/cache/how-to/enable-http2-to-origin/), for more information.). The default value is \&quot;2\&quot; for all plan types except ENT where it is \&quot;1\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneCacheSettingsChangeOriginMaxHttpVersionSettingTest() throws ApiException {
        String zoneId = null;
        ZoneCacheSettingsChangeOriginMaxHttpVersionSettingRequest zoneCacheSettingsChangeOriginMaxHttpVersionSettingRequest = null;
        ZoneCacheSettingsGetOriginMaxHttpVersionSetting200Response response = api.zoneCacheSettingsChangeOriginMaxHttpVersionSetting(zoneId, zoneCacheSettingsChangeOriginMaxHttpVersionSettingRequest);
        // TODO: test validations
    }

    /**
     * Change Regional Tiered Cache setting
     *
     * Instructs Cloudflare to check a regional hub data center on the way to your upper tier. This can help improve performance for smart and custom tiered cache topologies.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneCacheSettingsChangeRegionalTieredCacheSettingTest() throws ApiException {
        String zoneId = null;
        ZoneCacheSettingsChangeRegionalTieredCacheSettingRequest zoneCacheSettingsChangeRegionalTieredCacheSettingRequest = null;
        ZoneCacheSettingsGetRegionalTieredCacheSetting200Response response = api.zoneCacheSettingsChangeRegionalTieredCacheSetting(zoneId, zoneCacheSettingsChangeRegionalTieredCacheSettingRequest);
        // TODO: test validations
    }

    /**
     * Change variants setting
     *
     * Variant support enables caching variants of images with certain file extensions in addition to the original. This only applies when the origin server sends the &#39;Vary: Accept&#39; response header. If the origin server sends &#39;Vary: Accept&#39; but does not serve the variant requested, the response will not be cached. This will be indicated with BYPASS cache status in the response headers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneCacheSettingsChangeVariantsSettingTest() throws ApiException {
        String zoneId = null;
        ZoneCacheSettingsChangeVariantsSettingRequest zoneCacheSettingsChangeVariantsSettingRequest = null;
        ZoneCacheSettingsGetVariantsSetting200Response response = api.zoneCacheSettingsChangeVariantsSetting(zoneId, zoneCacheSettingsChangeVariantsSettingRequest);
        // TODO: test validations
    }

    /**
     * Delete variants setting
     *
     * Variant support enables caching variants of images with certain file extensions in addition to the original. This only applies when the origin server sends the &#39;Vary: Accept&#39; response header. If the origin server sends &#39;Vary: Accept&#39; but does not serve the variant requested, the response will not be cached. This will be indicated with BYPASS cache status in the response headers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneCacheSettingsDeleteVariantsSettingTest() throws ApiException {
        String zoneId = null;
        ZoneCacheSettingsDeleteVariantsSetting200Response response = api.zoneCacheSettingsDeleteVariantsSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get Cache Reserve Clear
     *
     * You can use Cache Reserve Clear to clear your Cache Reserve, but you must first disable Cache Reserve. In most cases, this will be accomplished within 24 hours. You cannot re-enable Cache Reserve while this process is ongoing. Keep in mind that you cannot undo or cancel this operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneCacheSettingsGetCacheReserveClearTest() throws ApiException {
        String zoneId = null;
        ZoneCacheSettingsGetCacheReserveClear200Response response = api.zoneCacheSettingsGetCacheReserveClear(zoneId);
        // TODO: test validations
    }

    /**
     * Get Cache Reserve setting
     *
     * Increase cache lifetimes by automatically storing all cacheable files into Cloudflare&#39;s persistent object storage buckets. Requires Cache Reserve subscription. Note: using Tiered Cache with Cache Reserve is highly recommended to reduce Reserve operations costs. See the [developer docs](https://developers.cloudflare.com/cache/about/cache-reserve) for more information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneCacheSettingsGetCacheReserveSettingTest() throws ApiException {
        String zoneId = null;
        ZoneCacheSettingsGetCacheReserveSetting200Response response = api.zoneCacheSettingsGetCacheReserveSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get Origin Max HTTP Version Setting
     *
     * Origin Max HTTP Setting Version sets the highest HTTP version Cloudflare will attempt to use with your origin. This setting allows Cloudflare to make HTTP/2 requests to your origin. (Refer to [Enable HTTP/2 to Origin](https://developers.cloudflare.com/cache/how-to/enable-http2-to-origin/), for more information.). The default value is \&quot;2\&quot; for all plan types except ENT where it is \&quot;1\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneCacheSettingsGetOriginMaxHttpVersionSettingTest() throws ApiException {
        String zoneId = null;
        ZoneCacheSettingsGetOriginMaxHttpVersionSetting200Response response = api.zoneCacheSettingsGetOriginMaxHttpVersionSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get Regional Tiered Cache setting
     *
     * Instructs Cloudflare to check a regional hub data center on the way to your upper tier. This can help improve performance for smart and custom tiered cache topologies.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneCacheSettingsGetRegionalTieredCacheSettingTest() throws ApiException {
        String zoneId = null;
        ZoneCacheSettingsGetRegionalTieredCacheSetting200Response response = api.zoneCacheSettingsGetRegionalTieredCacheSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Get variants setting
     *
     * Variant support enables caching variants of images with certain file extensions in addition to the original. This only applies when the origin server sends the &#39;Vary: Accept&#39; response header. If the origin server sends &#39;Vary: Accept&#39; but does not serve the variant requested, the response will not be cached. This will be indicated with BYPASS cache status in the response headers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneCacheSettingsGetVariantsSettingTest() throws ApiException {
        String zoneId = null;
        ZoneCacheSettingsGetVariantsSetting200Response response = api.zoneCacheSettingsGetVariantsSetting(zoneId);
        // TODO: test validations
    }

    /**
     * Start Cache Reserve Clear
     *
     * You can use Cache Reserve Clear to clear your Cache Reserve, but you must first disable Cache Reserve. In most cases, this will be accomplished within 24 hours. You cannot re-enable Cache Reserve while this process is ongoing. Keep in mind that you cannot undo or cancel this operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void zoneCacheSettingsStartCacheReserveClearTest() throws ApiException {
        String zoneId = null;
        ZoneCacheSettingsGetCacheReserveClear200Response response = api.zoneCacheSettingsStartCacheReserveClear(zoneId);
        // TODO: test validations
    }

}
