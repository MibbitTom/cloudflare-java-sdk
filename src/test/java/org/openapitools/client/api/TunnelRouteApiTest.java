/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.TunnelRouteCreateATunnelRoute4XXResponse;
import org.openapitools.client.model.TunnelRouteCreateATunnelRouteRequest;
import org.openapitools.client.model.TunnelRouteCreateATunnelRouteWithCidrRequest;
import org.openapitools.client.model.TunnelRouteGetTunnelRouteByIp4XXResponse;
import org.openapitools.client.model.TunnelRouteListTunnelRoutes4XXResponse;
import org.openapitools.client.model.TunnelRouteResponseSingle;
import org.openapitools.client.model.TunnelRouteUpdateATunnelRouteRequest;
import org.openapitools.client.model.TunnelTeamnetResponseCollection;
import org.openapitools.client.model.TunnelTeamnetResponseSingle;
import org.openapitools.client.model.TunnelTunnelType;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TunnelRouteApi
 */
@Disabled
public class TunnelRouteApiTest {

    private final TunnelRouteApi api = new TunnelRouteApi();

    /**
     * Create a tunnel route
     *
     * Routes a private network through a Cloudflare Tunnel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tunnelRouteCreateATunnelRouteTest() throws ApiException {
        String accountId = null;
        TunnelRouteCreateATunnelRouteRequest tunnelRouteCreateATunnelRouteRequest = null;
        TunnelRouteResponseSingle response = api.tunnelRouteCreateATunnelRoute(accountId, tunnelRouteCreateATunnelRouteRequest);
        // TODO: test validations
    }

    /**
     * Create a tunnel route (CIDR Endpoint)
     *
     * Routes a private network through a Cloudflare Tunnel. The CIDR in &#x60;ip_network_encoded&#x60; must be written in URL-encoded format.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tunnelRouteCreateATunnelRouteWithCidrTest() throws ApiException {
        String ipNetworkEncoded = null;
        String accountId = null;
        TunnelRouteCreateATunnelRouteWithCidrRequest tunnelRouteCreateATunnelRouteWithCidrRequest = null;
        TunnelRouteResponseSingle response = api.tunnelRouteCreateATunnelRouteWithCidr(ipNetworkEncoded, accountId, tunnelRouteCreateATunnelRouteWithCidrRequest);
        // TODO: test validations
    }

    /**
     * Delete a tunnel route
     *
     * Deletes a private network route from an account. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tunnelRouteDeleteATunnelRouteTest() throws ApiException {
        String routeId = null;
        String accountId = null;
        TunnelRouteResponseSingle response = api.tunnelRouteDeleteATunnelRoute(routeId, accountId);
        // TODO: test validations
    }

    /**
     * Delete a tunnel route (CIDR Endpoint)
     *
     * Deletes a private network route from an account. The CIDR in &#x60;ip_network_encoded&#x60; must be written in URL-encoded format. If no virtual_network_id is provided it will delete the route from the default vnet. If no tun_type is provided it will fetch the type from the tunnel_id or if that is missing it will assume Cloudflare Tunnel as default. If tunnel_id is provided it will delete the route from that tunnel, otherwise it will delete the route based on the vnet and tun_type. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tunnelRouteDeleteATunnelRouteWithCidrTest() throws ApiException {
        String ipNetworkEncoded = null;
        String accountId = null;
        String virtualNetworkId = null;
        TunnelTunnelType tunType = null;
        String tunnelId = null;
        TunnelRouteResponseSingle response = api.tunnelRouteDeleteATunnelRouteWithCidr(ipNetworkEncoded, accountId, virtualNetworkId, tunType, tunnelId);
        // TODO: test validations
    }

    /**
     * Get tunnel route by IP
     *
     * Fetches routes that contain the given IP address.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tunnelRouteGetTunnelRouteByIpTest() throws ApiException {
        String ip = null;
        String accountId = null;
        Object virtualNetworkId = null;
        TunnelTeamnetResponseSingle response = api.tunnelRouteGetTunnelRouteByIp(ip, accountId, virtualNetworkId);
        // TODO: test validations
    }

    /**
     * List tunnel routes
     *
     * Lists and filters private network routes in an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tunnelRouteListTunnelRoutesTest() throws ApiException {
        String accountId = null;
        String comment = null;
        Object isDeleted = null;
        Object networkSubset = null;
        Object networkSuperset = null;
        Object existedAt = null;
        Object tunnelId = null;
        String routeId = null;
        String tunTypes = null;
        Object virtualNetworkId = null;
        BigDecimal perPage = null;
        BigDecimal page = null;
        TunnelTeamnetResponseCollection response = api.tunnelRouteListTunnelRoutes(accountId, comment, isDeleted, networkSubset, networkSuperset, existedAt, tunnelId, routeId, tunTypes, virtualNetworkId, perPage, page);
        // TODO: test validations
    }

    /**
     * Update a tunnel route
     *
     * Updates an existing private network route in an account. The fields that are meant to be updated should be provided in the body of the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tunnelRouteUpdateATunnelRouteTest() throws ApiException {
        String routeId = null;
        String accountId = null;
        TunnelRouteUpdateATunnelRouteRequest tunnelRouteUpdateATunnelRouteRequest = null;
        TunnelRouteResponseSingle response = api.tunnelRouteUpdateATunnelRoute(routeId, accountId, tunnelRouteUpdateATunnelRouteRequest);
        // TODO: test validations
    }

    /**
     * Update a tunnel route (CIDR Endpoint)
     *
     * Updates an existing private network route in an account. The CIDR in &#x60;ip_network_encoded&#x60; must be written in URL-encoded format.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tunnelRouteUpdateATunnelRouteWithCidrTest() throws ApiException {
        String ipNetworkEncoded = null;
        String accountId = null;
        TunnelRouteResponseSingle response = api.tunnelRouteUpdateATunnelRouteWithCidr(ipNetworkEncoded, accountId);
        // TODO: test validations
    }

}
