/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.KeylessSslForAZoneCreateKeylessSslConfiguration4XXResponse;
import org.openapitools.client.model.KeylessSslForAZoneCreateKeylessSslConfigurationRequest;
import org.openapitools.client.model.KeylessSslForAZoneDeleteKeylessSslConfiguration4XXResponse;
import org.openapitools.client.model.KeylessSslForAZoneEditKeylessSslConfigurationRequest;
import org.openapitools.client.model.KeylessSslForAZoneListKeylessSslConfigurations4XXResponse;
import org.openapitools.client.model.TlsCertificatesAndHostnamesKeylessResponseCollection;
import org.openapitools.client.model.TlsCertificatesAndHostnamesKeylessResponseSingle;
import org.openapitools.client.model.TlsCertificatesAndHostnamesKeylessResponseSingleId;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for KeylessSslForAZoneApi
 */
@Disabled
public class KeylessSslForAZoneApiTest {

    private final KeylessSslForAZoneApi api = new KeylessSslForAZoneApi();

    /**
     * Create Keyless SSL Configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void keylessSslForAZoneCreateKeylessSslConfigurationTest() throws ApiException {
        String zoneId = null;
        KeylessSslForAZoneCreateKeylessSslConfigurationRequest keylessSslForAZoneCreateKeylessSslConfigurationRequest = null;
        TlsCertificatesAndHostnamesKeylessResponseSingle response = api.keylessSslForAZoneCreateKeylessSslConfiguration(zoneId, keylessSslForAZoneCreateKeylessSslConfigurationRequest);
        // TODO: test validations
    }

    /**
     * Delete Keyless SSL Configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void keylessSslForAZoneDeleteKeylessSslConfigurationTest() throws ApiException {
        String keylessCertificateId = null;
        String zoneId = null;
        TlsCertificatesAndHostnamesKeylessResponseSingleId response = api.keylessSslForAZoneDeleteKeylessSslConfiguration(keylessCertificateId, zoneId);
        // TODO: test validations
    }

    /**
     * Edit Keyless SSL Configuration
     *
     * This will update attributes of a Keyless SSL. Consists of one or more of the following:  host,name,port.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void keylessSslForAZoneEditKeylessSslConfigurationTest() throws ApiException {
        String keylessCertificateId = null;
        String zoneId = null;
        KeylessSslForAZoneEditKeylessSslConfigurationRequest keylessSslForAZoneEditKeylessSslConfigurationRequest = null;
        TlsCertificatesAndHostnamesKeylessResponseSingle response = api.keylessSslForAZoneEditKeylessSslConfiguration(keylessCertificateId, zoneId, keylessSslForAZoneEditKeylessSslConfigurationRequest);
        // TODO: test validations
    }

    /**
     * Get Keyless SSL Configuration
     *
     * Get details for one Keyless SSL configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void keylessSslForAZoneGetKeylessSslConfigurationTest() throws ApiException {
        String keylessCertificateId = null;
        String zoneId = null;
        TlsCertificatesAndHostnamesKeylessResponseSingle response = api.keylessSslForAZoneGetKeylessSslConfiguration(keylessCertificateId, zoneId);
        // TODO: test validations
    }

    /**
     * List Keyless SSL Configurations
     *
     * List all Keyless SSL configurations for a given zone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void keylessSslForAZoneListKeylessSslConfigurationsTest() throws ApiException {
        String zoneId = null;
        TlsCertificatesAndHostnamesKeylessResponseCollection response = api.keylessSslForAZoneListKeylessSslConfigurations(zoneId);
        // TODO: test validations
    }

}
