/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.MagicAclDeletedResponse;
import org.openapitools.client.model.MagicAclModifiedResponse;
import org.openapitools.client.model.MagicAclSingleResponse;
import org.openapitools.client.model.MagicAclUpdateRequest;
import org.openapitools.client.model.MagicAclsAddSingleRequest;
import org.openapitools.client.model.MagicAclsCollectionResponse;
import org.openapitools.client.model.MagicApiResponseCommonFailure;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MagicWanConnectorSiteAclsApi
 */
@Disabled
public class MagicWanConnectorSiteAclsApiTest {

    private final MagicWanConnectorSiteAclsApi api = new MagicWanConnectorSiteAclsApi();

    /**
     * Site ACL Details
     *
     * Get a specific Site ACL.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void magicSiteAclsAclDetailsTest() throws ApiException {
        String siteId = null;
        String accountId = null;
        String aclIdentifier = null;
        MagicAclSingleResponse response = api.magicSiteAclsAclDetails(siteId, accountId, aclIdentifier);
        // TODO: test validations
    }

    /**
     * Create a new Site ACL
     *
     * Creates a new Site ACL.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void magicSiteAclsCreateSiteAclTest() throws ApiException {
        String accountId = null;
        String siteId = null;
        MagicAclsAddSingleRequest magicAclsAddSingleRequest = null;
        MagicAclsCollectionResponse response = api.magicSiteAclsCreateSiteAcl(accountId, siteId, magicAclsAddSingleRequest);
        // TODO: test validations
    }

    /**
     * Delete Site ACL
     *
     * Remove a specific Site ACL.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void magicSiteAclsDeleteAclTest() throws ApiException {
        String siteId = null;
        String accountId = null;
        String aclIdentifier = null;
        MagicAclDeletedResponse response = api.magicSiteAclsDeleteAcl(siteId, accountId, aclIdentifier);
        // TODO: test validations
    }

    /**
     * List Site ACLs
     *
     * Lists Site ACLs associated with an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void magicSiteAclsListAclsTest() throws ApiException {
        String accountId = null;
        String siteId = null;
        MagicAclsCollectionResponse response = api.magicSiteAclsListAcls(accountId, siteId);
        // TODO: test validations
    }

    /**
     * Update Site ACL
     *
     * Update a specific Site ACL.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void magicSiteAclsUpdateAclTest() throws ApiException {
        String siteId = null;
        String accountId = null;
        String aclIdentifier = null;
        MagicAclUpdateRequest magicAclUpdateRequest = null;
        MagicAclModifiedResponse response = api.magicSiteAclsUpdateAcl(siteId, accountId, aclIdentifier, magicAclUpdateRequest);
        // TODO: test validations
    }

}
