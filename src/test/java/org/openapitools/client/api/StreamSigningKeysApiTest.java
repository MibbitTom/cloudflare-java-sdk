/*
 * Cloudflare API
 * To get started using Cloudflare's products and services via the API, refer to [how to interact with Cloudflare](https://developers.cloudflare.com/fundamentals/basic-tasks/interact-with-cloudflare/), which covers using tools like [Terraform](https://developers.cloudflare.com/terraform/#cloudflare-terraform) and the [official SDKs](https://developers.cloudflare.com/fundamentals/api/reference/sdks/) to maintain your Cloudflare resources.  Using the Cloudflare API requires authentication so that Cloudflare knows who is making requests and what permissions you have. Create an API token to grant access to the API to perform actions.  To create an API token, from the Cloudflare dashboard, go to My Profile > API Tokens and select Create Token. For more information on how to create and troubleshoot API tokens, refer to our [API fundamentals](https://developers.cloudflare.com/fundamentals/api/).  Totally new to Cloudflare? [Start here](https://developers.cloudflare.com/fundamentals/get-started/).
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.StreamApiResponseCommonFailure;
import org.openapitools.client.model.StreamDeletedResponse;
import org.openapitools.client.model.StreamKeyGenerationResponse;
import org.openapitools.client.model.StreamKeyResponseCollection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StreamSigningKeysApi
 */
@Disabled
public class StreamSigningKeysApiTest {

    private final StreamSigningKeysApi api = new StreamSigningKeysApi();

    /**
     * Create signing keys
     *
     * Creates an RSA private key in PEM and JWK formats. Key files are only displayed once after creation. Keys are created, used, and deleted independently of videos, and every key can sign any video.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamSigningKeysCreateSigningKeysTest() throws ApiException {
        String accountId = null;
        StreamKeyGenerationResponse response = api.streamSigningKeysCreateSigningKeys(accountId);
        // TODO: test validations
    }

    /**
     * Delete signing keys
     *
     * Deletes signing keys and revokes all signed URLs generated with the key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamSigningKeysDeleteSigningKeysTest() throws ApiException {
        String identifier = null;
        String accountId = null;
        StreamDeletedResponse response = api.streamSigningKeysDeleteSigningKeys(identifier, accountId);
        // TODO: test validations
    }

    /**
     * List signing keys
     *
     * Lists the video ID and creation date and time when a signing key was created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamSigningKeysListSigningKeysTest() throws ApiException {
        String accountId = null;
        StreamKeyResponseCollection response = api.streamSigningKeysListSigningKeys(accountId);
        // TODO: test validations
    }

}
